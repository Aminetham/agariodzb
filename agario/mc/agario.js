//Legend Mod Injection 
//v.002
(function(console, $hx_exports, $global) {
    $hx_exports.promhx = $hx_exports.promhx || {};
    $hx_exports.lime = $hx_exports.lime || {};
    var $hxClasses = {},
        $estr = function() {
            return js_Boot.__string_rec(this, "")
        };

    function $extend(from, fields) {
        function Inherit() {}
        Inherit.prototype = from;
        var proto = new Inherit();
        for (var name in fields) {
            proto[name] = fields[name]
        }
        if (fields.toString !== Object.prototype.toString) {
            proto.toString = fields.toString
        }
        return proto
    }
    var lime_app_IModule = function() {};
    $hxClasses["lime.app.IModule"] = lime_app_IModule;
    lime_app_IModule.__name__ = ["lime", "app", "IModule"];
    lime_app_IModule.prototype = {
        addRenderer: null,
        addWindow: null,
        registerModule: null,
        removeRenderer: null,
        removeWindow: null,
        setPreloader: null,
        unregisterModule: null,
        __class__: lime_app_IModule
    };
    var lime_app_Module = function() {
        this.onExit = new lime_app__$Event_$Int_$Void();
        this.__renderers = [];
        this.__windows = []
    };
    $hxClasses["lime.app.Module"] = lime_app_Module;
    lime_app_Module.__name__ = ["lime", "app", "Module"];
    lime_app_Module.__interfaces__ = [lime_app_IModule];
    lime_app_Module.prototype = {
        onExit: null,
        __application: null,
        __preloader: null,
        __renderers: null,
        __windows: null,
        addRenderer: function(renderer) {
            renderer.onRender.add((function(f, a1) {
                return function() {
                    f(a1)
                }
            })($bind(this, this.render), renderer));
            renderer.onContextLost.add((function(f1, a11) {
                return function() {
                    f1(a11)
                }
            })($bind(this, this.onRenderContextLost), renderer));
            renderer.onContextRestored.add((function(f2, a12) {
                return function(a2) {
                    f2(a12, a2)
                }
            })($bind(this, this.onRenderContextRestored), renderer));
            this.__renderers.push(renderer)
        },
        addWindow: function(window) {
            window.onActivate.add((function(f, a1) {
                return function() {
                    f(a1)
                }
            })($bind(this, this.onWindowActivate), window));
            window.onClose.add((function(f1, a11) {
                return function() {
                    f1(a11)
                }
            })($bind(this, this.__onWindowClose), window), false, -10000);
            window.onCreate.add((function(f2, a12) {
                return function() {
                    f2(a12)
                }
            })($bind(this, this.onWindowCreate), window));
            window.onDeactivate.add((function(f3, a13) {
                return function() {
                    f3(a13)
                }
            })($bind(this, this.onWindowDeactivate), window));
            window.onDropFile.add((function(f4, a14) {
                return function(a2) {
                    f4(a14, a2)
                }
            })($bind(this, this.onWindowDropFile), window));
            window.onEnter.add((function(f5, a15) {
                return function() {
                    f5(a15)
                }
            })($bind(this, this.onWindowEnter), window));
            window.onFocusIn.add((function(f6, a16) {
                return function() {
                    f6(a16)
                }
            })($bind(this, this.onWindowFocusIn), window));
            window.onFocusOut.add((function(f7, a17) {
                return function() {
                    f7(a17)
                }
            })($bind(this, this.onWindowFocusOut), window));
            window.onFullscreen.add((function(f8, a18) {
                return function() {
                    f8(a18)
                }
            })($bind(this, this.onWindowFullscreen), window));
            window.onKeyDown.add((function(f9, a19) {
                return function(a21, a3) {
                    f9(a19, a21, a3)
                }
            })($bind(this, this.onKeyDown), window));
            window.onKeyUp.add((function(f10, a110) {
                return function(a22, a31) {
                    f10(a110, a22, a31)
                }
            })($bind(this, this.onKeyUp), window));
            window.onLeave.add((function(f11, a111) {
                return function() {
                    f11(a111)
                }
            })($bind(this, this.onWindowLeave), window));
            window.onMinimize.add((function(f12, a112) {
                return function() {
                    f12(a112)
                }
            })($bind(this, this.onWindowMinimize), window));
            window.onMouseDown.add((function(f13, a113) {
                return function(x, y, a23) {
                    f13(a113, x, y, a23)
                }
            })($bind(this, this.onMouseDown), window));
            window.onMouseMove.add((function(f14, a114) {
                return function(x1, y1) {
                    f14(a114, x1, y1)
                }
            })($bind(this, this.onMouseMove), window));
            window.onMouseMoveRelative.add((function(f15, a115) {
                return function(x2, y2) {
                    f15(a115, x2, y2)
                }
            })($bind(this, this.onMouseMoveRelative), window));
            window.onMouseUp.add((function(f16, a116) {
                return function(x3, y3, a24) {
                    f16(a116, x3, y3, a24)
                }
            })($bind(this, this.onMouseUp), window));
            window.onMouseWheel.add((function(f17, a117) {
                return function(a25, a32) {
                    f17(a117, a25, a32)
                }
            })($bind(this, this.onMouseWheel), window));
            window.onMove.add((function(f18, a118) {
                return function(x4, y4) {
                    f18(a118, x4, y4)
                }
            })($bind(this, this.onWindowMove), window));
            window.onResize.add((function(f19, a119) {
                return function(a26, a33) {
                    f19(a119, a26, a33)
                }
            })($bind(this, this.onWindowResize), window));
            window.onRestore.add((function(f20, a120) {
                return function() {
                    f20(a120)
                }
            })($bind(this, this.onWindowRestore), window));
            window.onTextEdit.add((function(f21, a121) {
                return function(a27, a34, a4) {
                    f21(a121, a27, a34, a4)
                }
            })($bind(this, this.onTextEdit), window));
            window.onTextInput.add((function(f22, a122) {
                return function(a28) {
                    f22(a122, a28)
                }
            })($bind(this, this.onTextInput), window));
            if (window.id > -1) {
                this.onWindowCreate(window)
            }
            this.__windows.push(window)
        },
        registerModule: function(application) {
            this.__application = application;
            application.onExit.add($bind(this, this.onModuleExit), false, 0);
            application.onUpdate.add($bind(this, this.update));
            var $it0 = lime_ui_Gamepad.devices.iterator();
            while ($it0.hasNext()) {
                var gamepad = $it0.next();
                this.__onGamepadConnect(gamepad)
            }
            lime_ui_Gamepad.onConnect.add($bind(this, this.__onGamepadConnect));
            var $it1 = lime_ui_Joystick.devices.iterator();
            while ($it1.hasNext()) {
                var joystick = $it1.next();
                this.__onJoystickConnect(joystick)
            }
            lime_ui_Joystick.onConnect.add($bind(this, this.__onJoystickConnect));
            lime_ui_Touch.onStart.add($bind(this, this.onTouchStart));
            lime_ui_Touch.onMove.add($bind(this, this.onTouchMove));
            lime_ui_Touch.onEnd.add($bind(this, this.onTouchEnd))
        },
        removeRenderer: function(renderer) {
            if (renderer != null && HxOverrides.indexOf(this.__renderers, renderer, 0) > -1) {
                HxOverrides.remove(this.__renderers, renderer)
            }
        },
        removeWindow: function(window) {
            if (window != null && HxOverrides.indexOf(this.__windows, window, 0) > -1) {
                HxOverrides.remove(this.__windows, window)
            }
        },
        setPreloader: function(preloader) {
            if (this.__preloader != null) {
                this.__preloader.onProgress.remove($bind(this, this.onPreloadProgress));
                this.__preloader.onComplete.remove($bind(this, this.onPreloadComplete))
            }
            this.__preloader = preloader;
            if (preloader == null || preloader.complete) {
                this.onPreloadComplete()
            } else {
                preloader.onProgress.add($bind(this, this.onPreloadProgress));
                preloader.onComplete.add($bind(this, this.onPreloadComplete))
            }
        },
        unregisterModule: function(application) {
            this.__application.onExit.remove($bind(this, this.onModuleExit));
            this.__application.onUpdate.remove($bind(this, this.update));
            lime_ui_Gamepad.onConnect.remove($bind(this, this.__onGamepadConnect));
            lime_ui_Joystick.onConnect.remove($bind(this, this.__onJoystickConnect));
            lime_ui_Touch.onStart.remove($bind(this, this.onTouchStart));
            lime_ui_Touch.onMove.remove($bind(this, this.onTouchMove));
            lime_ui_Touch.onEnd.remove($bind(this, this.onTouchEnd));
            this.onModuleExit(0)
        },
        onGamepadAxisMove: function(gamepad, axis, value) {},
        onGamepadButtonDown: function(gamepad, button) {},
        onGamepadButtonUp: function(gamepad, button) {},
        onGamepadConnect: function(gamepad) {},
        onGamepadDisconnect: function(gamepad) {},
        onJoystickAxisMove: function(joystick, axis, value) {},
        onJoystickButtonDown: function(joystick, button) {},
        onJoystickButtonUp: function(joystick, button) {},
        onJoystickConnect: function(joystick) {},
        onJoystickDisconnect: function(joystick) {},
        onJoystickHatMove: function(joystick, hat, position) {},
        onJoystickTrackballMove: function(joystick, trackball, x, y) {},
        onKeyDown: function(window, keyCode, modifier) {},
        onKeyUp: function(window, keyCode, modifier) {},
        onModuleExit: function(code) {},
        onMouseDown: function(window, x, y, button) {},
        onMouseMove: function(window, x, y) {},
        onMouseMoveRelative: function(window, x, y) {},
        onMouseUp: function(window, x, y, button) {},
        onMouseWheel: function(window, deltaX, deltaY) {},
        onPreloadComplete: function() {},
        onPreloadProgress: function(loaded, total) {},
        onRenderContextLost: function(renderer) {},
        onRenderContextRestored: function(renderer, context) {},
        onTextEdit: function(window, text, start, length) {},
        onTextInput: function(window, text) {},
        onTouchEnd: function(touch) {},
        onTouchMove: function(touch) {},
        onTouchStart: function(touch) {},
        onWindowActivate: function(window) {},
        onWindowClose: function(window) {},
        onWindowCreate: function(window) {},
        onWindowDeactivate: function(window) {},
        onWindowDropFile: function(window, file) {},
        onWindowEnter: function(window) {},
        onWindowFocusIn: function(window) {},
        onWindowFocusOut: function(window) {},
        onWindowFullscreen: function(window) {},
        onWindowLeave: function(window) {},
        onWindowMove: function(window, x, y) {},
        onWindowMinimize: function(window) {},
        onWindowResize: function(window, width, height) {},
        onWindowRestore: function(window) {},
        render: function(renderer) {},
        update: function(deltaTime) {},
        __onGamepadConnect: function(gamepad) {
            this.onGamepadConnect(gamepad);
            gamepad.onAxisMove.add((function(f, a1) {
                return function(a2, a3) {
                    f(a1, a2, a3)
                }
            })($bind(this, this.onGamepadAxisMove), gamepad));
            gamepad.onButtonDown.add((function(f1, a11) {
                return function(a21) {
                    f1(a11, a21)
                }
            })($bind(this, this.onGamepadButtonDown), gamepad));
            gamepad.onButtonUp.add((function(f2, a12) {
                return function(a22) {
                    f2(a12, a22)
                }
            })($bind(this, this.onGamepadButtonUp), gamepad));
            gamepad.onDisconnect.add((function(f3, a13) {
                return function() {
                    f3(a13)
                }
            })($bind(this, this.onGamepadDisconnect), gamepad))
        },
        __onJoystickConnect: function(joystick) {
            this.onJoystickConnect(joystick);
            joystick.onAxisMove.add((function(f, a1) {
                return function(a2, a3) {
                    f(a1, a2, a3)
                }
            })($bind(this, this.onJoystickAxisMove), joystick));
            joystick.onButtonDown.add((function(f1, a11) {
                return function(a21) {
                    f1(a11, a21)
                }
            })($bind(this, this.onJoystickButtonDown), joystick));
            joystick.onButtonUp.add((function(f2, a12) {
                return function(a22) {
                    f2(a12, a22)
                }
            })($bind(this, this.onJoystickButtonUp), joystick));
            joystick.onDisconnect.add((function(f3, a13) {
                return function() {
                    f3(a13)
                }
            })($bind(this, this.onJoystickDisconnect), joystick));
            joystick.onHatMove.add((function(f4, a14) {
                return function(a23, a31) {
                    f4(a14, a23, a31)
                }
            })($bind(this, this.onJoystickHatMove), joystick));
            joystick.onTrackballMove.add((function(f5, a15) {
                return function(a24, x, y) {
                    f5(a15, a24, x, y)
                }
            })($bind(this, this.onJoystickTrackballMove), joystick))
        },
        __onWindowClose: function(window) {
            this.onWindowClose(window);
            HxOverrides.remove(this.__windows, window)
        },
        __class__: lime_app_Module
    };
    var lime__$backend_html5_HTML5Application = function(parent) {
        this.gameDeviceCache = new haxe_ds_IntMap();
        this.parent = parent;
        this.currentUpdate = 0;
        this.lastUpdate = 0;
        this.nextUpdate = 0;
        this.framePeriod = -1;
        lime_media_AudioManager.init()
    };
    $hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
    lime__$backend_html5_HTML5Application.__name__ = ["lime", "_backend", "html5", "HTML5Application"];
    lime__$backend_html5_HTML5Application.prototype = {
        gameDeviceCache: null,
        currentUpdate: null,
        deltaTime: null,
        framePeriod: null,
        lastUpdate: null,
        nextUpdate: null,
        parent: null,
        convertKeyCode: function(keyCode) {
            if (keyCode >= 65 && keyCode <= 90) {
                return keyCode + 32
            }
            switch (keyCode) {
                case 16:
                    return 1073742049;
                case 17:
                    return 1073742048;
                case 18:
                    return 1073742050;
                case 20:
                    return 1073741881;
                case 33:
                    return 1073741899;
                case 34:
                    return 1073741902;
                case 35:
                    return 1073741901;
                case 36:
                    return 1073741898;
                case 37:
                    return 1073741904;
                case 38:
                    return 1073741906;
                case 39:
                    return 1073741903;
                case 40:
                    return 1073741905;
                case 45:
                    return 1073741897;
                case 46:
                    return 127;
                case 96:
                    return 1073741922;
                case 97:
                    return 1073741913;
                case 98:
                    return 1073741914;
                case 99:
                    return 1073741915;
                case 100:
                    return 1073741916;
                case 101:
                    return 1073741917;
                case 102:
                    return 1073741918;
                case 103:
                    return 1073741919;
                case 104:
                    return 1073741920;
                case 105:
                    return 1073741921;
                case 106:
                    return 1073741909;
                case 107:
                    return 1073741911;
                case 109:
                    return 1073741910;
                case 110:
                    return 1073741923;
                case 111:
                    return 1073741908;
                case 112:
                    return 1073741882;
                case 113:
                    return 1073741883;
                case 114:
                    return 1073741884;
                case 115:
                    return 1073741885;
                case 116:
                    return 1073741886;
                case 117:
                    return 1073741887;
                case 118:
                    return 1073741888;
                case 119:
                    return 1073741889;
                case 120:
                    return 1073741890;
                case 121:
                    return 1073741891;
                case 122:
                    return 1073741892;
                case 123:
                    return 1073741893;
                case 124:
                    return 1073741928;
                case 125:
                    return 1073741929;
                case 126:
                    return 1073741930;
                case 144:
                    return 1073741907;
                case 186:
                    return 59;
                case 187:
                    return 61;
                case 188:
                    return 44;
                case 189:
                    return 45;
                case 190:
                    return 46;
                case 191:
                    return 47;
                case 192:
                    return 96;
                case 219:
                    return 91;
                case 220:
                    return 92;
                case 221:
                    return 93;
                case 222:
                    return 39
            }
            return keyCode
        },
        create: function(config) {},
        exec: function() {
            window.addEventListener("keydown", $bind(this, this.handleKeyEvent), false);
            window.addEventListener("keyup", $bind(this, this.handleKeyEvent), false);
            window.addEventListener("focus", $bind(this, this.handleWindowEvent), false);
            window.addEventListener("blur", $bind(this, this.handleWindowEvent), false);
            window.addEventListener("resize", $bind(this, this.handleWindowEvent), false);
            window.addEventListener("beforeunload", $bind(this, this.handleWindowEvent), false);
            if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
                CanvasRenderingContext2D.prototype.isPointInStroke = function(path, x, y) {
                    return false
                }
            }
            if (!CanvasRenderingContext2D.prototype.isPointInPath) {
                CanvasRenderingContext2D.prototype.isPointInPath = function(path, x, y) {
                    return false
                }
            }
            var lastTime = 0;
            var vendors = ["ms", "moz", "webkit", "o"];
            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
                window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"]
            }
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = function(callback, element) {
                    var currTime = new Date().getTime();
                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                    var id = window.setTimeout(function() {
                        callback(currTime + timeToCall)
                    }, timeToCall);
                    lastTime = currTime + timeToCall;
                    return id
                }
            }
            if (!window.cancelAnimationFrame) {
                window.cancelAnimationFrame = function(id) {
                    clearTimeout(id)
                }
            }
            window.requestAnimFrame = window.requestAnimationFrame;
            this.lastUpdate = new Date().getTime();
            this.handleApplicationEvent();
            return 0
        },
        exit: function() {},
        getFrameRate: function() {
            if (this.framePeriod < 0) {
                return 60
            } else {
                if (this.framePeriod == 1000) {
                    return 0
                } else {
                    return 1000 / this.framePeriod
                }
            }
        },
        handleApplicationEvent: function(__) {
            if (this.parent.__windows[0] != null) {
                this.parent.__windows[0].backend.updateSize()
            }
            this.updateGameDevices();
            this.currentUpdate = new Date().getTime();
            if (this.currentUpdate >= this.nextUpdate) {
                this.deltaTime = this.currentUpdate - this.lastUpdate;
                this.parent.onUpdate.dispatch(this.deltaTime | 0);
                if (this.parent.__renderers[0] != null && this.parent.__renderers[0].context != null) {
                    this.parent.__renderers[0].render();
                    this.parent.__renderers[0].onRender.dispatch();
                    if (!this.parent.__renderers[0].onRender.canceled) {
                        this.parent.__renderers[0].flip()
                    }
                }
                if (this.framePeriod < 0) {
                    this.nextUpdate = this.currentUpdate;
                    this.nextUpdate = this.currentUpdate
                } else {
                    this.nextUpdate = this.currentUpdate + this.framePeriod
                }
                this.lastUpdate = this.currentUpdate
            }
            window.requestAnimationFrame($bind(this, this.handleApplicationEvent))
        },
        handleKeyEvent: function(event) {
            if (this.parent.__windows[0] != null) {
                var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
                var modifier;
                modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
                if (event.type == "keydown") {
                    this.parent.__windows[0].onKeyDown.dispatch(keyCode, modifier);
                    if (this.parent.__windows[0].onKeyDown.canceled) {
                        event.preventDefault()
                    }
                } else {
                    this.parent.__windows[0].onKeyUp.dispatch(keyCode, modifier);
                    if (this.parent.__windows[0].onKeyUp.canceled) {
                        event.preventDefault()
                    }
                }
            }
        },
        handleWindowEvent: function(event) {
            if (this.parent.__windows[0] != null) {
                var _g = event.type;
                switch (_g) {
                    case "focus":
                        this.parent.__windows[0].onFocusIn.dispatch();
                        this.parent.__windows[0].onActivate.dispatch();
                        break;
                    case "blur":
                        this.parent.__windows[0].onFocusOut.dispatch();
                        this.parent.__windows[0].onDeactivate.dispatch();
                        break;
                    case "resize":
                        this.parent.__windows[0].backend.handleResizeEvent(event);
                        break;
                    case "beforeunload":
                        this.parent.__windows[0].onClose.dispatch();
                        break
                }
            }
        },
        setFrameRate: function(value) {
            if (value >= 60) {
                this.framePeriod = -1
            } else {
                if (value > 0) {
                    this.framePeriod = 1000 / value
                } else {
                    this.framePeriod = 1000
                }
            }
            return value
        },
        updateGameDevices: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            if (devices == null) {
                return
            }
            var id;
            var gamepad;
            var joystick;
            var data;
            var cache;
            var _g1 = 0;
            var _g = devices.length;
            while (_g1 < _g) {
                var i = _g1++;
                id = i;
                data = devices[id];
                if (data == null) {
                    continue
                }
                if (!this.gameDeviceCache.h.hasOwnProperty(id)) {
                    cache = new lime__$backend_html5_GameDeviceData();
                    cache.id = id;
                    cache.connected = data.connected;
                    var _g3 = 0;
                    var _g2 = data.buttons.length;
                    while (_g3 < _g2) {
                        var i1 = _g3++;
                        cache.buttons.push(data.buttons[i1].value)
                    }
                    var _g31 = 0;
                    var _g21 = data.axes.length;
                    while (_g31 < _g21) {
                        var i2 = _g31++;
                        cache.axes.push(data.axes[i2])
                    }
                    if (data.mapping == "standard") {
                        cache.isGamepad = true
                    }
                    this.gameDeviceCache.h[id] = cache;
                    if (data.connected) {
                        lime_ui_Joystick.__connect(id);
                        if (cache.isGamepad) {
                            lime_ui_Gamepad.__connect(id)
                        }
                    }
                }
                cache = this.gameDeviceCache.h[id];
                joystick = lime_ui_Joystick.devices.h[id];
                gamepad = lime_ui_Gamepad.devices.h[id];
                if (data.connected) {
                    var button;
                    var value;
                    var _g32 = 0;
                    var _g22 = data.buttons.length;
                    while (_g32 < _g22) {
                        var i3 = _g32++;
                        value = data.buttons[i3].value;
                        if (value != cache.buttons[i3]) {
                            if (i3 == 6) {
                                joystick.onAxisMove.dispatch(data.axes.length, value);
                                if (gamepad != null) {
                                    gamepad.onAxisMove.dispatch(4, value)
                                }
                            } else {
                                if (i3 == 7) {
                                    joystick.onAxisMove.dispatch(data.axes.length + 1, value);
                                    if (gamepad != null) {
                                        gamepad.onAxisMove.dispatch(5, value)
                                    }
                                } else {
                                    if (value > 0) {
                                        joystick.onButtonDown.dispatch(i3)
                                    } else {
                                        joystick.onButtonUp.dispatch(i3)
                                    }
                                    if (gamepad != null) {
                                        switch (i3) {
                                            case 0:
                                                button = 0;
                                                break;
                                            case 1:
                                                button = 1;
                                                break;
                                            case 2:
                                                button = 2;
                                                break;
                                            case 3:
                                                button = 3;
                                                break;
                                            case 4:
                                                button = 9;
                                                break;
                                            case 5:
                                                button = 10;
                                                break;
                                            case 8:
                                                button = 4;
                                                break;
                                            case 9:
                                                button = 6;
                                                break;
                                            case 10:
                                                button = 7;
                                                break;
                                            case 11:
                                                button = 8;
                                                break;
                                            case 12:
                                                button = 11;
                                                break;
                                            case 13:
                                                button = 12;
                                                break;
                                            case 14:
                                                button = 13;
                                                break;
                                            case 15:
                                                button = 14;
                                                break;
                                            case 16:
                                                button = 5;
                                                break;
                                            default:
                                                continue
                                        }
                                        if (value > 0) {
                                            gamepad.onButtonDown.dispatch(button)
                                        } else {
                                            gamepad.onButtonUp.dispatch(button)
                                        }
                                    }
                                }
                            }
                            cache.buttons[i3] = value
                        }
                    }
                    var _g33 = 0;
                    var _g23 = data.axes.length;
                    while (_g33 < _g23) {
                        var i4 = _g33++;
                        if (data.axes[i4] != cache.axes[i4]) {
                            joystick.onAxisMove.dispatch(i4, data.axes[i4]);
                            if (gamepad != null) {
                                gamepad.onAxisMove.dispatch(i4, data.axes[i4])
                            }
                            cache.axes[i4] = data.axes[i4]
                        }
                    }
                } else {
                    if (cache.connected) {
                        cache.connected = false;
                        lime_ui_Joystick.__disconnect(id);
                        lime_ui_Gamepad.__disconnect(id)
                    }
                }
            }
        },
        __class__: lime__$backend_html5_HTML5Application
    };
    var lime_app_Application = function() {
        this.onUpdate = new lime_app__$Event_$Int_$Void();
        lime_app_Module.call(this);
        if (lime_app_Application.current == null) {
            lime_app_Application.current = this
        }
        this.modules = [];
        this.windowByID = new haxe_ds_IntMap();
        this.backend = new lime__$backend_html5_HTML5Application(this);
        this.registerModule(this)
    };
    $hxClasses["lime.app.Application"] = lime_app_Application;
    lime_app_Application.__name__ = ["lime", "app", "Application"];
    lime_app_Application.__super__ = lime_app_Module;
    lime_app_Application.prototype = $extend(lime_app_Module.prototype, {
        config: null,
        modules: null,
        preloader: null,
        onUpdate: null,
        renderer: null,
        renderers: null,
        window: null,
        windows: null,
        backend: null,
        windowByID: null,
        addModule: function(module) {
            module.registerModule(this);
            this.modules.push(module);
            if (this.__renderers.length > 0) {
                var _g = 0;
                var _g1 = this.__renderers;
                while (_g < _g1.length) {
                    var renderer = _g1[_g];
                    ++_g;
                    module.addRenderer(renderer)
                }
            }
            if (this.__windows.length > 0) {
                var _g2 = 0;
                var _g11 = this.__windows;
                while (_g2 < _g11.length) {
                    var $window = _g11[_g2];
                    ++_g2;
                    module.addWindow($window)
                }
            }
            module.setPreloader(this.__preloader)
        },
        addRenderer: function(renderer) {
            lime_app_Module.prototype.addRenderer.call(this, renderer);
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g];
                ++_g;
                module.addRenderer(renderer)
            }
        },
        create: function(config) {
            this.config = config;
            this.backend.create(config);
            if (config != null) {
                if (Object.prototype.hasOwnProperty.call(config, "fps")) {
                    this.backend.setFrameRate(config.fps)
                }
                if (Object.prototype.hasOwnProperty.call(config, "windows")) {
                    var _g = 0;
                    var _g1 = config.windows;
                    while (_g < _g1.length) {
                        var windowConfig = _g1[_g];
                        ++_g;
                        var $window = new lime_ui_Window(windowConfig);
                        this.createWindow($window);
                        break
                    }
                }
                if (this.__preloader == null || this.__preloader.complete) {
                    this.setPreloader(this.__preloader);
                    var _g2 = 0;
                    var _g11 = this.modules;
                    while (_g2 < _g11.length) {
                        var module = _g11[_g2];
                        ++_g2;
                        this.setPreloader(this.__preloader)
                    }
                }
            }
        },
        createWindow: function(window) {
            lime_app_Module.prototype.addWindow.call(this, window);
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g];
                ++_g;
                module.addWindow(window)
            }
            if (window.renderer == null) {
                var renderer = new lime_graphics_Renderer(window);
                this.addRenderer(renderer)
            }
            window.create(this);
            this.windowByID.h[window.id] = window;
            window.onCreate.dispatch()
        },
        exec: function() {
            lime_app_Application.current = this;
            return this.backend.exec()
        },
        onModuleExit: function(code) {
            this.backend.exit()
        },
        onWindowClose: function(window) {
            this.removeWindow(window)
        },
        removeModule: function(module) {
            if (module != null) {
                module.unregisterModule(this);
                HxOverrides.remove(this.modules, module)
            }
        },
        removeWindow: function(window) {
            if (window != null && this.windowByID.h.hasOwnProperty(window.id)) {
                HxOverrides.remove(this.__windows, window);
                this.windowByID.remove(window.id);
                window.close();
                if (window.renderer != null) {
                    this.removeRenderer(window.renderer)
                }
                if (this.__windows[0] == window) {
                    this.window = null
                }
                if (this.__windows.length == 0) {
                    lime_system_System.exit(0)
                }
            }
        },
        setPreloader: function(preloader) {
            lime_app_Module.prototype.setPreloader.call(this, preloader);
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g];
                ++_g;
                module.setPreloader(preloader)
            }
        },
        get_frameRate: function() {
            return this.backend.getFrameRate()
        },
        set_frameRate: function(value) {
            return this.backend.setFrameRate(value)
        },
        get_preloader: function() {
            return this.__preloader
        },
        get_renderer: function() {
            return this.__renderers[0]
        },
        get_renderers: function() {
            return this.__renderers
        },
        get_window: function() {
            return this.__windows[0]
        },
        get_windows: function() {
            return this.__windows
        },
        __class__: lime_app_Application,
        __properties__: {
            get_windows: "get_windows",
            get_window: "get_window",
            get_renderers: "get_renderers",
            get_renderer: "get_renderer",
            get_preloader: "get_preloader",
            set_frameRate: "set_frameRate",
            get_frameRate: "get_frameRate"
        }
    });
    var ApplicationMain = function() {};
    $hxClasses.ApplicationMain = ApplicationMain;
    ApplicationMain.__name__ = ["ApplicationMain"];
    ApplicationMain.main = function() {
        var projectName = "agario";
        var config = {
            build: "6223",
            company: "Miniclip",
            file: "agario",
            fps: 60,
            name: "Agario",
            orientation: "",
            packageName: "agario",
            version: "1.1.2",
            windows: [{
                allowHighDPI: false,
                alwaysOnTop: false,
                antialiasing: 0,
                background: 0,
                borderless: false,
                depthBuffer: false,
                display: 0,
                fullscreen: false,
                hardware: true,
                height: 1024,
                hidden: null,
                maximized: null,
                minimized: null,
                parameters: {},
                resizable: true,
                stencilBuffer: true,
                title: "Agario",
                vsync: false,
                width: 1280,
                x: null,
                y: null
            }]
        };
        lime_system_System.__registerEntryPoint(projectName, ApplicationMain.create, config)
    };
    ApplicationMain.create = function(config) {
        var app = new openfl_display_Application();
        app.create(config);
        ManifestResources.init(config);
        var preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
        app.setPreloader(preloader);
        preloader.create(config);
        preloader.onComplete.add((function(f, a1) {
            return function() {
                f(a1)
            }
        })(ApplicationMain.start, app.__windows[0].stage));
        var _g = 0;
        var _g1 = ManifestResources.preloadLibraries;
        while (_g < _g1.length) {
            var library = _g1[_g];
            ++_g;
            preloader.addLibrary(library)
        }
        var _g2 = 0;
        var _g11 = ManifestResources.preloadLibraryNames;
        while (_g2 < _g11.length) {
            var name = _g11[_g2];
            ++_g2;
            preloader.addLibraryName(name)
        }
        preloader.load();
        var result = app.exec()
    };
    ApplicationMain.start = function(stage) {
        try {
            var current = stage.getChildAt(0);
            if (current == null || !js_Boot.__instanceof(current, openfl_display_DisplayObjectContainer)) {
                current = new openfl_display_MovieClip();
                stage.addChild(current)
            }
            new DocumentClass(current);
            stage.dispatchEvent(new openfl_events_Event("resize", false, false));
            if (stage.window.__fullscreen) {
                stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen", false, false, true, true))
            }
        } catch (e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) {
                e = e.val
            }
            stage.__handleError(e)
        }
    };
    var openfl_events_IEventDispatcher = function() {};
    $hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
    openfl_events_IEventDispatcher.__name__ = ["openfl", "events", "IEventDispatcher"];
    openfl_events_IEventDispatcher.prototype = {
        addEventListener: null,
        dispatchEvent: null,
        hasEventListener: null,
        removeEventListener: null,
        willTrigger: null,
        __class__: openfl_events_IEventDispatcher
    };
    var openfl_events_EventDispatcher = function(target) {
        if (target != null) {
            this.__targetDispatcher = target
        }
    };
    $hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
    openfl_events_EventDispatcher.__name__ = ["openfl", "events", "EventDispatcher"];
    openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
    openfl_events_EventDispatcher.__sortByPriority = function(l1, l2) {
        if (l1.priority == l2.priority) {
            return 0
        } else {
            if (l1.priority > l2.priority) {
                return -1
            } else {
                return 1
            }
        }
    };
    openfl_events_EventDispatcher.prototype = {
        __eventMap: null,
        __iterators: null,
        __targetDispatcher: null,
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) {
                useWeakReference = false
            }
            if (priority == null) {
                priority = 0
            }
            if (useCapture == null) {
                useCapture = false
            }
            if (listener == null) {
                return
            }
            if (this.__eventMap == null) {
                this.__eventMap = new haxe_ds_StringMap();
                this.__iterators = new haxe_ds_StringMap()
            }
            if (!this.__eventMap.exists(type)) {
                var list = [];
                list.push(new openfl_events__$EventDispatcher_Listener(listener, useCapture, priority));
                var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
                this.__eventMap.set(type, list);
                this.__iterators.set(type, [iterator])
            } else {
                var list1 = this.__eventMap.get(type);
                var _g1 = 0;
                var _g = list1.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    if (list1[i].match(listener, useCapture)) {
                        return
                    }
                }
                var iterators = this.__iterators.get(type);
                var _g2 = 0;
                while (_g2 < iterators.length) {
                    var iterator1 = iterators[_g2];
                    ++_g2;
                    if (iterator1.active) {
                        iterator1.copy()
                    }
                }
                list1.push(new openfl_events__$EventDispatcher_Listener(listener, useCapture, priority));
                list1.sort(openfl_events_EventDispatcher.__sortByPriority)
            }
        },
        dispatchEvent: function(event) {
            if (this.__targetDispatcher != null) {
                event.target = this.__targetDispatcher
            } else {
                event.target = this
            }
            return this.__dispatchEvent(event)
        },
        hasEventListener: function(type) {
            if (this.__eventMap == null) {
                return false
            }
            return this.__eventMap.exists(type)
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) {
                useCapture = false
            }
            if (this.__eventMap == null || listener == null) {
                return
            }
            var list = this.__eventMap.get(type);
            if (list == null) {
                return
            }
            var iterators = this.__iterators.get(type);
            var _g1 = 0;
            var _g = list.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (list[i].match(listener, useCapture)) {
                    var _g2 = 0;
                    while (_g2 < iterators.length) {
                        var iterator = iterators[_g2];
                        ++_g2;
                        iterator.remove(list[i], i)
                    }
                    list.splice(i, 1);
                    break
                }
            }
            if (list.length == 0) {
                this.__eventMap.remove(type);
                this.__iterators.remove(type)
            }
            if (!this.__eventMap.iterator().hasNext()) {
                this.__eventMap = null;
                this.__iterators = null
            }
        },
        toString: function() {
            var full = Type.getClassName(js_Boot.getClass(this));
            var $short = full.split(".").pop();
            return "[object " + $short + "]"
        },
        willTrigger: function(type) {
            return this.hasEventListener(type)
        },
        __dispatchEvent: function(event) {
            if (this.__eventMap == null || event == null) {
                return true
            }
            var type = event.type;
            var list = this.__eventMap.get(type);
            if (list == null) {
                return true
            }
            if (event.target == null) {
                if (this.__targetDispatcher != null) {
                    event.target = this.__targetDispatcher
                } else {
                    event.target = this
                }
            }
            event.currentTarget = this;
            var capture = event.eventPhase == 1;
            var index = 0;
            var iterators = this.__iterators.get(type);
            var iterator = iterators[0];
            if (iterator.active) {
                iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
                iterators.push(iterator)
            }
            iterator.reset(list);
            while (iterator.hasNext()) {
                var listener = iterator.next();
                if (listener == null) {
                    continue
                }
                if (listener.useCapture == capture) {
                    listener.callback(event);
                    if (event.__isCanceledNow) {
                        break
                    }
                }
            }
            if (iterator != iterators[0]) {
                HxOverrides.remove(iterators, iterator)
            }
            return true
        },
        __class__: openfl_events_EventDispatcher
    };
    var openfl_display_IBitmapDrawable = function() {};
    $hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
    openfl_display_IBitmapDrawable.__name__ = ["openfl", "display", "IBitmapDrawable"];
    openfl_display_IBitmapDrawable.prototype = {
        __blendMode: null,
        __transform: null,
        __worldTransform: null,
        __worldColorTransform: null,
        __getBounds: null,
        __renderCairo: null,
        __renderCairoMask: null,
        __renderCanvas: null,
        __renderCanvasMask: null,
        __renderGL: null,
        __updateChildren: null,
        __updateTransforms: null,
        __updateMask: null,
        __class__: openfl_display_IBitmapDrawable
    };
    var openfl_display_DisplayObject = function() {
        openfl_events_EventDispatcher.call(this);
        this.__alpha = 1;
        this.__blendMode = 10;
        this.__cacheAsBitmap = false;
        this.__transform = new openfl_geom_Matrix();
        this.__visible = true;
        this.__rotation = 0;
        this.__rotationSine = 0;
        this.__rotationCosine = 1;
        this.__scaleX = 1;
        this.__scaleY = 1;
        this.__worldAlpha = 1;
        this.__worldBlendMode = 10;
        this.__worldTransform = new openfl_geom_Matrix();
        this.__worldColorTransform = new openfl_geom_ColorTransform();
        this.__renderTransform = new openfl_geom_Matrix();
        this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount)
    };
    $hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
    openfl_display_DisplayObject.__name__ = ["openfl", "display", "DisplayObject"];
    openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
    openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
    openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        opaqueBackground: null,
        parent: null,
        scale9Grid: null,
        stage: null,
        __alpha: null,
        __blendMode: null,
        __cacheAsBitmap: null,
        __cacheAsBitmapMatrix: null,
        __cacheBitmap: null,
        __cacheBitmapData: null,
        __cacheBitmapRender: null,
        __cairo: null,
        __children: null,
        __filters: null,
        __graphics: null,
        __interactive: null,
        __isMask: null,
        __loaderInfo: null,
        __mask: null,
        __name: null,
        __objectTransform: null,
        __renderable: null,
        __renderDirty: null,
        __renderParent: null,
        __renderTransform: null,
        __renderTransformCache: null,
        __renderTransformChanged: null,
        __rotation: null,
        __rotationCosine: null,
        __rotationSine: null,
        __scaleX: null,
        __scaleY: null,
        __scrollRect: null,
        __transform: null,
        __transformDirty: null,
        __visible: null,
        __worldAlpha: null,
        __worldAlphaChanged: null,
        __worldBlendMode: null,
        __worldClip: null,
        __worldClipChanged: null,
        __worldColorTransform: null,
        __worldTransform: null,
        __worldVisible: null,
        __worldVisibleChanged: null,
        __worldZ: null,
        __canvas: null,
        __context: null,
        __style: null,
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) {
                useWeakReference = false
            }
            if (priority == null) {
                priority = 0
            }
            if (useCapture == null) {
                useCapture = false
            }
            switch (type) {
                case "activate":
                case "deactivate":
                case "enterFrame":
                case "exitFrame":
                case "frameConstructed":
                case "render":
                    if (!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
                        openfl_display_DisplayObject.__broadcastEvents.set(type, [])
                    }
                    var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
                    if (HxOverrides.indexOf(dispatchers, this, 0) == -1) {
                        dispatchers.push(this)
                    }
                    break;
                default:
            }
            openfl_events_EventDispatcher.prototype.addEventListener.call(this, type, listener, useCapture, priority, useWeakReference)
        },
        dispatchEvent: function(event) {
            if (js_Boot.__instanceof(event, openfl_events_MouseEvent)) {
                var mouseEvent = event;
                mouseEvent.stageX = this.__getRenderTransform().__transformX(mouseEvent.localX, mouseEvent.localY);
                mouseEvent.stageY = this.__getRenderTransform().__transformY(mouseEvent.localX, mouseEvent.localY)
            } else {
                if (js_Boot.__instanceof(event, openfl_events_TouchEvent)) {
                    var touchEvent = event;
                    touchEvent.stageX = this.__getRenderTransform().__transformX(touchEvent.localX, touchEvent.localY);
                    touchEvent.stageY = this.__getRenderTransform().__transformY(touchEvent.localX, touchEvent.localY)
                }
            }
            return openfl_events_EventDispatcher.prototype.dispatchEvent.call(this, event)
        },
        getBounds: function(targetCoordinateSpace) {
            var matrix;
            var usingTemp = false;
            if (targetCoordinateSpace != null) {
                matrix = this.__getWorldTransform().clone();
                matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert())
            } else {
                usingTemp = true;
                matrix = openfl_geom_Matrix.__pool.get();
                matrix.identity()
            }
            var bounds = new openfl_geom_Rectangle();
            this.__getBounds(bounds, matrix);
            if (usingTemp) {
                openfl_geom_Matrix.__pool.release(matrix)
            }
            return bounds
        },
        getRect: function(targetCoordinateSpace) {
            return this.getBounds(targetCoordinateSpace)
        },
        globalToLocal: function(pos) {
            pos = pos.clone();
            this.__getRenderTransform().__transformInversePoint(pos);
            return pos
        },
        hitTestObject: function(obj) {
            if (obj != null && obj.parent != null && this.parent != null) {
                var currentBounds = this.getBounds(this);
                var targetBounds = obj.getBounds(this);
                return currentBounds.intersects(targetBounds)
            }
            return false
        },
        hitTestPoint: function(x, y, shapeFlag) {
            if (shapeFlag == null) {
                shapeFlag = false
            }
            if (this.stage != null) {
                return this.__hitTest(x, y, shapeFlag, null, true, this)
            } else {
                return false
            }
        },
        localToGlobal: function(point) {
            return this.__getRenderTransform().transformPoint(point)
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) {
                useCapture = false
            }
            openfl_events_EventDispatcher.prototype.removeEventListener.call(this, type, listener, useCapture);
            switch (type) {
                case "activate":
                case "deactivate":
                case "enterFrame":
                case "exitFrame":
                case "frameConstructed":
                case "render":
                    if (!this.hasEventListener(type)) {
                        if (openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
                            var _this = openfl_display_DisplayObject.__broadcastEvents.get(type);
                            HxOverrides.remove(_this, this)
                        }
                    }
                    break;
                default:
            }
        },
        __cleanup: function() {
            this.__cairo = null;
            this.__canvas = null;
            this.__context = null;
            if (this.__graphics != null) {
                this.__graphics.__cleanup()
            }
        },
        __dispatch: function(event) {
            if (this.__eventMap != null && this.hasEventListener(event.type)) {
                var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this, event);
                if (event.__isCanceled) {
                    return true
                }
                return result
            }
            return true
        },
        __dispatchChildren: function(event, stack) {
            event.target = this;
            if (this.parent != null) {
                event.eventPhase = 1;
                if (this.parent == this.stage) {
                    this.parent.__dispatchEvent(event)
                } else {
                    var parent = this.parent;
                    var i = 0;
                    while (parent != null) {
                        stack.set(i, parent);
                        parent = parent.parent;
                        i++
                    }
                    var _g = 0;
                    while (_g < i) {
                        var j = _g++;
                        stack.get(i - j - 1).__dispatchEvent(event)
                    }
                }
            }
            event.eventPhase = 2;
            return this.__dispatchEvent(event)
        },
        __dispatchEvent: function(event) {
            var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this, event);
            if (event.__isCanceled) {
                return true
            }
            if (event.bubbles && this.parent != null && this.parent != this) {
                event.eventPhase = 3;
                if (event.target == null) {
                    event.target = this
                }
                this.parent.__dispatchEvent(event)
            }
            return result
        },
        __dispatchStack: function(event, stack) {
            var target;
            var length = stack.length;
            if (length == 0) {
                event.eventPhase = 2;
                target = event.target;
                target.__dispatch(event)
            } else {
                event.eventPhase = 1;
                event.target = stack[stack.length - 1];
                var _g1 = 0;
                var _g = length - 1;
                while (_g1 < _g) {
                    var i = _g1++;
                    stack[i].__dispatch(event);
                    if (event.__isCanceled) {
                        return
                    }
                }
                event.eventPhase = 2;
                target = event.target;
                target.__dispatch(event);
                if (event.__isCanceled) {
                    return
                }
                if (event.bubbles) {
                    event.eventPhase = 3;
                    var i1 = length - 2;
                    while (i1 >= 0) {
                        stack[i1].__dispatch(event);
                        if (event.__isCanceled) {
                            return
                        }
                        i1--
                    }
                }
            }
        },
        __enterFrame: function(deltaTime) {},
        __getBounds: function(rect, matrix) {
            if (this.__graphics != null) {
                this.__graphics.__getBounds(rect, matrix)
            }
        },
        __getCursor: function() {
            return null
        },
        __getInteractive: function(stack) {
            return false
        },
        __getLocalBounds: function(rect) {
            var cacheX = this.__transform.tx;
            var cacheY = this.__transform.ty;
            this.__transform.tx = this.__transform.ty = 0;
            this.__getBounds(rect, this.__transform);
            this.__transform.tx = cacheX;
            this.__transform.ty = cacheY
        },
        __getRenderBounds: function(rect, matrix) {
            if (this.__scrollRect == null) {
                this.__getBounds(rect, matrix)
            } else {
                var r = openfl_geom_Rectangle.__pool.get();
                r.copyFrom(this.__scrollRect);
                r.__transform(r, matrix);
                rect.__expand(matrix.tx, matrix.ty, r.width, r.height);
                openfl_geom_Rectangle.__pool.release(r)
            }
        },
        __getRenderTransform: function() {
            this.__getWorldTransform();
            return this.__renderTransform
        },
        __getWorldTransform: function() {
            if (this.__transformDirty) {
                var list = [];
                var current = this;
                var transformDirty = this.__transformDirty;
                if (this.parent == null) {
                    if (transformDirty) {
                        this.__update(true, false)
                    }
                } else {
                    while (current != this.stage) {
                        list.push(current);
                        current = current.parent;
                        if (current == null) {
                            break
                        }
                        if (current != this.stage && current.__transformDirty) {
                            transformDirty = true
                        }
                    }
                }
                if (transformDirty) {
                    var i = list.length;
                    while (--i >= 0) {
                        list[i].__update(true, false)
                    }
                }
            }
            return this.__worldTransform
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (this.__graphics != null) {
                if (!hitObject.get_visible() || this.__isMask) {
                    return false
                }
                if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
                    return false
                }
                if (this.__graphics.__hitTest(x, y, shapeFlag, this.__getRenderTransform())) {
                    if (stack != null && !interactiveOnly) {
                        stack.push(hitObject)
                    }
                    return true
                }
            }
            return false
        },
        __hitTestMask: function(x, y) {
            if (this.__graphics != null) {
                if (this.__graphics.__hitTest(x, y, true, this.__getRenderTransform())) {
                    return true
                }
            }
            return false
        },
        __readGraphicsData: function(graphicsData, recurse) {
            if (this.__graphics != null) {
                this.__graphics.__readGraphicsData(graphicsData)
            }
        },
        __renderCairo: function(renderSession) {},
        __renderCairoMask: function(renderSession) {},
        __renderCanvas: function(renderSession) {
            if (this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
                this.__updateCacheBitmap(renderSession);
                if (this.__cacheBitmap != null && !this.__cacheBitmapRender) {
                    openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap, renderSession)
                } else {
                    openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this, renderSession)
                }
            }
        },
        __renderCanvasMask: function(renderSession) {
            if (this.__graphics != null) {
                openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics, renderSession)
            }
        },
        __renderDOM: function(renderSession) {},
        __renderGL: function(renderSession) {
            this.__updateCacheBitmap(renderSession);
            if (this.__cacheBitmap != null && !this.__cacheBitmapRender) {
                openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap, renderSession)
            } else {
                openfl__$internal_renderer_opengl_GLDisplayObject.render(this, renderSession)
            }
        },
        __setParentRenderDirty: function() {
            if (this.parent != null && !this.parent.__renderDirty) {
                this.parent.__renderDirty = true;
                this.parent.__setParentRenderDirty()
            }
        },
        __setRenderDirty: function() {
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
        },
        __setStageReference: function(stage) {
            this.stage = stage
        },
        __setTransformDirty: function() {
            if (!this.__transformDirty) {
                this.__transformDirty = true;
                this.__setParentRenderDirty()
            }
        },
        __stopAllMovieClips: function() {},
        __update: function(transformOnly, updateChildren, maskGraphics) {
            this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
            this.__updateTransforms();
            this.__transformDirty = false;
            if (maskGraphics != null) {
                this.__updateMask(maskGraphics)
            }
            if (!transformOnly) {
                if (!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
                    this.__worldColorTransform = this.get_transform().get_colorTransform().__clone()
                }
                var __parent;
                if (this.parent != null) {
                    __parent = this.parent
                } else {
                    __parent = this.__renderParent
                }
                if (__parent != null) {
                    this.__worldAlpha = this.get_alpha() * __parent.__worldAlpha;
                    this.__worldColorTransform.__combine(__parent.__worldColorTransform);
                    if (this.__blendMode == null || this.__blendMode == 10) {
                        this.__worldBlendMode = __parent.__blendMode
                    } else {
                        this.__worldBlendMode = this.__blendMode
                    }
                } else {
                    this.__worldAlpha = this.get_alpha()
                }
            }
        },
        __updateCacheBitmap: function(renderSession) {
            if (this.__cacheBitmapRender) {
                return
            }
            if (this.get_cacheAsBitmap()) {
                if (this.__cacheBitmap == null || this.__renderDirty && (this.__children != null && this.__children.length > 0 || !this.__worldColorTransform.__isDefault())) {
                    this.__getWorldTransform();
                    this.__update(false, true);
                    var matrix = openfl_geom_Matrix.__pool.get();
                    var rect = openfl_geom_Rectangle.__pool.get();
                    matrix.identity();
                    this.__getBounds(rect, matrix);
                    var color;
                    if (this.opaqueBackground != null) {
                        color = -16777216 | this.opaqueBackground
                    } else {
                        color = 0
                    }
                    if (this.__cacheBitmap == null || rect.width != this.__cacheBitmap.get_width() || rect.height != this.__cacheBitmap.get_height()) {
                        this.__cacheBitmapData = new openfl_display_BitmapData(Math.ceil(rect.width), Math.ceil(rect.height), true, color);
                        if (this.__cacheBitmap == null) {
                            this.__cacheBitmap = new openfl_display_Bitmap()
                        }
                        this.__cacheBitmap.set_bitmapData(this.__cacheBitmapData)
                    } else {
                        this.__cacheBitmapData.fillRect(this.__cacheBitmapData.rect, color)
                    }
                    this.__cacheBitmap.smoothing = renderSession.allowSmoothing;
                    this.__cacheBitmap.__renderable = this.__renderable;
                    this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
                    this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
                    this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
                    this.__cacheBitmap.__scrollRect = this.__scrollRect;
                    this.__cacheBitmap.set_filters(this.get_filters());
                    matrix.tx = Math.round(rect.x);
                    matrix.ty = Math.round(rect.y);
                    this.__cacheBitmap.__renderTransform.copyFrom(matrix);
                    this.__cacheBitmap.__renderTransform.concat(this.__renderTransform);
                    matrix.tx *= -1;
                    matrix.ty *= -1;
                    this.__cacheBitmapRender = true;
                    this.__cacheBitmapData.__draw(this, matrix, null, null, null, renderSession.allowSmoothing);
                    this.__cacheBitmapRender = false;
                    if (!this.__worldColorTransform.__isDefault()) {
                        this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect, this.__worldColorTransform)
                    }
                    this.__update(false, true);
                    openfl_geom_Matrix.__pool.release(matrix);
                    openfl_geom_Rectangle.__pool.release(rect)
                }
            } else {
                if (this.__cacheBitmap != null) {
                    this.__cacheBitmap = null;
                    this.__cacheBitmapData = null
                }
            }
        },
        __updateChildren: function(transformOnly) {
            this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
            this.__worldAlpha = this.get_alpha();
            if (this.__transformDirty) {
                this.__transformDirty = false
            }
        },
        __updateMask: function(maskGraphics) {
            if (this.__graphics != null) {
                maskGraphics.__commands.overrideMatrix(this.__worldTransform);
                maskGraphics.__commands.append(this.__graphics.__commands);
                maskGraphics.set___dirty(true);
                maskGraphics.__visible = true;
                if (maskGraphics.__bounds == null) {
                    maskGraphics.__bounds = new openfl_geom_Rectangle()
                }
                this.__graphics.__getBounds(maskGraphics.__bounds, openfl_geom_Matrix.__identity)
            }
        },
        __updateTransforms: function(overrideTransform) {
            var overrided = overrideTransform != null;
            var local;
            if (overrided) {
                local = overrideTransform
            } else {
                local = this.__transform
            }
            if (this.__worldTransform == null) {
                this.__worldTransform = new openfl_geom_Matrix()
            }
            if (this.__renderTransform == null) {
                this.__renderTransform = new openfl_geom_Matrix()
            }
            if (!overrided && this.parent != null) {
                var parentTransform = this.parent.__worldTransform;
                this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
                this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
                this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
                this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
                this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
                this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
                parentTransform = this.parent.__renderTransform;
                this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
                this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
                this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
                this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
                this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
                this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty
            } else {
                this.__worldTransform.copyFrom(local);
                this.__renderTransform.copyFrom(local)
            }
            if (this.__scrollRect != null) {
                this.__renderTransform.__translateTransformed(-this.__scrollRect.x, -this.__scrollRect.y)
            }
        },
        get_alpha: function() {
            return this.__alpha
        },
        set_alpha: function(value) {
            if (value > 1) {
                value = 1
            }
            if (value != this.__alpha) {
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__alpha = value
        },
        get_blendMode: function() {
            return this.__blendMode
        },
        set_blendMode: function(value) {
            if (value == null) {
                value = 10
            }
            if (value != this.__blendMode) {
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__blendMode = value
        },
        get_cacheAsBitmap: function() {
            if (this.__filters == null) {
                return this.__cacheAsBitmap
            } else {
                return true
            }
        },
        set_cacheAsBitmap: function(value) {
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
            return this.__cacheAsBitmap = value
        },
        get_cacheAsBitmapMatrix: function() {
            return this.__cacheAsBitmapMatrix
        },
        set_cacheAsBitmapMatrix: function(value) {
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
            return this.__cacheAsBitmapMatrix = value.clone()
        },
        get_filters: function() {
            if (this.__filters == null) {
                return []
            } else {
                return this.__filters.slice()
            }
        },
        set_filters: function(value) {
            if (value != null && value.length > 0) {
                this.__filters = value
            } else {
                this.__filters = null
            }
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
            return value
        },
        get_height: function() {
            var rect = openfl_geom_Rectangle.__pool.get();
            this.__getLocalBounds(rect);
            var height = rect.height;
            openfl_geom_Rectangle.__pool.release(rect);
            return height
        },
        set_height: function(value) {
            var rect = openfl_geom_Rectangle.__pool.get();
            var matrix = openfl_geom_Matrix.__pool.get();
            matrix.identity();
            this.__getBounds(rect, matrix);
            if (value != rect.height) {
                this.set_scaleY(value / rect.height)
            } else {
                this.set_scaleY(1)
            }
            openfl_geom_Rectangle.__pool.release(rect);
            openfl_geom_Matrix.__pool.release(matrix);
            return value
        },
        get_loaderInfo: function() {
            if (this.stage != null) {
                return openfl_Lib.current.__loaderInfo
            }
            return null
        },
        get_mask: function() {
            return this.__mask
        },
        set_mask: function(value) {
            if (value != this.__mask) {
                this.__setTransformDirty();
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            if (this.__mask != null) {
                this.__mask.__isMask = false;
                this.__mask.__setTransformDirty();
                this.__mask.__setRenderDirty()
            }
            if (value != null) {
                value.__isMask = true
            }
            return this.__mask = value
        },
        get_mouseX: function() {
            var mouseX;
            if (this.stage != null) {
                mouseX = this.stage.__mouseX
            } else {
                mouseX = openfl_Lib.current.stage.__mouseX
            }
            var mouseY;
            if (this.stage != null) {
                mouseY = this.stage.__mouseY
            } else {
                mouseY = openfl_Lib.current.stage.__mouseY
            }
            return this.__getRenderTransform().__transformInverseX(mouseX, mouseY)
        },
        get_mouseY: function() {
            var mouseX;
            if (this.stage != null) {
                mouseX = this.stage.__mouseX
            } else {
                mouseX = openfl_Lib.current.stage.__mouseX
            }
            var mouseY;
            if (this.stage != null) {
                mouseY = this.stage.__mouseY
            } else {
                mouseY = openfl_Lib.current.stage.__mouseY
            }
            return this.__getRenderTransform().__transformInverseY(mouseX, mouseY)
        },
        get_name: function() {
            return this.__name
        },
        set_name: function(value) {
            return this.__name = value
        },
        get_root: function() {
            if (this.stage != null) {
                return openfl_Lib.current
            }
            return null
        },
        get_rotation: function() {
            return this.__rotation
        },
        set_rotation: function(value) {
            if (value != this.__rotation) {
                this.__rotation = value;
                var radians = this.__rotation * (Math.PI / 180);
                this.__rotationSine = Math.sin(radians);
                this.__rotationCosine = Math.cos(radians);
                this.__transform.a = this.__rotationCosine * this.__scaleX;
                this.__transform.b = this.__rotationSine * this.__scaleX;
                this.__transform.c = -this.__rotationSine * this.__scaleY;
                this.__transform.d = this.__rotationCosine * this.__scaleY;
                this.__setTransformDirty()
            }
            return value
        },
        get_scaleX: function() {
            return this.__scaleX
        },
        set_scaleX: function(value) {
            if (value != this.__scaleX) {
                this.__scaleX = value;
                if (this.__transform.b == 0) {
                    if (value != this.__transform.a) {
                        this.__setTransformDirty()
                    }
                    this.__transform.a = value
                } else {
                    var a = this.__rotationCosine * value;
                    var b = this.__rotationSine * value;
                    if (this.__transform.a != a || this.__transform.b != b) {
                        this.__setTransformDirty()
                    }
                    this.__transform.a = a;
                    this.__transform.b = b
                }
            }
            return value
        },
        get_scaleY: function() {
            return this.__scaleY
        },
        set_scaleY: function(value) {
            if (value != this.__scaleY) {
                this.__scaleY = value;
                if (this.__transform.c == 0) {
                    if (value != this.__transform.d) {
                        this.__setTransformDirty()
                    }
                    this.__transform.d = value
                } else {
                    var c = -this.__rotationSine * value;
                    var d = this.__rotationCosine * value;
                    if (this.__transform.d != d || this.__transform.c != c) {
                        this.__setTransformDirty()
                    }
                    this.__transform.c = c;
                    this.__transform.d = d
                }
            }
            return value
        },
        get_scrollRect: function() {
            if (this.__scrollRect == null) {
                return null
            }
            return this.__scrollRect.clone()
        },
        set_scrollRect: function(value) {
            if (value != this.__scrollRect) {
                this.__setTransformDirty()
            }
            return this.__scrollRect = value
        },
        get_transform: function() {
            if (this.__objectTransform == null) {
                this.__objectTransform = new openfl_geom_Transform(this)
            }
            return this.__objectTransform
        },
        set_transform: function(value) {
            if (value == null) {
                throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."))
            }
            if (this.__objectTransform == null) {
                this.__objectTransform = new openfl_geom_Transform(this)
            }
            this.__setTransformDirty();
            this.__objectTransform.set_matrix(value.get_matrix());
            this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
            return this.__objectTransform
        },
        get_visible: function() {
            return this.__visible
        },
        set_visible: function(value) {
            if (value != this.__visible) {
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__visible = value
        },
        get_width: function() {
            var rect = openfl_geom_Rectangle.__pool.get();
            this.__getLocalBounds(rect);
            var width = rect.width;
            openfl_geom_Rectangle.__pool.release(rect);
            return width
        },
        set_width: function(value) {
            var rect = openfl_geom_Rectangle.__pool.get();
            var matrix = openfl_geom_Matrix.__pool.get();
            matrix.identity();
            this.__getBounds(rect, matrix);
            if (value != rect.width) {
                this.set_scaleX(value / rect.width)
            } else {
                this.set_scaleX(1)
            }
            openfl_geom_Rectangle.__pool.release(rect);
            openfl_geom_Matrix.__pool.release(matrix);
            return value
        },
        get_x: function() {
            return this.__transform.tx
        },
        set_x: function(value) {
            if (value != this.__transform.tx) {
                this.__setTransformDirty()
            }
            return this.__transform.tx = value
        },
        get_y: function() {
            return this.__transform.ty
        },
        set_y: function(value) {
            if (value != this.__transform.ty) {
                this.__setTransformDirty()
            }
            return this.__transform.ty = value
        },
        __class__: openfl_display_DisplayObject,
        __properties__: {
            set_y: "set_y",
            get_y: "get_y",
            set_x: "set_x",
            get_x: "get_x",
            set_width: "set_width",
            get_width: "get_width",
            set_visible: "set_visible",
            get_visible: "get_visible",
            set_transform: "set_transform",
            get_transform: "get_transform",
            set_scrollRect: "set_scrollRect",
            get_scrollRect: "get_scrollRect",
            set_scaleY: "set_scaleY",
            get_scaleY: "get_scaleY",
            set_scaleX: "set_scaleX",
            get_scaleX: "get_scaleX",
            set_rotation: "set_rotation",
            get_rotation: "get_rotation",
            get_root: "get_root",
            set_name: "set_name",
            get_name: "get_name",
            get_mouseY: "get_mouseY",
            get_mouseX: "get_mouseX",
            set_mask: "set_mask",
            get_mask: "get_mask",
            get_loaderInfo: "get_loaderInfo",
            set_height: "set_height",
            get_height: "get_height",
            set_filters: "set_filters",
            get_filters: "get_filters",
            set_cacheAsBitmapMatrix: "set_cacheAsBitmapMatrix",
            get_cacheAsBitmapMatrix: "get_cacheAsBitmapMatrix",
            set_cacheAsBitmap: "set_cacheAsBitmap",
            get_cacheAsBitmap: "get_cacheAsBitmap",
            set_blendMode: "set_blendMode",
            get_blendMode: "get_blendMode",
            set_alpha: "set_alpha",
            get_alpha: "get_alpha"
        }
    });
    var openfl_display_InteractiveObject = function() {
        openfl_display_DisplayObject.call(this);
        this.doubleClickEnabled = false;
        this.mouseEnabled = true;
        this.needsSoftKeyboard = false;
        this.__tabEnabled = false;
        this.tabIndex = -1
    };
    $hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
    openfl_display_InteractiveObject.__name__ = ["openfl", "display", "InteractiveObject"];
    openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
    openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype, {
        doubleClickEnabled: null,
        focusRect: null,
        mouseEnabled: null,
        needsSoftKeyboard: null,
        softKeyboardInputAreaOfInterest: null,
        tabIndex: null,
        __tabEnabled: null,
        requestSoftKeyboard: function() {
            openfl_Lib.notImplemented({
                fileName: "InteractiveObject.hx",
                lineNumber: 42,
                className: "openfl.display.InteractiveObject",
                methodName: "requestSoftKeyboard"
            });
            return false
        },
        __getInteractive: function(stack) {
            if (stack != null) {
                stack.push(this);
                if (this.parent != null) {
                    this.parent.__getInteractive(stack)
                }
            }
            return true
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
                return false
            }
            return openfl_display_DisplayObject.prototype.__hitTest.call(this, x, y, shapeFlag, stack, interactiveOnly, hitObject)
        },
        get_tabEnabled: function() {
            return this.__tabEnabled
        },
        set_tabEnabled: function(value) {
            return this.__tabEnabled = value
        },
        __class__: openfl_display_InteractiveObject,
        __properties__: $extend(openfl_display_DisplayObject.prototype.__properties__, {
            set_tabEnabled: "set_tabEnabled",
            get_tabEnabled: "get_tabEnabled"
        })
    });
    var openfl_display_DisplayObjectContainer = function() {
        openfl_display_InteractiveObject.call(this);
        this.mouseChildren = true;
        this.__children = [];
        this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
        this.__tempStack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null)
    };
    $hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
    openfl_display_DisplayObjectContainer.__name__ = ["openfl", "display", "DisplayObjectContainer"];
    openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
    openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype, {
        mouseChildren: null,
        tabChildren: null,
        __removedChildren: null,
        __tempStack: null,
        addChild: function(child) {
            return this.addChildAt(child, this.get_numChildren())
        },
        addChildAt: function(child, index) {
            if (index > this.__children.length || index < 0) {
                throw new js__$Boot_HaxeError("Invalid index position " + index)
            }
            if (child.parent == this) {
                if (this.__children[index] != child) {
                    HxOverrides.remove(this.__children, child);
                    this.__children.splice(index, 0, child);
                    if (!this.__renderDirty) {
                        this.__renderDirty = true;
                        this.__setParentRenderDirty()
                    }
                }
            } else {
                if (child.parent != null) {
                    child.parent.removeChild(child)
                }
                this.__children.splice(index, 0, child);
                child.parent = this;
                var addedToStage = this.stage != null && child.stage == null;
                if (addedToStage) {
                    this.__setStageReference(this.stage)
                }
                child.__setTransformDirty();
                if (!child.__renderDirty) {
                    child.__renderDirty = true;
                    child.__setParentRenderDirty()
                }
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
                var event = new openfl_events_Event("added", true);
                event.target = child;
                child.__dispatchEvent(event);
                if (addedToStage) {
                    child.__dispatchChildren(new openfl_events_Event("addedToStage", false, false), this.__tempStack);
                    this.__tempStack.set_length(0)
                }
            }
            return child
        },
        areInaccessibleObjectsUnderPoint: function(point) {
            return false
        },
        contains: function(child) {
            while (child != this && child != null) {
                child = child.parent
            }
            return child == this
        },
        getChildAt: function(index) {
            if (index >= 0 && index < this.__children.length) {
                return this.__children[index]
            }
            return null
        },
        getChildByName: function(name) {
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                if (child.get_name() == name) {
                    return child
                }
            }
            return null
        },
        getChildIndex: function(child) {
            var _g1 = 0;
            var _g = this.__children.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.__children[i] == child) {
                    return i
                }
            }
            return -1
        },
        getObjectsUnderPoint: function(point) {
            var stack = [];
            this.__hitTest(point.x, point.y, false, stack, false, this);
            stack.reverse();
            return stack
        },
        removeChild: function(child) {
            if (child != null && child.parent == this) {
                child.__setTransformDirty();
                if (!child.__renderDirty) {
                    child.__renderDirty = true;
                    child.__setParentRenderDirty()
                }
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
                child.__dispatchEvent(new openfl_events_Event("removed", true));
                if (this.stage != null) {
                    if (child.stage != null && this.stage.get_focus() == child) {
                        this.stage.set_focus(null)
                    }
                    child.__dispatchChildren(new openfl_events_Event("removedFromStage", false, false), this.__tempStack);
                    this.__tempStack.set_length(0);
                    child.__setStageReference(null)
                }
                child.parent = null;
                HxOverrides.remove(this.__children, child);
                this.__removedChildren.push(child);
                child.__setTransformDirty()
            }
            return child
        },
        removeChildAt: function(index) {
            if (index >= 0 && index < this.__children.length) {
                return this.removeChild(this.__children[index])
            }
            return null
        },
        removeChildren: function(beginIndex, endIndex) {
            if (endIndex == null) {
                endIndex = 2147483647
            }
            if (beginIndex == null) {
                beginIndex = 0
            }
            if (endIndex == 2147483647) {
                endIndex = this.__children.length - 1;
                if (endIndex < 0) {
                    return
                }
            }
            if (beginIndex > this.__children.length - 1) {
                return
            } else {
                if (endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
                    throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."))
                }
            }
            var numRemovals = endIndex - beginIndex;
            while (numRemovals >= 0) {
                this.removeChildAt(beginIndex);
                numRemovals--
            }
        },
        resolve: function(fieldName) {
            if (this.__children == null) {
                return null
            }
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                if (child.get_name() == fieldName) {
                    return child
                }
            }
            return null
        },
        setChildIndex: function(child, index) {
            if (index >= 0 && index <= this.__children.length && child.parent == this) {
                HxOverrides.remove(this.__children, child);
                this.__children.splice(index, 0, child)
            }
        },
        stopAllMovieClips: function() {
            this.__stopAllMovieClips()
        },
        swapChildren: function(child1, child2) {
            if (child1.parent == this && child2.parent == this) {
                var index1 = HxOverrides.indexOf(this.__children, child1, 0);
                var index2 = HxOverrides.indexOf(this.__children, child2, 0);
                this.__children[index1] = child2;
                this.__children[index2] = child1;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
        },
        swapChildrenAt: function(index1, index2) {
            var swap = this.__children[index1];
            this.__children[index1] = this.__children[index2];
            this.__children[index2] = swap;
            swap = null;
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
        },
        __dispatchChildren: function(event, stack) {
            var success = openfl_display_InteractiveObject.prototype.__dispatchChildren.call(this, event, stack);
            if (success && this.__children != null) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g];
                    ++_g;
                    if (!child.__dispatchChildren(event, stack)) {
                        return false
                    }
                }
            }
            return success
        },
        __enterFrame: function(deltaTime) {
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                child.__enterFrame(deltaTime)
            }
        },
        __getBounds: function(rect, matrix) {
            openfl_display_InteractiveObject.prototype.__getBounds.call(this, rect, matrix);
            if (this.__children.length == 0) {
                return
            }
            if (matrix != null) {
                this.__updateTransforms(matrix);
                this.__updateChildren(true)
            }
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                if (child.__scaleX == 0 || child.__scaleY == 0) {
                    continue
                }
                child.__getBounds(rect, child.__worldTransform)
            }
            if (matrix != null) {
                this.__updateTransforms();
                this.__updateChildren(true)
            }
        },
        __getRenderBounds: function(rect, matrix) {
            if (this.__scrollRect != null) {
                openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this, rect, matrix);
                return
            } else {
                openfl_display_InteractiveObject.prototype.__getBounds.call(this, rect, matrix)
            }
            if (this.__children.length == 0) {
                return
            }
            if (matrix != null) {
                this.__updateTransforms(matrix);
                this.__updateChildren(true)
            }
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                if (child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
                    continue
                }
                child.__getRenderBounds(rect, child.__worldTransform)
            }
            if (matrix != null) {
                this.__updateTransforms();
                this.__updateChildren(true)
            }
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
                return false
            }
            if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
                return false
            }
            if (this.__scrollRect != null) {
                var point = openfl_geom_Point.__pool.get();
                point.setTo(x, y);
                this.__getRenderTransform().__transformInversePoint(point);
                if (!this.__scrollRect.containsPoint(point)) {
                    openfl_geom_Point.__pool.release(point);
                    return false
                }
                openfl_geom_Point.__pool.release(point)
            }
            var i = this.__children.length;
            if (interactiveOnly) {
                if (stack == null || !this.mouseChildren) {
                    while (--i >= 0) {
                        if (this.__children[i].__hitTest(x, y, shapeFlag, null, true, this.__children[i])) {
                            if (stack != null) {
                                stack.push(hitObject)
                            }
                            return true
                        }
                    }
                } else {
                    if (stack != null) {
                        var length = stack.length;
                        var interactive = false;
                        var hitTest = false;
                        while (--i >= 0) {
                            interactive = this.__children[i].__getInteractive(null);
                            if (interactive || this.mouseEnabled && !hitTest) {
                                if (this.__children[i].__hitTest(x, y, shapeFlag, stack, true, this.__children[i])) {
                                    hitTest = true;
                                    if (interactive) {
                                        break
                                    }
                                }
                            }
                        }
                        if (hitTest) {
                            stack.splice(length, 0, hitObject);
                            return true
                        }
                    }
                }
            } else {
                while (--i >= 0) {
                    this.__children[i].__hitTest(x, y, shapeFlag, stack, false, this.__children[i])
                }
            }
            return false
        },
        __hitTestMask: function(x, y) {
            var i = this.__children.length;
            while (--i >= 0) {
                if (this.__children[i].__hitTestMask(x, y)) {
                    return true
                }
            }
            return false
        },
        __readGraphicsData: function(graphicsData, recurse) {
            openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this, graphicsData, recurse);
            if (recurse) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g];
                    ++_g;
                    child.__readGraphicsData(graphicsData, recurse)
                }
            }
        },
        __renderCairo: function(renderSession) {},
        __renderCairoMask: function(renderSession) {},
        __renderCanvas: function(renderSession) {
            if (!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
                return
            }
            openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
            if (this.__cacheBitmap != null && !this.__cacheBitmapRender) {
                return
            }
            renderSession.maskManager.pushObject(this);
            if (renderSession.clearDirtyFlags) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g];
                    ++_g;
                    child.__renderCanvas(renderSession);
                    child.__renderDirty = false
                }
                this.__renderDirty = false
            } else {
                var _g2 = 0;
                var _g11 = this.__children;
                while (_g2 < _g11.length) {
                    var child1 = _g11[_g2];
                    ++_g2;
                    child1.__renderCanvas(renderSession)
                }
            }
            var _g3 = 0;
            var _g12 = this.__removedChildren;
            while (_g3 < _g12.get_length()) {
                var orphan = _g12.get(_g3);
                ++_g3;
                if (orphan.stage == null) {
                    orphan.__cleanup()
                }
            }
            this.__removedChildren.set_length(0);
            renderSession.maskManager.popObject(this)
        },
        __renderCanvasMask: function(renderSession) {
            if (this.__graphics != null) {
                openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics, renderSession)
            }
            var bounds = new openfl_geom_Rectangle();
            this.__getLocalBounds(bounds);
            renderSession.context.rect(0, 0, bounds.width, bounds.height)
        },
        __renderDOM: function(renderSession) {},
        __renderGL: function(renderSession) {
            if (!this.__renderable || this.__worldAlpha <= 0) {
                return
            }
            openfl_display_InteractiveObject.prototype.__renderGL.call(this, renderSession);
            if (this.__cacheBitmap != null && !this.__cacheBitmapRender) {
                return
            }
            renderSession.maskManager.pushObject(this);
            renderSession.filterManager.pushObject(this);
            if (renderSession.clearDirtyFlags) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g];
                    ++_g;
                    child.__renderGL(renderSession);
                    child.__renderDirty = false
                }
                this.__renderDirty = false
            } else {
                var _g2 = 0;
                var _g11 = this.__children;
                while (_g2 < _g11.length) {
                    var child1 = _g11[_g2];
                    ++_g2;
                    child1.__renderGL(renderSession)
                }
            }
            var _g3 = 0;
            var _g12 = this.__removedChildren;
            while (_g3 < _g12.get_length()) {
                var orphan = _g12.get(_g3);
                ++_g3;
                if (orphan.stage == null) {
                    orphan.__cleanup()
                }
            }
            this.__removedChildren.set_length(0);
            renderSession.filterManager.popObject(this);
            renderSession.maskManager.popObject(this)
        },
        __setStageReference: function(stage) {
            openfl_display_InteractiveObject.prototype.__setStageReference.call(this, stage);
            if (this.__children != null) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g];
                    ++_g;
                    child.__setStageReference(stage)
                }
            }
        },
        __setTransformDirty: function() {
            if (!this.__transformDirty) {
                openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
                if (this.__children != null) {
                    var _g = 0;
                    var _g1 = this.__children;
                    while (_g < _g1.length) {
                        var child = _g1[_g];
                        ++_g;
                        child.__setTransformDirty()
                    }
                }
            }
        },
        __stopAllMovieClips: function() {
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                child.__stopAllMovieClips()
            }
        },
        __update: function(transformOnly, updateChildren, maskGraphics) {
            openfl_display_InteractiveObject.prototype.__update.call(this, transformOnly, updateChildren, maskGraphics);
            if (updateChildren) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g];
                    ++_g;
                    child.__update(transformOnly, true, maskGraphics)
                }
            }
        },
        __updateChildren: function(transformOnly) {
            openfl_display_InteractiveObject.prototype.__updateChildren.call(this, transformOnly);
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                child.__update(transformOnly, true)
            }
        },
        get_numChildren: function() {
            return this.__children.length
        },
        __class__: openfl_display_DisplayObjectContainer,
        __properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__, {
            get_numChildren: "get_numChildren"
        })
    });
    var openfl_display_Sprite = function() {
        openfl_display_DisplayObjectContainer.call(this);
        this.buttonMode = false;
        this.useHandCursor = true
    };
    $hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
    openfl_display_Sprite.__name__ = ["openfl", "display", "Sprite"];
    openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
    openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype, {
        buttonMode: null,
        dropTarget: null,
        hitArea: null,
        useHandCursor: null,
        startDrag: function(lockCenter, bounds) {
            if (lockCenter == null) {
                lockCenter = false
            }
            if (this.stage != null) {
                this.stage.__startDrag(this, lockCenter, bounds)
            }
        },
        stopDrag: function() {
            if (this.stage != null) {
                this.stage.__stopDrag(this)
            }
        },
        __getCursor: function() {
            if (this.buttonMode && this.useHandCursor) {
                return lime_ui_MouseCursor.POINTER
            } else {
                return null
            }
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (this.hitArea != null) {
                if (!this.hitArea.mouseEnabled) {
                    this.hitArea.mouseEnabled = true;
                    var hitTest = this.hitArea.__hitTest(x, y, shapeFlag, null, true, hitObject);
                    this.hitArea.mouseEnabled = false;
                    if (hitTest) {
                        stack[stack.length] = hitObject
                    }
                    return hitTest
                }
            } else {
                if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
                    return false
                }
                if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
                    return false
                }
                if (this.__scrollRect != null) {
                    var point = openfl_geom_Point.__pool.get();
                    point.setTo(x, y);
                    this.__getRenderTransform().__transformInversePoint(point);
                    if (!this.__scrollRect.containsPoint(point)) {
                        openfl_geom_Point.__pool.release(point);
                        return false
                    }
                    openfl_geom_Point.__pool.release(point)
                }
                if (openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this, x, y, shapeFlag, stack, interactiveOnly, hitObject)) {
                    return interactiveOnly
                } else {
                    if ((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x, y, shapeFlag, this.__getRenderTransform())) {
                        if (stack != null) {
                            stack.push(hitObject)
                        }
                        return true
                    }
                }
            }
            return false
        },
        __hitTestMask: function(x, y) {
            if (openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this, x, y)) {
                return true
            } else {
                if (this.__graphics != null && this.__graphics.__hitTest(x, y, true, this.__getRenderTransform())) {
                    return true
                }
            }
            return false
        },
        get_graphics: function() {
            if (this.__graphics == null) {
                this.__graphics = new openfl_display_Graphics(this)
            }
            return this.__graphics
        },
        get_tabEnabled: function() {
            return this.__tabEnabled || this.buttonMode
        },
        __class__: openfl_display_Sprite,
        __properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__, {
            get_graphics: "get_graphics"
        })
    });
    var oaktree_core_Engine = function(pFPS) {
        if (pFPS == null) {
            pFPS = 30
        }
        this._deltaStepTimeMS = 0;
        this._deltaTimeMS = 0;
        this._lastTimeMS = 0;
        this._lastStepTimeMS = 0;
        this._currentTimeMS = 0;
        this._timeStepMS = 0;
        this._timeStepS = 0;
        this.onUpdate = new hxsignal_impl_Signal1();
        openfl_display_Sprite.call(this);
        this._scheduledTasks = new List();
        oaktree_OakTree.init();
        this._targetFPS = pFPS;
        this._currentTimeMS = 0;
        this._lastTimeMS = this._lastStepTimeMS = 0;
        this._deltaTimeMS = 0;
        this._currentDate = new Date();
        this._creationTime = openfl_Lib.getTimer();
        this.entities = new oaktree_core_EntityManager();
        this.keyboard = new oaktree_ext_input_Keyboard();
        this.scheduler = new oaktree_core_JobScheduler(1000 / pFPS * 0.5);
        this.addEventListener("addedToStage", $bind(this, this.onAddedToStage))
    };
    $hxClasses["oaktree.core.Engine"] = oaktree_core_Engine;
    oaktree_core_Engine.__name__ = ["oaktree", "core", "Engine"];
    oaktree_core_Engine.__super__ = openfl_display_Sprite;
    oaktree_core_Engine.prototype = $extend(openfl_display_Sprite.prototype, {
        states: null,
        scenes: null,
        entities: null,
        keyboard: null,
        scheduler: null,
        onUpdate: null,
        baseContainer: null,
        _targetFPS: null,
        _currentDate: null,
        _creationTime: null,
        _timeStepS: null,
        _timeStepMS: null,
        _currentTimeMS: null,
        _lastStepTimeMS: null,
        _lastTimeMS: null,
        _deltaTimeMS: null,
        _deltaStepTimeMS: null,
        _scheduledTasks: null,
        onAddedToStage: function(event) {
            this.removeEventListener("addedToStage", $bind(this, this.onAddedToStage));
            oaktree_OakTree.onEngineAddedToStage(this, this.stage);
            this.states = new oaktree_utils_States({
                name: "MainStateStack"
            });
            this.states.createOnGet = true;
            this.baseContainer = new openfl_display_Sprite();
            this.addChild(this.baseContainer);
            this.scenes = new oaktree_core_scene_SceneManager(this.baseContainer);
            this._timeStepMS = 1000 / this._targetFPS;
            this._timeStepS = this._timeStepMS / 1000;
            this._lastTimeMS = this._currentTimeMS = openfl_Lib.getTimer();
            this.stage.addEventListener("keyDown", ($_ = this.keyboard, $bind($_, $_.HandleKeyDown)));
            this.stage.addEventListener("keyUp", ($_ = this.keyboard, $bind($_, $_.HandleKeyUp)));
            this.addEventListener("enterFrame", $bind(this, this.onEnterFrame));
            this.initialize()
        },
        onEnterFrame: function(event) {
            this._currentTimeMS = openfl_Lib.getTimer();
            this._deltaTimeMS = this._currentTimeMS - this._lastStepTimeMS;
            this._deltaStepTimeMS += this._deltaTimeMS;
            this.processScheduledTasks(this._deltaTimeMS);
            this.scheduler.update();
            if (this._deltaStepTimeMS >= this._timeStepMS) {
                this.keyboard.Update();
                this._deltaStepTimeMS -= this._timeStepMS;
                this.entities.update(this._timeStepS);
                this.scenes.update(this._timeStepS);
                this._lastStepTimeMS = this._currentTimeMS;
                this.onUpdate.emit(this._timeStepS)
            }
            this.scenes.lateUpdate();
            this._lastStepTimeMS = this._currentTimeMS
        },
        processScheduledTasks: function(deltaTime) {
            var _g_head = this._scheduledTasks.h;
            var _g_val = null;
            while (_g_head != null) {
                var task;
                task = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                task.due_in -= deltaTime;
                if (task.due_in <= 0) {
                    task.callback();
                    this._scheduledTasks.remove(task)
                }
            }
        },
        initialize: function() {},
        setStartDate: function(pDate) {
            if (pDate != null) {
                this._currentDate = pDate
            }
        },
        time: null,
        get_time: function() {
            return this._currentDate.getTime() + (openfl_Lib.getTimer() - this._creationTime)
        },
        scheduleTask: function(pTime, task) {
            var schedule = {
                id: (function($this) {
                    var $r;
                    var a = ++oaktree_core_Engine._scheduleCount;
                    $r = Std["int"](_$UInt_UInt_$Impl_$.toFloat(a) % _$UInt_UInt_$Impl_$.toFloat(2147483647));
                    return $r
                }(this)),
                due_in: pTime,
                callback: task
            };
            this._scheduledTasks.push(schedule);
            return schedule.id
        },
        __class__: oaktree_core_Engine,
        __properties__: $extend(openfl_display_Sprite.prototype.__properties__, {
            get_time: "get_time"
        })
    });
    var Main = function() {
        oaktree_core_Engine.call(this, 30)
    };
    $hxClasses.Main = Main;
    Main.__name__ = ["Main"];
    Main.__super__ = oaktree_core_Engine;
    Main.prototype = $extend(oaktree_core_Engine.prototype, {
        shopDialog: null,
        initialize: function() {
            Core.init(this.stage)
        },
        resize: function(newWidth, newHeight) {
            Core.views.onResize(newWidth, newHeight)
        },
        onStageResize: function(e) {
            this.resize(this.stage.stageWidth, this.stage.stageHeight)
        },
        __class__: Main
    });
    var DocumentClass = function(current) {
        current.addChild(this);
        Main.call(this);
        this.dispatchEvent(new openfl_events_Event("addedToStage", false, false))
    };
    $hxClasses.DocumentClass = DocumentClass;
    DocumentClass.__name__ = ["DocumentClass"];
    DocumentClass.__super__ = Main;
    DocumentClass.prototype = $extend(Main.prototype, {
        __class__: DocumentClass
    });
    var msignal_Signal = function(valueClasses) {
        if (valueClasses == null) {
            valueClasses = []
        }
        this.valueClasses = valueClasses;
        this.slots = msignal_SlotList.NIL;
        this.priorityBased = false
    };
    $hxClasses["msignal.Signal"] = msignal_Signal;
    msignal_Signal.__name__ = ["msignal", "Signal"];
    msignal_Signal.prototype = {
        valueClasses: null,
        numListeners: null,
        slots: null,
        priorityBased: null,
        add: function(listener) {
            return this.registerListener(listener)
        },
        addOnce: function(listener) {
            return this.registerListener(listener, true)
        },
        addWithPriority: function(listener, priority) {
            if (priority == null) {
                priority = 0
            }
            return this.registerListener(listener, false, priority)
        },
        addOnceWithPriority: function(listener, priority) {
            if (priority == null) {
                priority = 0
            }
            return this.registerListener(listener, true, priority)
        },
        remove: function(listener) {
            var slot = this.slots.find(listener);
            if (slot == null) {
                return null
            }
            this.slots = this.slots.filterNot(listener);
            return slot
        },
        removeAll: function() {
            this.slots = msignal_SlotList.NIL
        },
        registerListener: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            if (this.registrationPossible(listener, once)) {
                var newSlot = this.createSlot(listener, once, priority);
                if (!this.priorityBased && priority != 0) {
                    this.priorityBased = true
                }
                if (!this.priorityBased && priority == 0) {
                    this.slots = this.slots.prepend(newSlot)
                } else {
                    this.slots = this.slots.insertWithPriority(newSlot)
                }
                return newSlot
            }
            return this.slots.find(listener)
        },
        registrationPossible: function(listener, once) {
            if (!this.slots.nonEmpty) {
                return true
            }
            var existingSlot = this.slots.find(listener);
            if (existingSlot == null) {
                return true
            }
            if (existingSlot.once != once) {
                throw new js__$Boot_HaxeError("You cannot addOnce() then add() the same listener without removing the relationship first.")
            }
            return false
        },
        createSlot: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            return null
        },
        get_numListeners: function() {
            return this.slots.get_length()
        },
        __class__: msignal_Signal,
        __properties__: {
            get_numListeners: "get_numListeners"
        }
    };
    var msignal_Signal1 = function(type) {
        msignal_Signal.call(this, [type])
    };
    $hxClasses["msignal.Signal1"] = msignal_Signal1;
    msignal_Signal1.__name__ = ["msignal", "Signal1"];
    msignal_Signal1.__super__ = msignal_Signal;
    msignal_Signal1.prototype = $extend(msignal_Signal.prototype, {
        dispatch: function(value) {
            var slotsToProcess = this.slots;
            while (slotsToProcess.nonEmpty) {
                slotsToProcess.head.execute(value);
                slotsToProcess = slotsToProcess.tail
            }
        },
        createSlot: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            return new msignal_Slot1(this, listener, once, priority)
        },
        __class__: msignal_Signal1
    });
    var msignal_SlotList = function(head, tail) {
        this.nonEmpty = false;
        if (head == null && tail == null) {
            if (msignal_SlotList.NIL != null) {
                throw new js__$Boot_HaxeError("Parameters head and tail are null. Use the NIL element instead.")
            }
            this.nonEmpty = false
        } else {
            if (head == null) {
                throw new js__$Boot_HaxeError("Parameter head cannot be null.")
            } else {
                this.head = head;
                if (tail == null) {
                    this.tail = msignal_SlotList.NIL
                } else {
                    this.tail = tail
                }
                this.nonEmpty = true
            }
        }
    };
    $hxClasses["msignal.SlotList"] = msignal_SlotList;
    msignal_SlotList.__name__ = ["msignal", "SlotList"];
    msignal_SlotList.prototype = {
        head: null,
        tail: null,
        nonEmpty: null,
        length: null,
        get_length: function() {
            if (!this.nonEmpty) {
                return 0
            }
            if (this.tail == msignal_SlotList.NIL) {
                return 1
            }
            var result = 0;
            var p = this;
            while (p.nonEmpty) {
                ++result;
                p = p.tail
            }
            return result
        },
        prepend: function(slot) {
            return new msignal_SlotList(slot, this)
        },
        append: function(slot) {
            if (slot == null) {
                return this
            }
            if (!this.nonEmpty) {
                return new msignal_SlotList(slot)
            }
            if (this.tail == msignal_SlotList.NIL) {
                return new msignal_SlotList(slot).prepend(this.head)
            }
            var wholeClone = new msignal_SlotList(this.head);
            var subClone = wholeClone;
            var current = this.tail;
            while (current.nonEmpty) {
                subClone = subClone.tail = new msignal_SlotList(current.head);
                current = current.tail
            }
            subClone.tail = new msignal_SlotList(slot);
            return wholeClone
        },
        insertWithPriority: function(slot) {
            if (!this.nonEmpty) {
                return new msignal_SlotList(slot)
            }
            var priority = slot.priority;
            if (priority >= this.head.priority) {
                return this.prepend(slot)
            }
            var wholeClone = new msignal_SlotList(this.head);
            var subClone = wholeClone;
            var current = this.tail;
            while (current.nonEmpty) {
                if (priority > current.head.priority) {
                    subClone.tail = current.prepend(slot);
                    return wholeClone
                }
                subClone = subClone.tail = new msignal_SlotList(current.head);
                current = current.tail
            }
            subClone.tail = new msignal_SlotList(slot);
            return wholeClone
        },
        filterNot: function(listener) {
            if (!this.nonEmpty || listener == null) {
                return this
            }
            if (Reflect.compareMethods(this.head.listener, listener)) {
                return this.tail
            }
            var wholeClone = new msignal_SlotList(this.head);
            var subClone = wholeClone;
            var current = this.tail;
            while (current.nonEmpty) {
                if (Reflect.compareMethods(current.head.listener, listener)) {
                    subClone.tail = current.tail;
                    return wholeClone
                }
                subClone = subClone.tail = new msignal_SlotList(current.head);
                current = current.tail
            }
            return this
        },
        contains: function(listener) {
            if (!this.nonEmpty) {
                return false
            }
            var p = this;
            while (p.nonEmpty) {
                if (Reflect.compareMethods(p.head.listener, listener)) {
                    return true
                }
                p = p.tail
            }
            return false
        },
        find: function(listener) {
            if (!this.nonEmpty) {
                return null
            }
            var p = this;
            while (p.nonEmpty) {
                if (Reflect.compareMethods(p.head.listener, listener)) {
                    return p.head
                }
                p = p.tail
            }
            return null
        },
        __class__: msignal_SlotList,
        __properties__: {
            get_length: "get_length"
        }
    };
    var msignal_Signal0 = function() {
        msignal_Signal.call(this)
    };
    $hxClasses["msignal.Signal0"] = msignal_Signal0;
    msignal_Signal0.__name__ = ["msignal", "Signal0"];
    msignal_Signal0.__super__ = msignal_Signal;
    msignal_Signal0.prototype = $extend(msignal_Signal.prototype, {
        dispatch: function() {
            var slotsToProcess = this.slots;
            while (slotsToProcess.nonEmpty) {
                slotsToProcess.head.execute();
                slotsToProcess = slotsToProcess.tail
            }
        },
        createSlot: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            return new msignal_Slot0(this, listener, once, priority)
        },
        __class__: msignal_Signal0
    });
    var Core = function() {};
    $hxClasses.Core = Core;
    Core.__name__ = ["Core"];
    Core.__properties__ = {
        get_fontName: "get_fontName",
        get_assets: "get_assets",
        get_states: "get_states",
        get_events: "get_events",
        get_height: "get_height",
        get_width: "get_width"
    };
    Core.init = function(_stage) {
        Core.stage = _stage;
        Core.storage = new agario_module_dom_StorageManager();
        Core.saveSlot = new oaktree_core_io_KVSaveSlot("agar_settings");
        Core.saveSlot.load();
        oaktree_OakTree.commands.initialize(agario_config_CommandMap.list);
        oaktree_ext_ui_views_GenericDialog.allowHighDpi = true;
        Core.environment = new agario_services_EnvironmentService();
        Core.environment.initialize();
        var delorean = Core.getQueryString("delorean");
        if (delorean != null) {
            var nDate;
            var t = parseFloat(delorean);
            var d = new Date();
            d.setTime(t);
            nDate = d;
            oaktree_OakTree.engine.setStartDate(nDate)
        }
        Core.get_states().enable("state_main_screen");
        Core.get_states().addEventListener("oaktree.utils.state_change", Core.onStateChange);
        oaktree_ext_services_ServiceManager.initialize(agario_config_Services.getModelList());
        Core._assets = new oaktree_display_AssetsManager(agario_config_Assets.INGAME_ATLAS);
        Core.services = new agario_services_ServicesManager();
        Core.views = new agario_views_ViewManager();
        Core.models = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
        Core.remoteAssets = new oaktree_display_RemoteAssetLibrary();
        Core.user = new agario_module_shop_models_GameUser("", "");
        Core.gifts = new agario_module_gift_controller_GiftsController();
        Core.quests = new agario_module_quests_controller_QuestsController();
        Core.ui = new agario_module_dom_UIManager();
        Core.ui.network.params = Core.getAllQueryStrings();
        Core.get_assets().onInit.connect(Core.checkIfReady, null, 1);
        Core.models.onConfigurationLoaded.add(Core.onConfigurationLoaded);
        Core.get_events().listen(agario_AgarioEvents.START_GAME, Core.onStartGame);
        Core.checkIfReady();
        Core.services.promo.updateSignal.add(Core.onUpdate_Promos);
        Core.user.onUserDataUpdate.add(Core.onUpdateUser);
        Core.setFpsCap(false);
        Core.get_events().listen("agario.module.gift.events.ViewEvent.send_gifts_complete", Core.sendGoliathAnalytics);
        Core.get_events().listen("shop_event::update_connecting_status", Core.updateConnectingStatus);
        Core.get_events().fire("shop_event::update_connecting_status")
    };
    Core.onUpdate_Promos = function() {
        if (!Core.user.isGuest && Core.user.userInfo.isNewUser) {
            Core.processUpgradeReward();
            Core.services.promo.updateSignal.remove(Core.onUpdate_Promos)
        }
    };
    Core.onConfigurationLoaded = function() {
        Core.initialized = true;
        agario_models_VersionModel.CONFIG_NUMBER = agario_services_ConfigurationService.configID;
        agario_models_VersionModel.updateTag();
        Core.onReady.dispatch();
        if (Core.getQueryString("fb_source") == "notification") {
            Core.openGiftCenterInbox()
        }
        Core.user.dispatchPromoEvents();
        Core.get_events().fire("shop_event::configComplete")
    };
    Core.onStartGame = function(e) {
        if (e.data != null && e.data.mode != null) {
            Core.ui.state.questOpen = true;
            Core.ui.mainUI.setGameMode(e.data.mode)
        }
        Core.startGame()
    };
    Core.startGame = function() {
        Core.ui.mainUI.startGame()
    };
    Core.showGifting = function() {
        if (Core.user.isGuest) {
            Core.get_events().dispatchEventWith("ShopEvent::show_guest_conversion", {
                google: false,
                save: false
            })
        } else {
            if (Core.hasUserFriendsPermissions()) {
                Core.services.gameui.showContainer();
                Core.get_events().dispatchEventWith("shop_event::showGiftCenter")
            } else {
                Core.requestExtraPermissions()
            }
        }
    };
    Core.checkQuestActive = function() {
        return Core.quests.getActiveQuest() != null
    };
    Core.requestExtraPermissions = function() {
        var request = window.requestExtraPermissions("user_friends")
    };
    Core.hasUserFriendsPermissions = function() {
        var granted = false;
        if (window.checkFacebookPermissions) {
            granted = window.checkFacebookPermissions("user_friends")
        }
        return granted
    };
    Core.openGiftCenter = function() {
        Core.get_events().fire("shop_event::showGiftCenter")
    };
    Core.openGiftCenterInbox = function() {
        Core.get_events().fire("agario.module.gift.events.ViewEvent.open_gift_inbox")
    };
    Core.openQuestsDialog = function() {
        if (Core.user.isGuest) {
            Core.get_events().dispatchEventWith("ShopEvent::show_guest_conversion")
        } else {
            Core.get_events().fire("shop_event::openQuestsDialog")
        }
    };
    Core.get_width = function() {
        return Core.stage.stageWidth
    };
    Core.get_height = function() {
        return Core.stage.stageHeight
    };
    Core.resetStageFocus = function() {
        openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage)
    };
    Core.getTime = function() {
        return oaktree_OakTree.engine.get_time()
    };
    Core.notifyToken = function(token) {
        Core.ui.notifyToken(token)
    };
    Core.getQuestProgress = function(foodEaten, highestMass, timeAlive, virusesEaten, cellsEaten, topPosition) {
        return Core.quests.getProgress(foodEaten, highestMass, timeAlive, virusesEaten, cellsEaten, topPosition)
    };
    Core.getQuestProgressLabel = function(progress) {
        Core.get_events().fire("shop_event::on_quest_progress_label_update", progress);
        return Core.progressLabel
    };
    Core.setProgressLabel = function(label) {
        Core.progressLabel = label
    };
    Core.checkQuestComplete = function(progress) {
        var quest = Core.quests.getActiveQuest();
        if (quest != null) {
            if (quest.get_type() == "top_position") {
                return progress <= js_Boot.__cast(quest.get_goal(), Int)
            } else {
                if (quest.get_type() == "time_total") {
                    var b = quest.get_goal();
                    return progress / 1000 >= _$UInt_UInt_$Impl_$.toFloat(b)
                } else {
                    return progress >= js_Boot.__cast(quest.get_goal(), Int)
                }
            }
        }
        return false
    };
    Core.updateConnectingStatus = function(e) {
        var message = "";
        if (Core.ui.network.get_serverIP() == "" || Core.ui.network.get_serverIP() == null) {
            message = "Finding arena..."
        } else {
            if (!Core.ui.network.connected) {
                message = "Connecting to arena..."
            } else {
                if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Facebook && !Core.user.loggedIn) {
                    message = "Logging in to Facebook..."
                } else {
                    if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google && !Core.user.loggedIn) {
                        message = "Logging in to Google+..."
                    } else {
                        return
                    }
                }
            }
        }
        Core.ui.mainUI.updateConnectingMessage(message)
    };
    Core.facebookLogin = function(onComplete) {
        Core.disableHUD();
        window.facebookLogin(function(res) {
            if (res) {
                Core.onFbLoginComplete(res.authResponse != null);
                onComplete(res.authResponse != null)
            } else {
                Core.onFbLoginComplete(false);
                onComplete(false)
            }
        })
    };
    Core.disableHUD = function() {
        Core.services.gameui.lockContainer()
    };
    Core.enableHUD = function() {
        Core.services.gameui.unlockContainer();
        Core.get_events().dispatchEventWith("deactivate");
        Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP")
    };
    Core.showIncentive = function() {
        Core.get_events().fire("ShopEvent::show_guest_conversion", {
            google: true,
            save: true
        })
    };
    Core.getQueryString = function(parameter) {
        if (Core.environment.webEnv.hasParameter(parameter)) {
            return Core.environment.webEnv.getParameter(parameter)
        } else {
            return null
        }
    };
    Core.processUpgradeReward = function() {
        var bundleId = Core.models.getNewAccountRealmBundleId();
        var products = Core.models.walletProductBundlesModel.getProductsByBundleId(bundleId);
        var foundAll = Core.models.findProductsOnWallet(products);
        if (foundAll) {
            Core.services.gameui.showContainer();
            var rewardDialog = new agario_module_shop_view_UpgradeRewardDialog(bundleId);
            Core.views.openView(rewardDialog, {
                priority: 1,
                animate: true,
                allowClickClose: true
            })
        } else {
            null
        }
    };
    Core.sendGoogleAnalyticsEvent = function(eventCategory, eventAction, eventLabel, nonInteraction) {
        if (nonInteraction == null) {
            nonInteraction = false
        }
        ga("send", "event", {
            eventCategory: eventCategory,
            eventAction: eventAction,
            eventLabel: eventLabel,
            nonInteraction: nonInteraction
        })
    };
    Core.setFpsCap = function(value) {
        if (window.core) {
            window.core.setFpsCap(value ? 30 : -1)
        }
    };
    Core.writeToConsole = function(s, opts) {
        window.console.log(s, opts)
    };
    Core.onFbLoginComplete = function(success) {
        if (success) {
            Core.ui.mainUI.hideShop(0)
        }
        Core.enableHUD()
    };
    Core.checkIfReady = function() {
        var assetsInitialized = Core._assets.get_initialized();
        if (!assetsInitialized) {
            return
        }
        Core.onReady.dispatch()
    };
    Core.get_assets = function() {
        return Core._assets
    };
    Core.get_fontName = function() {
        return "_sans"
    };
    Core.get_events = function() {
        return oaktree_OakTree.events
    };
    Core.get_states = function() {
        return oaktree_OakTree.engine.states
    };
    Core.getAllQueryStrings = function() {
        var ret = "";
        var map = Core.environment.webEnv.getQueryString();
        var $it0 = map.keys();
        while ($it0.hasNext()) {
            var key = $it0.next();
            if (key != "undefined" && key != "" && key != "sip" && key != "ip") {
                ret += key + "=" + Core.getQueryString(key) + "&"
            }
        }
        return ret
    };
    Core.sendGoliathAnalytics = function(e) {
        window.MCSDK.analytics.sendEvent("gift_invite", {
            action: e.data.eventAction,
            friends_invitable: e.data.totalFriends,
            friends_playing: e.data.playingFriends
        })
    };
    Core.onUpdateUser = function() {
        if (Core.user.facebookFriends != null) {
            if (Core.user.loggedIn) {
                var friends = Core.user.friendsToString(Core.user.facebookFriends);
                if (Core.lastSentFriendslistMessage != friends) {
                    Core.lastSentFriendslistMessage = friends;
                    if (window.core) {
                        window.core.sendFacebookData(friends)
                    }
                }
            }
            if (Core.nextServer == null && Core.ui.network.hasRegion() && !Core.hasDoneFindServerWithFriends) {
                Core.nextServer = "";
                Core.ui.network.findServerWithFriends(Core.user.facebookFriends, Core.onFindServerWithFriendsSuccess, Core.onFindServerWithFriendsError);
                Core.hasDoneFindServerWithFriends = true
            }
        }
    };
    Core.resetFindServerWithFriends = function() {
        Core.hasDoneFindServerWithFriends = false;
        Core.nextServer = null
    };
    Core.onFindServerWithFriendsSuccess = function(result) {
        var pResponse = haxe_Json.parse(result);
        Core.nextServer = pResponse.ip
    };
    Core.onFindServerWithFriendsError = function() {
        null
    };
    Core.onStateChange = function(e) {
        if (e.state == "state_game_over" && !e.enabled) {
            if (Core.nextServer != null && Core.nextServer != "" && Core.nextServer != Core.ui.network.get_serverIP()) {
                Core.ui.network.connect(Core.nextServer)
            }
            Core.nextServer = ""
        }
    };
    Core.onDisconnect = function() {
        Core.ui.onDisconnect();
        if (Core.ui.state.inGame) {
            Core.ui.state.inGame = false;
            Core.ui.state.isPlayerAlive = false;
            Core.ui.mainUI.showNickDialog(0)
        }
        if (Core.disconnectDialog == null) {
            Core.disconnectDialog = new agario_views_DisconnectedDialog();
            Core.views.openView(Core.disconnectDialog, {
                priority: 5,
                animate: true,
                allowClickClose: false
            })
        }
    };
    Core.onConnect = function() {
        Core.ui.doLogin();
        Core.ui.partyMode.createPartyToken();
        Core.ui.mainUI.updateButtonsState();
        if (Core.disconnectDialog != null) {
            Core.disconnectDialog.close();
            Core.disconnectDialog = null
        }
        if (Core.firstConnect) {
            Core.writeToConsole("%cConnected to arena!", "background: green; color: white;");
            Core.get_events().fire("shop_event::update_connecting_status");
            Core.firstConnect = false
        }
    };
    Core.getTestGroup = function(testId) {
        var items = Core.models.shopData.abTestsSettings.filter(function(item) {
            return item.key == testId
        });
        if (items.length > 0) {
            var index = -1;
            index = cxApi.chooseVariation();
            var item1 = items[0];
            if (index == 0) {
                return item1.get_abTest()._default
            } else {
                if (index == 1) {
                    return item1.get_abTest()._enabled
                }
            }
        }
        return null
    };
    var DateTools = function() {};
    $hxClasses.DateTools = DateTools;
    DateTools.__name__ = ["DateTools"];
    DateTools.__format_get = function(d, e) {
        switch (e) {
            case "%":
                return "%";
            case "C":
                return StringTools.lpad(Std.string(Std["int"](d.getFullYear() / 100)), "0", 2);
            case "d":
                return StringTools.lpad(Std.string(d.getDate()), "0", 2);
            case "D":
                return DateTools.__format(d, "%m/%d/%y");
            case "e":
                return Std.string(d.getDate());
            case "F":
                return DateTools.__format(d, "%Y-%m-%d");
            case "H":
            case "k":
                return StringTools.lpad(Std.string(d.getHours()), e == "H" ? "0" : " ", 2);
            case "I":
            case "l":
                var hour = d.getHours() % 12;
                return StringTools.lpad(Std.string(hour == 0 ? 12 : hour), e == "I" ? "0" : " ", 2);
            case "m":
                return StringTools.lpad(Std.string(d.getMonth() + 1), "0", 2);
            case "M":
                return StringTools.lpad(Std.string(d.getMinutes()), "0", 2);
            case "n":
                return "\n";
            case "p":
                if (d.getHours() > 11) {
                    return "PM"
                } else {
                    return "AM"
                }
                break;
            case "r":
                return DateTools.__format(d, "%I:%M:%S %p");
            case "R":
                return DateTools.__format(d, "%H:%M");
            case "s":
                return Std.string(Std["int"](d.getTime() / 1000));
            case "S":
                return StringTools.lpad(Std.string(d.getSeconds()), "0", 2);
            case "t":
                return "\t";
            case "T":
                return DateTools.__format(d, "%H:%M:%S");
            case "u":
                var t = d.getDay();
                if (t == 0) {
                    return "7"
                } else {
                    if (t == null) {
                        return "null"
                    } else {
                        return "" + t
                    }
                }
                break;
            case "w":
                return Std.string(d.getDay());
            case "y":
                return StringTools.lpad(Std.string(d.getFullYear() % 100), "0", 2);
            case "Y":
                return Std.string(d.getFullYear());
            default:
                throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.")
        }
    };
    DateTools.__format = function(d, f) {
        var r = new StringBuf();
        var p = 0;
        while (true) {
            var np = f.indexOf("%", p);
            if (np < 0) {
                break
            }
            r.addSub(f, p, np - p);
            r.add(DateTools.__format_get(d, HxOverrides.substr(f, np + 1, 1)));
            p = np + 2
        }
        r.addSub(f, p, f.length - p);
        return r.b
    };
    DateTools.format = function(d, f) {
        return DateTools.__format(d, f)
    };
    DateTools.getMonthDays = function(d) {
        var month = d.getMonth();
        var year = d.getFullYear();
        if (month != 1) {
            return DateTools.DAYS_OF_MONTH[month]
        }
        var isB = year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
        if (isB) {
            return 29
        } else {
            return 28
        }
    };
    var EReg = function(r, opt) {
        opt = opt.split("u").join("");
        this.r = new RegExp(r, opt)
    };
    $hxClasses.EReg = EReg;
    EReg.__name__ = ["EReg"];
    EReg.prototype = {
        r: null,
        match: function(s) {
            if (this.r.global) {
                this.r.lastIndex = 0
            }
            this.r.m = this.r.exec(s);
            this.r.s = s;
            return this.r.m != null
        },
        matched: function(n) {
            if (this.r.m != null && n >= 0 && n < this.r.m.length) {
                return this.r.m[n]
            } else {
                throw new js__$Boot_HaxeError("EReg::matched")
            }
        },
        matchedRight: function() {
            if (this.r.m == null) {
                throw new js__$Boot_HaxeError("No string matched")
            }
            var sz = this.r.m.index + this.r.m[0].length;
            return HxOverrides.substr(this.r.s, sz, this.r.s.length - sz)
        },
        matchedPos: function() {
            if (this.r.m == null) {
                throw new js__$Boot_HaxeError("No string matched")
            }
            return {
                pos: this.r.m.index,
                len: this.r.m[0].length
            }
        },
        matchSub: function(s, pos, len) {
            if (len == null) {
                len = -1
            }
            if (this.r.global) {
                this.r.lastIndex = pos;
                this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s, 0, pos + len));
                var b = this.r.m != null;
                if (b) {
                    this.r.s = s
                }
                return b
            } else {
                var b1 = this.match(len < 0 ? HxOverrides.substr(s, pos, null) : HxOverrides.substr(s, pos, len));
                if (b1) {
                    this.r.s = s;
                    this.r.m.index += pos
                }
                return b1
            }
        },
        split: function(s) {
            var d = "#__delim__#";
            return s.replace(this.r, d).split(d)
        },
        replace: function(s, by) {
            return s.replace(this.r, by)
        },
        map: function(s, f) {
            var offset = 0;
            var buf = new StringBuf();
            do {
                if (offset >= s.length) {
                    break
                } else {
                    if (!this.matchSub(s, offset)) {
                        buf.add(HxOverrides.substr(s, offset, null));
                        break
                    }
                }
                var p = this.matchedPos();
                buf.add(HxOverrides.substr(s, offset, p.pos - offset));
                buf.add(f(this));
                if (p.len == 0) {
                    buf.add(HxOverrides.substr(s, p.pos, 1));
                    offset = p.pos + 1
                } else {
                    offset = p.pos + p.len
                }
            } while (this.r.global);
            if (!this.r.global && offset > 0 && offset < s.length) {
                buf.add(HxOverrides.substr(s, offset, null))
            }
            return buf.b
        },
        __class__: EReg
    };
    var HxOverrides = function() {};
    $hxClasses.HxOverrides = HxOverrides;
    HxOverrides.__name__ = ["HxOverrides"];
    HxOverrides.dateStr = function(date) {
        var m = date.getMonth() + 1;
        var d = date.getDate();
        var h = date.getHours();
        var mi = date.getMinutes();
        var s = date.getSeconds();
        return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s)
    };
    HxOverrides.strDate = function(s) {
        var _g = s.length;
        switch (_g) {
            case 8:
                var k = s.split(":");
                var d = new Date();
                d.setTime(0);
                d.setUTCHours(k[0]);
                d.setUTCMinutes(k[1]);
                d.setUTCSeconds(k[2]);
                return d;
            case 10:
                var k1 = s.split("-");
                return new Date(k1[0], k1[1] - 1, k1[2], 0, 0, 0);
            case 19:
                var k2 = s.split(" ");
                var y = k2[0].split("-");
                var t = k2[1].split(":");
                return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);
            default:
                throw new js__$Boot_HaxeError("Invalid date format : " + s)
        }
    };
    HxOverrides.cca = function(s, index) {
        var x = s.charCodeAt(index);
        if (x != x) {
            return undefined
        }
        return x
    };
    HxOverrides.substr = function(s, pos, len) {
        if (pos != null && pos != 0 && len != null && len < 0) {
            return ""
        }
        if (len == null) {
            len = s.length
        }
        if (pos < 0) {
            pos = s.length + pos;
            if (pos < 0) {
                pos = 0
            }
        } else {
            if (len < 0) {
                len = s.length + len - pos
            }
        }
        return s.substr(pos, len)
    };
    HxOverrides.indexOf = function(a, obj, i) {
        var len = a.length;
        if (i < 0) {
            i += len;
            if (i < 0) {
                i = 0
            }
        }
        while (i < len) {
            if (a[i] === obj) {
                return i
            }
            i++
        }
        return -1
    };
    HxOverrides.lastIndexOf = function(a, obj, i) {
        var len = a.length;
        if (i >= len) {
            i = len - 1
        } else {
            if (i < 0) {
                i += len
            }
        }
        while (i >= 0) {
            if (a[i] === obj) {
                return i
            }
            i--
        }
        return -1
    };
    HxOverrides.remove = function(a, obj) {
        var i = HxOverrides.indexOf(a, obj, 0);
        if (i == -1) {
            return false
        }
        a.splice(i, 1);
        return true
    };
    HxOverrides.iter = function(a) {
        return {
            cur: 0,
            arr: a,
            hasNext: function() {
                return this.cur < this.arr.length
            },
            next: function() {
                return this.arr[this.cur++]
            }
        }
    };
    var Lambda = function() {};
    $hxClasses.Lambda = Lambda;
    Lambda.__name__ = ["Lambda"];
    Lambda.array = function(it) {
        var a = [];
        var $it0 = $iterator(it)();
        while ($it0.hasNext()) {
            var i = $it0.next();
            a.push(i)
        }
        return a
    };
    Lambda.has = function(it, elt) {
        var $it0 = $iterator(it)();
        while ($it0.hasNext()) {
            var x = $it0.next();
            if (x == elt) {
                return true
            }
        }
        return false
    };
    Lambda.exists = function(it, f) {
        var $it0 = $iterator(it)();
        while ($it0.hasNext()) {
            var x = $it0.next();
            if (f(x)) {
                return true
            }
        }
        return false
    };
    Lambda.fold = function(it, f, first) {
        var $it0 = $iterator(it)();
        while ($it0.hasNext()) {
            var x = $it0.next();
            first = f(x, first)
        }
        return first
    };
    Lambda.count = function(it, pred) {
        var n = 0;
        if (pred == null) {
            var $it0 = $iterator(it)();
            while ($it0.hasNext()) {
                var _ = $it0.next();
                n++
            }
        } else {
            var $it1 = $iterator(it)();
            while ($it1.hasNext()) {
                var x = $it1.next();
                if (pred(x)) {
                    n++
                }
            }
        }
        return n
    };
    var List = function() {
        this.length = 0
    };
    $hxClasses.List = List;
    List.__name__ = ["List"];
    List.prototype = {
        h: null,
        q: null,
        length: null,
        add: function(item) {
            var x = [item];
            if (this.h == null) {
                this.h = x
            } else {
                this.q[1] = x
            }
            this.q = x;
            this.length++
        },
        push: function(item) {
            var x = [item, this.h];
            this.h = x;
            if (this.q == null) {
                this.q = x
            }
            this.length++
        },
        first: function() {
            if (this.h == null) {
                return null
            } else {
                return this.h[0]
            }
        },
        last: function() {
            if (this.q == null) {
                return null
            } else {
                return this.q[0]
            }
        },
        pop: function() {
            if (this.h == null) {
                return null
            }
            var x = this.h[0];
            this.h = this.h[1];
            if (this.h == null) {
                this.q = null
            }
            this.length--;
            return x
        },
        isEmpty: function() {
            return this.h == null
        },
        clear: function() {
            this.h = null;
            this.q = null;
            this.length = 0
        },
        remove: function(v) {
            var prev = null;
            var l = this.h;
            while (l != null) {
                if (l[0] == v) {
                    if (prev == null) {
                        this.h = l[1]
                    } else {
                        prev[1] = l[1]
                    }
                    if (this.q == l) {
                        this.q = prev
                    }
                    this.length--;
                    return true
                }
                prev = l;
                l = l[1]
            }
            return false
        },
        iterator: function() {
            return new _$List_ListIterator(this.h)
        },
        __class__: List
    };
    var _$List_ListIterator = function(head) {
        this.head = head;
        this.val = null
    };
    $hxClasses["_List.ListIterator"] = _$List_ListIterator;
    _$List_ListIterator.__name__ = ["_List", "ListIterator"];
    _$List_ListIterator.prototype = {
        head: null,
        val: null,
        hasNext: function() {
            return this.head != null
        },
        next: function() {
            this.val = this.head[0];
            this.head = this.head[1];
            return this.val
        },
        __class__: _$List_ListIterator
    };
    var ManifestResources = function() {};
    $hxClasses.ManifestResources = ManifestResources;
    ManifestResources.__name__ = ["ManifestResources"];
    ManifestResources.init = function(config) {
        ManifestResources.preloadLibraries = [];
        ManifestResources.preloadLibraryNames = [];
        var rootPath = null;
        if (config != null && Object.prototype.hasOwnProperty.call(config, "rootPath")) {
            rootPath = Reflect.field(config, "rootPath")
        }
        if (rootPath == null) {
            rootPath = ""
        }
        lime_utils_Assets.defaultRootPath = rootPath;
        var data;
        var manifest;
        var library;
        data = '{"name":null,"assets":"aoy4:pathy32:core-assets%2FClose_disabled.pngy4:sizei508y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y25:core-assets%2Foaktree.pngR2i28197R3R4R5R7R6tgoR0y23:core-assets%2FClose.pngR2i501R3R4R5R8R6tgoR0y21:atlas%2Fmain_shop.xmlR2i4494R3y4:TEXTR5R9R6tgoR0y21:atlas%2Fmain_shop.pngR2i317627R3R4R5R11R6tgoR0y27:img%2Fmassboost_2x_shop.pngR2i7704R3R4R5R12R6tgoR0y23:img%2Fcurrency_icon.pngR2i1450R3R4R5R13R6tgoR0y25:img%2Fxpboost_3x_shop.pngR2i9256R3R4R5R14R6tgoR0y26:img%2Fprofilepic_guest.pngR2i18536R3R4R5R15R6tgoR0y27:img%2Fmassboost_3x_shop.pngR2i7892R3R4R5R16R6tgoR0y25:img%2Fxpboost_2x_shop.pngR2i9118R3R4R5R17R6tgoR0y40:particle%2FDaily_Quest_Sparkles_1a.plistR2i3053R3R10R5R18R6tgoR0y37:particle%2FLevelUpSlotBarParticle.pngR2i2011R3R4R5R19R6tgoR0y25:particle%2FSparkle_1a.pngR2i1506R3R4R5R20R6tgoR0y25:particle%2FSparkle_2c.pngR2i1691R3R4R5R21R6tgoR0y39:particle%2FDaily_Quest_Sparkles_2.plistR2i3054R3R10R5R22R6tgoR0y24:particle%2FSparkle_1.pngR2i19350R3R4R5R23R6tgoR0y40:particle%2FDaily_Quest_Sparkles_1c.plistR2i3053R3R10R5R24R6tgoR0y34:particle%2FDaily_Quest_Chest.plistR2i3057R3R10R5R25R6tgoR0y40:particle%2FDaily_Quest_Sparkles_2a.plistR2i3055R3R10R5R26R6tgoR0y39:particle%2FDaily_Quest_Sparkles_1.plistR2i3052R3R10R5R27R6tgoR0y24:particle%2FSparkle_2.pngR2i1690R3R4R5R28R6tgoR0y40:particle%2FDaily_Quest_Sparkles_2c.plistR2i3053R3R10R5R29R6tgoR0y40:particle%2FDaily_Quest_Sparkles_2b.plistR2i3055R3R10R5R30R6tgoR0y25:particle%2FSparkle_2b.pngR2i1690R3R4R5R31R6tgoR0y25:particle%2FSparkle_1b.pngR2i1504R3R4R5R32R6tgoR0y25:particle%2FSparkle_2a.pngR2i1694R3R4R5R33R6tgoR0y25:particle%2FSparkle_1c.pngR2i1507R3R4R5R34R6tgoR0y40:particle%2FDaily_Quest_Sparkles_1b.plistR2i3053R3R10R5R35R6tgoR0y38:particle%2FLevelUpSlotBar-ipadhd.plistR2i2864R3R10R5R36R6tgh","version":2,"libraryArgs":[],"libraryType":null}';
        manifest = lime_utils_AssetManifest.parse(data, rootPath);
        library = lime_utils_AssetLibrary.fromManifest(manifest);
        lime_utils_Assets.registerLibrary("default", library);
        library = lime_utils_Assets.getLibrary("default");
        if (library != null) {
            ManifestResources.preloadLibraries.push(library)
        } else {
            ManifestResources.preloadLibraryNames.push("default")
        }
    };
    Math.__name__ = ["Math"];
    var MiniclipAPI = $hx_exports.MiniclipAPI = function(_container, overlayTarget) {
        if (overlayTarget == null) {
            overlayTarget = ""
        }
        this._inGame = false;
        this.coreWasLoaded = false;
        this.gamepadSupportActive = false;
        MiniclipAPI.instance = this;
        this.overlay = overlayTarget;
        this.container = _container;
        if (this.overlay != "") {
            $("#" + this.overlay).click(function(e) {
                Core.views.closeTopView()
            })
        }
        Core.onReady.addOnce($bind(this, this.dispatchOnReady))
    };
    $hxClasses.MiniclipAPI = MiniclipAPI;
    MiniclipAPI.__name__ = ["MiniclipAPI"];
    MiniclipAPI.prototype = {
        onReady: null,
        container: null,
        overlay: null,
        shopDialog: null,
        gamepadSupportActive: null,
        coreWasLoaded: null,
        questProgress: null,
        _inGame: null,
        serverVersion: null,
        _server: null,
        dispatchOnReady: function() {
            if (this.onReady != null) {
                this.onReady()
            }
            this.setInGameState(this._inGame)
        },
        loadEnvironment: function(obj) {
            var fields = Reflect.fields(obj);
            var _g = 0;
            while (_g < fields.length) {
                var field = fields[_g];
                ++_g;
                agario_config_Configs.setProperty(field, Reflect.getProperty(obj, field))
            }
        },
        openShop: function(target, data) {
            if (target == null) {
                target = ""
            }
            if (Core.get_states().isEnabled("state_shop_dialog")) {
                return
            }
            if (Core.services.shop.isOpen) {
                return
            }
            Core.services.shop.isOpen = true;
            if (!Core.initialized) {
                return null
            }
            Core.services.gameui.showContainer();
            this.shopDialog = new agario_views_ShopDialog();
            this.shopDialog.openCategory(target, true, data);
            this.shopDialog.addEventListener("close", $bind(this, this.onShopClose), false, 0, true);
            Core.views.openView(this.shopDialog, {
                priority: 1,
                animate: true,
                allowClickClose: true
            })
        },
        onShopClose: function(e) {
            Core.services.shop.isOpen = false;
            if (Core.get_states().isTopState("state_main_screen")) {
                Core.services.gameui.hideContainer()
            }
        },
        retryConnection: function() {
            var authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
            authModel.login();
            Core.services.gameui.disableShop()
        },
        onVideoClose: function() {
            Core.views.enableViews();
            Core.get_states().disable("state_video_window")
        },
        checkVideoAds: function() {
            Core.get_events().dispatchEventWith("ShopEvent::checkVideos")
        },
        showProfile: function() {
            if (Core.get_states().isEnabled("state_profile_dialog")) {
                return
            }
            if (Core.views == null) {
                return
            }
            var _server = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
            if (_server != null && !_server.isConnected()) {
                return
            }
            Core.services.gameui.showContainer();
            if (Core.user != null && Core.user.isGuest || Core.user.isLoggingIn) {
                Core.get_events().fire("ShopEvent::show_guest_conversion")
            } else {
                var profile = new agario_module_user_view_ProfileDialog();
                Core.views.openView(profile, {
                    priority: 1,
                    animate: true,
                    allowClickClose: true
                });
                profile.addEventListener("close", $bind(this, this.onShopClose))
            }
        },
        showLevelUp: function(deltaCoins, previousLevel, currentLevel) {
            Core.services.gameui.showContainer();
            var lvlUpDialog = new agario_module_user_view_LevelUpDialog(deltaCoins, previousLevel, currentLevel);
            Core.views.openView(lvlUpDialog, {
                priority: 1,
                animate: true,
                allowClickClose: true
            });
            lvlUpDialog.addEventListener("close", $bind(this, this.onShopClose))
        },
        showGuestView: function() {
            Core.services.gameui.showContainer();
            Core.get_events().dispatchEventWith("ShopEvent::show_guest_conversion")
        },
        showFreeCoins: function() {
            var _g = this;
            if (Core.get_states().isEnabled("state_free_coins_dialog")) {
                return
            }
            if (Core.environment.get_isInFacebook() && Core.get_states().isEnabled("stateFreeCoinsCollect")) {
                return
            }
            Core.services.gameui.showContainer();
            if (Core.user.userInfo == null) {
                Core.get_events().dispatchEventWith("ShopEvent::show_guest_conversion");
                return
            }
            if (Core.environment.platform == agario_services_WebPlatform.Facebook) {
                var freeCoinTime = Core.user.freeCoinTimeLeft();
                agario_views_FreeCoinsDialog.openCollectDialog(freeCoinTime == 0, function() {
                    _g.onShopClose(null)
                }, false);
                agario_views_FreeCoinsDialog.triggerFreeCoins()
            } else {
                var hasTROffers = window.TRModule.hasSurveyData();
                var freeCoinsDialog = new agario_views_FreeCoinsDialog(hasTROffers);
                Core.views.openView(freeCoinsDialog, {
                    priority: 1,
                    animate: true,
                    allowClickClose: false
                });
                freeCoinsDialog.addEventListener("close", $bind(this, this.onShopClose))
            }
        },
        showGifting: function() {
            Core.showGifting()
        },
        showQuests: function() {
            Core.openQuestsDialog()
        },
        isUserLoggedIn: function() {
            if (Core.user.userInfo == null) {
                return false
            } else {
                return true
            }
        },
        overlayClick: function() {
            Core.get_events().dispatchEventWith("deactivate")
        },
        isShopAvailable: function() {
            if (!Core.initialized) {
                return false
            }
            return Core.services.shop.isShopAvailable
        },
        isLoggingIn: function() {
            if (!Core.initialized) {
                return true
            }
            return Core.user.isLoggingIn
        },
        facebookLogin: function() {
            Core.facebookLogin(function(success) {});
            Core.sendGoogleAnalyticsEvent("Login", "ClickFacebook")
        },
        doLoginWithFB: function(token, usedCache) {
            if (usedCache == null) {
                usedCache = false
            }
            var _g = this;
            if (Core.initialized) {
                Core.environment.authenticationProvider = agario_services_WebAuthProvider.Facebook;
                Core.get_events().fire("shop_event::update_connecting_status");
                this.performLogin(token, usedCache);
                Core.services.gameui.enableShop();
                Core.sendGoogleAnalyticsEvent("Login", "Facebook", null, true)
            } else {
                Core.onReady.addOnce(function() {
                    _g.doLoginWithFB(token, usedCache)
                })
            }
        },
        googleLogin: function() {
            Core.disableHUD();
            Core.sendGoogleAnalyticsEvent("Login", "ClickGoogle")
        },
        doLoginWithGPlus: function(token, usedCache) {
            if (usedCache == null) {
                usedCache = false
            }
            var _g = this;
            if (Core.initialized) {
                Core.environment.authenticationProvider = agario_services_WebAuthProvider.Google;
                Core.get_events().fire("shop_event::update_connecting_status");
                this.performLogin(token, usedCache);
                $("#giftsPanel").hide()
            } else {
                Core.onReady.addOnce(function() {
                    _g.doLoginWithGPlus(token, usedCache)
                })
            }
            Core.sendGoogleAnalyticsEvent("Login", "Google", null, true)
        },
        onGoogleLoginComplete: function(success) {
            if (success) {
                Core.ui.mainUI.hideShop()
            }
            Core.enableHUD()
        },
        performLogin: function(token, usedCache) {
            if (usedCache == null) {
                usedCache = false
            }
            var authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
            if (authModel.get_loggedIn()) {
                return
            }
            Core.user.set_isLoggingIn(true);
            authModel.set_authToken(token);
            authModel.login()
        },
        doLogout: function() {
            var authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
            authModel.logout();
            Core.views.closeAllViews();
            Core.models.resetModels();
            Core.services.gameui.clearTimers();
            if (this.shopDialog != null) {
                this.shopDialog.destroy()
            }
            this.shopDialog = null;
            if (window.core) {
                window.core.loadSkin("")
            }
            Core.services.gameui.setGuestInfo();
            $("#giftsPanel").show();
            Core.ui.mainUI.showNickDialog(0);
            Core.ui.mainUI.showAds(0)
        },
        setGuest: function() {
            Core.user.setGuest()
        },
        getQuestProgressLabel: function() {
            return Core.getQuestProgressLabel(this.questProgress)
        },
        checkQuestComplete: function() {
            return Core.checkQuestComplete(this.questProgress)
        },
        setProfilePicture: function(url) {
            if (Core.user != null) {
                Core.user.avatarUrl = url
            }
        },
        setSocialId: function(id) {
            if (Core.user != null) {
                Core.user.set_socialId(id)
            }
        },
        hideContainer: function() {
            Core.services.gameui.hideContainer()
        },
        updateServerVersion: function(version) {
            agario_models_VersionModel.SERVER_VERSION = version;
            agario_models_VersionModel.updateTag()
        },
        updateConfigurationID: function(configID) {
            agario_services_ConfigurationService.setConfigID(configID)
        },
        getSkinInfo: function(pid) {
            if (!Core.initialized) {
                return null
            }
            var skinID = pid;
            if (skinID == "skin_starball1") {
                skinID = "skin_starball"
            }
            var shopSkinItem = Core.models.shopSkinsModel.getItemById(skinID);
            if (shopSkinItem == null) {
                return null
            }
            var returnObj = {
                url: shopSkinItem.gamePlayInfo.get_gamePlayImage(),
                color: shopSkinItem.gamePlayInfo.get_cellColor()
            };
            if (pid == "skin_starball1") {
                returnObj.url = "Starball1.png"
            }
            return returnObj
        },
        onOffwerwallClose: function() {
            Core.get_states().disable("state_offerwall_window")
        },
        onMobileData: function(msg) {
            if (msg == null) {
                return
            }
            var arrayBuf = msg.buffer.slice(msg.byteOffset, msg.byteOffset + msg.byteLength);
            var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(arrayBuf);
            if (this._server == null) {
                this._server = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService)
            }
            this._server.injectPacket(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes))
        },
        onAgarioCoreLoaded: function() {
            this.coreWasLoaded = true;
            if (Core.ui != null) {
                Core.ui.initAgario()
            }
        },
        onPlayerDeath: function(foodEaten, highestMass, timeAlive, leaderboardTime, cellsEaten, topPosition) {
            Core.user.gamesPlayed++;
            Core.ui.state.inGame = false;
            Core.ui.state.isPlayerAlive = false;
            Core.ui.state.setGameResults(foodEaten, highestMass, timeAlive, leaderboardTime, cellsEaten, topPosition);
            Core.ui.stats.onPlayerDeath();
            Core.services.promo.postEvent("PROMO_FINISHED_MATCH")
        },
        onPlayerStatsUpdate: function(foodEaten, highestMass, timeAlive, virusesEaten, cellsEaten, topPosition) {
            this.questProgress = Core.getQuestProgress(foodEaten, highestMass, timeAlive, virusesEaten, cellsEaten, topPosition)
        },
        onPlayerSpawn: function() {
            Core.ui.state.isPlayerAlive = true;
            Core.ui.stats.onPlayerSpawn()
        },
        onPlayerBanned: function(user) {
            Core.ui.onPlayerBanned(user)
        },
        activateGamepadSupport: function() {
            this.gamepadSupportActive = true
        },
        deactivateGamepadSupport: function() {
            this.gamepadSupportActive = false
        },
        onGamepadUpdate: function(callback) {
            var gamepadController = oaktree_ext_services_ServiceManager.getService(agario_services_GamepadControllerService);
            gamepadController.gamepadAxisUpdate = callback
        },
        registerSplitFunction: function(callback) {
            var gamepadController = oaktree_ext_services_ServiceManager.getService(agario_services_GamepadControllerService);
            gamepadController.sendMitosisCallback = callback
        },
        registerEjectFunction: function(callback) {
            var gamepadController = oaktree_ext_services_ServiceManager.getService(agario_services_GamepadControllerService);
            gamepadController.ejectMassCallback = callback
        },
        setInGameState: function(isInGame) {
            this._inGame = isInGame;
            if (!Core.initialized) {
                return
            }
            if (this._inGame) {
                Core.get_states().disable("state_main_screen")
            } else {
                Core.get_states().enable("state_main_screen")
            }
        },
        notifyFullscreenAdFinished: function() {
            Core.get_states().disable("state_fullscreen_ad");
            Core.ui.stats.onFullscreenAd()
        },
        notifyToken: function(token) {
            Core.notifyToken(token)
        },
        onDisconnect: function() {
            Core.onDisconnect()
        },
        onConnect: function() {
            Core.onConnect()
        },
        showInstructionsPanel: function(pForce) {
            Core.ui.mainUI.showInstructionsPanel(pForce)
        },
        setGameMode: function(pMode, pReconnect) {
            if (pReconnect == null) {
                pReconnect = true
            }
            Core.ui.mainUI.setGameMode(pMode, pReconnect)
        },
        handleChangeMode: function() {
            Core.ui.mainUI.handleChangeMode()
        },
        wasInitialized: function() {
            Core.ui.state.isInitialized = true
        },
        reconnect: function(sameServer) {
            if (sameServer == null) {
                sameServer = false
            }
            Core.ui.network.reconnect(null, sameServer)
        },
        getPartyToken: function() {
            return Core.ui.state.partyToken
        },
        setPartyToken: function(pToken) {
            Core.ui.state.set_partyToken(pToken)
        },
        getRegion: function() {
            return Core.ui.state.region
        },
        setRegion: function(pRegion, forceReconnect) {
            if (forceReconnect == null) {
                forceReconnect = true
            }
            Core.ui.network.setRegion(pRegion, forceReconnect);
            Core.sendGoogleAnalyticsEvent("Region", pRegion)
        },
        checkRegion: function() {
            Core.ui.network.checkRegion()
        },
        refreshRegionInfo: function() {
            Core.ui.network.refreshRegionInfo()
        },
        getLastGameStats: function() {
            return Core.ui.state.lastGameResults
        },
        showStatsDialog: function() {
            Core.ui.stats.showStatsDialog()
        },
        isInGame: function() {
            return Core.ui.state.inGame
        },
        showAds: function(time) {
            Core.ui.mainUI.showAds(time)
        },
        showNickDialog: function(time) {
            Core.ui.mainUI.showAds(0);
            Core.ui.mainUI.showNickDialog(time)
        },
        hideMetaUI: function() {
            Core.ui.mainUI.hideMetaUI()
        },
        setNick: function(nick) {
            Core.ui.mainUI.setNick(nick)
        },
        getLatestConfigurationID: function() {
            Core.ui.network.getLatestConfigurationId()
        },
        setQuality: function(quality) {
            Core.ui.canvas.setQuality(quality)
        },
        corePendingReload: function() {
            Core.ui.handleAgarioCoreReload()
        },
        joinParty: function(code) {
            Core.ui.partyMode.joinParty(code)
        },
        sessionRejected: function() {
            Core.ui.onSessionRejected()
        },
        recaptchaRequested: function() {
            Core.ui.onRecaptchaRequested()
        },
        facebook: null,
        getProfilePicture: function(id) {
            var url = "";
            if (!Core.user.isGuest && Core.user.facebookId != null) {
                var friend = this.findFBFriendById(id);
                if (friend != null) {
                    url = "https://graph.facebook.com/" + friend.id + "/picture?type=square&width=200&height=200"
                }
            }
            return url
        },
        findFBFriendById: function(id) {
            var friends = Core.user.facebookFriends;
            if (friends != null) {
                var _g = 0;
                while (_g < friends.length) {
                    var friend = friends[_g];
                    ++_g;
                    if (friend.id == id) {
                        return friend
                    }
                }
            }
            return null
        },
        playSound: function(id) {
            agario_sounds_GameSounds.play(id)
        },
        __class__: MiniclipAPI
    };
    var Reflect = function() {};
    $hxClasses.Reflect = Reflect;
    Reflect.__name__ = ["Reflect"];
    Reflect.hasField = function(o, field) {
        return Object.prototype.hasOwnProperty.call(o, field)
    };
    Reflect.field = function(o, field) {
        try {
            return o[field]
        } catch (e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) {
                e = e.val
            }
            return null
        }
    };
    Reflect.setField = function(o, field, value) {
        o[field] = value
    };
    Reflect.getProperty = function(o, field) {
        var tmp;
        if (o == null) {
            return null
        } else {
            if (o.__properties__ && (tmp = o.__properties__["get_" + field])) {
                return o[tmp]()
            } else {
                return o[field]
            }
        }
    };
    Reflect.setProperty = function(o, field, value) {
        var tmp;
        if (o.__properties__ && (tmp = o.__properties__["set_" + field])) {
            o[tmp](value)
        } else {
            o[field] = value
        }
    };
    Reflect.callMethod = function(o, func, args) {
        return func.apply(o, args)
    };
    Reflect.fields = function(o) {
        var a = [];
        if (o != null) {
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            for (var f in o) {
                if (f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o, f)) {
                    a.push(f)
                }
            }
        }
        return a
    };
    Reflect.isFunction = function(f) {
        return typeof(f) == "function" && !(f.__name__ || f.__ename__)
    };
    Reflect.compare = function(a, b) {
        if (a == b) {
            return 0
        } else {
            if (a > b) {
                return 1
            } else {
                return -1
            }
        }
    };
    Reflect.compareMethods = function(f1, f2) {
        if (f1 == f2) {
            return true
        }
        if (!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
            return false
        }
        return f1.scope == f2.scope && f1.method == f2.method && f1.method != null
    };
    Reflect.isEnumValue = function(v) {
        return v != null && v.__enum__ != null
    };
    Reflect.deleteField = function(o, field) {
        if (!Object.prototype.hasOwnProperty.call(o, field)) {
            return false
        }
        delete(o[field]);
        return true
    };
    Reflect.copy = function(o) {
        var o2 = {};
        var _g = 0;
        var _g1 = Reflect.fields(o);
        while (_g < _g1.length) {
            var f = _g1[_g];
            ++_g;
            Reflect.setField(o2, f, Reflect.field(o, f))
        }
        return o2
    };
    Reflect.makeVarArgs = function(f) {
        return function() {
            var a = Array.prototype.slice.call(arguments);
            return f(a)
        }
    };
    var Std = function() {};
    $hxClasses.Std = Std;
    Std.__name__ = ["Std"];
    Std.is = function(v, t) {
        return js_Boot.__instanceof(v, t)
    };
    Std.string = function(s) {
        return js_Boot.__string_rec(s, "")
    };
    Std["int"] = function(x) {
        return x | 0
    };
    Std.parseInt = function(x) {
        var v = parseInt(x, 10);
        if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) {
            v = parseInt(x)
        }
        if (isNaN(v)) {
            return null
        }
        return v
    };
    Std.parseFloat = function(x) {
        return parseFloat(x)
    };
    var StringBuf = function() {
        this.b = ""
    };
    $hxClasses.StringBuf = StringBuf;
    StringBuf.__name__ = ["StringBuf"];
    StringBuf.prototype = {
        b: null,
        add: function(x) {
            this.b += Std.string(x)
        },
        addSub: function(s, pos, len) {
            if (len == null) {
                this.b += HxOverrides.substr(s, pos, null)
            } else {
                this.b += HxOverrides.substr(s, pos, len)
            }
        },
        __class__: StringBuf
    };
    var StringTools = function() {};
    $hxClasses.StringTools = StringTools;
    StringTools.__name__ = ["StringTools"];
    StringTools.urlEncode = function(s) {
        return encodeURIComponent(s)
    };
    StringTools.urlDecode = function(s) {
        return decodeURIComponent(s.split("+").join(" "))
    };
    StringTools.htmlEscape = function(s, quotes) {
        s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
        if (quotes) {
            return s.split('"').join("&quot;").split("'").join("&#039;")
        } else {
            return s
        }
    };
    StringTools.startsWith = function(s, start) {
        return s.length >= start.length && HxOverrides.substr(s, 0, start.length) == start
    };
    StringTools.endsWith = function(s, end) {
        var elen = end.length;
        var slen = s.length;
        return slen >= elen && HxOverrides.substr(s, slen - elen, elen) == end
    };
    StringTools.isSpace = function(s, pos) {
        var c = HxOverrides.cca(s, pos);
        return c > 8 && c < 14 || c == 32
    };
    StringTools.ltrim = function(s) {
        var l = s.length;
        var r = 0;
        while (r < l && StringTools.isSpace(s, r)) {
            r++
        }
        if (r > 0) {
            return HxOverrides.substr(s, r, l - r)
        } else {
            return s
        }
    };
    StringTools.rtrim = function(s) {
        var l = s.length;
        var r = 0;
        while (r < l && StringTools.isSpace(s, l - r - 1)) {
            r++
        }
        if (r > 0) {
            return HxOverrides.substr(s, 0, l - r)
        } else {
            return s
        }
    };
    StringTools.trim = function(s) {
        return StringTools.ltrim(StringTools.rtrim(s))
    };
    StringTools.lpad = function(s, c, l) {
        if (c.length <= 0) {
            return s
        }
        while (s.length < l) {
            s = c + s
        }
        return s
    };
    StringTools.replace = function(s, sub, by) {
        return s.split(sub).join(by)
    };
    StringTools.hex = function(n, digits) {
        var s = "";
        var hexChars = "0123456789ABCDEF";
        do {
            s = hexChars.charAt(n & 15) + s;
            n >>>= 4
        } while (n > 0);
        if (digits != null) {
            while (s.length < digits) {
                s = "0" + s
            }
        }
        return s
    };
    StringTools.fastCodeAt = function(s, index) {
        return s.charCodeAt(index)
    };
    var ValueType = $hxClasses.ValueType = {
        __ename__: ["ValueType"],
        __constructs__: ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]
    };
    ValueType.TNull = ["TNull", 0];
    ValueType.TNull.toString = $estr;
    ValueType.TNull.__enum__ = ValueType;
    ValueType.TInt = ["TInt", 1];
    ValueType.TInt.toString = $estr;
    ValueType.TInt.__enum__ = ValueType;
    ValueType.TFloat = ["TFloat", 2];
    ValueType.TFloat.toString = $estr;
    ValueType.TFloat.__enum__ = ValueType;
    ValueType.TBool = ["TBool", 3];
    ValueType.TBool.toString = $estr;
    ValueType.TBool.__enum__ = ValueType;
    ValueType.TObject = ["TObject", 4];
    ValueType.TObject.toString = $estr;
    ValueType.TObject.__enum__ = ValueType;
    ValueType.TFunction = ["TFunction", 5];
    ValueType.TFunction.toString = $estr;
    ValueType.TFunction.__enum__ = ValueType;
    ValueType.TClass = function(c) {
        var $x = ["TClass", 6, c];
        $x.__enum__ = ValueType;
        $x.toString = $estr;
        return $x
    };
    ValueType.TEnum = function(e) {
        var $x = ["TEnum", 7, e];
        $x.__enum__ = ValueType;
        $x.toString = $estr;
        return $x
    };
    ValueType.TUnknown = ["TUnknown", 8];
    ValueType.TUnknown.toString = $estr;
    ValueType.TUnknown.__enum__ = ValueType;
    var Type = function() {};
    $hxClasses.Type = Type;
    Type.__name__ = ["Type"];
    Type.getClass = function(o) {
        if (o == null) {
            return null
        } else {
            return js_Boot.getClass(o)
        }
    };
    Type.getEnum = function(o) {
        if (o == null) {
            return null
        }
        return o.__enum__
    };
    Type.getSuperClass = function(c) {
        return c.__super__
    };
    Type.getClassName = function(c) {
        var a = c.__name__;
        if (a == null) {
            return null
        }
        return a.join(".")
    };
    Type.getEnumName = function(e) {
        var a = e.__ename__;
        return a.join(".")
    };
    Type.resolveClass = function(name) {
        var cl = $hxClasses[name];
        if (cl == null || !cl.__name__) {
            return null
        }
        return cl
    };
    Type.resolveEnum = function(name) {
        var e = $hxClasses[name];
        if (e == null || !e.__ename__) {
            return null
        }
        return e
    };
    Type.createInstance = function(cl, args) {
        var _g = args.length;
        switch (_g) {
            case 0:
                return new cl();
            case 1:
                return new cl(args[0]);
            case 2:
                return new cl(args[0], args[1]);
            case 3:
                return new cl(args[0], args[1], args[2]);
            case 4:
                return new cl(args[0], args[1], args[2], args[3]);
            case 5:
                return new cl(args[0], args[1], args[2], args[3], args[4]);
            case 6:
                return new cl(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
                return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            case 8:
                return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
            default:
                throw new js__$Boot_HaxeError("Too many arguments")
        }
        return null
    };
    Type.createEmptyInstance = function(cl) {
        function empty() {}
        empty.prototype = cl.prototype;
        return new empty()
    };
    Type.createEnum = function(e, constr, params) {
        var f = Reflect.field(e, constr);
        if (f == null) {
            throw new js__$Boot_HaxeError("No such constructor " + constr)
        }
        if (Reflect.isFunction(f)) {
            if (params == null) {
                throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters")
            }
            return Reflect.callMethod(e, f, params)
        }
        if (params != null && params.length != 0) {
            throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters")
        }
        return f
    };
    Type.createEnumIndex = function(e, index, params) {
        var c = e.__constructs__[index];
        if (c == null) {
            throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index")
        }
        return Type.createEnum(e, c, params)
    };
    Type.getInstanceFields = function(c) {
        var a = [];
        for (var i in c.prototype) {
            a.push(i)
        }
        HxOverrides.remove(a, "__class__");
        HxOverrides.remove(a, "__properties__");
        return a
    };
    Type.getEnumConstructs = function(e) {
        var a = e.__constructs__;
        return a.slice()
    };
    Type["typeof"] = function(v) {
        var _g = typeof(v);
        switch (_g) {
            case "boolean":
                return ValueType.TBool;
            case "string":
                return ValueType.TClass(String);
            case "number":
                if (Math.ceil(v) == v % 2147483648) {
                    return ValueType.TInt
                }
                return ValueType.TFloat;
            case "object":
                if (v == null) {
                    return ValueType.TNull
                }
                var e = v.__enum__;
                if (e != null) {
                    return ValueType.TEnum(e)
                }
                var c = js_Boot.getClass(v);
                if (c != null) {
                    return ValueType.TClass(c)
                }
                return ValueType.TObject;
            case "function":
                if (v.__name__ || v.__ename__) {
                    return ValueType.TObject
                }
                return ValueType.TFunction;
            case "undefined":
                return ValueType.TNull;
            default:
                return ValueType.TUnknown
        }
    };
    Type.enumIndex = function(e) {
        return e[1]
    };
    var _$UInt_UInt_$Impl_$ = {};
    $hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
    _$UInt_UInt_$Impl_$.__name__ = ["_UInt", "UInt_Impl_"];
    _$UInt_UInt_$Impl_$.gt = function(a, b) {
        var aNeg = a < 0;
        var bNeg = b < 0;
        if (aNeg != bNeg) {
            return aNeg
        } else {
            return a > b
        }
    };
    _$UInt_UInt_$Impl_$.gte = function(a, b) {
        var aNeg = a < 0;
        var bNeg = b < 0;
        if (aNeg != bNeg) {
            return aNeg
        } else {
            return a >= b
        }
    };
    _$UInt_UInt_$Impl_$.toFloat = function(this1) {
        var $int = this1;
        if ($int < 0) {
            return 4294967296 + $int
        } else {
            return $int + 0
        }
    };
    var Xml = function(nodeType) {
        this.nodeType = nodeType;
        this.children = [];
        this.attributeMap = new haxe_ds_StringMap()
    };
    $hxClasses.Xml = Xml;
    Xml.__name__ = ["Xml"];
    Xml.parse = function(str) {
        return haxe_xml_Parser.parse(str)
    };
    Xml.createElement = function(name) {
        var xml = new Xml(Xml.Element);
        if (xml.nodeType != Xml.Element) {
            throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType)
        }
        xml.nodeName = name;
        return xml
    };
    Xml.createPCData = function(data) {
        var xml = new Xml(Xml.PCData);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
            throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType)
        }
        xml.nodeValue = data;
        return xml
    };
    Xml.createCData = function(data) {
        var xml = new Xml(Xml.CData);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
            throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType)
        }
        xml.nodeValue = data;
        return xml
    };
    Xml.createComment = function(data) {
        var xml = new Xml(Xml.Comment);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
            throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType)
        }
        xml.nodeValue = data;
        return xml
    };
    Xml.createDocType = function(data) {
        var xml = new Xml(Xml.DocType);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
            throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType)
        }
        xml.nodeValue = data;
        return xml
    };
    Xml.createProcessingInstruction = function(data) {
        var xml = new Xml(Xml.ProcessingInstruction);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
            throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType)
        }
        xml.nodeValue = data;
        return xml
    };
    Xml.createDocument = function() {
        return new Xml(Xml.Document)
    };
    Xml.prototype = {
        nodeType: null,
        nodeName: null,
        nodeValue: null,
        parent: null,
        children: null,
        attributeMap: null,
        get_nodeName: function() {
            if (this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType)
            }
            return this.nodeName
        },
        get_nodeValue: function() {
            if (this.nodeType == Xml.Document || this.nodeType == Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, unexpected " + this.nodeType)
            }
            return this.nodeValue
        },
        get: function(att) {
            if (this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType)
            }
            return this.attributeMap.get(att)
        },
        set: function(att, value) {
            if (this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType)
            }
            this.attributeMap.set(att, value)
        },
        exists: function(att) {
            if (this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType)
            }
            return this.attributeMap.exists(att)
        },
        attributes: function() {
            if (this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType)
            }
            return this.attributeMap.keys()
        },
        iterator: function() {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType)
            }
            return HxOverrides.iter(this.children)
        },
        elements: function() {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType)
            }
            var ret;
            var _g = [];
            var _g1 = 0;
            var _g2 = this.children;
            while (_g1 < _g2.length) {
                var child = _g2[_g1];
                ++_g1;
                if (child.nodeType == Xml.Element) {
                    _g.push(child)
                }
            }
            ret = _g;
            return HxOverrides.iter(ret)
        },
        elementsNamed: function(name) {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType)
            }
            var ret;
            var _g = [];
            var _g1 = 0;
            var _g2 = this.children;
            while (_g1 < _g2.length) {
                var child = _g2[_g1];
                ++_g1;
                if (child.nodeType == Xml.Element && (function($this) {
                        var $r;
                        if (child.nodeType != Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType)
                        }
                        $r = child.nodeName;
                        return $r
                    }(this)) == name) {
                    _g.push(child)
                }
            }
            ret = _g;
            return HxOverrides.iter(ret)
        },
        firstElement: function() {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType)
            }
            var _g = 0;
            var _g1 = this.children;
            while (_g < _g1.length) {
                var child = _g1[_g];
                ++_g;
                if (child.nodeType == Xml.Element) {
                    return child
                }
            }
            return null
        },
        addChild: function(x) {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType)
            }
            if (x.parent != null) {
                x.parent.removeChild(x)
            }
            this.children.push(x);
            x.parent = this
        },
        removeChild: function(x) {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType)
            }
            if (HxOverrides.remove(this.children, x)) {
                x.parent = null;
                return true
            }
            return false
        },
        __class__: Xml,
        __properties__: {
            get_nodeValue: "get_nodeValue",
            get_nodeName: "get_nodeName"
        }
    };
    var agario_AgarioEvents = function() {};
    $hxClasses["agario.AgarioEvents"] = agario_AgarioEvents;
    agario_AgarioEvents.__name__ = ["agario", "AgarioEvents"];
    var agario_atlas_MainShop = function() {};
    $hxClasses["agario.atlas.MainShop"] = agario_atlas_MainShop;
    agario_atlas_MainShop.__name__ = ["agario", "atlas", "MainShop"];
    var agario_atlas_Menuscommonui = function() {};
    $hxClasses["agario.atlas.Menuscommonui"] = agario_atlas_Menuscommonui;
    agario_atlas_Menuscommonui.__name__ = ["agario", "atlas", "Menuscommonui"];
    var agario_atlas_Menusshopui = function() {};
    $hxClasses["agario.atlas.Menusshopui"] = agario_atlas_Menusshopui;
    agario_atlas_Menusshopui.__name__ = ["agario", "atlas", "Menusshopui"];
    var protohx_Message = function() {};
    $hxClasses["protohx.Message"] = protohx_Message;
    protohx_Message.__name__ = ["protohx", "Message"];
    protohx_Message.stringToByteArray = function(s) {
        return haxe_io_Bytes.ofString(s)
    };
    protohx_Message.prototype = {
        otherFields: null,
        mergeFrom: function(input) {
            this.readFromSlice(new protohx_ReadingBuffer(new haxe_io_BytesInput(input, null, null)), 0)
        },
        mergeDelimitedFrom: function(input) {
            protohx_ReadUtils.read__TYPE_MESSAGE(new protohx_ReadingBuffer(new haxe_io_BytesInput(input, null, null)), this)
        },
        writeTo: function(output) {
            var buffer = new protohx_WritingBuffer();
            this.writeToBuffer(buffer);
            buffer.toNormal(output)
        },
        writeDelimitedTo: function(output) {
            var buffer = new protohx_WritingBuffer();
            protohx_WriteUtils.write__TYPE_MESSAGE(buffer, this);
            buffer.toNormal(output)
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                this.readUnknown(input, tag)
            }
        },
        hasBytes: function(input, bytesAfterSlice) {
            return input.buf.totlen - input.buf.pos > bytesAfterSlice
        },
        writeToBuffer: function(output) {
            this.writeExtensionOrUnknownFields(output)
        },
        writeSingleUnknown: function(output, tag, value) {
            protohx_WriteUtils.write__TYPE_UINT32(output, tag);
            var _g = tag & 7;
            switch (_g) {
                case 0:
                    protohx_WriteUtils.write__TYPE_UINT64(output, value);
                    break;
                case 1:
                    protohx_WriteUtils.write__TYPE_FIXED64(output, value);
                    break;
                case 2:
                    protohx_WriteUtils.write__TYPE_BYTES(output, value);
                    break;
                case 5:
                    protohx_WriteUtils.write__TYPE_FIXED32(output, value);
                    break;
                default:
                    throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid wire type: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(tag & 7))))
            }
        },
        writeUnknown: function(output, tag) {
            if (tag == 0) {
                throw new js__$Boot_HaxeError(new protohx_CommonError("Attemp to write an undefined string filed: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(tag))))
            }
            protohx_WriteUtils.writeUnknownPair(output, tag, this.getByTag(tag))
        },
        readUnknown: function(input, tag) {
            var value;
            var _g = tag & 7;
            switch (_g) {
                case 0:
                    value = protohx_ReadUtils.read__TYPE_UINT64(input);
                    break;
                case 1:
                    value = protohx_ReadUtils.read__TYPE_FIXED64(input);
                    break;
                case 2:
                    value = protohx_ReadUtils.read__TYPE_BYTES(input);
                    break;
                case 5:
                    value = protohx_ReadUtils.read__TYPE_FIXED32(input);
                    break;
                default:
                    throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid wire type: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(tag & 7))))
            }
            var currentValue = this.getByTag(tag);
            if (currentValue == null) {
                this.setByTag(tag, value)
            } else {
                if ((currentValue instanceof Array) && currentValue.__enum__ == null) {
                    currentValue.push(value)
                } else {
                    this.setByTag(tag, [currentValue, value])
                }
            }
        },
        getByTag: function(tag) {
            if (this.otherFields != null) {
                return this.otherFields.h[tag]
            } else {
                return null
            }
        },
        setByTag: function(tag, value) {
            if (this.otherFields == null) {
                this.otherFields = new haxe_ds_IntMap()
            }
            this.otherFields.set(tag, value)
        },
        defaultBytes: function() {
            return null
        },
        defaultInt64: function() {
            return protohx_Protohx.newInt64(0, 0)
        },
        defaultUInt64: function() {
            return protohx_Protohx.newUInt64(0, 0)
        },
        writeExtensionOrUnknownFields: function(output) {
            if (this.otherFields != null) {
                var $it0 = this.otherFields.keys();
                while ($it0.hasNext()) {
                    var tag = $it0.next();
                    this.writeUnknown(output, tag)
                }
            }
        },
        forEachFields: function(fn) {},
        __class__: protohx_Message
    };
    var agario_bouncer_requestdata_Bouncer_$request_$data = function() {
        protohx_Message.call(this)
    };
    $hxClasses["agario.bouncer.requestdata.Bouncer_request_data"] = agario_bouncer_requestdata_Bouncer_$request_$data;
    agario_bouncer_requestdata_Bouncer_$request_$data.__name__ = ["agario", "bouncer", "requestdata", "Bouncer_request_data"];
    agario_bouncer_requestdata_Bouncer_$request_$data.__super__ = protohx_Message;
    agario_bouncer_requestdata_Bouncer_$request_$data.prototype = $extend(protohx_Message.prototype, {
        regionInfoField: null,
        setRegionInfoField: function(value) {
            this.set_regionInfoField(value);
            return this
        },
        clearRegionInfoField: function() {
            this.set_regionInfoField(null)
        },
        hasRegionInfoField: function() {
            return this.get_regionInfoField() != null
        },
        set_regionInfoField: function(value) {
            return this.regionInfoField = value
        },
        get_regionInfoField: function() {
            return this.regionInfoField
        },
        findServerWithFriendsField: null,
        setFindServerWithFriendsField: function(value) {
            this.set_findServerWithFriendsField(value);
            return this
        },
        clearFindServerWithFriendsField: function() {
            this.set_findServerWithFriendsField(null)
        },
        hasFindServerWithFriendsField: function() {
            return this.get_findServerWithFriendsField() != null
        },
        set_findServerWithFriendsField: function(value) {
            return this.findServerWithFriendsField = value
        },
        get_findServerWithFriendsField: function() {
            return this.findServerWithFriendsField
        },
        getTokenField: null,
        setGetTokenField: function(value) {
            this.set_getTokenField(value);
            return this
        },
        clearGetTokenField: function() {
            this.set_getTokenField(null)
        },
        hasGetTokenField: function() {
            return this.get_getTokenField() != null
        },
        set_getTokenField: function(value) {
            return this.getTokenField = value
        },
        get_getTokenField: function() {
            return this.getTokenField
        },
        writeToBuffer: function(output) {
            if (this.get_regionInfoField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 1);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_regionInfoField())
            }
            if (this.get_findServerWithFriendsField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 2);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_findServerWithFriendsField())
            }
            if (this.get_getTokenField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 3);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_getTokenField())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_regionInfoField() != null) {
                fn("regionInfoField", this.get_regionInfoField())
            }
            if (this.get_findServerWithFriendsField() != null) {
                fn("findServerWithFriendsField", this.get_findServerWithFriendsField())
            }
            if (this.get_getTokenField() != null) {
                fn("getTokenField", this.get_getTokenField())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var region_info_field__count = 0;
            var find_server_with_friends_field__count = 0;
            var get_token_field__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (region_info_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Bouncer_request_data.regionInfoField cannot be set twice."))
                        }++region_info_field__count;
                        this.set_regionInfoField(new agario_bouncer_requestdata_Region_$info_$data());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_regionInfoField());
                        break;
                    case 2:
                        if (find_server_with_friends_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Bouncer_request_data.findServerWithFriendsField cannot be set twice."))
                        }++find_server_with_friends_field__count;
                        this.set_findServerWithFriendsField(new agario_bouncer_requestdata_Find_$server_$with_$friends_$data());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_findServerWithFriendsField());
                        break;
                    case 3:
                        if (get_token_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Bouncer_request_data.getTokenField cannot be set twice."))
                        }++get_token_field__count;
                        this.set_getTokenField(new agario_bouncer_requestdata_Get_$token_$data());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_getTokenField());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_bouncer_requestdata_Bouncer_$request_$data,
        __properties__: {
            set_getTokenField: "set_getTokenField",
            get_getTokenField: "get_getTokenField",
            set_findServerWithFriendsField: "set_findServerWithFriendsField",
            get_findServerWithFriendsField: "get_findServerWithFriendsField",
            set_regionInfoField: "set_regionInfoField",
            get_regionInfoField: "get_regionInfoField"
        }
    });
    var agario_bouncer_requestdata_Find_$server_$with_$friends_$data = function() {
        protohx_Message.call(this);
        this.set_friendFacebookId([])
    };
    $hxClasses["agario.bouncer.requestdata.Find_server_with_friends_data"] = agario_bouncer_requestdata_Find_$server_$with_$friends_$data;
    agario_bouncer_requestdata_Find_$server_$with_$friends_$data.__name__ = ["agario", "bouncer", "requestdata", "Find_server_with_friends_data"];
    agario_bouncer_requestdata_Find_$server_$with_$friends_$data.__super__ = protohx_Message;
    agario_bouncer_requestdata_Find_$server_$with_$friends_$data.prototype = $extend(protohx_Message.prototype, {
        friendFacebookId: null,
        setFriendFacebookId: function(value) {
            this.set_friendFacebookId(value);
            return this
        },
        set_friendFacebookId: function(value) {
            return this.friendFacebookId = value
        },
        get_friendFacebookId: function() {
            return this.friendFacebookId
        },
        addFriendFacebookId: function(value) {
            if (this.get_friendFacebookId() == null) {
                this.set_friendFacebookId([value])
            } else {
                this.get_friendFacebookId().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_friendFacebookId() != null) {
                var _g = 0;
                var _g1 = this.get_friendFacebookId();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_STRING(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_friendFacebookId() != null && this.get_friendFacebookId().length > 0) {
                fn("friendFacebookId", this.get_friendFacebookId())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 2:
                        if (this.get_friendFacebookId() == null) {
                            this.set_friendFacebookId([])
                        }
                        this.get_friendFacebookId().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_bouncer_requestdata_Find_$server_$with_$friends_$data,
        __properties__: {
            set_friendFacebookId: "set_friendFacebookId",
            get_friendFacebookId: "get_friendFacebookId"
        }
    });
    var agario_bouncer_requestdata_Get_$token_$data = function() {
        protohx_Message.call(this);
        this.set_token("")
    };
    $hxClasses["agario.bouncer.requestdata.Get_token_data"] = agario_bouncer_requestdata_Get_$token_$data;
    agario_bouncer_requestdata_Get_$token_$data.__name__ = ["agario", "bouncer", "requestdata", "Get_token_data"];
    agario_bouncer_requestdata_Get_$token_$data.__super__ = protohx_Message;
    agario_bouncer_requestdata_Get_$token_$data.prototype = $extend(protohx_Message.prototype, {
        token: null,
        setToken: function(value) {
            this.set_token(value);
            return this
        },
        set_token: function(value) {
            return this.token = value
        },
        get_token: function() {
            return this.token
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_token());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("token", this.get_token())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var token__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Get_token_data.token cannot be set twice."))
                        }++token__count;
                        this.set_token(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_bouncer_requestdata_Get_$token_$data,
        __properties__: {
            set_token: "set_token",
            get_token: "get_token"
        }
    });
    var agario_bouncer_requestdata_Region_$info_$data = function() {
        protohx_Message.call(this);
        this.set_region("");
        this.set_gamemode("")
    };
    $hxClasses["agario.bouncer.requestdata.Region_info_data"] = agario_bouncer_requestdata_Region_$info_$data;
    agario_bouncer_requestdata_Region_$info_$data.__name__ = ["agario", "bouncer", "requestdata", "Region_info_data"];
    agario_bouncer_requestdata_Region_$info_$data.__super__ = protohx_Message;
    agario_bouncer_requestdata_Region_$info_$data.prototype = $extend(protohx_Message.prototype, {
        region: null,
        setRegion: function(value) {
            this.set_region(value);
            return this
        },
        set_region: function(value) {
            return this.region = value
        },
        get_region: function() {
            return this.region
        },
        gamemode: null,
        setGamemode: function(value) {
            this.set_gamemode(value);
            return this
        },
        set_gamemode: function(value) {
            return this.gamemode = value
        },
        get_gamemode: function() {
            return this.gamemode
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_region());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_gamemode());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("region", this.get_region());
            fn("gamemode", this.get_gamemode())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var region__count = 0;
            var gamemode__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (region__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Region_info_data.region cannot be set twice."))
                        }++region__count;
                        this.set_region(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (gamemode__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Region_info_data.gamemode cannot be set twice."))
                        }++gamemode__count;
                        this.set_gamemode(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_bouncer_requestdata_Region_$info_$data,
        __properties__: {
            set_gamemode: "set_gamemode",
            get_gamemode: "get_gamemode",
            set_region: "set_region",
            get_region: "get_region"
        }
    });
    var oaktree_ext_commands_ICommand = function() {};
    $hxClasses["oaktree.ext.commands.ICommand"] = oaktree_ext_commands_ICommand;
    oaktree_ext_commands_ICommand.__name__ = ["oaktree", "ext", "commands", "ICommand"];
    oaktree_ext_commands_ICommand.prototype = {
        execute: null,
        __class__: oaktree_ext_commands_ICommand
    };
    var agario_commands_DebugCommand = function() {};
    $hxClasses["agario.commands.DebugCommand"] = agario_commands_DebugCommand;
    agario_commands_DebugCommand.__name__ = ["agario", "commands", "DebugCommand"];
    agario_commands_DebugCommand.__interfaces__ = [oaktree_ext_commands_ICommand];
    agario_commands_DebugCommand.prototype = {
        execute: function(e) {},
        __class__: agario_commands_DebugCommand
    };
    var agario_commands_OpenLoginElsewhereDialogCommand = function() {};
    $hxClasses["agario.commands.OpenLoginElsewhereDialogCommand"] = agario_commands_OpenLoginElsewhereDialogCommand;
    agario_commands_OpenLoginElsewhereDialogCommand.__name__ = ["agario", "commands", "OpenLoginElsewhereDialogCommand"];
    agario_commands_OpenLoginElsewhereDialogCommand.__interfaces__ = [oaktree_ext_commands_ICommand];
    agario_commands_OpenLoginElsewhereDialogCommand.prototype = {
        execute: function(e) {
            Core.services.gameui.doLogout();
            Core.get_events().fire(agario_AgarioEvents.OPEN_VIEW, {
                view: agario_views_LoginElsewhereDialog
            })
        },
        __class__: agario_commands_OpenLoginElsewhereDialogCommand
    };
    var agario_commands_OpenViewCommand = function() {};
    $hxClasses["agario.commands.OpenViewCommand"] = agario_commands_OpenViewCommand;
    agario_commands_OpenViewCommand.__name__ = ["agario", "commands", "OpenViewCommand"];
    agario_commands_OpenViewCommand.__interfaces__ = [oaktree_ext_commands_ICommand];
    agario_commands_OpenViewCommand.prototype = {
        className: null,
        execute: function(e) {
            var viewInstance;
            if (js_Boot.__instanceof(e.data, oaktree_ext_ui_View)) {
                viewInstance = e.data;
                if (viewInstance == null) {
                    return
                }
            } else {
                var data = e.data;
                var classObj = data.view;
                var classArgs = data.args;
                if (classArgs == null) {
                    classArgs = []
                }
                var isString = typeof(classObj) == "string";
                if (isString) {
                    this.className = classObj;
                    var resolvedClass = this.resolveClassName(this.className);
                    if (resolvedClass == null) {
                        return
                    }
                    viewInstance = Type.createInstance(resolvedClass, classArgs)
                } else {
                    viewInstance = Type.createInstance(classObj, classArgs)
                }
            }
            Core.services.gameui.showContainer();
            Core.views.openView(viewInstance, {
                priority: 1,
                animate: true,
                allowClickClose: false
            })
        },
        resolveClassName: function(className) {
            var resolvedClass = Type.resolveClass(className);
            if (resolvedClass == null) {
                var _g = 0;
                var _g1 = agario_commands_OpenViewCommand.lookupPackages;
                while (_g < _g1.length) {
                    var pack = _g1[_g];
                    ++_g;
                    resolvedClass = Type.resolveClass("" + pack + "." + className);
                    if (resolvedClass != null) {
                        break
                    }
                }
            }
            return resolvedClass
        },
        __class__: agario_commands_OpenViewCommand
    };
    var agario_config_Assets = function() {};
    $hxClasses["agario.config.Assets"] = agario_config_Assets;
    agario_config_Assets.__name__ = ["agario", "config", "Assets"];
    var agario_config_EchoCommand = function() {};
    $hxClasses["agario.config.EchoCommand"] = agario_config_EchoCommand;
    agario_config_EchoCommand.__name__ = ["agario", "config", "EchoCommand"];
    agario_config_EchoCommand.__interfaces__ = [oaktree_ext_commands_ICommand];
    agario_config_EchoCommand.prototype = {
        execute: function(e) {
            haxe_Log.trace(e.data, {
                fileName: "CommandMap.hx",
                lineNumber: 31,
                className: "agario.config.EchoCommand",
                methodName: "execute"
            })
        },
        __class__: agario_config_EchoCommand
    };
    var oaktree_ext_commands_Command = function(eventName, command, oneTime) {
        if (oneTime == null) {
            oneTime = false
        }
        this.event = eventName;
        this.command = command;
        this.oneTime = oneTime
    };
    $hxClasses["oaktree.ext.commands.Command"] = oaktree_ext_commands_Command;
    oaktree_ext_commands_Command.__name__ = ["oaktree", "ext", "commands", "Command"];
    oaktree_ext_commands_Command.prototype = {
        event: null,
        command: null,
        oneTime: null,
        __class__: oaktree_ext_commands_Command
    };
    var oaktree_core_IEntityContainer = function() {};
    $hxClasses["oaktree.core.IEntityContainer"] = oaktree_core_IEntityContainer;
    oaktree_core_IEntityContainer.__name__ = ["oaktree", "core", "IEntityContainer"];
    oaktree_core_IEntityContainer.prototype = {
        removeEntity: null,
        addEntity: null,
        __class__: oaktree_core_IEntityContainer
    };
    var oaktree_core_IEntity = function() {};
    $hxClasses["oaktree.core.IEntity"] = oaktree_core_IEntity;
    oaktree_core_IEntity.__name__ = ["oaktree", "core", "IEntity"];
    oaktree_core_IEntity.prototype = {
        getId: null,
        onAddedToScene: null,
        onRemovedFromScene: null,
        addComponent: null,
        removeComponent: null,
        removeAllComponents: null,
        update: null,
        dispose: null,
        __class__: oaktree_core_IEntity
    };
    var oaktree_core_VisualEntity = function(pStandalone) {
        if (pStandalone == null) {
            pStandalone = false
        }
        openfl_display_Sprite.call(this);
        this._entity = new oaktree_core_Entity(pStandalone)
    };
    $hxClasses["oaktree.core.VisualEntity"] = oaktree_core_VisualEntity;
    oaktree_core_VisualEntity.__name__ = ["oaktree", "core", "VisualEntity"];
    oaktree_core_VisualEntity.__interfaces__ = [oaktree_core_IEntityContainer, oaktree_core_IEntity];
    oaktree_core_VisualEntity.__super__ = openfl_display_Sprite;
    oaktree_core_VisualEntity.prototype = $extend(openfl_display_Sprite.prototype, {
        _entity: null,
        getId: function() {
            return this._entity.getId()
        },
        onAddedToScene: function(pScene) {
            this._entity.onAddedToScene(pScene)
        },
        onRemovedFromScene: function() {
            this._entity.onRemovedFromScene()
        },
        addComponent: function(pComponent) {
            return this._entity.addComponent(pComponent)
        },
        removeComponent: function(pComponent) {
            return this._entity.removeComponent(pComponent)
        },
        removeAllComponents: function() {
            this._entity.removeAllComponents()
        },
        addEntity: function(pEntity) {
            return this._entity.addEntity(pEntity)
        },
        removeEntity: function(pEntity) {
            return this._entity.removeEntity(pEntity)
        },
        update: function(pDT) {
            this._entity.update(pDT)
        },
        dispose: function() {
            this._entity.dispose()
        },
        get_standalone: function() {
            return this._entity.standalone
        },
        set_standalone: function(value) {
            return this._entity.set_standalone(value)
        },
        __class__: oaktree_core_VisualEntity,
        __properties__: $extend(openfl_display_Sprite.prototype.__properties__, {
            set_standalone: "set_standalone",
            get_standalone: "get_standalone"
        })
    });
    var oaktree_core_scene_IScene = function() {};
    $hxClasses["oaktree.core.scene.IScene"] = oaktree_core_scene_IScene;
    oaktree_core_scene_IScene.__name__ = ["oaktree", "core", "scene", "IScene"];
    oaktree_core_scene_IScene.prototype = {
        update: null,
        lateUpdate: null,
        dispose: null,
        onAdded: null,
        onRemoved: null,
        __class__: oaktree_core_scene_IScene
    };
    var oaktree_core_scene_Scene = function() {
        oaktree_core_VisualEntity.call(this);
        this._entity.scene = this
    };
    $hxClasses["oaktree.core.scene.Scene"] = oaktree_core_scene_Scene;
    oaktree_core_scene_Scene.__name__ = ["oaktree", "core", "scene", "Scene"];
    oaktree_core_scene_Scene.__interfaces__ = [oaktree_core_scene_IScene];
    oaktree_core_scene_Scene.__super__ = oaktree_core_VisualEntity;
    oaktree_core_scene_Scene.prototype = $extend(oaktree_core_VisualEntity.prototype, {
        dispose: function() {
            oaktree_core_VisualEntity.prototype.dispose.call(this)
        },
        update: function(dt) {
            oaktree_core_VisualEntity.prototype.update.call(this, dt)
        },
        lateUpdate: function() {},
        onAdded: function() {},
        onRemoved: function() {
            this.dispose()
        },
        __class__: oaktree_core_scene_Scene
    });
    var oaktree_ext_ui_View = function() {
        this.debugui = false;
        this.allowDisableClose = true;
        this.isLoading = false;
        this.maxHeight = 0;
        this.maxWidth = 0;
        this._initialized = false;
        oaktree_core_scene_Scene.call(this);
        this.addEventListener("addedToStage", $bind(this, this.onAddedToStage))
    };
    $hxClasses["oaktree.ext.ui.View"] = oaktree_ext_ui_View;
    oaktree_ext_ui_View.__name__ = ["oaktree", "ext", "ui", "View"];
    oaktree_ext_ui_View.__super__ = oaktree_core_scene_Scene;
    oaktree_ext_ui_View.prototype = $extend(oaktree_core_scene_Scene.prototype, {
        _initialized: null,
        caller: null,
        maxWidth: null,
        maxHeight: null,
        isLoading: null,
        allowDisableClose: null,
        debugui: null,
        disable: function() {},
        enable: function() {},
        resize: function(W, H) {},
        open: function(animate) {
            if (animate == null) {
                animate = false
            }
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
        },
        removeFromParent: function() {
            this.parent.removeChild(this)
        },
        updateView: function() {},
        onAddedToStage: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.onAddedToStage));
            this.addEventListener("removedFromStage", $bind(this, this.onRemovedFromStage));
            if (!this._initialized) {
                this.initialize();
                this._initialized = true;
                this.postInit()
            }
        },
        onRemovedFromStage: function(e) {
            this.removeEventListener("removedFromStage", $bind(this, this.onRemovedFromStage));
            this.addEventListener("addedToStage", $bind(this, this.onAddedToStage));
            this.deinitialize()
        },
        initialize: function() {
            if (this.debugui) {
                this.get_graphics().beginFill(16711680, 0.5);
                this.get_graphics().drawRect(0, 0, this.maxWidth, this.maxHeight);
                this.get_graphics().endFill()
            }
        },
        postInit: function() {},
        deinitialize: function() {},
        dispose: function() {
            this.removeEventListener("removedFromStage", $bind(this, this.onRemovedFromStage));
            this.removeEventListener("addedToStage", $bind(this, this.onAddedToStage))
        },
        __class__: oaktree_ext_ui_View
    });
    var oaktree_ext_ui_views_GenericDialog = function(pStateName) {
        this.openAsapAnimateParam = false;
        this.openAsap = false;
        this.opening = false;
        this.closeAnimationDuration = 1;
        this.animateOnClose = true;
        this.openAnimationDuration = 1;
        this.animateOnOpen = true;
        this.parentAnchorY = 0.5;
        this.parentAnchorX = 0.5;
        this.anchorY = 0.5;
        this.anchorX = 0.5;
        this.animate = false;
        this.closeOnEscape = false;
        oaktree_ext_ui_View.call(this);
        if (pStateName != null) {
            this._viewState = pStateName
        }
        this.onClose = new msignal_Signal0();
        this.onLateClose = new msignal_Signal0();
        this.closeButton = new oaktree_ext_ui_controls_CloseButton(this._viewState != null ? this._viewState + ".close" : null)
    };
    $hxClasses["oaktree.ext.ui.views.GenericDialog"] = oaktree_ext_ui_views_GenericDialog;
    oaktree_ext_ui_views_GenericDialog.__name__ = ["oaktree", "ext", "ui", "views", "GenericDialog"];
    oaktree_ext_ui_views_GenericDialog.__super__ = oaktree_ext_ui_View;
    oaktree_ext_ui_views_GenericDialog.prototype = $extend(oaktree_ext_ui_View.prototype, {
        closeOnEscape: null,
        animate: null,
        anchorX: null,
        anchorY: null,
        parentAnchorX: null,
        parentAnchorY: null,
        onClose: null,
        onLateClose: null,
        animateOnOpen: null,
        openAnimationDuration: null,
        animateOnClose: null,
        closeAnimationDuration: null,
        disableShape: null,
        container: null,
        background: null,
        closeButton: null,
        loadingLabel: null,
        opening: null,
        openAsap: null,
        openAsapAnimateParam: null,
        _viewState: null,
        initialize: function() {
            this.container = new openfl_display_Sprite();
            if (oaktree_ext_ui_views_GenericDialog.allowHighDpi) {
                if (oaktree_ext_ui_views_GenericDialog.initialHighDpiScale == 0) {
                    oaktree_ext_ui_views_GenericDialog.initialHighDpiScale = window.devicePixelRatio
                }
                this.set_scaleX(this.set_scaleY(oaktree_ext_ui_views_GenericDialog.initialHighDpiScale))
            }
            this.resizeBackground(this.maxWidth, this.maxHeight);
            this.container.addChild(this.background);
            this.container.addChild(this.closeButton);
            this.closeButton.addEventListener("click", $bind(this, this.onCloseButtonClick));
            this.container.set_visible(false);
            oaktree_ext_ui_View.prototype.addChild.call(this, this.container);
            this.disableShape = new openfl_display_Sprite();
            this.disableShape.addEventListener("click", $bind(this, this.onDisableClick));
            this.disableShape.set_visible(false);
            oaktree_ext_ui_View.prototype.addChild.call(this, this.disableShape);
            this.updateBaseUI();
            if (this.openAsap) {
                this.open(this.openAsapAnimateParam)
            }
            openfl_Lib.current.stage.addEventListener("keyDown", $bind(this, this.onKeyDown))
        },
        onKeyDown: function(e) {
            if (e.keyCode == 27) {
                var consumed = this.onEscapePress();
                if (!consumed && this.closeOnEscape && this.isTopState()) {
                    this.close()
                }
            }
        },
        isTopState: function() {
            return this._viewState == "" || oaktree_OakTree.engine.states.isTopState(this._viewState)
        },
        onEscapePress: function() {
            return false
        },
        updateBaseUI: function() {
            if (this.closeButton != null) {
                this.closeButton.set_x(this.maxWidth - this.closeButton.get_width() - 8);
                this.closeButton.set_y(8)
            }
            if (this.disableShape != null) {
                this.disableShape.get_graphics().clear();
                this.disableShape.get_graphics().beginFill(0, 0.4);
                this.disableShape.get_graphics().drawRoundRect(0, 0, this.maxWidth, this.maxHeight, 20, 20);
                this.disableShape.get_graphics().endFill()
            }
        },
        resizeBackground: function(W, H, animated, callback) {
            if (animated == null) {
                animated = false
            }
            var _g = this;
            if (this.background == null) {
                this.background = new openfl_display_Sprite()
            }
            if (animated) {
                motion_Actuate.update($bind(this, this.resizeLoop), 0.5, [this.background.get_width(), this.background.get_height()], [W, H]).onComplete(function() {
                    _g.maxWidth = W;
                    _g.maxHeight = H;
                    _g.updateBaseUI();
                    if (callback != null) {
                        callback()
                    }
                })
            } else {
                this.maxWidth = W;
                this.maxHeight = H;
                this.background.get_graphics().clear();
                this.background.get_graphics().beginFill(16777215, 1);
                this.background.get_graphics().drawRoundRect(0, 0, W, H, 20, 20);
                this.background.get_graphics().endFill();
                this.updateBaseUI();
                this.resize(oaktree_OakTree.stage.stageWidth, oaktree_OakTree.stage.stageHeight);
                if (callback != null) {
                    callback()
                }
            }
        },
        resizeLoop: function(w, h) {
            if (this.background == null) {
                this.background = new openfl_display_Sprite()
            }
            this.background.get_graphics().clear();
            this.background.get_graphics().beginFill(16777215, 1);
            this.background.get_graphics().drawRoundRect(0, 0, w, h, 20, 20);
            this.background.get_graphics().endFill();
            this.maxWidth = this.background.get_width();
            this.maxHeight = this.background.get_height();
            this.resize(oaktree_OakTree.stage.stageWidth, oaktree_OakTree.stage.stageHeight)
        },
        dispose: function() {
            openfl_Lib.current.stage.removeEventListener("keyDown", $bind(this, this.onKeyDown));
            this.onClose.removeAll();
            this.onLateClose.removeAll();
            if (this.disableShape != null) {
                this.disableShape.set_visible(false);
                this.disableShape.removeEventListener("click", $bind(this, this.onDisableClick))
            }
            if (this.closeButton != null) {
                this.closeButton.removeEventListener("click", $bind(this, this.onCloseButtonClick));
                this.closeButton.dispose()
            }
            oaktree_ext_ui_View.prototype.dispose.call(this)
        },
        enable: function() {
            if (this.disableShape != null) {
                this.disableShape.set_visible(false)
            }
            oaktree_ext_ui_View.prototype.enable.call(this)
        },
        disable: function() {
            this.addChild(this.closeButton);
            if (this.disableShape != null) {
                this.disableShape.set_visible(true)
            }
            oaktree_ext_ui_View.prototype.disable.call(this)
        },
        onDisableClick: function(e) {
            if (this.allowDisableClose) {
                oaktree_OakTree.events.dispatchEventWith("ShopEvent::DISABLE_CLOSED");
                this.enable()
            }
        },
        open: function(animate) {
            if (animate == null) {
                animate = false
            }
            openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
            if (this.opening) {
                return
            }
            if (this.container == null) {
                this.openAsap = true;
                this.openAsapAnimateParam = animate;
                return
            }
            if (animate || this.animateOnOpen) {
                this.opening = true;
                motion_Actuate.stop(this.container, false);
                if (this.container.get_alpha() == 1) {
                    this.container.set_y(-this.container.get_height());
                    this.container.set_visible(true);
                    this.container.set_alpha(0)
                }
                motion_Actuate.tween(this.container, this.openAnimationDuration, {
                    y: 0,
                    alpha: 1
                }).onComplete($bind(this, this.dialogReady));
                this.set_visible(true)
            } else {
                this.container.set_visible(true);
                this.dialogReady()
            }
            this.onShow();
            oaktree_ext_ui_View.prototype.open.call(this)
        },
        dialogReady: function() {
            this.opening = false
        },
        onShow: function() {
            if (this._viewState != null) {
                oaktree_OakTree.engine.states.enable(this._viewState)
            }
        },
        onHide: function() {
            if (this._viewState != null) {
                oaktree_OakTree.engine.states.disable(this._viewState)
            }
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            oaktree_ext_ui_View.prototype.close.call(this);
            this.opening = false;
            if (this.container != null && (animate || this.animateOnOpen)) {
                motion_Actuate.tween(this.container, this.closeAnimationDuration, {
                    y: -this.container.get_height(),
                    alpha: 0
                }).onComplete($bind(this, this.postClose))
            } else {
                this.postClose()
            }
            this.dispatchEvent(new oaktree_core_events_GameEvent(oaktree_ext_ui_views_GenericDialog.CLOSE, this))
        },
        postClose: function() {
            if (this.opening) {
                return
            }
            this.onHide();
            this.deinitialize();
            this.onClose.dispatch();
            this.onLateClose.dispatch();
            this.dispose();
            oaktree_OakTree.get_scenes().remove(this)
        },
        onCloseButtonClick: function(e) {
            this.close();
            openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage)
        },
        removeChild: function(child) {
            if (this.container.contains(child)) {
                return this.container.removeChild(child)
            }
            return oaktree_ext_ui_View.prototype.removeChild.call(this, child)
        },
        contains: function(child) {
            if (this.container != null && this.container.contains(child)) {
                return true
            }
            return oaktree_ext_ui_View.prototype.contains.call(this, child)
        },
        addChild: function(child) {
            if (js_Boot.__instanceof(child, oaktree_core_IEntity)) {
                this.addEntity(child)
            }
            return this.container.addChild(child)
        },
        setChildIndex: function(child, index) {
            this.container.setChildIndex(child, index);
            return
        },
        showLoading: function(loadingText) {
            if (loadingText == null) {
                loadingText = "Loading..."
            }
            if (this.loadingLabel == null) {
                this.loadingLabel = new oaktree_ext_ui_Label({
                    text: loadingText,
                    fontSize: 28,
                    bold: true
                });
                this.loadingLabel.set_x((this.maxWidth - this.loadingLabel.get_width()) / 2);
                this.loadingLabel.set_y((this.maxHeight - this.loadingLabel.get_height()) / 2);
                this.loadingLabel.set_alpha(0)
            }
            this.loadingLabel.set_visible(true);
            this.addChild(this.loadingLabel);
            motion_Actuate.tween(this.loadingLabel, 0.5, {
                alpha: 1
            });
            this.closeButton.set_visible(false)
        },
        hideLoading: function() {
            var _g = this;
            if (this.loadingLabel != null && this.loadingLabel.parent != null) {
                motion_Actuate.tween(this.loadingLabel, 0.5, {
                    alpha: 0
                }, true).onComplete(function() {
                    _g.removeChild(_g.loadingLabel)
                })
            }
            if (this.closeButton != null && this.container != null) {
                this.closeButton.set_visible(true);
                this.setChildIndex(this.closeButton, this.get_numChildren())
            }
        },
        resize: function(W, H) {
            this.set_x(W * this.parentAnchorX - this.maxWidth * oaktree_ext_ui_views_GenericDialog.initialHighDpiScale * this.anchorX);
            this.set_y(H * this.parentAnchorY - this.maxHeight * oaktree_ext_ui_views_GenericDialog.initialHighDpiScale * this.anchorY)
        },
        __class__: oaktree_ext_ui_views_GenericDialog
    });
    var agario_views_LoginElsewhereDialog = function() {
        oaktree_ext_ui_views_GenericDialog.call(this, "loginElsewhereDialog");
        this.maxWidth = 420;
        this.maxHeight = 400
    };
    $hxClasses["agario.views.LoginElsewhereDialog"] = agario_views_LoginElsewhereDialog;
    agario_views_LoginElsewhereDialog.__name__ = ["agario", "views", "LoginElsewhereDialog"];
    agario_views_LoginElsewhereDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_LoginElsewhereDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        disconnectDialog: null,
        okButton: null,
        titleLabel: null,
        textLabel: null,
        icon: null,
        _container: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this._container = new openfl_display_Sprite();
            this.addChild(this._container);
            Core.get_events().addEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            this.buildUI()
        },
        buildUI: function() {
            var _g = this;
            this._container.get_graphics().beginFill(16119285, 1);
            this._container.get_graphics().drawRect(25, 80, this.maxWidth - 50, this.maxHeight - 160);
            this._container.get_graphics().endFill();
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("web_menu_login_elsewhere_header"),
                fontSize: 30,
                color: 3421236,
                width: this.maxWidth - 20,
                autoSize: 1,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight());
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(20);
            this.titleLabel.set_selectable(false);
            this._container.addChild(this.titleLabel);
            this.textLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("web_menu_login_elsewhere_footer"),
                fontSize: 17,
                color: 3421236,
                width: this.maxWidth - 100,
                autoSize: 0,
                align: 0,
                multiline: true
            });
            this.textLabel.set_height(this.textLabel.get_textHeight() + 5);
            this.textLabel.set_x((this.maxWidth - this.textLabel.get_width()) * 0.5);
            this.textLabel.set_y(250);
            this.textLabel.set_selectable(false);
            this._container.addChild(this.textLabel);
            this.okButton = new agario_views_controls_FlatButton({
                labelUp: {
                    text: oaktree_ext_localization_I18n.text("menu_login_elsewhere_button"),
                    color: 16777215,
                    fontSize: 15
                },
                width: 130,
                height: 35,
                colorUp: 5880408,
                colorOver: 4496708
            });
            this.okButton.set_x((this.maxWidth - this.okButton.get_width()) * 0.5);
            this.okButton.set_y(this.maxHeight - 20 - this.okButton.get_height());
            this.okButton.addEventListener("click", $bind(this, this.onCloseButtonClick));
            this._container.addChild(this.okButton);
            this.icon = new openfl_display_Bitmap(Core.get_assets().getTexture("alert_icon", "main_shop").get_bitmapData());
            this.icon.set_x((this.maxWidth - this.icon.get_width()) * 0.5);
            this.icon.set_y(110);
            this._container.addChild(this.icon);
            Core.get_events().addEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().addEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog));
            Core.get_events().addEventListener("shop_event::allow_disable_close", $bind(this, this.handleAllowDisableCloseEvent));
            this.addEventListener("close", function(e) {
                Core.get_events().dispatchEventWith("ShopEvent::SHOP_ENABLED");
                _g.enable();
                _g.closeButton.set_enabled(true)
            }, false, 0, true)
        },
        onConnectionLost: function(e) {
            Core.views.closeAllViews(agario_views_ShopDialog);
            this.disable();
            this.disconnectDialog = new agario_module_shop_view_ConnectionLostDialog();
            Core.views.openView(this.disconnectDialog, {
                priority: 5,
                animate: true,
                allowClickClose: true,
                callerView: this
            });
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            this.disconnectDialog.addEventListener("close", $bind(this, this.closeDisconnect))
        },
        closeDisconnect: function(e) {
            Core.views.closeTopView()
        },
        enableDialog: function(e) {
            this.enable()
        },
        enable: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
            this.closeButton.set_enabled(true)
        },
        disableDialog: function(e) {
            this.closeButton.set_enabled(false);
            this.disable()
        },
        handleAllowDisableCloseEvent: function(e) {
            var status = e.data;
            this.allowDisableClose = status
        },
        onCloseHandler: function() {
            this.enableDialog()
        },
        dispose: function() {
            this.destroy();
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this)
        },
        destroy: function() {
            var shop = Core.services.shop;
            Core.get_events().removeEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().removeEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog));
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            if (this.disconnectDialog != null) {
                this.disconnectDialog.removeEventListener("close", $bind(this, this.closeDisconnect))
            }
            this.okButton.removeEventListener("click", $bind(this, this.onCloseButtonClick))
        },
        __class__: agario_views_LoginElsewhereDialog
    });
    var agario_config_CommandMap = function() {};
    $hxClasses["agario.config.CommandMap"] = agario_config_CommandMap;
    agario_config_CommandMap.__name__ = ["agario", "config", "CommandMap"];
    var agario_config_Configs = function() {};
    $hxClasses["agario.config.Configs"] = agario_config_Configs;
    agario_config_Configs.__name__ = ["agario", "config", "Configs"];
    agario_config_Configs.setProperty = function(field, value) {
        agario_config_Configs.properties.set(field, value)
    };
    agario_config_Configs.getProperty = function(field) {
        if (agario_config_Configs.properties.exists(field)) {
            return agario_config_Configs.properties.get(field)
        }
        return agario_config_Configs.NOT_FOUND
    };
    var agario_config_GameStates = function() {};
    $hxClasses["agario.config.GameStates"] = agario_config_GameStates;
    agario_config_GameStates.__name__ = ["agario", "config", "GameStates"];
    var agario_config_Services = function() {};
    $hxClasses["agario.config.Services"] = agario_config_Services;
    agario_config_Services.__name__ = ["agario", "config", "Services"];
    agario_config_Services.getModelList = function() {
        var result = [new oaktree_ext_services_ServiceConfig(agario_services_ConfigurationService), new oaktree_ext_services_ServiceConfig(agario_services_GameServerService, {}), new oaktree_ext_services_ServiceConfig(agario_game_server_GameConnectionService, {
            maxReconnect: 5,
            retryTimeout: 5000
        }), new oaktree_ext_services_ServiceConfig(agario_security_AuthenticationService), new oaktree_ext_services_ServiceConfig(agario_services_ShopService), new oaktree_ext_services_ServiceConfig(agario_models_DataManager), new oaktree_ext_services_ServiceConfig(agario_services_ViewService), new oaktree_ext_services_ServiceConfig(agario_services_social_SocialService), new oaktree_ext_services_ServiceConfig(agario_services_social_FBSocialService), new oaktree_ext_services_ServiceConfig(agario_services_social_GoogleSocialService), new oaktree_ext_services_ServiceConfig(agario_services_social_TwitterSocialService), new oaktree_ext_services_ServiceConfig(agario_services_GamepadControllerService), new oaktree_ext_services_ServiceConfig(agario_services_promo_PromoService)];
        if (Core.environment.platform == agario_services_WebPlatform.Facebook) {
            result.push(new oaktree_ext_services_ServiceConfig(agario_services_FBPaymentService, {
                endpoint: agario_config_Configs.getProperty("fb_endpoint")
            }))
        } else {
            result.push(new oaktree_ext_services_ServiceConfig(agario_services_XsollaPaymentService, {
                endpoint: agario_config_Configs.getProperty("xsolla_endpoint")
            }))
        }
        return result
    };
    var agario_display_ButtonColor = function(_buttonColor, _buttonOverColor, _textColor, _textOverColor, _buttonOutlineColor) {
        if (_buttonOutlineColor == null) {
            _buttonOutlineColor = -1
        }
        if (_textOverColor == null) {
            _textOverColor = 0
        }
        if (_textColor == null) {
            _textColor = 0
        }
        if (_buttonOverColor == null) {
            _buttonOverColor = 0
        }
        if (_buttonColor == null) {
            _buttonColor = 0
        }
        this.hasOutline = false;
        this.buttonColor = agario_display_Color.createFromInt(_buttonColor);
        this.buttonOverColor = agario_display_Color.createFromInt(_buttonOverColor);
        this.textColor = agario_display_Color.createFromInt(_textColor);
        this.textOverColor = agario_display_Color.createFromInt(_textOverColor);
        if (_buttonOutlineColor >= 0) {
            this.hasOutline = true
        } else {
            _buttonOutlineColor = 0
        }
        this.buttonOutlineColor = agario_display_Color.createFromInt(_buttonOutlineColor)
    };
    $hxClasses["agario.display.ButtonColor"] = agario_display_ButtonColor;
    agario_display_ButtonColor.__name__ = ["agario", "display", "ButtonColor"];
    agario_display_ButtonColor.prototype = {
        buttonColor: null,
        buttonOverColor: null,
        textColor: null,
        textOverColor: null,
        buttonOutlineColor: null,
        hasOutline: null,
        __class__: agario_display_ButtonColor
    };
    var agario_display_Color = function(R, G, B, A) {
        if (A == null) {
            A = 1
        }
        if (B == null) {
            B = 0
        }
        if (G == null) {
            G = 0
        }
        if (R == null) {
            R = 0
        }
        this.set(R, G, B, A)
    };
    $hxClasses["agario.display.Color"] = agario_display_Color;
    agario_display_Color.__name__ = ["agario", "display", "Color"];
    agario_display_Color.createFromInt = function(value) {
        var c = new agario_display_Color();
        c.rgb(value);
        return c
    };
    agario_display_Color.prototype = {
        r: null,
        g: null,
        b: null,
        a: null,
        set: function(R, G, B, A) {
            if (A == null) {
                A = 1
            }
            if (B == null) {
                B = 0
            }
            if (G == null) {
                G = 0
            }
            if (R == null) {
                R = 0
            }
            this.r = R;
            this.g = G;
            this.b = B;
            this.a = A;
            return this
        },
        rgb: function(_rgb) {
            if (_rgb == null) {
                _rgb = 16777215
            }
            this.from_int(_rgb);
            return this
        },
        clone: function() {
            return new agario_display_Color(this.r, this.g, this.b, this.a)
        },
        from_int: function(value) {
            this.r = value >> 16;
            this.g = value >> 8 & 255;
            this.b = value & 255
        },
        toInt: function() {
            return (this.r << 16) + (this.g << 8) + this.b
        },
        __class__: agario_display_Color
    };
    var agario_display_ButtonColors = function() {};
    $hxClasses["agario.display.ButtonColors"] = agario_display_ButtonColors;
    agario_display_ButtonColors.__name__ = ["agario", "display", "ButtonColors"];
    var agario_display_ImageNode = function(content) {
        this.anchorY = 0.5;
        this.anchorX = 0.5;
        oaktree_core_VisualEntity.call(this);
        this.content = content;
        this.addChild(this.content);
        this._update()
    };
    $hxClasses["agario.display.ImageNode"] = agario_display_ImageNode;
    agario_display_ImageNode.__name__ = ["agario", "display", "ImageNode"];
    agario_display_ImageNode.__super__ = oaktree_core_VisualEntity;
    agario_display_ImageNode.prototype = $extend(oaktree_core_VisualEntity.prototype, {
        userData: null,
        anchorX: null,
        anchorY: null,
        originX: null,
        originY: null,
        content: null,
        _update: function() {
            this.content.set_x(-this.anchorX * this.get_width());
            this.content.set_y(-this.anchorY * this.get_height())
        },
        setAnchorPoint: function(point) {
            this.anchorX = point.x;
            this.anchorY = point.y;
            this._update()
        },
        setPosition: function(point) {
            this.set_x(point.x);
            this.set_y(point.y);
            this._update()
        },
        getScale: function() {
            return this.content.get_scaleX()
        },
        setScale: function(value) {
            this.content.set_scaleX(value);
            this.content.set_scaleY(value);
            this._update()
        },
        setColor: function(color) {
            haxe_Log.trace("ImageNode.setColor isn't implemented", {
                fileName: "ImageNode.hx",
                lineNumber: 89,
                className: "agario.display.ImageNode",
                methodName: "setColor"
            })
        },
        get_width: function() {
            return this.content.get_width()
        },
        get_height: function() {
            return this.content.get_height()
        },
        get_originX: function() {
            return this.get_width() * this.anchorX
        },
        get_originY: function() {
            return this.get_height() * this.anchorY
        },
        __class__: agario_display_ImageNode,
        __properties__: $extend(oaktree_core_VisualEntity.prototype.__properties__, {
            get_originY: "get_originY",
            get_originX: "get_originX"
        })
    });
    var agario_display_LabelNode = function(pOptions) {
        this._label = new agario_display_LabelOutline(pOptions);
        agario_display_ImageNode.call(this, this._label)
    };
    $hxClasses["agario.display.LabelNode"] = agario_display_LabelNode;
    agario_display_LabelNode.__name__ = ["agario", "display", "LabelNode"];
    agario_display_LabelNode.__super__ = agario_display_ImageNode;
    agario_display_LabelNode.prototype = $extend(agario_display_ImageNode.prototype, {
        _label: null,
        label: null,
        get_label: function() {
            return this._label
        },
        initialize: function(pOptions) {
            this._label.initialize(pOptions)
        },
        setText: function(text, ignoreAutoAdjust) {
            if (ignoreAutoAdjust == null) {
                ignoreAutoAdjust = false
            }
            this._label.setText(text, ignoreAutoAdjust);
            return this._label.get_text()
        },
        setOutline: function(color, size) {
            this._label.setOutline(color, size)
        },
        _update: function() {
            this.content.set_x(-this.anchorX * this._label.get_width());
            this.content.set_y(-this.anchorY * this._label.get_textHeight())
        },
        __class__: agario_display_LabelNode,
        __properties__: $extend(agario_display_ImageNode.prototype.__properties__, {
            get_label: "get_label"
        })
    });
    var agario_display_SpriteNode = function(root) {
        this.childrenList = [];
        if (root == null) {
            root = new openfl_display_Sprite();
            root.set_name("spritenode_root")
        }
        agario_display_ImageNode.call(this, root)
    };
    $hxClasses["agario.display.SpriteNode"] = agario_display_SpriteNode;
    agario_display_SpriteNode.__name__ = ["agario", "display", "SpriteNode"];
    agario_display_SpriteNode.__super__ = agario_display_ImageNode;
    agario_display_SpriteNode.prototype = $extend(agario_display_ImageNode.prototype, {
        childrenList: null,
        numNodes: null,
        get_numNodes: function() {
            return (js_Boot.__cast(this.content, openfl_display_DisplayObjectContainer)).get_numChildren()
        },
        getNodeAt: function(index) {
            return (js_Boot.__cast(this.content, openfl_display_DisplayObjectContainer)).getChildAt(index)
        },
        setNodeIndex: function(child, index) {
            (js_Boot.__cast(this.content, openfl_display_DisplayObjectContainer)).setChildIndex(child, index)
        },
        addNode: function(child) {
            return (js_Boot.__cast(this.content, openfl_display_DisplayObjectContainer)).addChild(child)
        },
        addNodeAt: function(child, index, priority) {
            if (priority == null) {
                priority = 0
            }
            this.childrenList.push({
                child: js_Boot.__cast(child, agario_display_ImageNode),
                order: priority,
                insertOrder: index
            });
            this.addNode(child);
            this.sortChildren();
            return child
        },
        removeNode: function(child) {
            return (js_Boot.__cast(this.content, openfl_display_DisplayObjectContainer)).addChild(child)
        },
        sortChildren: function() {
            this.childrenList.sort(function(a, b) {
                var dif = 0;
                if (a.order == b.order) {
                    dif = a.insertOrder - b.insertOrder
                }
                dif += (a.order - b.order) * 1000;
                return dif
            });
            var _g1 = 0;
            var _g = this.childrenList.length;
            while (_g1 < _g) {
                var i = _g1++;
                var node = this.childrenList[i];
                this.setNodeIndex(node.child, this.get_numNodes() - 1)
            }
        },
        __class__: agario_display_SpriteNode,
        __properties__: $extend(agario_display_ImageNode.prototype.__properties__, {
            get_numNodes: "get_numNodes"
        })
    });
    var openfl_text_TextField = function() {
        openfl_display_InteractiveObject.call(this);
        this.__caretIndex = -1;
        this.__displayAsPassword = false;
        this.__graphics = new openfl_display_Graphics(this);
        this.__textEngine = new openfl__$internal_text_TextEngine(this);
        this.__layoutDirty = true;
        this.__offsetX = 0;
        this.__offsetY = 0;
        this.__tabEnabled = true;
        this.__mouseWheelEnabled = true;
        this.__text = "";
        if (openfl_text_TextField.__defaultTextFormat == null) {
            openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman", 12, 0, false, false, false, "", "", 3, 0, 0, 0, 0);
            openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
            openfl_text_TextField.__defaultTextFormat.bullet = false;
            openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
            openfl_text_TextField.__defaultTextFormat.kerning = false
        }
        this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
        var x = new openfl__$internal_text_TextFormatRange(this.__textFormat, 0, 0);
        this.__textEngine.textFormatRanges.push(x);
        this.addEventListener("mouseDown", $bind(this, this.this_onMouseDown))
    };
    $hxClasses["openfl.text.TextField"] = openfl_text_TextField;
    openfl_text_TextField.__name__ = ["openfl", "text", "TextField"];
    openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
    openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype, {
        __bounds: null,
        __caretIndex: null,
        __cursorTimer: null,
        __dirty: null,
        __displayAsPassword: null,
        __inputEnabled: null,
        __isHTML: null,
        __layoutDirty: null,
        __mouseWheelEnabled: null,
        __offsetX: null,
        __offsetY: null,
        __selectionIndex: null,
        __showCursor: null,
        __symbol: null,
        __text: null,
        __htmlText: null,
        __textEngine: null,
        __textFormat: null,
        __div: null,
        appendText: function(text) {
            if (text == null || text == "") {
                return
            }
            this.__dirty = true;
            this.__layoutDirty = true;
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
            this.__updateText(this.__text + text);
            ((function($this) {
                var $r;
                var index = $this.__textEngine.textFormatRanges.get_length() - 1;
                $r = $this.__textEngine.textFormatRanges.get(index);
                return $r
            }(this))).end = this.__text.length
        },
        getCharBoundaries: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__text.length - 1) {
                return null
            }
            this.__updateLayout();
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.get_length()) {
                var group = _g1.get(_g);
                ++_g;
                if (charIndex >= group.startIndex && charIndex <= group.endIndex) {
                    var x = group.offsetX;
                    var _g3 = 0;
                    var _g2 = charIndex - group.startIndex;
                    while (_g3 < _g2) {
                        var i = _g3++;
                        x += group.advances[i]
                    }
                    return new openfl_geom_Rectangle(x, group.offsetY, group.advances[charIndex - group.startIndex], group.ascent + group.descent)
                }
            }
            return null
        },
        getCharIndexAtPoint: function(x, y) {
            if (x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
                return -1
            }
            this.__updateLayout();
            x += this.get_scrollH();
            var _g1 = 0;
            var _g = this.get_scrollV() - 1;
            while (_g1 < _g) {
                var i = _g1++;
                y += this.__textEngine.lineHeights.get(i)
            }
            var _g2 = 0;
            var _g11 = this.__textEngine.layoutGroups;
            while (_g2 < _g11.get_length()) {
                var group = _g11.get(_g2);
                ++_g2;
                if (y >= group.offsetY && y <= group.offsetY + group.height) {
                    if (x >= group.offsetX && x <= group.offsetX + group.width) {
                        var advance = 0;
                        var _g3 = 0;
                        var _g21 = group.advances.length;
                        while (_g3 < _g21) {
                            var i1 = _g3++;
                            advance += group.advances[i1];
                            if (x <= group.offsetX + advance) {
                                return group.startIndex + i1
                            }
                        }
                        return group.endIndex
                    }
                }
            }
            return -1
        },
        getFirstCharInParagraph: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__text.length - 1) {
                return 0
            }
            var index = this.__textEngine.getLineBreakIndex();
            var startIndex = 0;
            while (index > -1) {
                if (index <= charIndex) {
                    startIndex = index + 1
                } else {
                    if (index > charIndex) {
                        break
                    }
                }
                index = this.__textEngine.getLineBreakIndex(index + 1)
            }
            return startIndex
        },
        getLineIndexAtPoint: function(x, y) {
            this.__updateLayout();
            if (x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
                return -1
            }
            var _g1 = 0;
            var _g = this.get_scrollV() - 1;
            while (_g1 < _g) {
                var i = _g1++;
                y += this.__textEngine.lineHeights.get(i)
            }
            var _g2 = 0;
            var _g11 = this.__textEngine.layoutGroups;
            while (_g2 < _g11.get_length()) {
                var group = _g11.get(_g2);
                ++_g2;
                if (y >= group.offsetY && y <= group.offsetY + group.height) {
                    return group.lineIndex
                }
            }
            return -1
        },
        getLineIndexOfChar: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__text.length) {
                return -1
            }
            this.__updateLayout();
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.get_length()) {
                var group = _g1.get(_g);
                ++_g;
                if (group.startIndex <= charIndex && group.endIndex >= charIndex) {
                    return group.lineIndex
                }
            }
            return -1
        },
        getLineLength: function(lineIndex) {
            this.__updateLayout();
            if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
                return 0
            }
            var startIndex = -1;
            var endIndex = -1;
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.get_length()) {
                var group = _g1.get(_g);
                ++_g;
                if (group.lineIndex == lineIndex) {
                    if (startIndex == -1) {
                        startIndex = group.startIndex
                    }
                } else {
                    if (group.lineIndex == lineIndex + 1) {
                        endIndex = group.startIndex;
                        break
                    }
                }
            }
            if (endIndex == -1) {
                endIndex = this.__text.length
            }
            return endIndex - startIndex
        },
        getLineMetrics: function(lineIndex) {
            this.__updateLayout();
            var ascender = this.__textEngine.lineAscents.get(lineIndex);
            var descender = this.__textEngine.lineDescents.get(lineIndex);
            var leading = this.__textEngine.lineLeadings.get(lineIndex);
            var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
            var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
            var margin;
            var _g = this.__textFormat.align;
            switch (_g) {
                case 3:
                case 2:
                case 5:
                    margin = 2;
                    break;
                case 4:
                case 1:
                    margin = this.__textEngine.width - lineWidth - 2;
                    break;
                case 0:
                    margin = (this.__textEngine.width - lineWidth) / 2;
                    break
            }
            return new openfl_text_TextLineMetrics(margin, lineWidth, lineHeight, ascender, descender, leading)
        },
        getLineOffset: function(lineIndex) {
            this.__updateLayout();
            if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
                return -1
            }
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.get_length()) {
                var group = _g1.get(_g);
                ++_g;
                if (group.lineIndex == lineIndex) {
                    return group.startIndex
                }
            }
            return 0
        },
        getLineText: function(lineIndex) {
            this.__updateLayout();
            if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
                return null
            }
            var startIndex = -1;
            var endIndex = -1;
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.get_length()) {
                var group = _g1.get(_g);
                ++_g;
                if (group.lineIndex == lineIndex) {
                    if (startIndex == -1) {
                        startIndex = group.startIndex
                    }
                } else {
                    if (group.lineIndex == lineIndex + 1) {
                        endIndex = group.startIndex;
                        break
                    }
                }
            }
            if (endIndex == -1) {
                endIndex = this.__text.length
            }
            return this.__textEngine.text.substring(startIndex, endIndex)
        },
        getParagraphLength: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__text.length - 1) {
                return 0
            }
            var startIndex = this.getFirstCharInParagraph(charIndex);
            var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
            if (endIndex == 0) {
                endIndex = this.__text.length
            }
            return endIndex - startIndex
        },
        getTextFormat: function(beginIndex, endIndex) {
            if (endIndex == null) {
                endIndex = 0
            }
            if (beginIndex == null) {
                beginIndex = 0
            }
            var format = null;
            var _g = 0;
            var _g1 = this.__textEngine.textFormatRanges;
            while (_g < _g1.get_length()) {
                var group = _g1.get(_g);
                ++_g;
                if (group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
                    if (format == null) {
                        format = group.format.clone()
                    } else {
                        if (group.format.font != format.font) {
                            format.font = null
                        }
                        if (group.format.size != format.size) {
                            format.size = null
                        }
                        if (group.format.color != format.color) {
                            format.color = null
                        }
                        if (group.format.bold != format.bold) {
                            format.bold = null
                        }
                        if (group.format.italic != format.italic) {
                            format.italic = null
                        }
                        if (group.format.underline != format.underline) {
                            format.underline = null
                        }
                        if (group.format.url != format.url) {
                            format.url = null
                        }
                        if (group.format.target != format.target) {
                            format.target = null
                        }
                        if (group.format.align != format.align) {
                            format.align = null
                        }
                        if (group.format.leftMargin != format.leftMargin) {
                            format.leftMargin = null
                        }
                        if (group.format.rightMargin != format.rightMargin) {
                            format.rightMargin = null
                        }
                        if (group.format.indent != format.indent) {
                            format.indent = null
                        }
                        if (group.format.leading != format.leading) {
                            format.leading = null
                        }
                        if (group.format.blockIndent != format.blockIndent) {
                            format.blockIndent = null
                        }
                        if (group.format.bullet != format.bullet) {
                            format.bullet = null
                        }
                        if (group.format.kerning != format.kerning) {
                            format.kerning = null
                        }
                        if (group.format.letterSpacing != format.letterSpacing) {
                            format.letterSpacing = null
                        }
                        if (group.format.tabStops != format.tabStops) {
                            format.tabStops = null
                        }
                    }
                }
            }
            return format
        },
        replaceSelectedText: function(value) {
            if (value == "" && this.__selectionIndex == this.__caretIndex) {
                return
            }
            var startIndex;
            if (this.__caretIndex < this.__selectionIndex) {
                startIndex = this.__caretIndex
            } else {
                startIndex = this.__selectionIndex
            }
            var endIndex;
            if (this.__caretIndex > this.__selectionIndex) {
                endIndex = this.__caretIndex
            } else {
                endIndex = this.__selectionIndex
            }
            this.replaceText(startIndex, endIndex, value);
            var i = startIndex + value.length;
            this.setSelection(i, i)
        },
        replaceText: function(beginIndex, endIndex, newText) {
            if (endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
                return
            }
            this.__updateText(this.__text.substring(0, beginIndex) + newText + this.__text.substring(endIndex));
            var offset = newText.length - (endIndex - beginIndex);
            var i = 0;
            var range;
            while (i < this.__textEngine.textFormatRanges.get_length()) {
                range = this.__textEngine.textFormatRanges.get(i);
                if (range.start <= beginIndex && range.end >= endIndex) {
                    range.end += offset;
                    i++
                } else {
                    if (range.start >= beginIndex && range.end <= endIndex) {
                        if (i > 0) {
                            this.__textEngine.textFormatRanges.splice(i, 1)
                        } else {
                            range.start = 0;
                            range.end = beginIndex + newText.length;
                            i++
                        }
                        offset -= range.end - range.start
                    } else {
                        if (range.start > beginIndex && range.start <= endIndex) {
                            range.start += offset;
                            i++
                        } else {
                            i++
                        }
                    }
                }
            }
            this.__dirty = true;
            this.__layoutDirty = true;
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
        },
        setSelection: function(beginIndex, endIndex) {
            this.__selectionIndex = beginIndex;
            this.__caretIndex = endIndex
        },
        setTextFormat: function(format, beginIndex, endIndex) {
            if (endIndex == null) {
                endIndex = 0
            }
            if (beginIndex == null) {
                beginIndex = 0
            }
            var max = this.get_text().length;
            var range;
            if (beginIndex < 0) {
                beginIndex = 0
            }
            if (endIndex < 0) {
                endIndex = 0
            }
            if (endIndex == 0) {
                if (beginIndex == 0) {
                    endIndex = max
                } else {
                    endIndex = beginIndex + 1
                }
            }
            if (endIndex < beginIndex) {
                return
            }
            if (beginIndex == 0 && endIndex == max) {
                this.__textFormat.__merge(format);
                if (this.__textEngine.textFormatRanges.get_length() > 1) {
                    var len = this.__textEngine.textFormatRanges.get_length() - 1;
                    this.__textEngine.textFormatRanges.splice(1, len);
                    range = this.__textEngine.textFormatRanges.get(0);
                    range.format = this.__textFormat;
                    range.start = 0;
                    range.end = max
                }
            } else {
                var index = this.__textEngine.textFormatRanges.get_length();
                var searchIndex;
                while (index > 0) {
                    index--;
                    range = this.__textEngine.textFormatRanges.get(index);
                    if (range.start == beginIndex && range.end == endIndex) {
                        range.format = openfl_text_TextField.__defaultTextFormat.clone();
                        range.format.__merge(format);
                        return
                    }
                    if (range.start > beginIndex && range.end < endIndex) {
                        searchIndex = this.__textEngine.textFormatRanges.indexOf(range, 0);
                        if (searchIndex > -1) {
                            this.__textEngine.textFormatRanges.splice(searchIndex, 1)
                        }
                    }
                }
                var prevRange = null;
                var nextRange = null;
                var _g1 = 0;
                var _g = this.__textEngine.textFormatRanges.get_length();
                while (_g1 < _g) {
                    var i = _g1++;
                    range = this.__textEngine.textFormatRanges.get(i);
                    if (beginIndex > 0) {
                        if (prevRange == null && range.end >= beginIndex) {
                            prevRange = range
                        }
                    }
                    if (endIndex < max) {
                        if (range.start <= endIndex) {
                            nextRange = range
                        }
                    }
                }
                if (nextRange == prevRange) {
                    nextRange = new openfl__$internal_text_TextFormatRange(nextRange.format.clone(), nextRange.start, nextRange.end);
                    this.__textEngine.textFormatRanges.push(nextRange)
                }
                if (prevRange != null) {
                    prevRange.end = beginIndex;
                    if (prevRange.end <= prevRange.start) {
                        searchIndex = this.__textEngine.textFormatRanges.indexOf(prevRange, 0);
                        if (searchIndex > -1) {
                            this.__textEngine.textFormatRanges.splice(searchIndex, 1)
                        }
                        prevRange = null
                    }
                }
                if (nextRange != null) {
                    nextRange.start = endIndex;
                    if (nextRange.start >= nextRange.end) {
                        searchIndex = this.__textEngine.textFormatRanges.indexOf(nextRange, 0);
                        if (searchIndex > -1) {
                            this.__textEngine.textFormatRanges.splice(searchIndex, 1)
                        }
                        nextRange = null
                    }
                }
                var textFormat = openfl_text_TextField.__defaultTextFormat.clone();
                textFormat.__merge(format);
                var x = new openfl__$internal_text_TextFormatRange(textFormat, beginIndex, endIndex);
                this.__textEngine.textFormatRanges.push(x);
                this.__textEngine.textFormatRanges.sort(function(a, b) {
                    if (a.start < b.start || a.end < b.end) {
                        return -1
                    } else {
                        if (a.start > b.start || a.end > b.end) {
                            return 1
                        }
                    }
                    return 0
                })
            }
            this.__dirty = true;
            this.__layoutDirty = true;
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
        },
        __caretBeginningOfLine: function() {
            if (this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
                this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex))
            } else {
                this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex))
            }
        },
        __caretEndOfLine: function() {
            var lineIndex;
            if (this.__selectionIndex == this.__caretIndex) {
                lineIndex = this.getLineIndexOfChar(this.__caretIndex)
            } else {
                lineIndex = this.getLineIndexOfChar(Std["int"](Math.max(this.__caretIndex, this.__selectionIndex)))
            }
            if (lineIndex < this.__textEngine.numLines - 1) {
                this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1
            } else {
                this.__caretIndex = this.__text.length
            }
        },
        __caretNextCharacter: function() {
            if (this.__caretIndex < this.__text.length) {
                this.__caretIndex++
            }
        },
        __caretNextLine: function(lineIndex, caretIndex) {
            if (lineIndex == null) {
                lineIndex = this.getLineIndexOfChar(this.__caretIndex)
            }
            if (lineIndex < this.__textEngine.numLines - 1) {
                if (caretIndex == null) {
                    caretIndex = this.__caretIndex
                }
                this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex, lineIndex + 1)
            } else {
                this.__caretIndex = this.__text.length
            }
        },
        __caretPreviousCharacter: function() {
            if (this.__caretIndex > 0) {
                this.__caretIndex--
            }
        },
        __caretPreviousLine: function(lineIndex, caretIndex) {
            if (lineIndex == null) {
                lineIndex = this.getLineIndexOfChar(this.__caretIndex)
            }
            if (lineIndex > 0) {
                if (caretIndex == null) {
                    caretIndex = this.__caretIndex
                }
                this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex, lineIndex - 1)
            } else {
                this.__caretIndex = 0
            }
        },
        __dispatch: function(event) {
            if (event.eventPhase == 2 && event.type == "mouseUp") {
                var event1 = event;
                var group = this.__getGroup(this.get_mouseX(), this.get_mouseY(), true);
                if (group != null) {
                    var url = group.format.url;
                    if (url != "") {
                        if (StringTools.startsWith(url, "event:")) {
                            this.dispatchEvent(new openfl_events_TextEvent("link", false, false, HxOverrides.substr(url, 6, null)))
                        } else {
                            openfl_Lib.getURL(new openfl_net_URLRequest(url))
                        }
                    }
                }
            }
            return openfl_display_InteractiveObject.prototype.__dispatch.call(this, event)
        },
        __fromSymbol: function(swf, symbol) {
            this.__symbol = symbol;
            this.set_width(symbol.width);
            this.set_height(symbol.height);
            this.__offsetX = symbol.x;
            this.__offsetY = symbol.y;
            this.set_multiline(symbol.multiline);
            this.set_wordWrap(symbol.wordWrap);
            this.set_displayAsPassword(symbol.password);
            if (symbol.border) {
                this.set_border(true);
                this.set_background(true)
            }
            this.set_selectable(symbol.selectable);
            if (symbol.input) {
                this.set_type(1)
            }
            var format = new openfl_text_TextFormat();
            if (symbol.color != null) {
                format.color = symbol.color & 16777215
            }
            format.size = Math.round(symbol.fontHeight / 20);
            var font = swf.symbols.h[symbol.fontID];
            if (font != null) {}
            format.font = symbol.fontName;
            var found = false;
            var _g = format.font;
            if (_g == null) {
                found = true
            } else {
                switch (_g) {
                    case "_sans":
                    case "_serif":
                    case "_typewriter":
                    case "":
                        found = true;
                        break;
                    default:
                        var _g1 = 0;
                        var _g2 = openfl_text_Font.enumerateFonts();
                        while (_g1 < _g2.length) {
                            var font1 = _g2[_g1];
                            ++_g1;
                            if (font1.name == format.font) {
                                found = true;
                                break
                            }
                        }
                }
            }
            if (found) {
                this.set_embedFonts(true)
            } else {
                if (!openfl_text_TextField.__missingFontWarning.exists(format.font)) {
                    openfl_text_TextField.__missingFontWarning.set(format.font, true);
                    true;
                    lime_utils_Log.warn('Could not find required font "' + format.font + '", it has not been embedded', {
                        fileName: "TextField.hx",
                        lineNumber: 980,
                        className: "openfl.text.TextField",
                        methodName: "__fromSymbol"
                    })
                }
            }
            if (symbol.align != null) {
                if (symbol.align == "center") {
                    format.align = 0
                } else {
                    if (symbol.align == "right") {
                        format.align = 4
                    } else {
                        if (symbol.align == "justify") {
                            format.align = 2
                        }
                    }
                }
                format.leftMargin = symbol.leftMargin / 20 | 0;
                format.rightMargin = symbol.rightMargin / 20 | 0;
                format.indent = symbol.indent / 20 | 0;
                format.leading = symbol.leading / 20 | 0;
                if (this.get_embedFonts()) {
                    format.leading += 4
                }
            }
            this.set_defaultTextFormat(format);
            if (symbol.text != null) {
                if (symbol.html) {
                    this.set_htmlText(symbol.text)
                } else {
                    this.set_text(symbol.text)
                }
            }
        },
        __getAttributeMatch: function(regex) {
            if (regex.matched(2) != null) {
                return regex.matched(2)
            } else {
                return regex.matched(3)
            }
        },
        __getBounds: function(rect, matrix) {
            this.__updateLayout();
            var bounds = openfl_geom_Rectangle.__pool.get();
            bounds.copyFrom(this.__textEngine.bounds);
            bounds.x += this.__offsetX;
            bounds.y += this.__offsetY;
            bounds.__transform(bounds, matrix);
            rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
            openfl_geom_Rectangle.__pool.release(bounds)
        },
        __getCharIndexOnDifferentLine: function(charIndex, lineIndex) {
            if (charIndex < 0 || charIndex > this.__text.length) {
                return -1
            }
            if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
                return -1
            }
            var x = null;
            var y = null;
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.get_length()) {
                var group = _g1.get(_g);
                ++_g;
                if (charIndex >= group.startIndex && charIndex <= group.endIndex) {
                    x = group.offsetX;
                    var _g3 = 0;
                    var _g2 = charIndex - group.startIndex;
                    while (_g3 < _g2) {
                        var i = _g3++;
                        x += group.advances[i]
                    }
                    if (y != null) {
                        return this.__getPosition(x, y)
                    }
                }
                if (group.lineIndex == lineIndex) {
                    y = group.offsetY + group.height / 2;
                    if (x != null) {
                        return this.__getPosition(x, y)
                    }
                }
            }
            return -1
        },
        __getCursor: function() {
            var group = this.__getGroup(this.get_mouseX(), this.get_mouseY(), true);
            if (group != null && group.format.url != "") {
                return lime_ui_MouseCursor.POINTER
            } else {
                if (this.__textEngine.selectable) {
                    return lime_ui_MouseCursor.TEXT
                }
            }
            return null
        },
        __getGroup: function(x, y, precise) {
            if (precise == null) {
                precise = false
            }
            this.__updateLayout();
            x += this.get_scrollH();
            var _g1 = 0;
            var _g = this.get_scrollV() - 1;
            while (_g1 < _g) {
                var i = _g1++;
                y += this.__textEngine.lineHeights.get(i)
            }
            if (!precise && y > this.__textEngine.textHeight) {
                y = this.__textEngine.textHeight
            }
            var firstGroup = true;
            var group;
            var nextGroup;
            var _g11 = 0;
            var _g2 = this.__textEngine.layoutGroups.get_length();
            while (_g11 < _g2) {
                var i1 = _g11++;
                group = this.__textEngine.layoutGroups.get(i1);
                if (i1 < this.__textEngine.layoutGroups.get_length() - 1) {
                    nextGroup = this.__textEngine.layoutGroups.get(i1 + 1)
                } else {
                    nextGroup = null
                }
                if (firstGroup) {
                    if (y < group.offsetY) {
                        y = group.offsetY
                    }
                    if (x < group.offsetX) {
                        x = group.offsetX
                    }
                    firstGroup = false
                }
                if (y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
                    if (x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
                        return group
                    }
                }
            }
            return null
        },
        __getPosition: function(x, y) {
            var group = this.__getGroup(x, y);
            if (group == null) {
                return this.__text.length
            }
            var advance = 0;
            var _g1 = 0;
            var _g = group.advances.length;
            while (_g1 < _g) {
                var i = _g1++;
                advance += group.advances[i];
                if (x <= group.offsetX + advance) {
                    if (x <= group.offsetX + (advance - group.advances[i]) + group.advances[i] / 2) {
                        return group.startIndex + i
                    } else {
                        if (group.startIndex + i < group.endIndex) {
                            return group.startIndex + i + 1
                        } else {
                            return group.endIndex
                        }
                    }
                }
            }
            return group.endIndex
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
                return false
            }
            if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) {
                return false
            }
            this.__getRenderTransform();
            this.__updateLayout();
            var px = this.__renderTransform.__transformInverseX(x, y);
            var py = this.__renderTransform.__transformInverseY(x, y);
            if (this.__textEngine.bounds.contains(px, py)) {
                if (stack != null) {
                    stack.push(hitObject)
                }
                return true
            }
            return false
        },
        __hitTestMask: function(x, y) {
            this.__getRenderTransform();
            this.__updateLayout();
            var px = this.__renderTransform.__transformInverseX(x, y);
            var py = this.__renderTransform.__transformInverseY(x, y);
            if (this.__textEngine.bounds.contains(px, py)) {
                return true
            }
            return false
        },
        __renderCairo: function(renderSession) {},
        __renderCanvas: function(renderSession) {
            openfl__$internal_renderer_canvas_CanvasTextField.render(this, renderSession, this.__worldTransform);
            if (this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
                var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
                if (smoothingEnabled) {
                    renderSession.context.mozImageSmoothingEnabled = false;
                    renderSession.context.msImageSmoothingEnabled = false;
                    renderSession.context.imageSmoothingEnabled = false
                }
                openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
                if (smoothingEnabled) {
                    renderSession.context.mozImageSmoothingEnabled = true;
                    renderSession.context.msImageSmoothingEnabled = true;
                    renderSession.context.imageSmoothingEnabled = true
                }
            } else {
                openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession)
            }
        },
        __renderDOM: function(renderSession) {},
        __renderGL: function(renderSession) {
            openfl__$internal_renderer_canvas_CanvasTextField.render(this, renderSession, this.__worldTransform);
            openfl_display_InteractiveObject.prototype.__renderGL.call(this, renderSession)
        },
        __startCursorTimer: function() {
            this.__cursorTimer = haxe_Timer.delay($bind(this, this.__startCursorTimer), 600);
            this.__showCursor = !this.__showCursor;
            this.__dirty = true;
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
        },
        __startTextInput: function() {
            if (this.__caretIndex < 0) {
                this.__caretIndex = this.__text.length;
                this.__selectionIndex = this.__caretIndex
            }
            if (this.stage != null) {
                this.stage.window.backend.setEnableTextEvents(true);
                if (!this.__inputEnabled) {
                    this.stage.window.backend.setEnableTextEvents(true);
                    if (!this.stage.window.onTextInput.has($bind(this, this.window_onTextInput))) {
                        this.stage.window.onTextInput.add($bind(this, this.window_onTextInput));
                        this.stage.window.onKeyDown.add($bind(this, this.window_onKeyDown))
                    }
                    this.__inputEnabled = true;
                    this.__startCursorTimer()
                }
            }
        },
        __stopCursorTimer: function() {
            if (this.__cursorTimer != null) {
                this.__cursorTimer.stop();
                this.__cursorTimer = null
            }
            if (this.__showCursor) {
                this.__showCursor = false;
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
        },
        __stopTextInput: function() {
            if (this.__inputEnabled && this.stage != null) {
                this.stage.window.backend.setEnableTextEvents(false);
                this.stage.window.onTextInput.remove($bind(this, this.window_onTextInput));
                this.stage.window.onKeyDown.remove($bind(this, this.window_onKeyDown));
                this.__inputEnabled = false;
                this.__stopCursorTimer()
            }
        },
        __updateLayout: function() {
            if (this.__layoutDirty) {
                var cacheWidth = this.__textEngine.width;
                var cacheHeight = this.__textEngine.height;
                this.__textEngine.update();
                if (this.__textEngine.autoSize != 2) {
                    if (this.__textEngine.width != cacheWidth) {
                        var _g = this.__textEngine.autoSize;
                        switch (_g) {
                            case 3:
                                var _g1 = this;
                                _g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width));
                                break;
                            case 0:
                                var _g11 = this;
                                _g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width) / 2);
                                break;
                            default:
                        }
                    }
                    this.__textEngine.getBounds()
                }
                this.__layoutDirty = false
            }
        },
        __updateText: function(value) {
            this.__text = value;
            if (this.__text.length < this.__caretIndex) {
                this.__selectionIndex = this.__caretIndex = this.__text.length
            }
            if (!this.__displayAsPassword) {
                this.__textEngine.set_text(this.__text)
            } else {
                var length = this.get_text().length;
                var mask = "";
                var _g = 0;
                while (_g < length) {
                    var i = _g++;
                    mask += "*"
                }
                this.__textEngine.set_text(mask)
            }
        },
        __updateTransforms: function(overrideTransform) {
            openfl_display_InteractiveObject.prototype.__updateTransforms.call(this, overrideTransform);
            this.__renderTransform.__translateTransformed(this.__offsetX, this.__offsetY)
        },
        get_antiAliasType: function() {
            return this.__textEngine.antiAliasType
        },
        set_antiAliasType: function(value) {
            if (value != this.__textEngine.antiAliasType) {}
            return this.__textEngine.antiAliasType = value
        },
        get_autoSize: function() {
            return this.__textEngine.autoSize
        },
        set_autoSize: function(value) {
            if (value != this.__textEngine.autoSize) {
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.autoSize = value
        },
        get_background: function() {
            return this.__textEngine.background
        },
        set_background: function(value) {
            if (value != this.__textEngine.background) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.background = value
        },
        get_backgroundColor: function() {
            return this.__textEngine.backgroundColor
        },
        set_backgroundColor: function(value) {
            if (value != this.__textEngine.backgroundColor) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.backgroundColor = value
        },
        get_border: function() {
            return this.__textEngine.border
        },
        set_border: function(value) {
            if (value != this.__textEngine.border) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.border = value
        },
        get_borderColor: function() {
            return this.__textEngine.borderColor
        },
        set_borderColor: function(value) {
            if (value != this.__textEngine.borderColor) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.borderColor = value
        },
        get_bottomScrollV: function() {
            this.__updateLayout();
            return this.__textEngine.bottomScrollV
        },
        get_caretIndex: function() {
            return this.__caretIndex
        },
        get_defaultTextFormat: function() {
            return this.__textFormat.clone()
        },
        set_defaultTextFormat: function(value) {
            this.__textFormat.__merge(value);
            this.__layoutDirty = true;
            this.__dirty = true;
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
            return value
        },
        get_displayAsPassword: function() {
            return this.__displayAsPassword
        },
        set_displayAsPassword: function(value) {
            if (value != this.__displayAsPassword) {
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
                this.__displayAsPassword = value;
                this.__updateText(this.__text)
            }
            return value
        },
        get_embedFonts: function() {
            return this.__textEngine.embedFonts
        },
        set_embedFonts: function(value) {
            return this.__textEngine.embedFonts = value
        },
        get_gridFitType: function() {
            return this.__textEngine.gridFitType
        },
        set_gridFitType: function(value) {
            return this.__textEngine.gridFitType = value
        },
        get_height: function() {
            this.__updateLayout();
            return this.__textEngine.height * Math.abs(this.get_scaleY())
        },
        set_height: function(value) {
            if (value != this.__textEngine.height) {
                this.__setTransformDirty();
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
                this.__textEngine.height = value
            }
            return this.__textEngine.height * Math.abs(this.get_scaleY())
        },
        get_htmlText: function() {
            return this.__text
        },
        set_htmlText: function(value) {
            if (!this.__isHTML || this.__text != value) {
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            this.__isHTML = true;
            if (this.__div == null) {
                value = openfl_text_TextField.__regexBreakTag.replace(value, "\n");
                value = openfl_text_TextField.__regexEntities[0].replace(value, '"');
                value = openfl_text_TextField.__regexEntities[1].replace(value, "'");
                value = openfl_text_TextField.__regexEntities[2].replace(value, "&");
                var segments = value.split("<");
                if (segments.length == 1) {
                    value = openfl_text_TextField.__regexHTMLTag.replace(value, "");
                    if (this.__textEngine.textFormatRanges.get_length() > 1) {
                        var len = this.__textEngine.textFormatRanges.get_length() - 1;
                        this.__textEngine.textFormatRanges.splice(1, len)
                    }
                    value = openfl_text_TextField.__regexEntities[3].replace(value, "<");
                    value = openfl_text_TextField.__regexEntities[4].replace(value, ">");
                    var range = this.__textEngine.textFormatRanges.get(0);
                    range.format = this.__textFormat;
                    range.start = 0;
                    range.end = value.length;
                    this.__updateText(value);
                    return value
                } else {
                    var len1 = this.__textEngine.textFormatRanges.get_length();
                    this.__textEngine.textFormatRanges.splice(0, len1);
                    value = "";
                    var segment;
                    var _g1 = 0;
                    var _g = segments.length;
                    while (_g1 < _g) {
                        var i = _g1++;
                        segment = segments[i];
                        segment = openfl_text_TextField.__regexEntities[3].replace(segment, "<");
                        segment = openfl_text_TextField.__regexEntities[4].replace(segment, ">");
                        segments[i] = segment
                    }
                    var formatStack = [this.__textFormat.clone()];
                    var sub;
                    var noLineBreak = false;
                    var _g2 = 0;
                    while (_g2 < segments.length) {
                        var segment1 = segments[_g2];
                        ++_g2;
                        if (segment1 == "") {
                            continue
                        }
                        var isClosingTag = HxOverrides.substr(segment1, 0, 1) == "/";
                        var tagEndIndex = segment1.indexOf(">");
                        var start = tagEndIndex + 1;
                        var spaceIndex = segment1.indexOf(" ");
                        var tagName = segment1.substring(isClosingTag ? 1 : 0, spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
                        var format;
                        if (isClosingTag) {
                            formatStack.pop();
                            format = formatStack[formatStack.length - 1].clone();
                            if (tagName.toLowerCase() == "p" && this.__textEngine.textFormatRanges.get_length() > 0) {
                                value += "\n";
                                noLineBreak = true
                            }
                            if (start < segment1.length) {
                                sub = HxOverrides.substr(segment1, start, null);
                                var x = new openfl__$internal_text_TextFormatRange(format, value.length, value.length + sub.length);
                                this.__textEngine.textFormatRanges.push(x);
                                value += sub;
                                noLineBreak = false
                            }
                        } else {
                            format = formatStack[formatStack.length - 1].clone();
                            if (tagEndIndex > -1) {
                                var _g11 = tagName.toLowerCase();
                                switch (_g11) {
                                    case "a":
                                        if (openfl_text_TextField.__regexHref.match(segment1)) {
                                            format.url = this.__getAttributeMatch(openfl_text_TextField.__regexHref)
                                        }
                                        break;
                                    case "p":
                                        if (this.__textEngine.textFormatRanges.get_length() > 0 && !noLineBreak) {
                                            value += "\n"
                                        }
                                        if (openfl_text_TextField.__regexAlign.match(segment1)) {
                                            format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(this.__getAttributeMatch(openfl_text_TextField.__regexAlign).toLowerCase())
                                        }
                                        break;
                                    case "font":
                                        if (openfl_text_TextField.__regexFace.match(segment1)) {
                                            format.font = this.__getAttributeMatch(openfl_text_TextField.__regexFace)
                                        }
                                        if (openfl_text_TextField.__regexColor.match(segment1)) {
                                            format.color = Std.parseInt("0x" + this.__getAttributeMatch(openfl_text_TextField.__regexColor))
                                        }
                                        if (openfl_text_TextField.__regexSize.match(segment1)) {
                                            var sizeAttr = this.__getAttributeMatch(openfl_text_TextField.__regexSize);
                                            var firstChar = HxOverrides.cca(sizeAttr, 0);
                                            if (firstChar == 43 || firstChar == 45) {
                                                var parentFormat;
                                                if (formatStack.length >= 2) {
                                                    parentFormat = formatStack[formatStack.length - 2]
                                                } else {
                                                    parentFormat = this.__textFormat
                                                }
                                                format.size = parentFormat.size + Std.parseInt(sizeAttr)
                                            } else {
                                                format.size = Std.parseInt(sizeAttr)
                                            }
                                        }
                                        break;
                                    case "b":
                                        format.bold = true;
                                        break;
                                    case "u":
                                        format.underline = true;
                                        break;
                                    case "i":
                                    case "em":
                                        format.italic = true;
                                        break;
                                    case "textformat":
                                        if (openfl_text_TextField.__regexBlockIndent.match(segment1)) {
                                            format.blockIndent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexBlockIndent))
                                        }
                                        if (openfl_text_TextField.__regexIndent.match(segment1)) {
                                            format.indent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexIndent))
                                        }
                                        if (openfl_text_TextField.__regexLeading.match(segment1)) {
                                            format.leading = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeading))
                                        }
                                        if (openfl_text_TextField.__regexLeftMargin.match(segment1)) {
                                            format.leftMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeftMargin))
                                        }
                                        if (openfl_text_TextField.__regexRightMargin.match(segment1)) {
                                            format.rightMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexRightMargin))
                                        }
                                        if (openfl_text_TextField.__regexTabStops.match(segment1)) {
                                            var values = this.__getAttributeMatch(openfl_text_TextField.__regexTabStops).split(" ");
                                            var tabStops = [];
                                            var _g21 = 0;
                                            while (_g21 < values.length) {
                                                var stop = values[_g21];
                                                ++_g21;
                                                tabStops.push(Std.parseInt(stop))
                                            }
                                            format.tabStops = tabStops
                                        }
                                        break
                                }
                                formatStack.push(format);
                                if (start < segment1.length) {
                                    sub = segment1.substring(start);
                                    var x1 = new openfl__$internal_text_TextFormatRange(format, value.length, value.length + sub.length);
                                    this.__textEngine.textFormatRanges.push(x1);
                                    value += sub;
                                    noLineBreak = false
                                }
                            } else {
                                var x2 = new openfl__$internal_text_TextFormatRange(format, value.length, value.length + segment1.length);
                                this.__textEngine.textFormatRanges.push(x2);
                                value += segment1;
                                noLineBreak = false
                            }
                        }
                    }
                    if (this.__textEngine.textFormatRanges.get_length() == 0) {
                        var x3 = new openfl__$internal_text_TextFormatRange(formatStack[0], 0, 0);
                        this.__textEngine.textFormatRanges.push(x3)
                    }
                }
            }
            this.__updateText(value);
            return value
        },
        get_length: function() {
            if (this.__text != null) {
                return this.__text.length
            }
            return 0
        },
        get_maxChars: function() {
            return this.__textEngine.maxChars
        },
        set_maxChars: function(value) {
            if (value != this.__textEngine.maxChars) {
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.maxChars = value
        },
        get_maxScrollH: function() {
            this.__updateLayout();
            return this.__textEngine.maxScrollH
        },
        get_maxScrollV: function() {
            this.__updateLayout();
            return this.__textEngine.maxScrollV
        },
        get_mouseWheelEnabled: function() {
            return this.__mouseWheelEnabled
        },
        set_mouseWheelEnabled: function(value) {
            return this.__mouseWheelEnabled = value
        },
        get_multiline: function() {
            return this.__textEngine.multiline
        },
        set_multiline: function(value) {
            if (value != this.__textEngine.multiline) {
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.multiline = value
        },
        get_numLines: function() {
            this.__updateLayout();
            return this.__textEngine.numLines
        },
        get_restrict: function() {
            return this.__textEngine.restrict
        },
        set_restrict: function(value) {
            return this.__textEngine.set_restrict(value)
        },
        get_scrollH: function() {
            return this.__textEngine.scrollH
        },
        set_scrollH: function(value) {
            this.__updateLayout();
            if (value > this.__textEngine.maxScrollH) {
                value = this.__textEngine.maxScrollH
            }
            if (value < 0) {
                value = 0
            }
            if (value != this.__textEngine.scrollH) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.scrollH = value
        },
        get_scrollV: function() {
            return this.__textEngine.scrollV
        },
        set_scrollV: function(value) {
            this.__updateLayout();
            if (value > this.__textEngine.maxScrollV) {
                value = this.__textEngine.maxScrollV
            }
            if (value < 1) {
                value = 1
            }
            if (value != this.__textEngine.scrollV) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.scrollV = value
        },
        get_selectable: function() {
            return this.__textEngine.selectable
        },
        set_selectable: function(value) {
            if (value != this.__textEngine.selectable && this.get_type() == 1) {
                if (this.stage != null && this.stage.get_focus() == this) {
                    this.__startTextInput()
                } else {
                    if (!value) {
                        this.__stopTextInput()
                    }
                }
            }
            return this.__textEngine.selectable = value
        },
        get_selectionBeginIndex: function() {
            return Std["int"](Math.min(this.__caretIndex, this.__selectionIndex))
        },
        get_selectionEndIndex: function() {
            return Std["int"](Math.max(this.__caretIndex, this.__selectionIndex))
        },
        get_sharpness: function() {
            return this.__textEngine.sharpness
        },
        set_sharpness: function(value) {
            if (value != this.__textEngine.sharpness) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.sharpness = value
        },
        get_text: function() {
            return this.__text
        },
        set_text: function(value) {
            if (this.__isHTML || this.__text != value) {
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            } else {
                return value
            }
            if (this.__textEngine.textFormatRanges.get_length() > 1) {
                var len = this.__textEngine.textFormatRanges.get_length() - 1;
                this.__textEngine.textFormatRanges.splice(1, len)
            }
            var range = this.__textEngine.textFormatRanges.get(0);
            range.format = this.__textFormat;
            range.start = 0;
            range.end = value.length;
            this.__isHTML = false;
            this.__updateText(value);
            return value
        },
        get_textColor: function() {
            return this.__textFormat.color
        },
        set_textColor: function(value) {
            if (value != this.__textFormat.color) {
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            var _g = 0;
            var _g1 = this.__textEngine.textFormatRanges;
            while (_g < _g1.get_length()) {
                var range = _g1.get(_g);
                ++_g;
                range.format.color = value
            }
            return this.__textFormat.color = value
        },
        get_textWidth: function() {
            this.__updateLayout();
            return this.__textEngine.textWidth
        },
        get_textHeight: function() {
            this.__updateLayout();
            return this.__textEngine.textHeight
        },
        get_type: function() {
            return this.__textEngine.type
        },
        set_type: function(value) {
            if (value != this.__textEngine.type) {
                if (value == 1) {
                    this.addEventListener("focusIn", $bind(this, this.this_onFocusIn));
                    this.addEventListener("focusOut", $bind(this, this.this_onFocusOut));
                    this.addEventListener("addedToStage", $bind(this, this.this_onAddedToStage));
                    this.this_onFocusIn(null);
                    this.__textEngine.__useIntAdvances = true
                } else {
                    this.removeEventListener("focusIn", $bind(this, this.this_onFocusIn));
                    this.removeEventListener("focusOut", $bind(this, this.this_onFocusOut));
                    this.removeEventListener("addedToStage", $bind(this, this.this_onAddedToStage));
                    this.__stopTextInput();
                    this.__textEngine.__useIntAdvances = null
                }
                this.__dirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.type = value
        },
        get_width: function() {
            this.__updateLayout();
            return this.__textEngine.width * Math.abs(this.__scaleX)
        },
        set_width: function(value) {
            if (value != this.__textEngine.width) {
                this.__setTransformDirty();
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
                this.__textEngine.width = value
            }
            return this.__textEngine.width * Math.abs(this.__scaleX)
        },
        get_wordWrap: function() {
            return this.__textEngine.wordWrap
        },
        set_wordWrap: function(value) {
            if (value != this.__textEngine.wordWrap) {
                this.__dirty = true;
                this.__layoutDirty = true;
                if (!this.__renderDirty) {
                    this.__renderDirty = true;
                    this.__setParentRenderDirty()
                }
            }
            return this.__textEngine.wordWrap = value
        },
        stage_onMouseMove: function(event) {
            if (this.stage == null) {
                return
            }
            if (this.__textEngine.selectable && this.__selectionIndex >= 0) {
                this.__updateLayout();
                var position = this.__getPosition(this.get_mouseX(), this.get_mouseY());
                if (position != this.__caretIndex) {
                    this.__caretIndex = position;
                    this.__dirty = true;
                    if (!this.__renderDirty) {
                        this.__renderDirty = true;
                        this.__setParentRenderDirty()
                    }
                }
            }
        },
        stage_onMouseUp: function(event) {
            if (this.stage == null) {
                return
            }
            this.stage.removeEventListener("mouseMove", $bind(this, this.stage_onMouseMove));
            this.stage.removeEventListener("mouseUp", $bind(this, this.stage_onMouseUp));
            if (this.stage.get_focus() == this) {
                this.__getWorldTransform();
                this.__updateLayout();
                var px = this.__worldTransform.__transformInverseX(this.get_x(), this.get_y());
                var py = this.__worldTransform.__transformInverseY(this.get_x(), this.get_y());
                var upPos = this.__getPosition(this.get_mouseX(), this.get_mouseY());
                var leftPos;
                var rightPos;
                leftPos = Std["int"](Math.min(this.__selectionIndex, upPos));
                rightPos = Std["int"](Math.max(this.__selectionIndex, upPos));
                this.__selectionIndex = leftPos;
                this.__caretIndex = rightPos;
                if (this.__inputEnabled) {
                    this.this_onFocusIn(null);
                    this.__stopCursorTimer();
                    this.__startCursorTimer()
                }
            }
        },
        this_onAddedToStage: function(event) {
            this.this_onFocusIn(null)
        },
        this_onFocusIn: function(event) {
            if (this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
                this.__startTextInput()
            }
        },
        this_onFocusOut: function(event) {
            this.__stopTextInput()
        },
        this_onMouseDown: function(event) {
            if (!this.get_selectable()) {
                return
            }
            this.__updateLayout();
            this.__caretIndex = this.__getPosition(this.get_mouseX(), this.get_mouseY());
            this.__selectionIndex = this.__caretIndex;
            this.__dirty = true;
            if (!this.__renderDirty) {
                this.__renderDirty = true;
                this.__setParentRenderDirty()
            }
            this.stage.addEventListener("mouseMove", $bind(this, this.stage_onMouseMove));
            this.stage.addEventListener("mouseUp", $bind(this, this.stage_onMouseUp))
        },
        window_onKeyDown: function(key, modifier) {
            switch (key) {
                case 13:
                case 1073741912:
                    if (this.__textEngine.multiline) {
                        this.replaceSelectedText("\n");
                        this.dispatchEvent(new openfl_events_Event("change", true))
                    }
                    break;
                case 8:
                    if (this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
                        this.__selectionIndex = this.__caretIndex - 1
                    }
                    if (this.__selectionIndex != this.__caretIndex) {
                        this.replaceSelectedText("");
                        this.__selectionIndex = this.__caretIndex;
                        this.dispatchEvent(new openfl_events_Event("change", true))
                    }
                    break;
                case 127:
                    if (this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
                        this.__selectionIndex = this.__caretIndex + 1
                    }
                    if (this.__selectionIndex != this.__caretIndex) {
                        this.replaceSelectedText("");
                        this.__selectionIndex = this.__caretIndex;
                        this.dispatchEvent(new openfl_events_Event("change", true))
                    }
                    break;
                case 1073741904:
                    if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
                        this.__caretBeginningOfLine();
                        if (!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                            this.__selectionIndex = this.__caretIndex
                        }
                    } else {
                        if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                            this.__caretPreviousCharacter()
                        } else {
                            if (this.__selectionIndex == this.__caretIndex) {
                                this.__caretPreviousCharacter()
                            } else {
                                this.__caretIndex = Std["int"](Math.min(this.__caretIndex, this.__selectionIndex))
                            }
                            this.__selectionIndex = this.__caretIndex
                        }
                    }
                    this.__stopCursorTimer();
                    this.__startCursorTimer();
                    break;
                case 1073741903:
                    if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
                        this.__caretEndOfLine();
                        if (!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                            this.__selectionIndex = this.__caretIndex
                        }
                    } else {
                        if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                            this.__caretNextCharacter()
                        } else {
                            if (this.__selectionIndex == this.__caretIndex) {
                                this.__caretNextCharacter()
                            } else {
                                this.__caretIndex = Std["int"](Math.max(this.__caretIndex, this.__selectionIndex))
                            }
                            this.__selectionIndex = this.__caretIndex
                        }
                    }
                    this.__stopCursorTimer();
                    this.__startCursorTimer();
                    break;
                case 1073741905:
                    if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                        this.__caretNextLine()
                    } else {
                        if (this.__selectionIndex == this.__caretIndex) {
                            this.__caretNextLine()
                        } else {
                            var lineIndex = this.getLineIndexOfChar(Std["int"](Math.max(this.__caretIndex, this.__selectionIndex)));
                            this.__caretNextLine(lineIndex, Std["int"](Math.min(this.__caretIndex, this.__selectionIndex)))
                        }
                        this.__selectionIndex = this.__caretIndex
                    }
                    this.__stopCursorTimer();
                    this.__startCursorTimer();
                    break;
                case 1073741906:
                    if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                        this.__caretPreviousLine()
                    } else {
                        if (this.__selectionIndex == this.__caretIndex) {
                            this.__caretPreviousLine()
                        } else {
                            var lineIndex1 = this.getLineIndexOfChar(Std["int"](Math.min(this.__caretIndex, this.__selectionIndex)));
                            this.__caretPreviousLine(lineIndex1, Std["int"](Math.min(this.__caretIndex, this.__selectionIndex)))
                        }
                        this.__selectionIndex = this.__caretIndex
                    }
                    this.__stopCursorTimer();
                    this.__startCursorTimer();
                    break;
                case 1073741898:
                    this.__caretBeginningOfLine();
                    this.__stopCursorTimer();
                    this.__startCursorTimer();
                    break;
                case 1073741901:
                    this.__caretEndOfLine();
                    this.__stopCursorTimer();
                    this.__startCursorTimer();
                    break;
                case 99:
                    if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
                        lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex, this.__selectionIndex))
                    }
                    break;
                case 120:
                    if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
                        lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex, this.__selectionIndex));
                        if (this.__caretIndex != this.__selectionIndex) {
                            this.replaceSelectedText("");
                            this.dispatchEvent(new openfl_events_Event("change", true))
                        }
                    }
                    break;
                case 97:
                    if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
                        this.__caretIndex = this.__text.length;
                        this.__selectionIndex = 0
                    }
                    break;
                default:
            }
        },
        window_onTextInput: function(value) {
            this.replaceSelectedText(value);
            this.dispatchEvent(new openfl_events_Event("change", true))
        },
        __class__: openfl_text_TextField,
        __properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__, {
            set_wordWrap: "set_wordWrap",
            get_wordWrap: "get_wordWrap",
            set_type: "set_type",
            get_type: "get_type",
            get_textWidth: "get_textWidth",
            get_textHeight: "get_textHeight",
            set_textColor: "set_textColor",
            get_textColor: "get_textColor",
            set_text: "set_text",
            get_text: "get_text",
            set_sharpness: "set_sharpness",
            get_sharpness: "get_sharpness",
            get_selectionEndIndex: "get_selectionEndIndex",
            get_selectionBeginIndex: "get_selectionBeginIndex",
            set_selectable: "set_selectable",
            get_selectable: "get_selectable",
            set_scrollV: "set_scrollV",
            get_scrollV: "get_scrollV",
            set_scrollH: "set_scrollH",
            get_scrollH: "get_scrollH",
            set_restrict: "set_restrict",
            get_restrict: "get_restrict",
            get_numLines: "get_numLines",
            set_multiline: "set_multiline",
            get_multiline: "get_multiline",
            set_mouseWheelEnabled: "set_mouseWheelEnabled",
            get_mouseWheelEnabled: "get_mouseWheelEnabled",
            get_maxScrollV: "get_maxScrollV",
            get_maxScrollH: "get_maxScrollH",
            set_maxChars: "set_maxChars",
            get_maxChars: "get_maxChars",
            get_length: "get_length",
            set_htmlText: "set_htmlText",
            get_htmlText: "get_htmlText",
            set_gridFitType: "set_gridFitType",
            get_gridFitType: "get_gridFitType",
            set_embedFonts: "set_embedFonts",
            get_embedFonts: "get_embedFonts",
            set_displayAsPassword: "set_displayAsPassword",
            get_displayAsPassword: "get_displayAsPassword",
            set_defaultTextFormat: "set_defaultTextFormat",
            get_defaultTextFormat: "get_defaultTextFormat",
            get_caretIndex: "get_caretIndex",
            get_bottomScrollV: "get_bottomScrollV",
            set_borderColor: "set_borderColor",
            get_borderColor: "get_borderColor",
            set_border: "set_border",
            get_border: "get_border",
            set_backgroundColor: "set_backgroundColor",
            get_backgroundColor: "get_backgroundColor",
            set_background: "set_background",
            get_background: "get_background",
            set_autoSize: "set_autoSize",
            get_autoSize: "get_autoSize",
            set_antiAliasType: "set_antiAliasType",
            get_antiAliasType: "get_antiAliasType"
        })
    });
    var oaktree_text_TextFieldOutline = function() {
        openfl_text_TextField.call(this);
        this.__textEngine = new oaktree_text_TextEngineOutline(this);
        var x = new openfl__$internal_text_TextFormatRange(this.__textFormat, 0, 0);
        this.__textEngine.textFormatRanges.push(x)
    };
    $hxClasses["oaktree.text.TextFieldOutline"] = oaktree_text_TextFieldOutline;
    oaktree_text_TextFieldOutline.__name__ = ["oaktree", "text", "TextFieldOutline"];
    oaktree_text_TextFieldOutline.__super__ = openfl_text_TextField;
    oaktree_text_TextFieldOutline.prototype = $extend(openfl_text_TextField.prototype, {
        get_outline: function() {
            return (js_Boot.__cast(this.__textEngine, oaktree_text_TextEngineOutline)).outline
        },
        set_outline: function(value) {
            return (js_Boot.__cast(this.__textEngine, oaktree_text_TextEngineOutline)).outline = value
        },
        get_outlineColor: function() {
            return (js_Boot.__cast(this.__textEngine, oaktree_text_TextEngineOutline)).outlineColor
        },
        set_outlineColor: function(value) {
            return (js_Boot.__cast(this.__textEngine, oaktree_text_TextEngineOutline)).outlineColor = value
        },
        get_outlineWidth: function() {
            return (js_Boot.__cast(this.__textEngine, oaktree_text_TextEngineOutline)).outlineWidth
        },
        set_outlineWidth: function(value) {
            return (js_Boot.__cast(this.__textEngine, oaktree_text_TextEngineOutline)).outlineWidth = value
        },
        __class__: oaktree_text_TextFieldOutline,
        __properties__: $extend(openfl_text_TextField.prototype.__properties__, {
            set_outlineWidth: "set_outlineWidth",
            get_outlineWidth: "get_outlineWidth",
            set_outlineColor: "set_outlineColor",
            get_outlineColor: "get_outlineColor",
            set_outline: "set_outline",
            get_outline: "get_outline"
        })
    });
    var oaktree_ext_ui_Label = function(_options) {
        this._baseFontSize = -1;
        oaktree_text_TextFieldOutline.call(this);
        if (_options != null) {
            this.initialize(_options)
        }
    };
    $hxClasses["oaktree.ext.ui.Label"] = oaktree_ext_ui_Label;
    oaktree_ext_ui_Label.__name__ = ["oaktree", "ext", "ui", "Label"];
    oaktree_ext_ui_Label.registerTextGroup = function(pGroupName, pInstance) {
        if (!oaktree_ext_ui_Label._textGroups.exists(pGroupName)) {
            var value = new oaktree_ext_ui_TextGroup(pGroupName);
            oaktree_ext_ui_Label._textGroups.set(pGroupName, value)
        }
        var group = oaktree_ext_ui_Label._textGroups.get(pGroupName);
        group.add(pInstance);
        return group
    };
    oaktree_ext_ui_Label.unregisterTextGroup = function(pGroupName, pInstance) {
        var group = oaktree_ext_ui_Label._textGroups.get(pGroupName);
        if (group != null) {
            group.remove(pInstance)
        }
    };
    oaktree_ext_ui_Label.getTextGroup = function(pGroupName) {
        return oaktree_ext_ui_Label._textGroups.get(pGroupName)
    };
    oaktree_ext_ui_Label.clearTextGroup = function(pGroupName) {
        oaktree_ext_ui_Label._textGroups.remove(pGroupName)
    };
    oaktree_ext_ui_Label.__super__ = oaktree_text_TextFieldOutline;
    oaktree_ext_ui_Label.prototype = $extend(oaktree_text_TextFieldOutline.prototype, {
        textGroup: null,
        _format: null,
        options: null,
        _baseFontSize: null,
        _multiline: null,
        initialize: function(_options) {
            if (_options.font == null) {
                _options.font = oaktree_OakTree.get_fontName()
            }
            _options.font;
            if (_options.text == null) {
                _options.text = ""
            }
            _options.text;
            if (_options.fontSize == null) {
                _options.fontSize = 11
            }
            _options.fontSize;
            if (_options.color == null) {
                _options.color = 0
            }
            _options.color;
            if (_options.bold == null) {
                _options.bold = true
            }
            _options.bold;
            if (_options.align == null) {
                _options.align = 3
            }
            _options.align;
            if (_options.wordWrap == null) {
                _options.wordWrap = true
            }
            _options.wordWrap;
            if (_options.autoSize == null) {
                _options.autoSize = 2
            }
            _options.autoSize;
            if (_options.maxWidth == null) {
                _options.maxWidth = -1
            }
            _options.maxWidth;
            if (_options.maxHeight == null) {
                _options.maxHeight = -1
            }
            _options.maxHeight;
            if (_options.leading == null) {
                _options.leading = null
            }
            _options.leading;
            if (_options.multiline == null) {
                _options.multiline = false
            }
            _options.multiline;
            this.options = _options;
            this._format = new openfl_text_TextFormat(_options.font, _options.fontSize, _options.color, _options.bold);
            this._format.align = _options.align;
            this._format.leading = _options.leading;
            this.set_defaultTextFormat(this._format);
            this.set_autoSize(_options.autoSize);
            this.set_text(StringTools.replace(_options.text, "\\n", "\n"));
            this.set_multiline(_options.multiline);
            if (_options.width != null) {
                this.set_autoSize(2);
                this.set_width(_options.width);
                this.set_multiline(true);
                this.set_wordWrap(this.options.wordWrap)
            } else {
                this.set_width(this.get_textWidth() + 5)
            }
            this.set_height(this.get_textHeight() + 5);
            if (this.options.height != null) {
                this.set_height(this.options.height)
            }
            this._multiline = this.get_multiline();
            this.set_selectable(false)
        },
        setText: function(value, ignoreAutoAdjust) {
            if (ignoreAutoAdjust == null) {
                ignoreAutoAdjust = false
            }
            oaktree_text_TextFieldOutline.prototype.set_text.call(this, StringTools.replace(value, "\\n", "\n"));
            this.set_height(this.get_textHeight() + 5);
            if (this.options.height != null) {
                this.set_height(this.options.height)
            }
            var textFormat = this.get_defaultTextFormat();
            if (!ignoreAutoAdjust && (this.options.maxWidth != -1 || this.options.maxHeight != -1)) {
                if (this._baseFontSize < 0) {
                    this._baseFontSize = js_Boot.__cast(textFormat.size, Int)
                }
                textFormat.size = this._baseFontSize;
                this.setTextFormat(textFormat);
                if (this.get_textWidth() >= this.options.maxWidth - 10 && this.options.maxWidth > 0) {
                    var textHasSpaceChars = value.indexOf(" ") > 0;
                    if (this._multiline && textHasSpaceChars) {
                        var textWithFittingLines = "";
                        var textWithLastWordsRemoved = new openfl_text_TextField();
                        textWithLastWordsRemoved.set_autoSize(1);
                        textWithLastWordsRemoved.set_text(value);
                        textWithLastWordsRemoved.setTextFormat(textFormat);
                        var splitWords = "";
                        var numberOfLines = 1;
                        while (true) {
                            if (textWithLastWordsRemoved.get_textWidth() >= this.options.maxWidth) {
                                var indexOfLastSpaceChar = textWithLastWordsRemoved.get_text().lastIndexOf(" ");
                                if (indexOfLastSpaceChar > 0) {
                                    if (splitWords == "") {
                                        splitWords = textWithLastWordsRemoved.get_text().substring(indexOfLastSpaceChar + 1);
                                        numberOfLines++
                                    } else {
                                        splitWords = textWithLastWordsRemoved.get_text().substring(indexOfLastSpaceChar + 1) + " " + splitWords
                                    }
                                    textWithLastWordsRemoved.set_text(textWithLastWordsRemoved.get_text().substring(0, indexOfLastSpaceChar));
                                    textWithLastWordsRemoved.setTextFormat(textFormat)
                                } else {
                                    textFormat.size = js_Boot.__cast(textFormat.size - 1, Int);
                                    textWithLastWordsRemoved.set_text(value);
                                    textWithLastWordsRemoved.setTextFormat(textFormat);
                                    splitWords = "";
                                    textWithFittingLines = "";
                                    numberOfLines = 1
                                }
                            } else {
                                if (this.options.maxHeight > 0 && textWithLastWordsRemoved.get_textHeight() * numberOfLines > this.options.maxHeight) {
                                    textFormat.size = js_Boot.__cast(textFormat.size - 1, Int);
                                    textWithLastWordsRemoved.set_text(value);
                                    textWithLastWordsRemoved.setTextFormat(textFormat);
                                    splitWords = "";
                                    textWithFittingLines = "";
                                    numberOfLines = textWithFittingLines.split("\n").length + 1;
                                    continue
                                }
                                if (textWithFittingLines == "") {
                                    textWithFittingLines = textWithLastWordsRemoved.get_text()
                                } else {
                                    textWithFittingLines = textWithFittingLines + "\n" + textWithLastWordsRemoved.get_text()
                                }
                                if (splitWords == "") {
                                    break
                                }
                                textWithLastWordsRemoved.set_text(splitWords);
                                textWithLastWordsRemoved.setTextFormat(textFormat);
                                splitWords = ""
                            }
                        }
                        oaktree_text_TextFieldOutline.prototype.set_text.call(this, textWithFittingLines);
                        this.setTextFormat(textFormat);
                        this.set_defaultTextFormat(textFormat)
                    } else {
                        while (this.get_textWidth() > 0 && this.get_textWidth() >= this.options.maxWidth - 10 && this.options.maxWidth - 10 > 0) {
                            oaktree_text_TextFieldOutline.prototype.set_text.call(this, value);
                            textFormat.size = js_Boot.__cast(textFormat.size - 1, Int);
                            this.setTextFormat(textFormat)
                        }
                        if (this.options.maxHeight != -1) {
                            while (this.get_textHeight() > this.options.maxHeight) {
                                oaktree_text_TextFieldOutline.prototype.set_text.call(this, value);
                                textFormat.size = js_Boot.__cast(textFormat.size - 1, Int);
                                this.setTextFormat(textFormat)
                            }
                            this.set_height(this.options.maxHeight)
                        }
                    }
                } else {
                    if (this.options.maxHeight != -1) {
                        while (this.get_textHeight() > this.options.maxHeight) {
                            oaktree_text_TextFieldOutline.prototype.set_text.call(this, value);
                            textFormat.size = js_Boot.__cast(textFormat.size - 1, Int);
                            this.setTextFormat(textFormat)
                        }
                    }
                }
                if (this.options.maxHeight != -1) {
                    this.set_height(this.options.maxHeight)
                } else {
                    this.set_height(this.get_textHeight() + 5)
                }
                this.set_width(this.options.maxWidth)
            } else {
                this.set_height(this.get_textHeight() + 5)
            }
            this.set_defaultTextFormat(textFormat);
            if (this.options.width == null) {
                this.set_width(this.get_textWidth() + 5)
            }
            if (this.options.height == null) {
                this.set_height(this.get_textHeight() + 5)
            }
            return value
        },
        set_text: function(value) {
            return this.setText(value)
        },
        set_textGroup: function(pValue) {
            if (pValue == "") {
                oaktree_ext_ui_Label.unregisterTextGroup(this.textGroup, this)
            }
            this.textGroup = pValue;
            if (pValue != "") {
                oaktree_ext_ui_Label.registerTextGroup(pValue, this)
            }
            return pValue
        },
        destroy: function() {
            if (this.textGroup != "") {
                oaktree_ext_ui_Label.unregisterTextGroup(this.textGroup, this)
            }
        },
        get_baseFontSize: function() {
            return this._baseFontSize
        },
        set_baseFontSize: function(value) {
            return this._baseFontSize = value
        },
        __class__: oaktree_ext_ui_Label,
        __properties__: $extend(oaktree_text_TextFieldOutline.prototype.__properties__, {
            set_baseFontSize: "set_baseFontSize",
            get_baseFontSize: "get_baseFontSize",
            set_textGroup: "set_textGroup"
        })
    });
    var agario_display_LabelOutline = function(_options) {
        oaktree_ext_ui_Label.call(this, _options)
    };
    $hxClasses["agario.display.LabelOutline"] = agario_display_LabelOutline;
    agario_display_LabelOutline.__name__ = ["agario", "display", "LabelOutline"];
    agario_display_LabelOutline.__super__ = oaktree_ext_ui_Label;
    agario_display_LabelOutline.prototype = $extend(oaktree_ext_ui_Label.prototype, {
        setOutline: function(color, size) {
            this.set_outline(true);
            this.set_outlineColor("#" + this.getRgb(color));
            this.set_outlineWidth(this.getOutlineWidth(size))
        },
        getOutlineWidth: function(outline) {
            if (outline <= 1) {
                return outline * 2.5
            } else {
                if (outline <= 2) {
                    return outline * 2
                } else {
                    if (outline <= 3) {
                        return outline * 1.5
                    } else {
                        return outline
                    }
                }
            }
        },
        getRgb: function(color) {
            var str = StringTools.hex(color, 16);
            return str.substring(str.length - 6)
        },
        __class__: agario_display_LabelOutline
    });
    var oaktree_ext_services_IService = function() {};
    $hxClasses["oaktree.ext.services.IService"] = oaktree_ext_services_IService;
    oaktree_ext_services_IService.__name__ = ["oaktree", "ext", "services", "IService"];
    oaktree_ext_services_IService.prototype = {
        create: null,
        initialize: null,
        __class__: oaktree_ext_services_IService
    };
    var agario_game_server_GameConnectionService = function() {
        this.gotDisconnectMsg = false;
        this.retryAttempt = 0;
        this.retryTimeout = 2500;
        this.maxReconnect = 240;
        openfl_events_EventDispatcher.call(this, this)
    };
    $hxClasses["agario.game.server.GameConnectionService"] = agario_game_server_GameConnectionService;
    agario_game_server_GameConnectionService.__name__ = ["agario", "game", "server", "GameConnectionService"];
    agario_game_server_GameConnectionService.__interfaces__ = [oaktree_ext_services_IService];
    agario_game_server_GameConnectionService.__super__ = openfl_events_EventDispatcher;
    agario_game_server_GameConnectionService.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        _serverModel: null,
        maxReconnect: null,
        retryTimeout: null,
        retryAttempt: null,
        delayTimer: null,
        gotDisconnectMsg: null,
        create: function() {},
        initialize: function() {
            this._serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
            this._serverModel.register(20, $bind(this, this.onDisconnectMessage));
            this._serverModel.register(15, $bind(this, this.onConnectMessage));
            this._serverModel.onDisconnect.add($bind(this, this.onSocketDisconnect))
        },
        close: function() {
            if (this.delayTimer != null) {
                this.delayTimer.stop()
            }
            this.retryAttempt = this.maxReconnect + 1;
            this._serverModel.disconnect();
            this.dispatchEvent(new oaktree_core_events_ConnectionEvent("retryAttemptsEnded"))
        },
        onSocketDisconnect: function(byRequest) {
            if (byRequest) {
                return
            }
            this.gotDisconnectMsg = false;
            if (this.retryAttempt <= this.maxReconnect) {
                this.delayTimer = haxe_Timer.delay($bind(this, this.performRetryAttempt), this.retryTimeout);
                this.retryAttempt++
            } else {
                this.dispatchEvent(new oaktree_core_events_ConnectionEvent("retryAttemptsEnded"))
            }
        },
        performRetryAttempt: function() {
            Core.ui.network.reconnect()
        },
        onConnectMessage: function(type, msg) {
            this.retryAttempt = 0
        },
        onDisconnectMessage: function(type, msg) {
            var disconnect = msg;
            var reason = "";
            var _g = disconnect.get_reason();
            switch (_g) {
                case 1:
                    reason = "incompatible_client";
                    break;
                case 3:
                    reason = "invalid_login";
                    break;
                case 2:
                    reason = "not authorized";
                    break;
                case 4:
                    reason = "logged in elsewhere";
                    this.retryAttempt = this.maxReconnect + 1;
                    Core.get_events().fire(agario_views_LoginElsewhereDialog.OPEN);
                    break;
                case 5:
                    reason = "server is going offline";
                    break;
                default:
                    reason = "undefined"
            }
            this.gotDisconnectMsg = true;
            null
        },
        __class__: agario_game_server_GameConnectionService
    });
    var agario_models_DataManager = function() {
        this.shopReadyToShow = false;
        this.I18nLoaded = false;
        this.userInfoLoaded = false;
        this.shopLoaded = false
    };
    $hxClasses["agario.models.DataManager"] = agario_models_DataManager;
    agario_models_DataManager.__name__ = ["agario", "models", "DataManager"];
    agario_models_DataManager.__interfaces__ = [oaktree_ext_services_IService];
    agario_models_DataManager.prototype = {
        onConfigurationLoaded: null,
        shopCoins: null,
        shopItems: null,
        priceMatrixModel: null,
        shopBoostItems: null,
        shopSkinsModel: null,
        walletProductBundlesModel: null,
        walletProductsModel: null,
        shopPurchasesModel: null,
        defaultSettings: null,
        defaultCommunicationSettings: null,
        defaultGiftingSettings: null,
        giftingFakeUser: null,
        defaultPromoSettings: null,
        xpModel: null,
        shopData: null,
        shopLoaded: null,
        userInfoLoaded: null,
        I18nLoaded: null,
        shopReadyToShow: null,
        _shopService: null,
        _payModel: null,
        create: function() {
            this.onConfigurationLoaded = new msignal_Signal0()
        },
        initialize: function() {
            this._shopService = oaktree_ext_services_ServiceManager.getService(agario_services_ShopService);
            this._payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment);
            Core.get_events().addEventListener("UserEvent::USER_LOGGED", $bind(this, this.onUserLogged));
            Core.get_events().addEventListener("ShopEvent::CONFIGURATION_LOADED", $bind(this, this.handleShopInit));
            Core.get_events().addEventListener("payment_event::got_currency_code", $bind(this, this.handleReceiveCurrencyCode));
            oaktree_ext_localization_I18n.onInit.add($bind(this, this.handleLocalizationInit))
        },
        handleReceiveCurrencyCode: function(event) {
            this.validateCurrencyCode()
        },
        handleLocalizationInit: function() {
            this.I18nLoaded = true;
            this.checkUserItems()
        },
        onUserLogged: function(e) {
            this.userInfoLoaded = true;
            this.checkUserItems()
        },
        onUserFbId: function(id) {},
        checkUserItems: function() {
            if (this.shopLoaded && this.userInfoLoaded && this.I18nLoaded) {
                Core.user.evaluateWallet();
                var playerSkin = this.shopSkinsModel.getItemById(Core.user.get_selectedSkin());
                if (playerSkin != null) {
                    var skinImagePath = playerSkin.gamePlayInfo.get_shopImage();
                    Core.services.gameui.setUserSkin(skinImagePath, playerSkin.gamePlayInfo.get_cellColor(), playerSkin.skinType);
                    if (window.core) {
                        window.core.loadSkin(playerSkin.gamePlayInfo.get_skinName())
                    }
                } else {
                    Core.services.gameui.setUserSkin("")
                }
            }
        },
        handleShopInit: function(event) {
            this.shopLoaded = true;
            this.shopItems = new agario_module_shop_models_ShopItemsCollection();
            if (event.data != null) {
                this.shopData = js_Boot.__cast(event.data, agario_module_shop_models_ShopModel)
            } else {
                null
            }
            this.createDefaultSettings();
            this.createXPSettings();
            this.createPriceModel();
            this.createShopPurchasesModel();
            this.createWalletProducts();
            this.createWalletBundles();
            this.createCoinsModel();
            this.createBoostsModel();
            this.createSkinsModel();
            this.checkUserItems();
            this.onConfigurationLoaded.dispatch()
        },
        registerSkinsInGameCore: function() {
            if (this.shopLoaded) {
                var _g = 0;
                var _g1 = this.shopSkinsModel.skinList;
                while (_g < _g1.length) {
                    var skinItem = _g1[_g];
                    ++_g;
                    var flags = 2;
                    var skinUrl = skinItem.gamePlayInfo.get_gamePlayImage();
                    var skinName = skinItem.gamePlayInfo.productId;
                    if (StringTools.startsWith(skinName, "skin_")) {
                        skinName = HxOverrides.substr(skinName, 5, null)
                    }
                    skinName = "%" + skinName;
                    var skinColor = Std.parseInt(skinItem.gamePlayInfo.get_cellColor());
                    if (window.core) {
                        window.core.registerSkin(null, skinName, skinUrl, flags, skinColor)
                    }
                }
                if (this.shopData.freeSkins != null) {
                    var _g2 = 0;
                    var _g11 = this.shopData.freeSkins;
                    while (_g2 < _g11.length) {
                        var freeSkin = _g11[_g2];
                        ++_g2;
                        var flags1;
                        if (freeSkin.showName) {
                            flags1 = 0
                        } else {
                            flags1 = 1
                        }
                        var skinUrl1 = freeSkin.get_gamePlayImage();
                        if (window.core) {
                            window.core.registerSkin("" + freeSkin.id, null, skinUrl1, flags1, null)
                        }
                    }
                }
            }
        },
        createXPSettings: function() {
            this.xpModel = new agario_module_shop_models_XPModel();
            this.xpModel.updateXpList(this.shopData.xpList)
        },
        createDefaultSettings: function() {
            this.defaultSettings = new agario_module_shop_models_SettingsModel(this.shopData.userSettings);
            this.defaultSettings.concat(this.shopData.localizationSettings);
            Core.user.selectedLanguage = this.defaultSettings.getSettingByKey("defaultLanguage");
            this.defaultCommunicationSettings = agario_module_shop_models_SettingsModel.createMap(this.shopData.defaultCommunicationSettings);
            this.defaultGiftingSettings = agario_module_shop_models_SettingsModel.createMap(this.shopData.defaultGiftingSettings);
            this.giftingFakeUser = agario_module_shop_models_SettingsModel.createMap(this.shopData.giftingFakeUser);
            this.defaultPromoSettings = new agario_module_shop_models_SettingsModel(this.shopData.defaultPromoSettings)
        },
        createShopPurchasesModel: function() {
            this.shopPurchasesModel = new agario_module_shop_models_ShopPurchasesModel();
            this.shopPurchasesModel.walletSoftPurchases = this.shopData.walletSoftPurchases;
            this.shopPurchasesModel.walletInappPurchases = this.shopData.walletInappPurchases;
            this.shopPurchasesModel.walletOfferableBundles = this.shopData.walletOfferableBundles
        },
        getSoftPurchaseById: function(id) {
            return this.shopPurchasesModel.getSoftPurchaseByPurchaseId(id)
        },
        createWalletBundles: function() {
            this.walletProductBundlesModel = new agario_module_shop_models_WalletProductBundlesModel();
            var _g1 = 0;
            var _g = this.shopData.walletProductBundles.length;
            while (_g1 < _g) {
                var i = _g1++;
                var walletProductBundle = [this.shopData.walletProductBundles[i]];
                walletProductBundle[0].visual = this.shopData.visualBundles.filter((function(walletProductBundle) {
                    return function(item) {
                        return item.bundleId == walletProductBundle[0].id
                    }
                })(walletProductBundle))[0];
                this.walletProductBundlesModel.add(walletProductBundle[0])
            }
        },
        getVisualProduct: function(productId) {
            var product = this.shopData.visualProducts.filter(function(item) {
                return item.productId == productId
            })[0];
            return product
        },
        createWalletProducts: function() {
            this.walletProductsModel = new agario_module_shop_models_WalletProductsModel();
            var _g1 = 0;
            var _g = this.shopData.walletProducts.length;
            while (_g1 < _g) {
                var i = _g1++;
                var walletProduct = [this.shopData.walletProducts[i]];
                walletProduct[0].visual = this.shopData.visualProducts.filter((function(walletProduct) {
                    return function(item) {
                        return item.productId == walletProduct[0].id
                    }
                })(walletProduct))[0];
                this.walletProductsModel.add(walletProduct[0])
            }
        },
        createSkinsModel: function() {
            this.shopSkinsModel = new agario_module_shop_models_ShopSkinModel();
            var _g1 = 0;
            var _g = this.shopData.shopSkins.length;
            while (_g1 < _g) {
                var i = _g1++;
                var skinItem = this.shopData.shopSkins[i];
                this.setPurchaseInfo(skinItem);
                skinItem.gamePlayInfo = this.getGameplayInfoForSkin(skinItem.productIdToQuantify);
                this.shopSkinsModel.addSkin(skinItem);
                this.shopItems.add(skinItem)
            }
            var _g11 = 0;
            var _g2 = this.shopData.shopSkinTabs.length;
            while (_g11 < _g2) {
                var i1 = _g11++;
                var tempTab = this.shopData.shopSkinTabs[i1];
                this.shopSkinsModel.addTab(tempTab)
            }
        },
        getProductIdByShopSkin: function(skin) {
            var productId = null;
            var _g = skin.referenceSheet;
            switch (_g) {
                case "Wallet - Soft Purchases":
                    var item1 = this.shopData.walletProductBundles.filter(function(item) {
                        return Reflect.getProperty(item, skin.referenceKey) == skin.referenceValue
                    })[0];
                    if (item1 != null) {
                        productId = item1.productId
                    }
                    break;
                case "Wallet - Offerable Bundles":
                    null;
                    break;
                case "Gameplay - XP to Level":
                    var xpItem = this.shopData.xpList.filter(function(item2) {
                        return Reflect.getProperty(item2, skin.referenceKey) == skin.referenceValue
                    })[0];
                    if (xpItem != null) {
                        var bonusItem = this.shopData.walletBonusRewards.filter(function(item3) {
                            return item3.bonusId == xpItem.levelUpBonusId
                        })[0];
                        if (bonusItem != null) {
                            var walletItem = this.shopData.walletProductBundles.filter(function(item4) {
                                return item4.id == bonusItem.bundleId
                            })[0];
                            if (walletItem != null) {
                                productId = walletItem.productId
                            }
                        }
                    }
                    break;
                case "none":
                    break;
                default:
                    throw new js__$Boot_HaxeError("DataManager:::getReferencedSkinObject(), Unhandled '" + skin.referenceSheet + "' object!")
            }
            return productId
        },
        createPriceModel: function() {
            this.priceMatrixModel = new agario_module_shop_models_PriceMatrixModel();
            var _g1 = 0;
            var _g = this.shopData.shopPriceMatrix.length;
            while (_g1 < _g) {
                var i = _g1++;
                this.priceMatrixModel.add(this.shopData.shopPriceMatrix[i])
            }
            this.validateCurrencyCode()
        },
        createCoinsModel: function() {
            this.shopCoins = new agario_module_shop_models_ShopCoinModel();
            var _g1 = 0;
            var _g = this.shopData.shopCoins.length;
            while (_g1 < _g) {
                var i = _g1++;
                var currency = this.shopData.shopCoins[i];
                this.setPurchaseInfo(currency);
                this.shopCoins.add(currency);
                this.shopItems.add(currency)
            }
        },
        createBoostsModel: function() {
            this.shopBoostItems = new agario_module_shop_models_ShopBoostsModel();
            var _g1 = 0;
            var _g = this.shopData.shopBoostItems.length;
            while (_g1 < _g) {
                var i = _g1++;
                var boostItem = this.shopData.shopBoostItems[i];
                this.setPurchaseInfo(boostItem);
                boostItem.category = this.getBoostCategory(boostItem.categoryShopId, boostItem.categoryPosition);
                boostItem.gameplayInfo = this.getGameplayInfoForBoost(boostItem.purchaseId);
                boostItem.name = boostItem.category.title;
                var hours = boostItem.gameplayInfo.durationMins;
                if (hours == 1) {
                    boostItem.description = "menu_shop_1_hour"
                } else {
                    boostItem.description = "menu_shop_n_hour"
                }
                this.shopBoostItems.add(boostItem);
                this.shopItems.add(boostItem)
            }
        },
        getGameplayInfoForBoost: function(purchaseId) {
            var bundleId = this.shopPurchasesModel.getPurchaseByPurchaseId(purchaseId).bundleId;
            var productId = this.walletProductBundlesModel.getBundleByBundleId(bundleId).productId;
            return this.shopData.gamePlayBoosts.filter(function(item) {
                return item.productId == productId
            })[0]
        },
        getGameplayInfoForSkin: function(productId) {
            return this.shopData.gamePlaySkins.filter(function(item) {
                return item.productId == productId
            })[0]
        },
        getBoostCategory: function(categoryId, position) {
            var _g1 = 0;
            var _g = this.shopData.shopBoostCategories.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.shopData.shopBoostCategories[i].shopId == categoryId && this.shopData.shopBoostCategories[i].position == position) {
                    return this.shopData.shopBoostCategories[i]
                }
            }
            return new agario_module_shop_models_vo_ShopBoostCategoryVO()
        },
        setPurchaseInfo: function(shopItem) {
            if (shopItem.type == "SOFT") {
                if (js_Boot.__instanceof(shopItem, agario_module_shop_models_vo_ShopSkinItemVO)) {
                    shopItem.purchaseInfo = this.shopPurchasesModel.getSoftPurchaseByPurchaseId((js_Boot.__cast(shopItem, agario_module_shop_models_vo_ShopSkinItemVO)).referenceValue);
                    shopItem.purchaseId = (js_Boot.__cast(shopItem, agario_module_shop_models_vo_ShopSkinItemVO)).referenceValue
                } else {
                    shopItem.purchaseInfo = this.shopPurchasesModel.getSoftPurchaseByPurchaseId(shopItem.purchaseId)
                }
                if (shopItem.purchaseInfo != null) {
                    shopItem.price = shopItem.purchaseInfo.currencyAmount
                }
            } else {
                if (shopItem.type == "INAPP") {
                    if (js_Boot.__instanceof(shopItem, agario_module_shop_models_vo_ShopSkinItemVO)) {
                        shopItem.purchaseId = (js_Boot.__cast(shopItem, agario_module_shop_models_vo_ShopSkinItemVO)).referenceValue
                    }
                    shopItem.purchaseInfo = this.shopPurchasesModel.getPurchaseByPurchaseId(shopItem.purchaseId);
                    shopItem.price = this.priceMatrixModel.getPriceForTier(shopItem.purchaseInfo.priceTier, this._payModel.getCurrencyCode())
                } else {
                    if (shopItem.type == "REWARD") {
                        var s = "";
                        shopItem.price = 0;
                        shopItem.isReward = true;
                        if (js_Boot.__instanceof(shopItem, agario_module_shop_models_vo_ShopSkinItemVO)) {
                            var skinItem = shopItem;
                            if (skinItem.skinType == "VETERAN") {
                                this.checkLevelSkins(skinItem)
                            }
                        } else {
                            null
                        }
                    } else {
                        null
                    }
                }
            }
        },
        checkLevelSkins: function(s) {
            s.availableAtLevel = 0;
            if (this.xpModel.getLevelForReward(s.referenceValue) != null) {
                s.availableAtLevel = this.xpModel.getLevelForReward(s.referenceValue).level + 1
            }
        },
        refreshShopItems: function() {
            var _g = 0;
            var _g1 = this.shopItems.shopItemsList;
            while (_g < _g1.length) {
                var item = _g1[_g];
                ++_g;
                this.setPurchaseInfo(item)
            }
        },
        resetModels: function() {
            if (this.shopItems == null) {
                return
            }
            var _g = 0;
            var _g1 = this.shopItems.shopItemsList;
            while (_g < _g1.length) {
                var item = _g1[_g];
                ++_g;
                if (js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopSkinItemVO) || js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopBoostItemVO)) {
                    item.set_inUse(false);
                    item.set_owned(false)
                }
            }
        },
        getBonusById: function(id) {
            var res = this.shopData.walletBonusRewards.filter(function(b) {
                return b.bonusId == id
            });
            if (res.length > 0) {
                return res[0]
            } else {
                return null
            }
        },
        getWalletInappPurchaseById: function(id) {
            return this.shopPurchasesModel.getInappPurchaseByPurchaseId(id)
        },
        getIncentiveBundleId: function() {
            var bonus = this.getBonusById("webIncentive");
            return bonus.bundleId
        },
        getNewAccountRealmBundleId: function() {
            var bonus = this.getBonusById("newAccountRealmExtra");
            return bonus.bundleId
        },
        findProductsOnWallet: function(products) {
            var foundAll = products.length > 0;
            var _g_head = products.h;
            var _g_val = null;
            while (_g_head != null) {
                var awardProd;
                awardProd = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                var foundItem = false;
                var _g = 0;
                var _g1 = Core.user.wallet;
                while (_g < _g1.length) {
                    var item = _g1[_g];
                    ++_g;
                    if (item.productId == awardProd.productId) {
                        foundItem = true;
                        continue
                    }
                }
                foundAll = foundAll && foundItem;
                if (!foundItem) {
                    null
                }
            }
            return foundAll
        },
        validateCurrencyCode: function() {
            if (this.priceMatrixModel != null && !this.priceMatrixModel.hasCurrency(this._payModel.getCurrencyCode())) {
                this._payModel.overrideCurrencyCode("USD")
            }
        },
        getVisualQuestByType: function(type) {
            var _g = 0;
            var _g1 = this.shopData.visualQuests;
            while (_g < _g1.length) {
                var quest = _g1[_g];
                ++_g;
                if (quest.questType == type) {
                    return quest
                }
            }
            return null
        },
        getQuestAchievementByTypeLevel: function(type, level) {
            var ret = null;
            var _g = 0;
            var _g1 = this.shopData.achievements;
            while (_g < _g1.length) {
                var achievement = _g1[_g];
                ++_g;
                if (type == achievement.type && level > achievement.goal) {
                    ret = achievement
                }
            }
            return ret
        },
        __class__: agario_models_DataManager
    };
    var agario_models_VersionModel = function() {};
    $hxClasses["agario.models.VersionModel"] = agario_models_VersionModel;
    agario_models_VersionModel.__name__ = ["agario", "models", "VersionModel"];
    agario_models_VersionModel.getVersionPaddedAsString = function() {
        return StringTools.lpad("2", "0", 3) + StringTools.lpad("7", "0", 3) + StringTools.lpad("13", "0", 3)
    };
    agario_models_VersionModel.updateTag = function() {
        if (Core.initialized) {
            Core.services.gameui.setVersionTag("" + agario_models_VersionModel.SERVERS_VERSION + " - " + agario_models_VersionModel.SERVER_VERSION + " - " + agario_models_VersionModel.VERSION + ".931 - (CFG: " + agario_models_VersionModel.CONFIG_NUMBER + ")")
        }
    };
    var agario_module_dom_AdsManager = function(pManager) {
        this._manager = pManager
    };
    $hxClasses["agario.module.dom.AdsManager"] = agario_module_dom_AdsManager;
    agario_module_dom_AdsManager.__name__ = ["agario", "module", "dom", "AdsManager"];
    agario_module_dom_AdsManager.prototype = {
        _manager: null,
        refreshAds: function(groupName) {
            window.refreshAd(window.adSlots[groupName])
        },
        destroyAds: function(groupName) {
            window.destroyAd(window.adSlots[groupName])
        },
        __class__: agario_module_dom_AdsManager
    };
    var agario_module_dom_CanvasManager = function(pManager) {
        this.lastSyncTime = 0;
        this._manager = pManager;
        this.initialize()
    };
    $hxClasses["agario.module.dom.CanvasManager"] = agario_module_dom_CanvasManager;
    agario_module_dom_CanvasManager.__name__ = ["agario", "module", "dom", "CanvasManager"];
    agario_module_dom_CanvasManager.prototype = {
        _manager: null,
        targetMouseX: null,
        targetMouseY: null,
        lastSyncTime: null,
        initialize: function() {
            var detailLevel;
            if (Core.storage.get("quality_setting")) {
                detailLevel = Core.storage.get("quality_setting")
            } else {
                detailLevel = "Retina"
            }
            this.setQuality(detailLevel);
            this.updateQualitySetting(detailLevel);
            window.onresize = $bind(this, this.handleWindowResize);
            Core.stage.addEventListener("enterFrame", $bind(this, this.gameupdate));
            this.handleWindowResize(null)
        },
        setScale: function(pNewScale) {
            this._manager.state.canvasScale = pNewScale;
            var innerWidth = window.innerWidth;
            var innerHeight = window.innerHeight;
            var canvas = window.document.getElementById("canvas");
            canvas.width = innerWidth * this._manager.state.canvasScale;
            canvas.height = innerHeight * this._manager.state.canvasScale;
            canvas.onmousemove = $bind(this, this.handleMouseMove);
            canvas.onkeydown = $bind(this, this.handleKeyDown);
            var containerHeight = $("#helloContainer").innerHeight();
            var minHeight = 800;
            var newScale = Math.min(1, innerHeight / minHeight);
            var newHeight = minHeight * newScale;
            if (innerWidth > 0) {
                var transformValue = "translate(-50%, 0%) scale(" + newScale + ")";
                var element = $("#helloContainer");
                element.css("transform", transformValue);
                element.css("-ms-transform", transformValue);
                element.css("-webkit-transform", transformValue);
                var newTop = Math.round(innerHeight / 2 - newHeight * 0.5);
                element.css("top", "" + newTop + "px")
            }
            $("#openfl-content").css("transform", "translate(0%, -50%) scale(" + newScale + ")")
        },
        updateQualitySetting: function(level) {
            $("#quality").val(level)
        },
        setQuality: function(level) {
            var hasPixelRatio = "devicePixelRatio" in window;
            var pixelRatio = 1;
            if (hasPixelRatio) {
                pixelRatio = window.devicePixelRatio
            }
            switch (level) {
                case "Retina":
                    break;
                case "High":
                    pixelRatio = 1;
                    break;
                case "Medium":
                    pixelRatio = 0.9;
                    break;
                case "Low":
                    pixelRatio = 0.75;
                    break;
                case "VeryLow":
                    pixelRatio = 0.5;
                    break
            }
            this.setScale(pixelRatio);
            Core.storage.save("quality_setting", level);
            Core.storage.save("scale_setting", "" + pixelRatio)
        },
        gamepadAxisUpdate: function(axis, value) {
            var canvas = window.document.getElementById("canvas");
            var canvasWidth = canvas.width;
            var canvasHeight = canvas.height;
            var deadzone = value * value < 0.1;
            if (axis == 0) {
                this.targetMouseX = canvasWidth / 2;
                if (!deadzone) {
                    this.targetMouseX = (value + 1) / 2 * canvasWidth
                }
            }
            if (axis == 1) {
                this.targetMouseY = canvasHeight / 2;
                if (!deadzone) {
                    this.targetMouseY = (value + 1) / 2 * canvasHeight
                }
            }
            this.updateMouseTarget(this.targetMouseX, this.targetMouseY)
        },
        updateMouseTarget: function(pX, pY) {
            if (window.core) {
                window.core.setTarget(pX * this._manager.state.canvasScale, pY * this._manager.state.canvasScale)
            }
        },
        gameupdate: function(e) {
            if (!this._manager.state.inGame) {
                return
            }
            var now = oaktree_OakTree.engine.get_time();
            if (now - this.lastSyncTime > 25) {
                this.updateMouseTarget(this.targetMouseX, this.targetMouseY);
                this.lastSyncTime = now
            }
        },
        handleMouseMove: function(e) {
            this.targetMouseX = e.clientX;
            this.targetMouseY = e.clientY
        },
        handleKeyDown: function(e) {
            haxe_Log.trace("key down:", {
                fileName: "CanvasManager.hx",
                lineNumber: 173,
                className: "agario.module.dom.CanvasManager",
                methodName: "handleKeyDown",
                customParams: [e.keyCode, e.charCode]
            })
        },
        handleWindowResize: function(_) {
            this.setScale(this._manager.state.canvasScale)
        },
        __class__: agario_module_dom_CanvasManager
    };
    var agario_module_dom_GAnalytics = function(pManager) {
        this._manager = pManager
    };
    $hxClasses["agario.module.dom.GAnalytics"] = agario_module_dom_GAnalytics;
    agario_module_dom_GAnalytics.__name__ = ["agario", "module", "dom", "GAnalytics"];
    agario_module_dom_GAnalytics.prototype = {
        _manager: null,
        sendEvent: function(eventName, value) {
            if (window.ga) {
                window.ga("send", "event", eventName, value)
            }
        },
        __class__: agario_module_dom_GAnalytics
    };
    var agario_module_dom_GameState = function() {
        this.windowHasFocus = true;
        this.doCoreReload = false;
        this.canvasScale = 1;
        this.pendingNick = null;
        this.firstNickDialog = true;
        this.inGame = false;
        this.isPlayerAlive = false;
        this.statsOpen = false;
        this.dialogOpen = false;
        this.questOpen = false;
        this.region = "";
        this.partyToken = "";
        this.gameMode = "";
        this.isInitialized = false;
        this.lastGameResults = {
            foodEaten: 0,
            highestMass: 0,
            timeAlive: 0,
            leaderboardTime: 0,
            cellsEaten: 0,
            topPosition: 0
        };
        this.addGameTime(0)
    };
    $hxClasses["agario.module.dom.GameState"] = agario_module_dom_GameState;
    agario_module_dom_GameState.__name__ = ["agario", "module", "dom", "GameState"];
    agario_module_dom_GameState.prototype = {
        isInitialized: null,
        gameMode: null,
        partyToken: null,
        region: null,
        lastGameResults: null,
        questOpen: null,
        dialogOpen: null,
        statsOpen: null,
        isPlayerAlive: null,
        inGame: null,
        firstNickDialog: null,
        pendingNick: null,
        canvasScale: null,
        doCoreReload: null,
        hasLoginIntent: null,
        windowHasFocus: null,
        set_partyToken: function(value) {
            return this.partyToken = value
        },
        get_hasLoginIntent: function() {
            return window.hasLoginIntent()
        },
        setGameResults: function(foodEaten, highestMass, timeAlive, leaderTime, cellsEaten, topPosition) {
            if (topPosition == null) {
                topPosition = 0
            }
            if (cellsEaten == null) {
                cellsEaten = 0
            }
            if (leaderTime == null) {
                leaderTime = 0
            }
            if (timeAlive == null) {
                timeAlive = 0
            }
            if (highestMass == null) {
                highestMass = 0
            }
            if (foodEaten == null) {
                foodEaten = 0
            }
            this.lastGameResults = {
                foodEaten: foodEaten,
                highestMass: highestMass,
                timeAlive: timeAlive,
                leaderboardTime: leaderTime,
                cellsEaten: cellsEaten,
                topPosition: topPosition
            };
            this.addGameTime(timeAlive)
        },
        addGameTime: function(pTime) {
            if (pTime == 0) {
                return
            }
            var userName;
            if (Core.user.loggedIn) {
                userName = "" + Core.user.name
            } else {
                userName = "guest"
            }
            var tagName = "" + userName + "_GAME_TIME_KEY";
            var gameTime = Std.parseFloat(Core.saveSlot.get(tagName, "0"));
            var starterPackTime = Std.parseInt(Core.models.defaultPromoSettings.getSettingByKey("promoStarterPackTime")) * 1000;
            if (gameTime < starterPackTime) {
                gameTime += pTime;
                Core.saveSlot.set(tagName, "" + gameTime);
                if (gameTime > starterPackTime) {
                    Core.services.promo.postEvent("STARTER_PACK")
                }
            }
        },
        __class__: agario_module_dom_GameState,
        __properties__: {
            get_hasLoginIntent: "get_hasLoginIntent",
            set_partyToken: "set_partyToken"
        }
    };
    var agario_module_dom_GameMode = function() {};
    $hxClasses["agario.module.dom.GameMode"] = agario_module_dom_GameMode;
    agario_module_dom_GameMode.__name__ = ["agario", "module", "dom", "GameMode"];
    var agario_module_dom_IMainUI = function() {};
    $hxClasses["agario.module.dom.IMainUI"] = agario_module_dom_IMainUI;
    agario_module_dom_IMainUI.__name__ = ["agario", "module", "dom", "IMainUI"];
    agario_module_dom_IMainUI.prototype = {
        showAds: null,
        showNickDialog: null,
        hideMetaUI: null,
        showPromoBadge: null,
        hidePromotionBadge: null,
        __class__: agario_module_dom_IMainUI
    };
    var agario_module_dom_MainUI = function(pManager) {
        this._checkTimer = 0;
        this._manager = pManager;
        this.initialize()
    };
    $hxClasses["agario.module.dom.MainUI"] = agario_module_dom_MainUI;
    agario_module_dom_MainUI.__name__ = ["agario", "module", "dom", "MainUI"];
    agario_module_dom_MainUI.__interfaces__ = [agario_module_dom_IMainUI];
    agario_module_dom_MainUI.prototype = {
        _checkTimer: null,
        _manager: null,
        _activeAds: null,
        _promoBadge: null,
        gameMode: null,
        get_gameMode: function() {
            if (this.gameMode == null) {
                this.gameMode = $("#gamemode")
            }
            return this.gameMode
        },
        initialize: function() {
            var isInFacebook = Core.environment.get_isInFacebook();
            this._activeAds = new haxe_ds_StringMap();
            if (isInFacebook) {
                $("#gplusLogin").hide();
                $(".btn-logout").hide();
                $("footer.tosBox.left").hide();
                $("#showOnlineStatus").parent().show()
            }
            this.initButtonTriggers();
            this.initWindowEvents();
            this.setGameMode("");
            Core.get_events().listen("shop_event::newConfigLoaded", $bind(this, this.setButtonTooltipTexts))
        },
        initWindowEvents: function() {
            window.addEventListener("focus", $bind(this, this.handleWindowFocus));
            window.addEventListener("blur", $bind(this, this.handleWindowBlur))
        },
        handleWindowBlur: function(e) {
            this._manager.state.windowHasFocus = false
        },
        handleWindowFocus: function(e) {
            this._manager.state.windowHasFocus = true
        },
        initButtonTriggers: function() {
            var _g = this;
            $("#gPlusShare").click($bind(this, this.handleGPlusClick));
            $("#massButton").click(function(e) {
                MiniclipAPI.instance.openShop("shopMass");
                /*agario_sounds_GameSounds.play("sfxClick")*/
            });
            $("#skinButton").click(function(e1) {
                var dataType = $(e1.currentTarget).attr("data-type");
                MiniclipAPI.instance.openShop("shopSkins", {
                    tab: dataType
                });
                /*agario_sounds_GameSounds.play("sfxClick")*/
            });
            $("#boostButton").click(function(e2) {
                MiniclipAPI.instance.openShop("shopBoost");
                /*agario_sounds_GameSounds.play("sfxClick")*/
            });
            $(".agario-wallet-container").click(function(e3) {
                var _server = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
                if (_server != null && !_server.isConnected()) {
                    return
                }
                if (!Core.user.loggedIn && Core.environment.get_isInFacebook()) {
                    return
                }
                if (MiniclipAPI.instance.isShopAvailable() || !MiniclipAPI.instance.isLoggingIn()) {
                    MiniclipAPI.instance.openShop("shopCurrency")
                }
            });
            $(".agario-profile-picture").click(function(_) {
                if (!Core.user.loggedIn && Core.environment.get_isInFacebook()) {
                    return
                }
                MiniclipAPI.instance.showProfile()
            });
            $("#statsContinue").click(function(_1) {
                _g._manager.stats.closeStats()
            });
            $(".btn-spectate").click(function(e4) {
                _g.spectate();
                e4.preventDefault()
            });
            this.get_gameMode().change(function(e5) {
                _g.handleChangeMode()
            });
            $(".btn").click(function(e6) {
                var btnIsDisabled = $(e6.currentTarget)["is"](":disabled");
                if (!btnIsDisabled) {
                    /*agario_sounds_GameSounds.play("sfxClick")*/
                }
            })
        },
        handleChangeMode: function() {
            var mode = this.get_gameMode().val();
            if (mode == ":party") {
                Core.ui.partyMode.animatePartyMode()
            } else {
                if (this._manager.state.gameMode == ":party") {
                    Core.ui.partyMode.showPartyLeaveConfirmation()
                } else {
                    this.setGameMode(mode)
                }
            }
            Core.sendGoogleAnalyticsEvent("GameMode", mode)
        },
        setButtonTooltipTexts: function() {
            $(".btn-login-play").tooltip({
                html: true,
                title: oaktree_ext_localization_I18n.text("page_login_tooltip"),
                placement: "top"
            });
            $(".party-icon-back").tooltip({
                html: true,
                title: oaktree_ext_localization_I18n.text("page_leave_party_tooltip"),
                placement: "top"
            });
            $("#showOnlineStatus").parent().tooltip({
                html: true,
                title: oaktree_ext_localization_I18n.text("page_online_status_setting_tooltip"),
                placement: "top"
            });
            $(".copy-party-token").tooltip({
                html: true,
                title: "Use <strong>&#8984; + C </strong> to copy!",
                placement: "top",
                trigger: "manual"
            })
        },
        handleGPlusClick: function(pEvent) {
            pEvent.stopPropagation();
            pEvent.preventDefault();
            $("#externalGShare").trigger("click")
        },
        isChromeBrowser: function() {
            return /chrome/.test(navigator.userAgent.toLowerCase())
        },
        showInstructionsPanel: function(pForce) {
            if (pForce == null) {
                pForce = false
            }
            var areSettingsHidden = $("#settings").css("display") == "none";
            var isSocialLoginHidden = $("#socialLoginContainer").css("display") == "none";
            if (pForce || areSettingsHidden && isSocialLoginHidden) {
                $("#instructions").show()
            }
        },
        showAds: function(time) {
            if (this._manager.state.firstNickDialog) {
                $("#adsBottom").show();
                $("#g300x250").show();
                $("#a300x250").hide();
                $("#s300x250").hide();
                $("#g728x90").show();
                $("#a728x90").hide();
                this.refreshAd("ac")
            } else {
                $("#adsBottom").show();
                $("#g300x250").hide();
                $("#a300x250").show();
                $("#s300x250").hide();
                $("#g728x90").hide();
                $("#a728x90").show();
                this.refreshAd("aa")
            }
            $("#advertisement").show();
            if (time > 0) {
                $("#overlays").fadeIn(time)
            } else {
                $("#overlays").show()
            }
        },
        refreshAd: function(id) {
            if (!this._activeAds.get(id)) {
                window.refreshAd(window.adSlots[id])
            }
            this._activeAds.set(id, true);
            true
        },
        destroyAd: function(id) {
            window.destroyAd(window.adSlots[id]);
            this._activeAds.set(id, false);
            false
        },
        handleNewConfigLoaded: function() {
            var _g = this;
            Core.get_events().unlisten("shop_event::newConfigLoaded", $bind(this, this.handleNewConfigLoaded));
            this._manager.stats.animateOut("#updatingPanel", 500, 0, function() {
                _g.showNickDialog(0)
            })
        },
        showNickDialog: function(time, fromStats) {
            if (fromStats == null) {
                fromStats = false
            }
            var _g = this;
            if (this._manager.state.dialogOpen || this._manager.state.statsOpen) {
                return
            }
            Core.setFpsCap(true);
            var configurationService = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService);
            if (configurationService.hasConfigToDownload && fromStats) {
                Core.get_events().listen("shop_event::newConfigLoaded", $bind(this, this.handleNewConfigLoaded));
                configurationService.loadConfigurationOnHold();
                $("#updatingPanel").show();
                this.animateIn("#updatingPanel", 500);
                return
            }
            if (window.core) {
                window.core.setFadeout(true)
            }
            this._manager.state.dialogOpen = true;
            $(".btn-spectate, #showOnlineStatus").prop("disabled", this._manager.state.isPlayerAlive);
            $("#showOnlineStatusText").toggleClass("setting-disabled", this._manager.state.isPlayerAlive);
            window.onkeydown = function(e) {
                var isInMainScreen = Core.get_states().isTopState("state_main_screen");
                var joinElement = $("#joinPartyToken")[0];
                if (e.keyCode == 13 && isInMainScreen && e.target != joinElement) {
                    _g.startGame()
                }
                var targetId = e.target.id;
                if (e.keyCode == 32 && targetId != "nick") {
                    e.preventDefault()
                }
            };
            this._manager.state.inGame = false;
            if (time > 0) {
                $("#overlays").fadeIn(time)
            } else {
                $("#overlays").show()
            }
            this._manager.state.firstNickDialog = false;
            this.animateIn("#mainPanel", time);
            $("#stats").hide();
            $("#mainPanel").fadeIn(500);
            $(".agario-promo-container").fadeIn(500);
            $(".agario-web-incentive").fadeIn(500);
            $("#bannerCarousel").fadeIn(500);
            this.showShop();
            this._manager.partyMode.showMainScreen();
            this._manager.partyMode.showPartyBackButton();
            if (Core.user.isGuest && this._manager.stats.deaths > 0 && (this._manager.settings.get_matches() == 5 || this._manager.settings.get_matches() == 15 || this._manager.settings.get_matches() == 25 || this._manager.settings.get_matches() > 25 && (this._manager.settings.get_matches() - 25) % 20 == 0)) {
                haxe_Timer.delay(function() {
                    Core.showIncentive()
                }, Math.ceil(time))
            }
        },
        showShop: function(delay) {
            if (delay == null) {
                delay = 500
            }
            var isInGameOverScreen = Core.get_states().isActive("state_game_over");
            if (Core.ui.network.connected && !Core.user.isLoggingIn && !isInGameOverScreen) {
                this.animateIn("#leftPanel", delay);
                this.animateIn("#rightPanel", delay);
                $(".play-blocker").hide();
                $(".shop-blocker").hide()
            }
        },
        hideShop: function(delay) {
            if (delay == null) {
                delay = 500
            }
            $("#leftPanel").css("opacity", "0");
            $("#rightPanel").css("opacity", "0");
            $(".play-blocker").show()
        },
        startGame: function() {
            var item = window.document.getElementById("nick");
            this.setNick(item.value)
        },
        hideMetaUI: function() {
            Core.setFpsCap(false);
            $("#adsBottom").stop(null, true).hide();
            $("#overlays").stop(null, true).hide();
            $("#stats").stop(null, true).hide();
            $("#updatingPanel").stop(null, true).hide();
            $("#mainPanel").stop(null, true).hide().addClass("disable-mouse");
            this._manager.state.dialogOpen = false;
            this._manager.state.statsOpen = false;
            this._manager.network.checkRegion();
            this.setTransparent("#leftPanel");
            this.setTransparent("#rightPanel");
            this.destroyAd("aa");
            this.destroyAd("ab");
            this.destroyAd("ac")
        },
        setNick: function(nick) {
            if (!Core.ui.network.connected) {
                return
            }
            Core.user.nickName = nick;
            this.hideMetaUI();
            this._manager.state.pendingNick = nick;
            this._manager.settings.set_lastNick(nick);
            if (window.core) {
                window.core.sendNick(nick)
            }
            this._manager.state.inGame = true;
            window.addKeyListeners();
            this._manager.state.pendingNick = null;
            if (window.core) {
                window.core.setFadeout(false)
            }
        },
        spectate: function() {
            this.hideMetaUI();
            this._manager.state.inGame = true;
            window.addKeyListeners();
            if (window.core) {
                window.core.setFadeout(false)
            }
            if (window.core) {
                window.core.sendSpectate()
            }
        },
        applyGameMode: function(pMode) {
            $("#helloContainer").attr("data-gamemode", pMode);
            this.get_gameMode().val(pMode)
        },
        resetGameMode: function() {
            $("#helloContainer").attr("data-gamemode", this._manager.state.gameMode)
        },
        setGameMode: function(pMode, pReconnect) {
            if (pReconnect == null) {
                pReconnect = true
            }
            this.applyGameMode(pMode);
            if (pMode == this._manager.state.gameMode) {
                this.enableButtons();
                return
            }
            this._manager.state.gameMode = pMode;
            if (pReconnect) {
                this._manager.state.dialogOpen = true;
                this._manager.network.reconnect()
            }
            $(".btn-spectate").prop("disabled", false);
            if (pMode == ":party") {
                Core.ui.partyMode.hideTryNowBanner();
                $(".party-icon-back").show()
            } else {
                Core.ui.partyMode.showTryNowBanner();
                $(".party-icon-back").hide();
                Core.ui.partyMode.hideHtmlPartyCode()
            }
        },
        showPromoBadge: function(pBadge) {
            var _g = this;
            if (!js_Boot.__instanceof(pBadge, agario_services_promo_BasePromotionButton)) {
                return
            }
            var badge = pBadge;
            var badgeConfig = badge.getBadgeConfiguration();
            if (badgeConfig == null) {
                return
            }
            agario_views_promoclient_PromoClientUtils.loadResources(badgeConfig.badgeConfiguration, function() {
                var _ps = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
                _ps.updateSignal.add($bind(_g, _g.updatePromoBadge));
                var gameDelegate = _ps.get_clientDelegate();
                _g._promoBadge = agario_views_promoclient_HTMLPromoButton.getButtonForOffer(badge.get_offerId(), badgeConfig.badgeConfiguration, gameDelegate, badge.system);
                if (_g._promoBadge == null) {
                    return
                }
                $("#promo-badge-container").off("click");
                $("#promo-badge-container").empty();
                $("#promo-badge-container").append(_g._promoBadge.element);
                $("#promo-badge-container").click(function(_) {
                    var disableTimer = new haxe_Timer(3000);
                    disableTimer.run = function() {
                        $("#promo-badge-container").removeClass("disabled");
                        disableTimer.stop()
                    };
                    $("#promo-badge-container").addClass("disabled");
                    badge.executeCallback()
                });
                $("#promo-badge-container").show()
            })
        },
        updateButtonsState: function() {
            if (!Core.ui.network.connected) {
                this.disableButtons()
            } else {
                this.enableButtons();
                this.showShop()
            }
        },
        changeSettingVisibility: function(id, show) {
            if (show) {
                $("#" + id).parent().show()
            } else {
                $("#" + id).parent().hide()
            }
        },
        updateConnectingMessage: function(message) {
            $(".connecting-info").html(message);
            Core.writeToConsole("%c" + message, "background: green; color: white;")
        },
        enableButtons: function() {
            var _g = this;
            $(".btn-needs-server").prop("disabled", false);
            $("#region").prop("disabled", false);
            $("#gamemode").prop("disabled", false);
            $(".btn-play-guest").click(function(e) {
                _g.playGameSelected()
            });
            $(".btn-play").click(function(e1) {
                _g.playGameSelected()
            });
            $("#region").change(function(e2) {
                _g.disableButtons()
            });
            $("#gamemode").change(function(e3) {
                if (_g.get_gameMode().val() != ":party" && _g.get_gameMode().val() != _g._manager.state.gameMode) {
                    _g.disableButtons()
                }
            })
        },
        playGameSelected: function() {
            var mode = this.get_gameMode().val();
            if (mode == ":party" && this._manager.state.gameMode != ":party") {
                Core.ui.partyMode.showContinueMode()
            } else {
                this.startGame()
            }
        },
        disableButtons: function() {
            $(".btn-needs-server").prop("disabled", true);
            $("btn-play-guest").click(null);
            $("btn-play-play").click(null);
            $("#region").prop("disabled", true);
            $("#gamemode").prop("disabled", true)
        },
        updatePromoBadge: function() {
            if (this._promoBadge != null) {
                this._promoBadge.update()
            }
        },
        hidePromotionBadge: function() {
            $("#promo-badge-container").hide();
            var _ps = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
            _ps.updateSignal.remove($bind(this, this.updatePromoBadge))
        },
        animateIn: function(id, delay, endPos) {
            if (endPos == null) {
                endPos = 0
            }
            if (delay == null) {
                delay = 0
            }
            $(id).stop(null, true);
            $(id).show();
            $(id).delay(delay | 0).animate({
                opacity: 1
            }, {
                duration: 1000,
                queue: false,
                easing: "easeOutQuart"
            }).removeClass("disable-mouse")
        },
        showInvisible: function(id) {
            $(id).stop(null, true);
            $(id).show();
            this.setTransparent(id)
        },
        setTransparent: function(id) {
            $(id).stop(null, true);
            $(id).animate({
                opacity: 0
            }, 0, "linear").addClass("disable-mouse")
        },
        __class__: agario_module_dom_MainUI,
        __properties__: {
            get_gameMode: "get_gameMode"
        }
    };
    var agario_module_dom_NetworkUI = function(pManager) {
        this._backoffPeriod = 5000;
        this._findingServer = 0;
        this._regionsNames = null;
        this._curValidFindServer = 0;
        this.params = "";
        this.connected = false;
        this._manager = pManager;
        this.initialize()
    };
    $hxClasses["agario.module.dom.NetworkUI"] = agario_module_dom_NetworkUI;
    agario_module_dom_NetworkUI.__name__ = ["agario", "module", "dom", "NetworkUI"];
    agario_module_dom_NetworkUI.prototype = {
        connected: null,
        set_connected: function(value) {
            this.connected = value;
            Core.ui.mainUI.updateButtonsState();
            return value
        },
        params: null,
        serverIP: null,
        get_serverIP: function() {
            return this._serverIP
        },
        _serverIP: null,
        _integrityChecksActive: null,
        _masterUrl: null,
        _curValidFindServer: null,
        _isSecure: null,
        _regionsNames: null,
        _findingServer: null,
        _backoffPeriod: null,
        _manager: null,
        _ignoreReconnect: null,
        _region: null,
        _gameMode: null,
        initialize: function() {
            var protocol = window.location.protocol;
            this._isSecure = protocol == "https:";
            var tempMaster = agario_config_Configs.getProperty("master_url");
            if (Core.environment.webEnv.hasParameter("master")) {
                tempMaster = Core.environment.webEnv.getParameter("master")
            }
            this._masterUrl = "" + protocol + "//" + tempMaster;
            agario_config_Configs.setProperty("full_master_url", this._masterUrl)
        },
        findServer: function(pRegion, pGameMode) {
            if (pGameMode == null) {
                pGameMode = ""
            }
            if (pRegion == null) {
                pRegion = ""
            }
            var _g = this;
            this._region = pRegion;
            this._gameMode = pGameMode;
            this._integrityChecksActive = true;
            if (window.core) {
                window.core.disconnect()
            }
            if (window.core) {
                window.core.disableIntegrityChecks(false)
            }
            if (Core.environment.webEnv.hasParameter("ip")) {
                if (window.core) {
                    window.core.disableIntegrityChecks(true)
                }
                this._integrityChecksActive = false;
                this._serverIP = Core.environment.webEnv.getParameter("ip");
                this.onFindServerSuccess();
                return
            }
            if (Core.environment.webEnv.hasParameter("sip")) {
                this._serverIP = Core.environment.webEnv.getParameter("sip");
                this.onFindServerSuccess();
                return
            }
            var myFindID = ++this._curValidFindServer;
            var friends = Core.user.facebookFriends;
            var request;
            var data;
            if (pGameMode == "" && friends != null && friends.length > 0) {
                request = "findServerWithFriends";
                var msg = this.getBouncerRequestMessage(friends);
                data = this.getMessageDataBytes(msg);
                Core.hasDoneFindServerWithFriends = true
            } else {
                request = "v3/findServer";
                var msg1 = this.getBouncerRequestMessage(null);
                data = this.getMessageDataBytes(msg1)
            }
            this.makeMasterRequest(request, data, function(response) {
                if (myFindID != _g._curValidFindServer) {
                    return
                }
                var pResponse = new haxe_format_JsonParser(response).parseRec();
                if (pResponse.alert != null) {
                    alert(pResponse.alert)
                }
                if (pResponse.token != null) {
                    Core.ui.state.set_partyToken(pResponse.token)
                }
                if (pResponse.ip == "0.0.0.0:0") {
                    haxe_Timer.delay(function() {
                        _g.findServer(pRegion, pGameMode)
                    }, 5000)
                } else {
                    _g._serverIP = pResponse.ip;
                    _g.onFindServerSuccess()
                }
            }, $bind(this, this.onFindServerError))
        },
        onFindServerSuccess: function() {
            Core.writeToConsole("%cFound arena!", "background: green; color: white;");
            Core.get_events().fire("shop_event::update_connecting_status");
            this.connect(this._serverIP, this._integrityChecksActive)
        },
        onFindServerError: function() {
            null
        },
        connect: function(pServerUrl, activeintegrityCheck, captchaToken) {
            if (activeintegrityCheck == null) {
                activeintegrityCheck = true
            }
            this._serverIP = pServerUrl;
            this._ignoreReconnect = false;
            var isDevelopment;
            if (Core.environment.webEnv.hasParameter("env_development")) {
                isDevelopment = Core.environment.webEnv.getParameter("env_development") == "true"
            } else {
                isDevelopment = false
            }
            var isLocal;
            if (Core.environment.webEnv.hasParameter("env_local")) {
                isLocal = Core.environment.webEnv.getParameter("env_local") == "true"
            } else {
                isLocal = false
            }
            var url = "ws://" + pServerUrl;
            if (!isDevelopment && !isLocal && activeintegrityCheck) {
                var tmp = pServerUrl.split(":");
                var dotRegex = new EReg("\\.", "g");
                var slashRegex = new EReg("/", "g");
                var ipPart = dotRegex.replace(tmp[0], "-");
                ipPart = slashRegex.replace(ipPart, "");
                var protocol;
                if (this._isSecure) {
                    protocol = "wss"
                } else {
                    protocol = "ws"
                }
                url = protocol + "://ip-" + ipPart + ".tech.agar.io:" + tmp[1]
            }
            var query = "";
            query = this.addParamToQueryString(query, "recaptcha_token", captchaToken);
            query = this.addParamToQueryString(query, "party_id", Core.ui.state.partyToken);
            if (this.params != "") {
                if (query == "") {
                    query = "?"
                } else {
                    query += "&"
                }
            }
            url += query + this.params;
            if (window.core) {
                window.core.connect(url)
            }
        },
        addParamToQueryString: function(query, key, value) {
            if (value == null || value == "") {
                return query
            }
            if (query == "") {
                query += "?"
            } else {
                query += "&"
            }
            query += key + "=" + encodeURIComponent(value);
            return query
        },
        getLatestConfigurationId: function() {
            var _g = this;
            if (Core.environment.webEnv.hasParameter("configID")) {
                this.setConfiguration(Core.environment.webEnv.getParameter("configID"));
                return
            }
            var configVersion = agario_config_Configs.getProperty("configVersion");
            $.ajax(this._masterUrl + "/getLatestID", {
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("x-config-group", configVersion);
                    xhr.setRequestHeader("x-support-proto-version", "7.2.0");
                    return true
                },
                success: function(data) {
                    var configId = data.split("\n")[0];
                    _g.setConfiguration(configId);
                    Core.storage.save("last_config_id", configId)
                },
                error: function() {
                    var lastConfigAvailable = !oaktree_utils_StringUtility.isBlank(Core.storage.get("last_config_id"));
                    if (lastConfigAvailable) {
                        var configId1 = Core.storage.get("last_config_id");
                        _g.setConfiguration(configId1)
                    }
                },
                method: "GET",
                cache: false,
                crossDomain: true
            })
        },
        setConfiguration: function(pConfigId) {
            var isLocal = agario_config_Configs.getProperty("env_local") != agario_config_Configs.NOT_FOUND;
            var loadLocalConfiguration = agario_config_Configs.getProperty("load_local_configuration") == "true";
            if (isLocal) {
                if (loadLocalConfiguration) {
                    pConfigId = "base"
                } else {
                    var setConfig = agario_config_Configs.getProperty("configID");
                    if (setConfig != agario_config_Configs.NOT_FOUND) {
                        pConfigId = setConfig
                    }
                }
            }
            MiniclipAPI.instance.updateConfigurationID(pConfigId)
        },
        reconnect: function(captchaToken, sameServer) {
            if (sameServer == null) {
                sameServer = false
            }
            var _g = this;
            if (this._ignoreReconnect) {
                return
            }
            if (!this._manager.state.isInitialized) {
                return
            }
            if (this._manager.state.region == "" || this._manager.state.region == null) {
                return
            }
            if (captchaToken != null) {
                this.connect(this._serverIP, this._integrityChecksActive, captchaToken)
            } else {
                if (this._manager.state.doCoreReload) {
                    this._manager.reloadAgarioCore(function() {
                        _g.findServer(_g._manager.state.region, _g._manager.state.gameMode);
                        Core.models.registerSkinsInGameCore()
                    })
                } else {
                    if (sameServer) {
                        this.connect(this._serverIP, this._integrityChecksActive)
                    } else {
                        this.findServer(this._manager.state.region, this._manager.state.gameMode)
                    }
                }
            }
        },
        stopReconnect: function() {
            this._ignoreReconnect = true
        },
        allowReconnect: function(captchaToken) {
            this._ignoreReconnect = false;
            this.reconnect(captchaToken)
        },
        sendRecaptchaResponse: function(token) {
            if (window.core) {
                window.core.recaptchaResponse(token)
            }
        },
        setRegion: function(pRegion, forceReconnect) {
            if (pRegion == null || pRegion == "") {
                return
            }
            if (pRegion == this._manager.state.region) {
                $(".btn-needs-server").prop("disabled", false);
                return
            }
            if ($("#region").val() != pRegion) {
                $("#region").val(pRegion)
            }
            Core.storage.save("location", pRegion);
            this._manager.state.region = pRegion;
            $(".region-message").hide();
            $(".region-message." + pRegion).show();
            $(".btn-needs-server").prop("disabled", false);
            if (this._manager.state.isInitialized && forceReconnect) {
                this.reconnect()
            }
        },
        checkRegion: function() {
            var regionElm = $("#region");
            var selectedRegion = regionElm.val();
            if (selectedRegion != null && selectedRegion != "") {
                Core.storage.save("location", selectedRegion)
            } else {
                var savedRegion = Core.storage.get("location");
                if (savedRegion != null && savedRegion != "") {
                    $("#region").val(savedRegion)
                }
            }
            selectedRegion = regionElm.val();
            if (selectedRegion != null && selectedRegion != "") {
                $("#locationKnown").append(regionElm)
            } else {
                $("#locationUnknown").append(regionElm)
            }
        },
        refreshRegionInfo: function() {
            var _g = this;
            this.initializeRegionNames();
            $.ajax(this._masterUrl + "/info", {
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("x-support-proto-version", "7.2.0");
                    return true
                },
                success: function(data) {
                    var json = new haxe_format_JsonParser(data).parseRec();
                    _g.handleRegionInfo(json.regions);
                    _g.handleVersionsInfo(json.versionsInfo)
                },
                dataType: "text",
                method: "GET",
                cache: false,
                crossDomain: true
            })
        },
        handleRegionInfo: function(response) {
            var counter = new haxe_ds_StringMap();
            var regions = Reflect.fields(response);
            var _g = 0;
            while (_g < regions.length) {
                var region = regions[_g];
                ++_g;
                var ii = region.split(":")[0];
                if (!(__map_reserved[ii] != null ? counter.existsReserved(ii) : counter.h.hasOwnProperty(ii))) {
                    if (__map_reserved[ii] != null) {
                        counter.setReserved(ii, 0)
                    } else {
                        counter.h[ii] = 0
                    }
                }
                var regionObj = Reflect.field(response, region);
                counter.set(ii, (__map_reserved[ii] != null ? counter.getReserved(ii) : counter.h[ii]) + regionObj.numPlayers)
            }
            var $it0 = this._regionsNames.keys();
            while ($it0.hasNext()) {
                var region1 = $it0.next();
                var opt = $('#region option[value="' + region1 + '"]');
                opt.hide()
            }
            var $it1 = counter.keys();
            while ($it1.hasNext()) {
                var elm = $it1.next();
                var opt1 = $('#region option[value="' + elm + '"]');
                opt1.text(this._regionsNames.get(elm) + (" (" + (__map_reserved[elm] != null ? counter.getReserved(elm) : counter.h[elm]) + ")"));
                opt1.show()
            }
        },
        handleVersionsInfo: function(info) {
            var version = "";
            var _g = 0;
            while (_g < info.length) {
                var server = info[_g];
                ++_g;
                version += server + " "
            }
            agario_models_VersionModel.SERVERS_VERSION = version;
            agario_models_VersionModel.updateTag()
        },
        initializeRegionNames: function() {
            var _g = this;
            if (this._regionsNames == null) {
                this._regionsNames = new haxe_ds_StringMap();
                $("#region").children().each(function(idx, node) {
                    var elm = $(node);
                    elm.hide();
                    var code = elm.val();
                    if (code == null || code == "") {
                        return
                    }
                    var value = elm.text();
                    _g._regionsNames.set(code, value)
                })
            }
        },
        hasRegion: function() {
            return this._region != "" && this._region != null
        },
        getPartyToken: function(pToken, errorCallback, successCallback) {
            var msg = this.getBouncerRequestMessage(null);
            msg.set_getTokenField(new agario_bouncer_requestdata_Get_$token_$data());
            msg.get_getTokenField().set_token(pToken);
            this.makeMasterRequest("v2/getToken", this.getMessageDataBytes(msg), successCallback, errorCallback)
        },
        createPartyToken: function(region, errorCallback, successCallback) {
            var msg = this.getBouncerRequestMessage(null);
            msg.get_regionInfoField().set_region(region);
            msg.get_regionInfoField().set_gamemode("");
            this.makeMasterRequest("v2/createToken", this.getMessageDataBytes(msg), successCallback, errorCallback)
        },
        findServerWithFriends: function(friends, successCallback, errorCallback) {
            var msg = this.getBouncerRequestMessage(friends);
            this.makeMasterRequest("findServerWithFriends", this.getMessageDataBytes(msg), successCallback, errorCallback)
        },
        getFriendsData: function(friends) {
            var msg = new agario_bouncer_requestdata_Find_$server_$with_$friends_$data();
            if (friends != null) {
                var _g1 = 0;
                var _g = friends.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    msg.addFriendFacebookId(friends[i].id)
                }
            }
            return msg
        },
        getBouncerRequestMessage: function(friends) {
            var msg = new agario_bouncer_requestdata_Bouncer_$request_$data();
            msg.set_regionInfoField(new agario_bouncer_requestdata_Region_$info_$data());
            msg.get_regionInfoField().set_region(this._region);
            msg.get_regionInfoField().set_gamemode(this._gameMode);
            if (friends != null) {
                msg.set_findServerWithFriendsField(new agario_bouncer_requestdata_Find_$server_$with_$friends_$data());
                var _g1 = 0;
                var _g = friends.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    msg.get_findServerWithFriendsField().addFriendFacebookId(friends[i].id)
                }
            }
            return msg
        },
        getMessageDataBytes: function(msg) {
            var output = new haxe_io_BytesOutput();
            msg.writeTo(output);
            var dataInByteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(output.getBytes());
            var dataInArrayBuffer = dataInByteArray;
            var byteData = dataInArrayBuffer.b;
            return byteData
        },
        makeMasterRequest: function(request, body, successCallback, errorCallback, dataType, maxAttempts, intervalAttempts, totAttempts) {
            if (totAttempts == null) {
                totAttempts = 0
            }
            if (intervalAttempts == null) {
                intervalAttempts = 5
            }
            if (maxAttempts == null) {
                maxAttempts = -1
            }
            if (dataType == null) {
                dataType = "application/octet-stream"
            }
            var _g = this;
            var xhr = new XMLHttpRequest();
            xhr.open("POST", this._masterUrl + "/" + request);
            xhr.setRequestHeader("Accept", "text/plain");
            xhr.setRequestHeader("Accept", "*/*");
            xhr.setRequestHeader("Accept", "q=0.01");
            xhr.setRequestHeader("Content-Type", dataType);
            xhr.setRequestHeader("x-support-proto-version", "7.2.0");
            xhr.addEventListener("load", function(e) {
                if (xhr.responseText != "" && xhr.status < 400) {
                    successCallback(xhr.responseText)
                } else {
                    errorCallback()
                }
            });
            xhr.addEventListener("error", function(e1) {
                if (maxAttempts == -1 || totAttempts < maxAttempts) {
                    haxe_Timer.delay(function() {
                        _g.makeMasterRequest(request, body, successCallback, errorCallback, dataType, maxAttempts, intervalAttempts, ++totAttempts)
                    }, intervalAttempts * 1000)
                } else {
                    errorCallback()
                }
            });
            xhr.send(body)
        },
        __class__: agario_module_dom_NetworkUI,
        __properties__: {
            get_serverIP: "get_serverIP",
            set_connected: "set_connected"
        }
    };
    var agario_module_dom_PartyModeUI = function(pManager) {
        this._justCreatedParty = false;
        this._manager = pManager;
        this.initialize()
    };
    $hxClasses["agario.module.dom.PartyModeUI"] = agario_module_dom_PartyModeUI;
    agario_module_dom_PartyModeUI.__name__ = ["agario", "module", "dom", "PartyModeUI"];
    agario_module_dom_PartyModeUI.prototype = {
        _manager: null,
        _state: null,
        _stateParting: null,
        _justCreatedParty: null,
        _endpoint: null,
        initialize: function() {
            var _g = this;
            $(".copy-party-token").click(function(_) {
                _g.copyToken("code")
            });
            $('[id="create-party-btn"]').click(function(_1) {
                _g.createParty()
            });
            $('[id="pre-join-party-btn"]').click(function(_2) {
                var token = window.location.hash;
                $("#joinPartyToken").val(token);
                $("#joinPartyToken2").val(token);
                $("#helloContainer").attr("data-party-state", "2");
                _g.setPartyState("2")
            });
            $('[id="join-party-btn"]').click(function(_3) {
                var token1 = $("#joinPartyToken").val();
                if (token1 == "") {
                    token1 = $("#joinPartyToken2").val()
                }
                _g.joinParty(token1)
            });
            $(".party-play").click(function(_4) {
                if (_g._manager.state.gameMode == ":party") {
                    _g.startParty()
                } else {
                    $(".party-dialog").show();
                    _g.changePage(8)
                }
            });
            $('[id="cancel-party-btn"]').click(function(_5) {
                if (_g._manager.state.gameMode == ":party") {
                    _g._manager.mainUI.setGameMode(":party")
                }
                _g.hidePartyMode()
            });
            $(".party-icon-back").click(function(_6) {
                _g.cancelParty();
                _g.hidePartyMode()
            });
            $("#continue-party-btn").click(function(_7) {
                _g.cancelParty();
                _g.hidePartyMode();
                _g._manager.mainUI.startGame()
            });
            $("#leave-party-btn").click(function(_8) {
                var mode = _g._manager.mainUI.get_gameMode().val();
                _g._manager.mainUI.setGameMode(mode);
                _g.hidePartyMode();
                _g.setPartyState("0")
            });
            $("#leave-continue-party-btn").click(function(_9) {
                _g._manager.mainUI.setGameMode(":party");
                _g.hidePartyMode();
                _g.setPartyState("1")
            });
            $(".btn-block").click(function(e) {
                $("#helloContainer").attr("data-party-state", "0");
                _g.changePage(0)
            })
        },
        createPartyToken: function() {
            var _g = this;
            if (Core.ui.state.partyToken != null && Core.ui.state.partyToken != "") {
                return
            }
            var region = this._manager.state.region + ":party";
            this._manager.network.createPartyToken(region, function() {
                _g.setPartyState("0")
            }, function(result) {
                var obj = new haxe_format_JsonParser(result).parseRec();
                Core.ui.state.set_partyToken(obj.token);
                _g.updateHtmlPartyCode();
                _g.setPartyState("0")
            })
        },
        createParty: function() {
            this.setPartyState("3");
            this.showHtmlPartyCode();
            this._manager.mainUI.setGameMode(":party");
            this._justCreatedParty = true
        },
        showMainScreen: function() {
            if (this._manager.state.gameMode == ":party") {
                this.setPartyState(this._stateParting)
            } else {
                this.setPartyState("0")
            }
        },
        hideTryNowBanner: function() {
            var elm = $(".try-now");
            if (elm != null) {
                elm.hide()
            }
        },
        showTryNowBanner: function() {
            var elm = $(".try-now");
            if (elm != null) {
                elm.show()
            }
        },
        joinParty: function(pToken) {
            var _g = this;
            if (pToken.length > 0 && pToken.indexOf("#") >= 0) {
                var str = pToken.split("#")[1];
                pToken = str
            }
            if (pToken.length == 7 && pToken.indexOf("M") == 0) {
                var mobilePartyDialog = new agario_views_PartyCodeIsMobileDialog();
                Core.views.openView(mobilePartyDialog, {
                    priority: 2,
                    animate: false,
                    allowClickClose: true
                });
                return
            }
            Core.ui.state.set_partyToken(pToken);
            var encodedToken = "#" + window.encodeURIComponent(pToken);
            this.replaceHistoryState(encodedToken);
            this._manager.network.getPartyToken(pToken, function() {
                _g.setPartyState("6");
                _g.replaceHistoryState("/");
                if (!_g._manager.network.connected) {
                    _g._manager.network.reconnect()
                }
            }, function(pTokenData) {
                _g._endpoint = pTokenData.split("\n")[0];
                _g._stateParting = "5";
                _g.setPartyState("9")
            })
        },
        cancelParty: function(reconnect) {
            if (reconnect == null) {
                reconnect = true
            }
            this.replaceHistoryState("/");
            this.setPartyState("0");
            this.hideHtmlPartyCode();
            if (reconnect) {
                this._manager.mainUI.setGameMode("")
            }
        },
        replaceHistoryState: function(path) {
            if (window.history && window.history.replaceState) {
                window.history.replaceState({}, window.document.title, path)
            }
        },
        receivedPartyToken: function(pToken) {
            var encodedToken = window.encodeURIComponent(pToken);
            var token = "agar.io/#" + encodedToken;
            this.replaceHistoryState("/#" + encodedToken);
            Core.ui.state.set_partyToken(encodedToken);
            this.updateHtmlPartyCode();
            this._stateParting = "1";
            this.setPartyState("1")
        },
        showPartyCode: function() {
            this.setPartyState("8")
        },
        hideCancelButton: function() {
            $("#cancel-party-btn").hide()
        },
        showCancelButton: function() {
            $("#cancel-party-btn").show()
        },
        setPartyState: function(nextState) {
            if (this._state != "5" && nextState == "9") {
                this.updateHtmlPartyCode();
                this.showHtmlPartyCode();
                this._manager.mainUI.setGameMode(":party", false);
                this._manager.network.connect(this._endpoint);
                $(".party-dialog").hide();
                $(".party-icon-back").show();
                if (this._state == "8") {
                    this.startParty()
                }
                nextState = "5"
            }
            this._state = nextState;
            if (nextState == "0" || nextState == "8") {
                $(".party-icon-back").hide()
            } else {
                $(".party-icon-back").show()
            }
            $("#helloContainer").attr("data-party-state", nextState);
            this.updateElementText("page_join_party_confirmation");
            this.updateElementText("page_results_party_share_link");
            this.changePage(Std.parseInt(nextState))
        },
        connectCallback: function() {
            if (!this._justCreatedParty) {
                return
            }
            this.receivedPartyToken(this._manager.state.partyToken);
            this._justCreatedParty = false
        },
        isSafariBrowser: function() {
            return /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
        },
        encodeURI: function(pData) {
            return window.encodeURIComponent(pData)
        },
        decodeURI: function(pData) {
            return window.decodeURIComponent(pData)
        },
        startParty: function() {
            this.hidePartyMode();
            Core.get_events().fire(agario_AgarioEvents.START_GAME, {
                mode: ":party"
            })
        },
        updateHtmlPartyCode: function() {
            var token = Core.ui.state.partyToken;
            var encodedToken = "agar.io/#" + window.encodeURIComponent(token);
            $(".party-token").val(encodedToken);
            $(".partymode-info #code").text(encodedToken);
            $("#party-footer").attr("href", "/party/#" + window.encodeURIComponent(token))
        },
        showHtmlPartyCode: function() {
            $(".partymode-info").show()
        },
        hideHtmlPartyCode: function() {
            $(".partymode-info").hide()
        },
        showContinueMode: function() {
            var tag = "page_party_leave_ffa";
            var txt = oaktree_ext_localization_I18n.text(tag);
            txt = StringTools.replace(txt, "%mode%", this.getGameModeTitle());
            this.replaceElementText(tag, txt);
            $(".party-dialog").show();
            this.changePage(0)
        },
        hidePartyMode: function() {
            $(".party-dialog").hide()
        },
        showPartyLeaveConfirmation: function() {
            $(".party-dialog").show();
            this.changePage(7)
        },
        animatePartyMode: function() {
            var elm = $(".try-now-img");
            if (elm != null) {
                this.pulse(elm, 1)
            }
        },
        showPartyBackButton: function() {
            if (this._state != "0") {
                $(".party-icon-back").show()
            }
        },
        hidePartyBackButton: function() {
            $(".party-icon-back").hide()
        },
        updateElementText: function(tag) {
            var txt = oaktree_ext_localization_I18n.text(tag);
            this.replaceElementText(tag, txt)
        },
        replaceElementText: function(tag, txt) {
            txt = StringTools.replace(txt, "\n", "<br />");
            $(".agario-party-dialog").find("[data-itr='" + tag + "']").html(txt)
        },
        pulse: function(elm, counter) {
            var _g = this;
            if (counter > 3) {
                return
            }
            elm.animate({
                height: "+=10px",
                width: "+=10px",
                left: "-=5px",
                top: "-=5px"
            }, 250).animate({
                height: "-=10px",
                width: "-=10px",
                left: "+=5px",
                top: "+=5px"
            }, 250, null, function() {
                _g.pulse(elm, counter + 1)
            })
        },
        changePage: function(page) {
            var _g = 0;
            while (_g < 9) {
                var i = _g++;
                var div = $(".agario-party-" + i);
                if (i == page) {
                    div.show()
                } else {
                    div.hide()
                }
            }
        },
        copyToken: function(id) {
            var range = window.document.createRange();
            range.selectNode(window.document.getElementById(id));
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            if (!isSafari) {
                try {
                    window.document.execCommand("copy")
                } catch (_) {
                    haxe_CallStack.lastException = _;
                    if (_ instanceof js__$Boot_HaxeError) {
                        _ = _.val
                    }
                }
            } else {
                $(".copy-party-token").tooltip("show");
                setTimeout(function(_1) {
                    $(".copy-party-token").tooltip("hide")
                }, 1200)
            }
        },
        getGameModeTitle: function() {
            var _g = this._manager.state.gameMode;
            switch (_g) {
                case "":
                    return "FFA";
                case ":teams":
                    return "TEAMS";
                case ":experimental":
                    return "EXPERIMENTAL";
                case ":party":
                    return "PARTY";
                default:
                    return "-"
            }
        },
        __class__: agario_module_dom_PartyModeUI
    };
    var agario_module_dom_SettingsPanel = function(pManager) {
        this._defaultSettings = {
            skinsEnabled: true,
            namesEnabled: true,
            noColors: false,
            blackTheme: false,
            showMass: false,
            lastNick: "",
            statsEnabled: true,
            showQuest: true,
            playArenaSounds: false,
            playMenuSounds: true,
            matches: 0,
            showOnlineStatus: true,
            skinId: ""
        };
        this._manager = pManager;
        this._settings = Reflect.copy(this._defaultSettings);
        this._gameServer = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
        this._gameServer.register(81, $bind(this, this.onUpdateUserSettingsResponse));
        this.readStorageSettings();
        this.applyStorageSettings()
    };
    $hxClasses["agario.module.dom.SettingsPanel"] = agario_module_dom_SettingsPanel;
    agario_module_dom_SettingsPanel.__name__ = ["agario", "module", "dom", "SettingsPanel"];
    agario_module_dom_SettingsPanel.prototype = {
        values: null,
        _defaultSettings: null,
        _manager: null,
        _settings: null,
        _gameServer: null,
        initialize: function() {
            var _g = this;
            $("#noSkins").on("change", null, function(e) {
                _g.set_skinsEnabled(!$(e.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#noNames").on("change", null, function(e1) {
                _g.set_namesEnabled(!$(e1.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#noColors").on("change", null, function(e2) {
                _g.set_noColors($(e2.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#showMass").on("change", null, function(e3) {
                _g.set_showMass($(e3.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#darkTheme").on("change", null, function(e4) {
                _g.set_blackTheme($(e4.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#skipStats").on("change", null, function(e5) {
                _g.set_statsEnabled(!$(e5.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#showQuest").on("change", null, function(e6) {
                _g.set_showQuest($(e6.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#playArenaSounds").on("change", null, function(e7) {
                _g.set_playArenaSounds($(e7.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#playMenuSounds").on("change", null, function(e8) {
                _g.set_playMenuSounds($(e8.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            $("#showOnlineStatus").on("change", null, function(e9) {
                _g.set_showOnlineStatus($(e9.currentTarget)["is"](":checked"));
                _g.storeSettings()
            });
            this.applyStorageSettings()
        },
        storeSettings: function() {
            this.saveLocal();
            this.save()
        },
        hasStoredSettings: function() {
            return Core.storage.get("settings") != null
        },
        getBoolValue: function(obj, fieldName, def) {
            if (def == null) {
                def = false
            }
            if (Object.prototype.hasOwnProperty.call(obj, fieldName)) {
                return Reflect.field(obj, fieldName)
            } else {
                return def
            }
        },
        getStringValue: function(obj, fieldName, def) {
            if (def == null) {
                def = ""
            }
            if (Object.prototype.hasOwnProperty.call(obj, fieldName)) {
                return Reflect.field(obj, fieldName)
            } else {
                return def
            }
        },
        getIntValue: function(obj, fieldName, def) {
            if (def == null) {
                def = 0
            }
            if (Object.prototype.hasOwnProperty.call(obj, fieldName)) {
                return Reflect.field(obj, fieldName)
            } else {
                return def
            }
        },
        readStorageSettings: function() {
            var settingsObj = Reflect.copy(this._defaultSettings);
            if (Core.storage.get("settings") != null) {
                settingsObj = haxe_Json.parse(Core.storage.get("settings"))
            }
            this.set_namesEnabled(this.getBoolValue(settingsObj, "namesEnabled", this._defaultSettings.namesEnabled));
            this.set_noColors(this.getBoolValue(settingsObj, "noColors", this._defaultSettings.noColors));
            this.set_statsEnabled(this.getBoolValue(settingsObj, "statsEnabled", this._defaultSettings.statsEnabled));
            this.set_skinsEnabled(this.getBoolValue(settingsObj, "skinsEnabled", this._defaultSettings.skinsEnabled));
            this.set_lastNick(this.getStringValue(settingsObj, "lastNick", this._defaultSettings.lastNick));
            this.set_matches(this.getIntValue(settingsObj, "matches", this._defaultSettings.matches));
            this.set_blackTheme(this.getBoolValue(settingsObj, "blackTheme", this._defaultSettings.blackTheme));
            this.set_showMass(this.getBoolValue(settingsObj, "showMass", this._defaultSettings.showMass))
        },
        applyStorageSettings: function() {
            $("#playArenaSounds").prop("checked", this._settings.playArenaSounds);
            $("#playMenuSounds").prop("checked", this._settings.playMenuSounds);
            $("#showMass").prop("checked", this._settings.showMass);
            $("#showQuest").prop("checked", this._settings.showQuest);
            $("#noSkins").prop("checked", !this._settings.skinsEnabled);
            $("#skipStats").prop("checked", !this._settings.statsEnabled);
            $("#noColors").prop("checked", this._settings.noColors);
            $("#noNames").prop("checked", !this._settings.namesEnabled);
            $("#darkTheme").prop("checked", this._settings.blackTheme);
            $("#showOnlineStatus").prop("checked", this._settings.showOnlineStatus);
            $("#nick").val(this._settings.lastNick)
        },
        get_skinsEnabled: function() {
            return this._settings.skinsEnabled
        },
        set_skinsEnabled: function(v) {
            this._settings.skinsEnabled = v;
            if (window.core) {
                window.core.setSkins(v)
            }
            return v
        },
        get_namesEnabled: function() {
            return this._settings.namesEnabled
        },
        set_namesEnabled: function(v) {
            this._settings.namesEnabled = v;
            if (window.core) {
                window.core.setNames(v)
            }
            return v
        },
        get_blackTheme: function() {
            return this._settings.blackTheme
        },
        set_blackTheme: function(v) {
            this._settings.blackTheme = v;
            if (window.core) {
                window.core.setDarkTheme(v)
            }
            return v
        },
        get_noColors: function() {
            return this._settings.noColors
        },
        set_noColors: function(v) {
            this._settings.noColors = v;
            if (window.core) {
                window.core.setColors(!v)
            }
            return v
        },
        get_showMass: function() {
            return this._settings.showMass
        },
        set_showMass: function(v) {
            this._settings.showMass = v;
            if (window.core) {
                window.core.setShowMass(v)
            }
            return v
        },
        get_statsEnabled: function() {
            return this._settings.statsEnabled
        },
        set_statsEnabled: function(v) {
            this._settings.statsEnabled = v;
            return v
        },
        get_lastNick: function() {
            return this._settings.lastNick
        },
        set_lastNick: function(v) {
            if (this._settings.lastNick != v) {
                this._settings.lastNick = v;
                this.saveLocal()
            }
            return v
        },
        get_showQuest: function() {
            return this._settings.showQuest
        },
        set_showQuest: function(v) {
            this._settings.showQuest = v;
            if (window.core) {
                window.core.setShowQuest(v)
            }
            return v
        },
        get_playArenaSounds: function() {
            return this._settings.playArenaSounds
        },
        set_playArenaSounds: function(v) {
            this._settings.playArenaSounds = v;
            return v
        },
        get_playMenuSounds: function() {
            return this._settings.playMenuSounds
        },
        set_playMenuSounds: function(v) {
            this._settings.playMenuSounds = v;
            return v
        },
        get_skinId: function() {
            return this._settings.skinId
        },
        set_skinId: function(v) {
            this._settings.skinId = v;
            return v
        },
        get_matches: function() {
            return this._settings.matches
        },
        set_matches: function(v) {
            if (this._settings.matches != v) {
                this._settings.matches = v;
                this.saveLocal()
            }
            return v
        },
        get_showOnlineStatus: function() {
            return this._settings.showOnlineStatus
        },
        set_showOnlineStatus: function(v) {
            this._settings.showOnlineStatus = v;
            return v
        },
        get_values: function() {
            return this._settings
        },
        onUpdateUserSettingsResponse: function(type, msg) {
            var response;
            response = js_Boot.__cast(msg, agario_proto_Update_$user_$settings_$response);
            this.load(response.get_updatedUserSettings());
            this.saveLocal()
        },
        createUserSetting: function(key, value) {
            var setting = new agario_proto_User_$setting();
            setting.set_type(typeof(value) == "string" ? 1 : 2);
            setting.set_key(key);
            if (typeof(value) == "string") {
                setting.set_valueString(Std.string(value))
            } else {
                setting.set_valueInt32(Std["int"](value))
            }
            return setting
        },
        toggleSettings: function() {
            $("#settings").toggle();
            $("#socialLoginContainer").hide();
            $("#instructions").hide();
            this._manager.mainUI.showInstructionsPanel()
        },
        load: function(userSettings) {
            if (userSettings != null && userSettings.length > 0) {
                var _g = 0;
                while (_g < userSettings.length) {
                    var setting = userSettings[_g];
                    ++_g;
                    var _g1 = setting.get_key();
                    switch (_g1) {
                        case 1:
                            this.set_skinId(setting.get_valueString());
                            break;
                        case 5:
                            this.set_showMass(setting.get_valueInt32() == 1);
                            break;
                        case 12:
                            this.set_showQuest(setting.get_valueInt32() == 1);
                            break;
                        case 10:
                            this.set_playArenaSounds(setting.get_valueInt32() == 1);
                            break;
                        case 11:
                            this.set_playMenuSounds(setting.get_valueInt32() == 1);
                            break;
                        case 7:
                            this.set_blackTheme(setting.get_valueInt32() == 1);
                            break;
                        case 13:
                            this.set_showOnlineStatus(setting.get_valueInt32() == 1);
                            break;
                        default:
                            lime_utils_Log.debug("Ignored setting with key:" + setting.get_key(), {
                                fileName: "SettingsPanel.hx",
                                lineNumber: 346,
                                className: "agario.module.dom.SettingsPanel",
                                methodName: "load"
                            })
                    }
                }
            }
            this.applyStorageSettings()
        },
        save: function() {
            if (!Core.user.loggedIn) {
                return
            }
            lime_utils_Log.debug("Save settings to server!", {
                fileName: "SettingsPanel.hx",
                lineNumber: 358,
                className: "agario.module.dom.SettingsPanel",
                methodName: "save"
            });
            var updateSettings = new agario_proto_Update_$user_$settings_$request();
            updateSettings.get_userSettingsUpdates().push(this.createUserSetting(1, this.get_skinId()));
            updateSettings.get_userSettingsUpdates().push(this.createUserSetting(7, this.get_blackTheme() ? 1 : 0));
            updateSettings.get_userSettingsUpdates().push(this.createUserSetting(12, this.get_showQuest() ? 1 : 0));
            updateSettings.get_userSettingsUpdates().push(this.createUserSetting(10, this.get_playArenaSounds() ? 1 : 0));
            updateSettings.get_userSettingsUpdates().push(this.createUserSetting(11, this.get_playMenuSounds() ? 1 : 0));
            updateSettings.get_userSettingsUpdates().push(this.createUserSetting(5, this.get_showMass() ? 1 : 0));
            updateSettings.get_userSettingsUpdates().push(this.createUserSetting(13, this.get_showOnlineStatus() ? 1 : 0));
            this._settings.lastNick = $("#nick").val();
            this._gameServer.sendMessage(80, updateSettings)
        },
        saveLocal: function() {
            lime_utils_Log.debug("Save settings locally!", {
                fileName: "SettingsPanel.hx",
                lineNumber: 376,
                className: "agario.module.dom.SettingsPanel",
                methodName: "saveLocal"
            });
            var obj = haxe_format_JsonPrinter.print(this._settings, null, null);
            Core.storage.save("settings", obj)
        },
        __class__: agario_module_dom_SettingsPanel,
        __properties__: {
            get_values: "get_values",
            set_showOnlineStatus: "set_showOnlineStatus",
            get_showOnlineStatus: "get_showOnlineStatus",
            set_matches: "set_matches",
            get_matches: "get_matches",
            set_skinId: "set_skinId",
            get_skinId: "get_skinId",
            set_playMenuSounds: "set_playMenuSounds",
            get_playMenuSounds: "get_playMenuSounds",
            set_playArenaSounds: "set_playArenaSounds",
            get_playArenaSounds: "get_playArenaSounds",
            set_showQuest: "set_showQuest",
            get_showQuest: "get_showQuest",
            set_lastNick: "set_lastNick",
            get_lastNick: "get_lastNick",
            set_statsEnabled: "set_statsEnabled",
            get_statsEnabled: "get_statsEnabled",
            set_showMass: "set_showMass",
            get_showMass: "get_showMass",
            set_blackTheme: "set_blackTheme",
            get_blackTheme: "get_blackTheme",
            set_noColors: "set_noColors",
            get_noColors: "get_noColors",
            set_namesEnabled: "set_namesEnabled",
            get_namesEnabled: "get_namesEnabled",
            set_skinsEnabled: "set_skinsEnabled",
            get_skinsEnabled: "get_skinsEnabled"
        }
    };
    var agario_module_dom_StatsUI = function(pManager) {
        this.fadeoutTime = 500;
        this.deaths = 0;
        this._manager = pManager;
        this.initialize()
    };
    $hxClasses["agario.module.dom.StatsUI"] = agario_module_dom_StatsUI;
    agario_module_dom_StatsUI.__name__ = ["agario", "module", "dom", "StatsUI"];
    agario_module_dom_StatsUI.prototype = {
        deaths: null,
        _manager: null,
        fadeoutTime: null,
        initialize: function() {},
        updateStatsTexts: function() {
            var stats = this._manager.state.lastGameResults;
            $(".stats-food-eaten").text(stats.foodEaten);
            $(".stats-time-alive").text(this.formatSeconds(Math.max(0, stats.timeAlive / 1000)));
            $(".stats-leaderboard-time").text(this.formatSeconds(Math.max(0, stats.leaderboardTime / 1000)));
            $(".stats-highest-mass").text(Math.floor(stats.highestMass));
            $(".stats-cells-eaten").text(stats.cellsEaten);
            $(".stats-top-position").text(stats.topPosition == 0 ? ":(" : stats.topPosition)
        },
        showStatsDialog: function() {
            var _g = this;
            Core.setFpsCap(true);
            var showAd = false;
            if (this._manager.state.dialogOpen || this._manager.state.statsOpen) {
                return
            }
            if (!this._manager.settings.get_statsEnabled()) {
                this._manager.mainUI.showNickDialog(this.fadeoutTime);
                this._manager.mainUI.showAds(0);
                return
            } else {
                this._manager.mainUI.hideMetaUI()
            }
            Core.get_states().enable("state_game_over");
            this.updateStatsTexts();
            this.showAdsStats(0);
            var notpaying = Core.user.isGuest || Core.user.userInfo != null && !Core.user.userInfo.isPayingUser;
            if (notpaying && this.deaths >= 1 && this.isAgarioDomain()) {
                showAd = true;
                Core.get_states().enable("state_fullscreen_ad")
            } else {
                null
            }
            this.deaths++;
            var _g1 = this._manager.settings;
            var _g11 = _g1.get_matches();
            _g1.set_matches(_g11 + 1);
            _g11;
            haxe_Timer.delay(function() {
                _g.showInterstitial(showAd)
            }, 1500)
        },
        showInterstitial: function(showAd) {
            if (showAd) {
                requestAds()
            } else {
                this.showStats(this.fadeoutTime)
            }
            var socialText = this.getStatsString("g_plus_share_stats");
            window.fillSocialValues(socialText, "externalGShare")
        },
        isAgarioDomain: function() {
            var domain = this.getDomain();
            return domain == "agar.io" || domain == "staging-web.agar.io" || domain == "localhost"
        },
        getDomain: function() {
            var domain;
            var w = window;
            if (w != w.top || w != w.parent) {
                domain = "iframe?"
            } else {
                domain = w.location.host
            }
            return domain
        },
        onFullscreenAd: function() {
            this.showStats(this.fadeoutTime)
        },
        closeStats: function() {
            if (this._manager.state.statsOpen) {
                this.hideStats()
            }
        },
        showStats: function(fadeoutTime) {
            if (this._manager.state.statsOpen) {
                return
            }
            this._manager.state.statsOpen = true;
            $("#overlays").fadeIn(fadeoutTime, null, function() {
                window.animateAccountData()
            });
            $("#mainPanel").hide();
            $("#updatingPanel").hide();
            $("#stats").show();
            $("#leftPanel").stop();
            $("#rightPanel").show();
            $(".agario-promo-container").hide();
            $(".agario-web-incentive").hide();
            $("#bannerCarousel").hide();
            Core.ui.partyMode.showPartyCode();
            this.showInvisible("#leftPanel");
            this.animateIn("#stats", 0, -63);
            this.animateIn("#rightPanel", 0, -63)
        },
        hideStats: function() {
            var _g = this;
            this._manager.state.dialogOpen = false;
            this._manager.state.statsOpen = false;
            this.animateOut("#rightPanel", 1000, 0, null);
            this.animateOut("#stats", 1000, 0, function() {
                _g._manager.mainUI.showAds(0);
                Core.get_states().disable("state_game_over");
                _g._manager.mainUI.showNickDialog(0, true)
            })
        },
        onPlayerSpawn: function() {
            $("#overlays").hide()
        },
        onPlayerDeath: function() {
            if (window.storageInfo == null) {
                window.createDefaultStorage()
            }
            this.showStatsDialog()
        },
        getStatsString: function(tag) {
            var timeAlive = $(".stats-time-alive").text();
            var parts = timeAlive.split(":");
            var minAlive = parts[0];
            var secsAlive = parts[1];
            return oaktree_ext_localization_I18n.text(tag, [minAlive, secsAlive, this._manager.state.lastGameResults.highestMass])
        },
        formatSeconds: function(s) {
            s = Math.floor(s);
            var sec = "" + s % 60;
            var min = "" + Math.floor(s / 60);
            if (sec.length < 2) {
                sec = "0" + sec
            }
            return min + ":" + sec
        },
        showAdsStats: function(time) {
            $("#g300x250").hide();
            $("#a300x250").hide();
            $("#s300x250").show();
            this._manager.mainUI.refreshAd("ab")
        },
        animateOut: function(id, duration, delay, onComplete) {
            if (delay == null) {
                delay = 0
            }
            var _g = this;
            var elem = $(id);
            elem.stop(null, true);
            elem.delay(delay).animate({
                opacity: 0
            }, {
                duration: duration,
                queue: false,
                easing: "easeInQuart",
                complete: function() {
                    _g.onAnimateOutComplete(id, onComplete)
                }
            })
        },
        onAnimateOutComplete: function(id, onComplete) {
            if (onComplete != null) {
                onComplete()
            }
        },
        animateIn: function(id, delay, endPos) {
            if (endPos == null) {
                endPos = 0
            }
            if (delay == null) {
                delay = 0
            }
            var elem = $(id);
            elem.stop(null, true);
            elem.show();
            elem.delay(delay | 0).animate({
                opacity: 1
            }, {
                duration: 1000,
                queue: false,
                easing: "easeOutQuart"
            }).removeClass("disable-mouse")
        },
        showInvisible: function(id) {
            var elem = $(id);
            elem.stop(null, true);
            elem.show();
            elem.animate({
                opacity: 0
            }, 0, "linear").addClass("disable-mouse")
        },
        __class__: agario_module_dom_StatsUI
    };
    var agario_module_dom_StorageManager = function() {
        this.storage = window.localStorage;
        this.isAvailable = true
    };
    $hxClasses["agario.module.dom.StorageManager"] = agario_module_dom_StorageManager;
    agario_module_dom_StorageManager.__name__ = ["agario", "module", "dom", "StorageManager"];
    agario_module_dom_StorageManager.prototype = {
        storage: null,
        isAvailable: null,
        save: function(key, value) {
            if (!this.isAvailable) {
                return
            }
            try {
                this.storage.setItem(key, value)
            } catch (error) {
                haxe_CallStack.lastException = error;
                if (error instanceof js__$Boot_HaxeError) {
                    error = error.val
                }
                haxe_Log.trace(" / storagemanager / LocalStorage not available. Game usability can be affected!", {
                    fileName: "StorageManager.hx",
                    lineNumber: 29,
                    className: "agario.module.dom.StorageManager",
                    methodName: "save"
                });
                this.isAvailable = false
            }
        },
        get: function(key) {
            if (!this.isAvailable) {
                return null
            }
            try {
                var item = this.storage.getItem(key);
                return item
            } catch (error) {
                haxe_CallStack.lastException = error;
                if (error instanceof js__$Boot_HaxeError) {
                    error = error.val
                }
                haxe_Log.trace(" / storagemanager / LocalStorage not available. Game usability can be affected!", {
                    fileName: "StorageManager.hx",
                    lineNumber: 50,
                    className: "agario.module.dom.StorageManager",
                    methodName: "get"
                });
                this.isAvailable = false;
                return null
            }
        },
        __class__: agario_module_dom_StorageManager
    };
    var agario_module_dom_UIManager = function() {
        this._sessionRejected = false;
        this._coreLoadedCallback = null;
        this._coreReady = false;
        this.initialize()
    };
    $hxClasses["agario.module.dom.UIManager"] = agario_module_dom_UIManager;
    agario_module_dom_UIManager.__name__ = ["agario", "module", "dom", "UIManager"];
    agario_module_dom_UIManager.prototype = {
        state: null,
        mainUI: null,
        partyMode: null,
        network: null,
        stats: null,
        ads: null,
        analytics: null,
        canvas: null,
        settings: null,
        _coreReady: null,
        _coreLoadedCallback: null,
        _sessionRejected: null,
        initialize: function() {
            Core.onReady.addOnce($bind(this, this.onCoreReady));
            this.state = new agario_module_dom_GameState();
            this.canvas = new agario_module_dom_CanvasManager(this);
            this.mainUI = new agario_module_dom_MainUI(this);
            this.partyMode = new agario_module_dom_PartyModeUI(this);
            this.network = new agario_module_dom_NetworkUI(this);
            this.stats = new agario_module_dom_StatsUI(this);
            this.ads = new agario_module_dom_AdsManager(this);
            this.analytics = new agario_module_dom_GAnalytics(this);
            this.settings = new agario_module_dom_SettingsPanel(this)
        },
        onCoreReady: function() {
            var _g = this;
            var mc = MiniclipAPI.instance;
            if (Core.environment.webEnv.hasParameter("gamepad") && mc != null) {
                haxe_Log.trace("activated gamepad support", {
                    fileName: "UIManager.hx",
                    lineNumber: 68,
                    className: "agario.module.dom.UIManager",
                    methodName: "onCoreReady"
                });
                mc.activateGamepadSupport();
                mc.onGamepadUpdate(($_ = this.canvas, $bind($_, $_.gamepadAxisUpdate)));
                mc.registerSplitFunction(function() {
                    if (window.core) {
                        window.core.split()
                    }
                });
                mc.registerEjectFunction(function() {
                    if (window.core) {
                        window.core.eject()
                    }
                })
            }
            if (mc != null) {
                mc.hideContainer()
            }
            this._coreReady = true;
            this.mainUI.showAds(0);
            this.mainUI.showNickDialog(0);
            haxe_Timer.delay(function() {
                _g.initAgario()
            }, 500)
        },
        initAgario: function() {
            var mc = MiniclipAPI.instance;
            if (!mc.coreWasLoaded || !this._coreReady) {
                return
            }
            if (!this.state.isInitialized) {
                this.settings.initialize();
                window.agarioInit();
                var server = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService)
            }
            if (this._coreLoadedCallback != null) {
                this._coreLoadedCallback()
            }
        },
        onDisconnect: function() {
            this.state.isPlayerAlive = false;
            this.network.set_connected(false);
            var gameServer = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
            gameServer.onDisconnect.dispatch(false);
            if (!this._sessionRejected) {
                this.network.reconnect()
            } else {
                this.network.stopReconnect()
            }
        },
        doLogin: function() {
            this.network.set_connected(true);
            Core.lastSentFriendslistMessage = "";
            var gameServer = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
            gameServer.onConnect.dispatch();
            if (!this.state.questOpen) {
                this.partyMode.connectCallback()
            } else {
                this.state.questOpen = false;
                return
            }
            if (this.state.pendingNick == null) {
                this.state.isPlayerAlive = false;
                return
            }
            if (window.core) {
                window.core.sendNick()
            }
        },
        reloadAgarioCore: function(onComplete) {
            if (!this.state.doCoreReload) {
                return
            }
            this._coreLoadedCallback = onComplete;
            var prefix = window.ASSETS_ROOT;
            if (prefix == undefined) {
                prefix = ""
            }
            if (window.core) {
                window.core.destroy()
            }
            var imported = window.document.createElement("script");
            var suffix = Math.floor(new Date() / 1000 / 60);
            imported.setAttribute("src", "" + prefix + "agario.core.js?" + suffix);
            window.document.head.appendChild(imported);
            this.state.doCoreReload = false
        },
        handleAgarioCoreReload: function() {
            this.state.doCoreReload = true;
            null
        },
        onPlayerBanned: function(userId) {
            var gc = oaktree_ext_services_ServiceManager.getService(agario_game_server_GameConnectionService);
            gc.close();
            Core.services.gameui.showContainer();
            var dialog = new agario_module_shop_view_UserBannedDialog(userId);
            Core.views.openView(dialog, {
                priority: 5,
                animate: true,
                allowClickClose: false,
                callerView: MiniclipAPI.instance.shopDialog
            })
        },
        onSessionRejected: function() {
            this._sessionRejected = true;
            requestCaptcha()
        },
        onRecaptchaRequested: function() {
            requestCaptcha()
        },
        notifyToken: function(token) {
            if (this._sessionRejected) {
                this.network.allowReconnect(token)
            } else {
                this.network.sendRecaptchaResponse(token)
            }
            this._sessionRejected = false
        },
        __class__: agario_module_dom_UIManager
    };
    var agario_module_dom_EmptyUI = function(pManager) {};
    $hxClasses["agario.module.dom.EmptyUI"] = agario_module_dom_EmptyUI;
    agario_module_dom_EmptyUI.__name__ = ["agario", "module", "dom", "EmptyUI"];
    agario_module_dom_EmptyUI.prototype = {
        skinId: null,
        save: function() {},
        load: function(settings) {},
        __class__: agario_module_dom_EmptyUI
    };
    var agario_module_gift_controller_ViewState = $hxClasses["agario.module.gift.controller.ViewState"] = {
        __ename__: ["agario", "module", "gift", "controller", "ViewState"],
        __constructs__: ["GIFTS", "REQUESTS", "GIFTS_REQUESTS", "INBOX"]
    };
    agario_module_gift_controller_ViewState.GIFTS = ["GIFTS", 0];
    agario_module_gift_controller_ViewState.GIFTS.toString = $estr;
    agario_module_gift_controller_ViewState.GIFTS.__enum__ = agario_module_gift_controller_ViewState;
    agario_module_gift_controller_ViewState.REQUESTS = ["REQUESTS", 1];
    agario_module_gift_controller_ViewState.REQUESTS.toString = $estr;
    agario_module_gift_controller_ViewState.REQUESTS.__enum__ = agario_module_gift_controller_ViewState;
    agario_module_gift_controller_ViewState.GIFTS_REQUESTS = ["GIFTS_REQUESTS", 2];
    agario_module_gift_controller_ViewState.GIFTS_REQUESTS.toString = $estr;
    agario_module_gift_controller_ViewState.GIFTS_REQUESTS.__enum__ = agario_module_gift_controller_ViewState;
    agario_module_gift_controller_ViewState.INBOX = ["INBOX", 3];
    agario_module_gift_controller_ViewState.INBOX.toString = $estr;
    agario_module_gift_controller_ViewState.INBOX.__enum__ = agario_module_gift_controller_ViewState;
    var agario_module_gift_controller_GiftsController = function() {
        Core.get_events().listen("shop_event::configComplete", $bind(this, this.onConfigComplete))
    };
    $hxClasses["agario.module.gift.controller.GiftsController"] = agario_module_gift_controller_GiftsController;
    agario_module_gift_controller_GiftsController.__name__ = ["agario", "module", "gift", "controller", "GiftsController"];
    agario_module_gift_controller_GiftsController.prototype = {
        model: null,
        giftDialog: null,
        gettingInboxItems: null,
        viewState: null,
        waitForLogin: null,
        updateTimer: null,
        init: function() {
            var _g = Core.environment.get_environment();
            switch (_g[1]) {
                case 0:
                    agario_config_Configs.setProperty("gift_object_id", "193179704439504");
                    break;
                case 1:
                    agario_config_Configs.setProperty("gift_object_id", "1572657209726044");
                    break;
                case 2:
                    agario_config_Configs.setProperty("gift_object_id", "1519379655032060");
                    break;
                case 3:
                    agario_config_Configs.setProperty("gift_object_id", Core.models.defaultGiftingSettings.get("giftObjectId"));
                    break
            }
            var updateInterv;
            updateInterv = js_Boot.__cast(Core.models.defaultGiftingSettings.get("minFacebookFriendsUpdateInterval"), Int);
            this.setUpdateInterval(updateInterv * 1000);
            this.model = new agario_module_gift_model_GiftsModel();
            this.giftDialog = new agario_module_gift_views_GiftCenterDialog();
            this.giftDialog.addEventListener("open", $bind(this, this.onOpen_Dialog));
            this.giftDialog.addEventListener("close", $bind(this, this.onClose_Dialog));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.request_gifts", $bind(this, this.onRequestGifts_Handler));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.request_friends", $bind(this, this.onRequestFriends_Handler));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.request_friends_to-send", $bind(this, this.onRequestFriendsToSend_Handler));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.accept_gifts", $bind(this, this.onAcceptGifts_Handler));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.accept_gifts_request", $bind(this, this.onAcceptGiftsRequest_Handler));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.send_gifts", $bind(this, this.onSendGifts_Handler));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.post_dispose_inbox", $bind(this, this.onInboxElementDisposed));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.post_dispose", $bind(this, this.onFriendElementDispose));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.animate_splash", $bind(this, this.coinSplash));
            this.giftDialog.addEventListener("agario.module.gift.events.ViewEvent.animate_shower", $bind(this, this.coinShower));
            Core.get_events().listen("shop_event::showGiftCenter", $bind(this, this.onOpenGiftCenter));
            Core.get_events().listen("shop_event::showGiftUnavailable", $bind(this, this.showGiftUnavailable));
            Core.get_events().listen("agario.module.gift.events.ViewEvent.open_gift_requests", $bind(this, this.showRequestGifts));
            Core.get_events().listen("agario.module.gift.events.ViewEvent.open_gift_inbox", $bind(this, this.showGiftsInbox));
            Core.user.onUserDataUpdate.add($bind(this, this.onUserLoggedIn));
            Core.get_events().listen("userLoggedOut", $bind(this, this.onUserLoggedOut))
        },
        onOpenGiftCenter: function(e) {
            this.viewState = agario_module_gift_controller_ViewState.GIFTS;
            if (this.isUserLoggedIn()) {
                this.openGiftCenter()
            } else {
                this.waitForLogin = true
            }
        },
        openGiftCenter: function() {
            this.gettingInboxItems = false;
            this.requestOpenView(this.giftDialog)
        },
        showGiftUnavailable: function(e) {
            var dialog = new agario_module_gift_views_GiftUnavailableDialog();
            this.requestOpenView(dialog)
        },
        showRequestGifts: function(e) {
            this.viewState = agario_module_gift_controller_ViewState.REQUESTS;
            this.giftDialog.openRequestGifts()
        },
        showGiftsInbox: function(e) {
            this.viewState = agario_module_gift_controller_ViewState.INBOX;
            if (this.isUserLoggedIn()) {
                this.openGiftCenter()
            } else {
                this.waitForLogin = true
            }
        },
        isUserLoggedIn: function() {
            return Core.user.userInfo != null
        },
        requestOpenView: function(dialog) {
            if (dialog.parent != null) {
                dialog.parent.removeChild(dialog)
            }
            Core.services.gameui.showContainer();
            Core.views.openView(dialog, {
                priority: 1,
                animate: true,
                allowClickClose: true
            })
        },
        updateInbox: function() {
            var _g = this;
            if (Core.user.facebookId != null && !this.gettingInboxItems) {
                this.gettingInboxItems = true;
                this.model.getInboxItems().then(function(data) {
                    _g.gettingInboxItems = false;
                    _g.giftDialog.updateInbox(data);
                    Core.services.gameui.setGiftInboxCounter(data.length == null ? "null" : "" + data.length)
                })
            }
        },
        onUserLoggedOut: function(e) {
            this.model.clearData();
            this.gettingInboxItems = false
        },
        onUserLoggedIn: function() {
            if (Core.user.get_realm() == agario_services_WebAuthProvider.Google) {
                var btn1 = js.JQuery("#giftButton");
                btn1.hide();
                return
            }
            if (Core.user.facebookId != null && Core.hasUserFriendsPermissions()) {
                this.model.init();
                this.model.get_claimGiftsResponseSignal().add($bind(this, this.onClaimGiftsResponse_Handler));
                this.updateInbox();
                if (this.waitForLogin) {
                    this.openGiftCenter()
                }
                this.waitForLogin = false
            }
            var btn = js.JQuery("#giftButton");
            btn.show()
        },
        onConfigComplete: function(e) {
            Core.get_events().unlisten("shop_event::configComplete", $bind(this, this.onConfigComplete));
            this.init()
        },
        onInboxElementDisposed: function(e) {
            this.updateInbox();
            this.giftDialog.reactivateInboxButton()
        },
        onOpen_Dialog: function(e) {
            this.giftDialog.reset()
        },
        onRequestFriends_Handler: function(e) {
            this.updateRequestableFriends()
        },
        updateRequestableFriends: function() {
            var _g = this;
            this.viewState = agario_module_gift_controller_ViewState.REQUESTS;
            this.model.getRequestableFriends().then(function(friends) {
                _g.giftDialog.showRequestsView(friends)
            })
        },
        onRequestGifts_Handler: function(e) {
            var _g = this;
            this.enableFBBlocker();
            this.model.requestGifts(e.friends).then(function(success) {
                if (success) {
                    _g.giftDialog.fadeOutFriendElements(e.friends);
                    agario_sounds_GameSounds.play("sfxSendRequestGifts")
                }
                _g.disableFBBlocker()
            })
        },
        onAcceptGifts_Handler: function(e) {
            this.claimGifts(e.friends);
            if (!e.wasFromAcceptAll) {
                agario_sounds_GameSounds.play("sfxCoinsToWallet", 500)
            }
        },
        claimGifts: function(friends) {
            this.model.claimGifts(friends);
            this.giftDialog.confirmInboxElementDisable(friends)
        },
        onClaimGiftsResponse_Handler: function(msg) {
            Core.user.set_coins(msg.get_userDataUpdate().get_productField().get_finalAmount());
            Core.services.gameui.setUserCoins(Core.user.get_coins());
            this.giftDialog.clearInboxAccepted()
        },
        onRequestFriendsToSend_Handler: function(e) {
            this.updateGiftableFriends()
        },
        updateGiftableFriends: function() {
            var _g = this;
            this.viewState = agario_module_gift_controller_ViewState.GIFTS;
            this.model.getGiftableFriends().then(function(friends) {
                _g.giftDialog.showGiftableFriends(friends)
            })
        },
        onSendGifts_Handler: function(e) {
            this.sendGifts(e.friends)
        },
        sendGifts: function(friends) {
            var _g = this;
            this.enableFBBlocker();
            this.model.sendGifts(friends).then(function(success) {
                if (success) {
                    _g.giftDialog.fadeOutFriendElements(friends);
                    agario_sounds_GameSounds.play("sfxSendRequestGifts")
                }
                _g.disableFBBlocker();
                _g.updateInbox()
            })
        },
        onFriendElementDispose: function(f) {
            var _g = this.viewState;
            switch (_g[1]) {
                case 0:
                    this.updateGiftableFriends();
                    break;
                case 1:
                    this.updateRequestableFriends();
                    break;
                default:
                    null
            }
        },
        onAcceptGiftsRequest_Handler: function(e) {
            this.acceptRequests(e.friends)
        },
        acceptRequests: function(friends) {
            var _g = this;
            this.enableFBBlocker();
            this.model.sendGifts(friends).then(function(success) {
                if (success) {
                    _g.giftDialog.confirmInboxElementDisable(friends)
                } else {
                    _g.giftDialog.reactivateInboxButton()
                }
                _g.disableFBBlocker()
            })
        },
        onClose_Dialog: function(e) {
            var top = Core.views.getTopView();
            if (top != null) {
                top.enable()
            }
            Core.get_events().dispatchEventWith("ShopEvent::SHOP_ENABLED")
        },
        coinSplash: function(e) {
            this.giftDialog.playCoinSplashAnimation(e.animationPosition)
        },
        coinShower: function(e) {
            this.giftDialog.playCoinShowerAnimation();
            agario_sounds_GameSounds.play("sfxCoinsWaterfall")
        },
        toggleKeyboard: function(value) {
            this.giftDialog.toggleKeyboard(value)
        },
        enableFBBlocker: function() {
            js.JQuery("#fbBlocker").show();
            this.toggleKeyboard(false)
        },
        disableFBBlocker: function() {
            js.JQuery("#fbBlocker").hide();
            this.toggleKeyboard(true)
        },
        setUpdateInterval: function(miliseconds) {
            if (this.updateTimer != null) {
                this.updateTimer.stop()
            }
            this.updateTimer = new haxe_Timer(miliseconds);
            this.updateTimer.run = $bind(this, this.updateData)
        },
        updateData: function() {
            this.model.clearData();
            this.gettingInboxItems = false;
            this.updateInbox()
        },
        __class__: agario_module_gift_controller_GiftsController
    };
    var openfl_events_Event = function(type, bubbles, cancelable) {
        if (cancelable == null) {
            cancelable = false
        }
        if (bubbles == null) {
            bubbles = false
        }
        this.type = type;
        this.bubbles = bubbles;
        this.cancelable = cancelable;
        this.eventPhase = 2
    };
    $hxClasses["openfl.events.Event"] = openfl_events_Event;
    openfl_events_Event.__name__ = ["openfl", "events", "Event"];
    openfl_events_Event.prototype = {
        bubbles: null,
        cancelable: null,
        currentTarget: null,
        eventPhase: null,
        target: null,
        type: null,
        __isCanceled: null,
        __isCanceledNow: null,
        __preventDefault: null,
        clone: function() {
            var event = new openfl_events_Event(this.type, this.bubbles, this.cancelable);
            event.eventPhase = this.eventPhase;
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            return event
        },
        formatToString: function(className, p1, p2, p3, p4, p5) {
            var parameters = [];
            if (p1 != null) {
                parameters.push(p1)
            }
            if (p2 != null) {
                parameters.push(p2)
            }
            if (p3 != null) {
                parameters.push(p3)
            }
            if (p4 != null) {
                parameters.push(p4)
            }
            if (p5 != null) {
                parameters.push(p5)
            }
            return $bind(this, this.__formatToString).apply(this, [className, parameters])
        },
        isDefaultPrevented: function() {
            return this.__preventDefault
        },
        preventDefault: function() {
            if (this.cancelable) {
                this.__preventDefault = true
            }
        },
        stopImmediatePropagation: function() {
            this.__isCanceled = true;
            this.__isCanceledNow = true
        },
        stopPropagation: function() {
            this.__isCanceled = true
        },
        toString: function() {
            return this.__formatToString("Event", ["type", "bubbles", "cancelable"])
        },
        __formatToString: function(className, parameters) {
            var output = "[" + className;
            var arg = null;
            var _g = 0;
            while (_g < parameters.length) {
                var param = parameters[_g];
                ++_g;
                arg = Reflect.field(this, param);
                if (typeof(arg) == "string") {
                    output += " " + param + '="' + Std.string(arg) + '"'
                } else {
                    output += " " + param + "=" + Std.string(arg)
                }
            }
            output += "]";
            return output
        },
        __class__: openfl_events_Event
    };
    var agario_module_gift_events_GiftEvent = function(type, bubbles, cancelable) {
        if (cancelable == null) {
            cancelable = false
        }
        if (bubbles == null) {
            bubbles = true
        }
        openfl_events_Event.call(this, type, bubbles, cancelable)
    };
    $hxClasses["agario.module.gift.events.GiftEvent"] = agario_module_gift_events_GiftEvent;
    agario_module_gift_events_GiftEvent.__name__ = ["agario", "module", "gift", "events", "GiftEvent"];
    agario_module_gift_events_GiftEvent.__super__ = openfl_events_Event;
    agario_module_gift_events_GiftEvent.prototype = $extend(openfl_events_Event.prototype, {
        friends: null,
        animationPosition: null,
        totalFriends: null,
        playingFriends: null,
        eventAction: null,
        wasFromAcceptAll: null,
        __class__: agario_module_gift_events_GiftEvent
    });
    var agario_module_gift_model_GiftsModel = function() {};
    $hxClasses["agario.module.gift.model.GiftsModel"] = agario_module_gift_model_GiftsModel;
    agario_module_gift_model_GiftsModel.__name__ = ["agario", "module", "gift", "model", "GiftsModel"];
    agario_module_gift_model_GiftsModel.prototype = {
        loginResponseSignal: null,
        claimGiftsResponseSignal: null,
        facebook: null,
        server: null,
        get_claimGiftsResponseSignal: function() {
            return this.server.claimGiftsResponseSignal
        },
        get_loginResponseSignal: function() {
            return this.server.loginResponseSignal
        },
        init: function() {
            if (this.facebook == null) {
                this.facebook = new agario_module_gift_model_proxies_FacebookProxy(agario_config_Configs.getProperty("gift_object_id"));
                this.server = new agario_module_gift_model_proxies_GiftingServerProxy()
            }
            if (Core.user.facebookId != null) {
                this.getFriends()
            }
        },
        getFriends: function() {
            var _g = this;
            var defer = new promhx_deferred_DeferredPromise();
            var friendData = {
                agarioFriends: [],
                allFriends: []
            };
            ((function($this) {
                var $r;
                var varargf = function(f) {
                    var ret = new promhx_Promise();
                    var arr = [_g.facebook.getAllFriends(), _g.facebook.getInvitableFriends()];
                    var p = promhx_Promise.whenAll(arr);
                    p._update.push({
                        async: ret,
                        linkf: function(x) {
                            ret.handleResolve(f(arr[0]._val, arr[1]._val))
                        }
                    });
                    return ret
                };
                $r = {
                    then: varargf
                };
                return $r
            }(this))).then(function(friends, invitable_friends) {
                friendData.agarioFriends = friends;
                friendData.allFriends = invitable_friends.concat(friends);
                defer.resolve(friendData)
            }).catchError(function(error) {
                defer.handleError(error)
            });
            return defer.boundPromise
        },
        getRequestableFriends: function() {
            var _g = this;
            var defer = new promhx_deferred_DeferredPromise();
            this.getFriends().then(function(friendData) {
                var result = _g.removeFriends(friendData, Core.user.userInfo.userGifts.get_requestedTo());
                defer.resolve(result)
            });
            return defer.boundPromise
        },
        getGiftableFriends: function() {
            var _g = this;
            var defer = new promhx_deferred_DeferredPromise();
            this.getFriends().then(function(friendData) {
                if (Core.user.userInfo != null) {
                    var result = _g.removeFriends(friendData, Core.user.userInfo.userGifts.get_sentTo());
                    defer.resolve(result)
                } else {
                    defer.handleError("Not logged in!")
                }
            });
            return defer.boundPromise
        },
        getInboxItems: function() {
            var _g = this;
            var defer = new promhx_deferred_DeferredPromise();
            var claimable;
            var requested;
            ((function($this) {
                var $r;
                var varargf = function(f) {
                    var ret = new promhx_Promise();
                    var arr = [_g.getFriends(), _g.facebook.getAppRequests()];
                    var p = promhx_Promise.whenAll(arr);
                    p._update.push({
                        async: ret,
                        linkf: function(x) {
                            ret.handleResolve(f(arr[0]._val, arr[1]._val))
                        }
                    });
                    return ret
                };
                $r = {
                    then: varargf
                };
                return $r
            }(this))).then(function(friends, requests) {
                var inboxItems = [];
                claimable = _g.getClaimableFakeUser();
                if (claimable != null) {
                    var fakeFriend = _g.getClaimableFakeFriend();
                    inboxItems.push(new agario_module_gift_model_data_InboxItem({
                        friend: fakeFriend,
                        type: agario_module_gift_model_data_GiftType.GIFT,
                        gift: claimable
                    }))
                }
                var _g1 = 0;
                var _g2 = friends.allFriends;
                while (_g1 < _g2.length) {
                    var user = _g2[_g1];
                    ++_g1;
                    claimable = _g.getClaimableById(user.id);
                    if (claimable != null) {
                        if (_g.getFacebookRequestFromUsers(claimable.get_facebookIdFrom(), agario_module_gift_model_data_GiftType.GIFT) != null) {
                            user.canReceiveGift = !_g.giftSentTo(user.id);
                            var item = new agario_module_gift_model_data_InboxItem({
                                friend: user,
                                type: agario_module_gift_model_data_GiftType.GIFT,
                                gift: claimable
                            });
                            inboxItems.push(item)
                        } else {
                            null
                        }
                    } else {
                        requested = _g.getRequestedById(user.id);
                        if (requested && !_g.giftSentTo(user.id)) {
                            if (_g.getFacebookRequestFromUsers(user.id, agario_module_gift_model_data_GiftType.GIFT_REQUEST) != null) {
                                var item1 = new agario_module_gift_model_data_InboxItem({
                                    friend: user,
                                    type: agario_module_gift_model_data_GiftType.GIFT_REQUEST,
                                    gift: null
                                });
                                inboxItems.push(item1)
                            } else {
                                null
                            }
                        }
                    }
                }
                defer.resolve(inboxItems)
            });
            return defer.boundPromise
        },
        claimGifts: function(friends) {
            var _g = this;
            this.facebook.getAppRequests().then(function(result) {
                if (result != null) {
                    var giftIds = "";
                    var fakeFriend = _g.getClaimableFakeFriend();
                    var _g1 = 0;
                    while (_g1 < friends.length) {
                        var friend = friends[_g1];
                        ++_g1;
                        if (friend.id == fakeFriend.id) {
                            var fakeRequestId = Core.models.giftingFakeUser.get("fictionalGiftRequestId");
                            giftIds += fakeRequestId
                        } else {
                            var request = _g.getFacebookRequestFromUsers(friend.id, agario_module_gift_model_data_GiftType.GIFT);
                            if (request != null) {
                                giftIds += request.id
                            } else {
                                null
                            }
                        }
                        _g.removeClaimable(friend.id)
                    }
                    _g.server.claimGifts(giftIds)
                }
            })
        },
        sendGifts: function(friends) {
            var _g2 = this;
            var defer = new promhx_deferred_DeferredPromise();
            var friendIds = "";
            var _g1 = 0;
            var _g = friends.length;
            while (_g1 < _g) {
                var i = _g1++;
                friendIds += friends[i].id + (i < friends.length - 1 ? "," : "")
            }
            var dialog_title = oaktree_ext_localization_I18n.text("gift_facebook_popup_send_title");
            var dialog_message = oaktree_ext_localization_I18n.text("gift_facebook_popup_send_message");
            this.facebook.sendGifts(friendIds, dialog_title, dialog_message).then(function(result) {
                if (result) {
                    var giftsId = "";
                    var _g11 = 0;
                    var _g3 = result.to.length;
                    while (_g11 < _g3) {
                        var i1 = _g11++;
                        giftsId += _g2.fullGiftToken(result.to[i1], result.request);
                        if (i1 < result.to.length - 1) {
                            giftsId += ","
                        } else {
                            giftsId += ""
                        }
                    }
                    var playingCount = 0;
                    var _g12 = 0;
                    var _g4 = friends.length;
                    while (_g12 < _g4) {
                        var i2 = _g12++;
                        _g2.addSentTo(friends[i2].id);
                        if (HxOverrides.indexOf(_g2.facebook.invitableFriends, friends[i2], 0) < 0) {
                            playingCount++
                        }
                    }
                    Core.get_events().dispatchEventWith("agario.module.gift.events.ViewEvent.send_gifts_complete", {
                        totalFriends: friends.length,
                        playingFriends: playingCount,
                        eventAction: "send_invitable"
                    });
                    _g2.consumeRequests(friends);
                    _g2.server.sendGifts(giftsId)
                }
                defer.resolve(result)
            });
            return defer.boundPromise
        },
        requestGifts: function(friends) {
            var _g2 = this;
            var defer = new promhx_deferred_DeferredPromise();
            var dialog_title = oaktree_ext_localization_I18n.text("gift_facebook_popup_request_title");
            var dialog_message = oaktree_ext_localization_I18n.text("gift_facebook_popup_request_message");
            var fbUserIds = "";
            var _g = 0;
            while (_g < friends.length) {
                var friend = friends[_g];
                ++_g;
                if (fbUserIds != "") {
                    fbUserIds += ","
                }
                fbUserIds += friend.id
            }
            this.facebook.sendGiftRequests(fbUserIds, dialog_message, dialog_message).then(function(result) {
                if (result) {
                    var giftsId = "";
                    var _g1 = 0;
                    var _g3 = result.to.length;
                    while (_g1 < _g3) {
                        var i = _g1++;
                        giftsId += _g2.fullGiftToken(result.to[i], result.request);
                        if (i < result.to.length - 1) {
                            giftsId += ","
                        } else {
                            giftsId += ""
                        }
                    }
                    var playingCount = 0;
                    var _g4 = 0;
                    while (_g4 < friends.length) {
                        var friend1 = friends[_g4];
                        ++_g4;
                        _g2.addRequestedTo(friend1.id);
                        if (HxOverrides.indexOf(_g2.facebook.invitableFriends, friend1, 0) < 0) {
                            playingCount++
                        }
                    }
                    Core.get_events().dispatchEventWith("agario.module.gift.events.ViewEvent.send_gifts_complete", {
                        totalFriends: friends.length,
                        playingFriends: playingCount,
                        eventAction: "request_invitable"
                    });
                    _g2.server.requestGifts(giftsId)
                }
                defer.resolve(result)
            }).catchError(function(error) {
                defer.resolve(false)
            });
            return defer.boundPromise
        },
        consumeRequests: function(friends) {
            var _g = this;
            this.facebook.getAppRequests().then(function(result) {
                if (result != null) {
                    var giftIds = "";
                    var _g1 = 0;
                    while (_g1 < friends.length) {
                        var friend = friends[_g1];
                        ++_g1;
                        var data = result.data;
                        var _g11 = 0;
                        while (_g11 < data.length) {
                            var req = data[_g11];
                            ++_g11;
                            if (req.from.id == friend.id) {
                                if (giftIds != "") {
                                    giftIds += ","
                                }
                                giftIds += Std.string(req.id)
                            }
                        }
                    }
                    _g.server.consumeRequests(giftIds)
                }
            })
        },
        clearData: function() {
            if (this.facebook != null) {
                this.facebook.clearData()
            }
        },
        removeClaimable: function(user_id) {
            var _g = 0;
            var _g1 = Core.user.userInfo.userGifts.get_claimable();
            while (_g < _g1.length) {
                var user = _g1[_g];
                ++_g;
                if (user.get_facebookIdFrom() == user_id) {
                    var _this = Core.user.userInfo.userGifts.get_claimable();
                    HxOverrides.remove(_this, user);
                    null
                }
            }
        },
        removeDuplicates: function() {
            this.facebook.removeDuplicateAppRequests()
        },
        clearPendingRequests: function() {
            var _g1 = this;
            this.getFBAppRequests().then(function(requests) {
                var toClean = [];
                var _g = 0;
                while (_g < requests.length) {
                    var req = requests[_g];
                    ++_g;
                    var claimable = _g1.getClaimableById(req.from.id);
                    var requested = _g1.getRequestedById(req.from.id);
                    if (!requested && claimable == null && (req.data == "gift" || req.data == "gift_request")) {
                        toClean.push("/" + Std.string(req.id))
                    }
                }
                var _g2 = 0;
                while (_g2 < toClean.length) {
                    var id = toClean[_g2];
                    ++_g2;
                    _g1.deleteFBAppRequest(id)
                }
            })
        },
        getFBAppRequests: function() {
            var defer = new promhx_deferred_DeferredPromise();
            this.facebook.getAppRequests().then(function(data) {
                defer.resolve(js_Boot.__cast(data.data, Array))
            });
            return defer.boundPromise
        },
        deleteFBAppRequest: function(id) {
            this.facebook.deleteAppRequest(id)
        },
        giftSentTo: function(user_id) {
            return (function($this) {
                var $r;
                var _this = Core.user.userInfo.userGifts.get_sentTo();
                $r = HxOverrides.indexOf(_this, user_id, 0);
                return $r
            }(this)) > -1
        },
        addSentTo: function(user_id) {
            Core.user.userInfo.userGifts.get_sentTo().push(user_id)
        },
        addRequestedTo: function(user_id) {
            Core.user.userInfo.userGifts.get_requestedTo().push(user_id)
        },
        removeFriends: function(data, ids) {
            var ret = {
                allFriends: data.allFriends.slice(),
                agarioFriends: data.agarioFriends.slice()
            };
            var _g = 0;
            while (_g < ids.length) {
                var id = ids[_g];
                ++_g;
                this.removeFriend(ret, id)
            }
            return ret
        },
        removeFriend: function(friends, friendId) {
            var _g = 0;
            var _g1 = friends.agarioFriends;
            while (_g < _g1.length) {
                var friend = _g1[_g];
                ++_g;
                if (friend.id == friendId) {
                    HxOverrides.remove(friends.agarioFriends, friend)
                }
            }
            var _g2 = 0;
            var _g11 = friends.allFriends;
            while (_g2 < _g11.length) {
                var friend1 = _g11[_g2];
                ++_g2;
                if (friend1.id == friendId) {
                    HxOverrides.remove(friends.allFriends, friend1)
                }
            }
        },
        getFacebookRequestFromUsers: function(userId, type) {
            var requests = this.facebook.getAppRequestsObject();
            if (requests == null) {
                return null
            }
            var _g = 0;
            var _g1;
            _g1 = js_Boot.__cast(requests.data, Array);
            while (_g < _g1.length) {
                var req = _g1[_g];
                ++_g;
                if (this.getGiftTypeToString(type) == req.data && req.from.id == userId) {
                    return req
                }
            }
            return null
        },
        getGiftTypeToString: function(type) {
            switch (type[1]) {
                case 0:
                    return "gift";
                case 2:
                    return "gift_request";
                default:
                    return null
            }
        },
        getClaimableFakeFriend: function() {
            var fakeId = Core.models.giftingFakeUser.get("fictionalPlayerFbId");
            var fakeName = Core.models.giftingFakeUser.get("fictionalPlayerName");
            var fakeRequestId = Core.models.giftingFakeUser.get("fictionalGiftRequestId");
            var fakeAvatar = Core.models.giftingFakeUser.get("fictionalPlayerAvatarFilename");
            var friend = new agario_module_gift_model_data_Friend({
                id: fakeId,
                name: fakeName,
                picture: {
                    data: {
                        url: fakeAvatar
                    }
                },
                canReceiveGift: false
            });
            return friend
        },
        getClaimableFakeUser: function() {
            var fakeId = Core.models.giftingFakeUser.get("fictionalPlayerFbId");
            var fakeName = Core.models.giftingFakeUser.get("fictionalPlayerName");
            var fakeRequestId = Core.models.giftingFakeUser.get("fictionalGiftRequestId");
            var fakeAvatar = Core.models.giftingFakeUser.get("fictionalPlayerAvatarFilename");
            if (Core.user.userInfo == null || Core.user.userInfo.userGifts == null) {
                return null
            }
            var _g = 0;
            var _g1 = Core.user.userInfo.userGifts.get_claimable();
            while (_g < _g1.length) {
                var user = _g1[_g];
                ++_g;
                if (user.get_facebookIdFrom() == fakeId) {
                    return user
                }
            }
            return null
        },
        getClaimableById: function(id) {
            if (Core.user.userInfo == null) {
                return null
            }
            var _g = 0;
            var _g1 = Core.user.userInfo.userGifts.get_claimable();
            while (_g < _g1.length) {
                var user = _g1[_g];
                ++_g;
                if (user.get_facebookIdFrom() == id) {
                    return user
                }
            }
            return null
        },
        getRequestedById: function(id) {
            if (Core.user.userInfo == null) {
                return false
            }
            var _g = 0;
            var _g1 = Core.user.userInfo.userGifts.get_requestedFrom();
            while (_g < _g1.length) {
                var user = _g1[_g];
                ++_g;
                if (user == id) {
                    return true
                }
            }
            return false
        },
        fullGiftToken: function(userId, objectId) {
            return objectId + "_" + userId
        },
        __class__: agario_module_gift_model_GiftsModel,
        __properties__: {
            get_claimGiftsResponseSignal: "get_claimGiftsResponseSignal",
            get_loginResponseSignal: "get_loginResponseSignal"
        }
    };
    var agario_module_gift_model_data_Friend = function(opts) {
        this.id = opts.id;
        this.name = opts.name;
        if (opts.picture != null) {
            this.picture = opts.picture.data.url
        } else {
            this.picture = null
        }
        this.canReceiveGift = opts.canReceiveGift
    };
    $hxClasses["agario.module.gift.model.data.Friend"] = agario_module_gift_model_data_Friend;
    agario_module_gift_model_data_Friend.__name__ = ["agario", "module", "gift", "model", "data", "Friend"];
    agario_module_gift_model_data_Friend.prototype = {
        id: null,
        name: null,
        picture: null,
        selected: null,
        canReceiveGift: null,
        __class__: agario_module_gift_model_data_Friend
    };
    var agario_module_gift_model_data_GiftType = $hxClasses["agario.module.gift.model.data.GiftType"] = {
        __ename__: ["agario", "module", "gift", "model", "data", "GiftType"],
        __constructs__: ["GIFT", "FREE_GIFT", "GIFT_REQUEST"]
    };
    agario_module_gift_model_data_GiftType.GIFT = ["GIFT", 0];
    agario_module_gift_model_data_GiftType.GIFT.toString = $estr;
    agario_module_gift_model_data_GiftType.GIFT.__enum__ = agario_module_gift_model_data_GiftType;
    agario_module_gift_model_data_GiftType.FREE_GIFT = ["FREE_GIFT", 1];
    agario_module_gift_model_data_GiftType.FREE_GIFT.toString = $estr;
    agario_module_gift_model_data_GiftType.FREE_GIFT.__enum__ = agario_module_gift_model_data_GiftType;
    agario_module_gift_model_data_GiftType.GIFT_REQUEST = ["GIFT_REQUEST", 2];
    agario_module_gift_model_data_GiftType.GIFT_REQUEST.toString = $estr;
    agario_module_gift_model_data_GiftType.GIFT_REQUEST.__enum__ = agario_module_gift_model_data_GiftType;
    var agario_module_gift_model_data_InboxItem = function(opts) {
        this.date = new Date();
        this.gift = opts.gift;
        this.type = opts.type;
        this.friend = opts.friend
    };
    $hxClasses["agario.module.gift.model.data.InboxItem"] = agario_module_gift_model_data_InboxItem;
    agario_module_gift_model_data_InboxItem.__name__ = ["agario", "module", "gift", "model", "data", "InboxItem"];
    agario_module_gift_model_data_InboxItem.prototype = {
        friend: null,
        gift: null,
        type: null,
        date: null,
        __class__: agario_module_gift_model_data_InboxItem
    };
    var agario_module_gift_model_proxies_FacebookProxy = function(gift_object_id) {
        this.cacheResults = true;
        this.giftObjectId = gift_object_id
    };
    $hxClasses["agario.module.gift.model.proxies.FacebookProxy"] = agario_module_gift_model_proxies_FacebookProxy;
    agario_module_gift_model_proxies_FacebookProxy.__name__ = ["agario", "module", "gift", "model", "proxies", "FacebookProxy"];
    agario_module_gift_model_proxies_FacebookProxy.prototype = {
        cacheResults: null,
        allFriends: null,
        invitableFriends: null,
        giftObjectId: null,
        appRequests: null,
        getAllFriends: function() {
            var _g = this;
            if (this.allFriends == null || !this.cacheResults) {
                var promise = this.getFacebookFriends(this.allFriends, "me/friends");
                promise.then(function(result) {
                    _g.allFriends = result
                });
                return promise
            } else {
                var defer = new promhx_deferred_DeferredPromise();
                defer.resolve(this.allFriends);
                return defer.boundPromise
            }
        },
        getInvitableFriends: function() {
            var _g = this;
            if (this.invitableFriends == null || !this.cacheResults) {
                var promise = this.getFacebookFriends(this.invitableFriends, "me/invitable_friends");
                promise.then(function(result) {
                    _g.invitableFriends = result
                });
                return promise
            } else {
                var defer = new promhx_deferred_DeferredPromise();
                defer.resolve(this.invitableFriends);
                return defer.boundPromise
            }
        },
        sendGiftRequests: function(fbUserIds, dialog_title, dialog_message) {
            var defer = new promhx_deferred_DeferredPromise();
            this.callFacebookUI("askfor", fbUserIds, dialog_title, dialog_message).then(function(response) {
                if (response != null && !response.error_message) {
                    defer.resolve(response)
                } else {
                    defer.resolve(null)
                }
            });
            return defer.boundPromise
        },
        sendGifts: function(fbUserIds, title, message) {
            var defer = new promhx_deferred_DeferredPromise();
            this.callFacebookUI("send", fbUserIds, title, message).then(function(response) {
                if (response != null && !response.error_message) {
                    defer.resolve(response)
                } else {
                    defer.resolve(null)
                }
            });
            return defer.boundPromise
        },
        getAppRequests: function() {
            var defer = new promhx_deferred_DeferredPromise();
            if (this.appRequests != null) {
                defer.resolve(this.appRequests)
            } else {
                return this.updateAppRequests()
            }
            return defer.boundPromise
        },
        getAppRequestsObject: function() {
            return this.appRequests
        },
        removeDuplicateAppRequests: function() {
            if (this.appRequests == null) {
                return
            }
            var uniqueRequests = [];
            var requests;
            requests = js_Boot.__cast(this.appRequests.data, Array);
            var toClean = [];
            var _g = 0;
            while (_g < requests.length) {
                var req = requests[_g];
                ++_g;
                if ((function($this) {
                        var $r;
                        var x = req.from.id + req.data;
                        $r = HxOverrides.indexOf(uniqueRequests, x, 0);
                        return $r
                    }(this)) == -1) {
                    uniqueRequests.push(req.from.id + req.data)
                } else {
                    toClean.push("/" + Std.string(req.id))
                }
            }
            var _g1 = 0;
            while (_g1 < toClean.length) {
                var id = toClean[_g1];
                ++_g1;
                this.deleteAppRequest(id)
            }
        },
        deleteAppRequest: function(id) {
            FB.api(id, "DELETE", function(response) {
                null
            })
        },
        clearData: function() {
            this.allFriends = null;
            this.invitableFriends = null;
            this.appRequests = null
        },
        updateAppRequests: function() {
            var _g = this;
            var defer = new promhx_deferred_DeferredPromise();
            var apiError = "undefined" === typeof FB;
            if (apiError) {
                defer.handleError("FB API Error!")
            } else {
                FB.api("/me/apprequests", "GET", {}, function(response) {
                    if (response != null && !response.error_message) {
                        _g.appRequests = response;
                        defer.resolve(_g.appRequests)
                    } else {
                        defer.resolve(null)
                    }
                })
            }
            return defer.boundPromise
        },
        getFacebookFriends: function(result, apiCall) {
            var defer = new promhx_deferred_DeferredPromise();
            if (result == null) {
                result = [];
                this.callFacebookAPI(apiCall, "GET", null, 0, 5000).then(function(response) {
                    if (response != null && response.data != null) {
                        var data = response.data;
                        var _g = 0;
                        while (_g < data.length) {
                            var friend = data[_g];
                            ++_g;
                            result.push(new agario_module_gift_model_data_Friend(friend))
                        }
                    }
                    defer.resolve(result)
                }).catchError(function(error) {
                    defer.handleError(error)
                })
            } else {
                defer.resolve(result)
            }
            return defer.boundPromise
        },
        callFacebookAPI: function(apiCall, method, object, start, limit) {
            if (limit == null) {
                limit = 0
            }
            if (start == null) {
                start = 0
            }
            var defer = new promhx_deferred_DeferredPromise();
            var apiError = "undefined" === typeof FB;
            if (apiError) {
                defer.handleError("FB API Error!")
            } else {
                FB.api(apiCall + "?limit=" + limit, method, {
                    fields: "id, name, picture, canReceiveGift"
                }, function(response) {
                    if (response != null) {
                        defer.resolve(response)
                    } else {
                        defer.handleError("Error calling: FP.api('%apiCall%', '%method%', '%object%'")
                    }
                })
            }
            return defer.boundPromise
        },
        callFacebookUI: function(action, to, title, message) {
            var defer = new promhx_deferred_DeferredPromise();
            var obj;
            if (action != null) {
                obj = {
                    method: "apprequests",
                    to: to,
                    action_type: action,
                    object_id: this.giftObjectId,
                    title: title,
                    message: message,
                    data: action == "send" ? "gift" : "gift_request"
                }
            } else {
                obj = {
                    method: "apprequests"
                }
            }
            FB.ui(obj, function(response) {
                if (response != null) {
                    defer.resolve(response)
                } else {
                    defer.handleError("Error calling: FP.ui({method: 'apprequests', to:%to%, action_type:%action%, object_id:%object_id%, title:%title%, message:%message%});")
                }
            });
            return defer.boundPromise
        },
        __class__: agario_module_gift_model_proxies_FacebookProxy
    };
    var agario_module_gift_model_proxies_GiftingServerProxy = function() {
        this.server = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
        this.server.register(101, $bind(this, this.onClaimGiftsResponse_Handler));
        this.server.register(11, $bind(this, this.onLoginResponse_Handler));
        this.claimGiftsResponseSignal = new msignal_Signal1();
        this.loginResponseSignal = new msignal_Signal0()
    };
    $hxClasses["agario.module.gift.model.proxies.GiftingServerProxy"] = agario_module_gift_model_proxies_GiftingServerProxy;
    agario_module_gift_model_proxies_GiftingServerProxy.__name__ = ["agario", "module", "gift", "model", "proxies", "GiftingServerProxy"];
    agario_module_gift_model_proxies_GiftingServerProxy.prototype = {
        claimGiftsResponseSignal: null,
        loginResponseSignal: null,
        server: null,
        onClaimGiftsResponse_Handler: function(type, msg) {
            this.claimGiftsResponseSignal.dispatch(js_Boot.__cast(msg, agario_proto_Claim_$gifts_$response))
        },
        onLoginResponse_Handler: function(type, msg) {},
        claimGifts: function(giftIds) {
            var msg = new agario_proto_Claim_$gifts_$request();
            msg.addGiftIds(giftIds);
            this.server.sendMessage(100, msg)
        },
        sendGifts: function(giftsIds) {
            var req = new agario_proto_Send_$gifts();
            req.set_giftIds(giftsIds.split(","));
            this.server.sendMessage(102, req)
        },
        requestGifts: function(giftsIds) {
            var req = new agario_proto_Request_$gifts();
            req.set_giftIds(giftsIds.split(","));
            this.server.sendMessage(104, req)
        },
        consumeRequests: function(requestIds) {
            var req = new agario_proto_Consume_$requests();
            req.set_requestIds(requestIds.split(","));
            this.server.sendMessage(103, req)
        },
        __class__: agario_module_gift_model_proxies_GiftingServerProxy
    };
    var agario_module_gift_views_GiftCenterDialog = function() {
        oaktree_ext_ui_views_GenericDialog.call(this, "giftCenterDialog");
        this.maxWidth = 800;
        this.maxHeight = 550;
        this.createUIElements();
        this.buildUI()
    };
    $hxClasses["agario.module.gift.views.GiftCenterDialog"] = agario_module_gift_views_GiftCenterDialog;
    agario_module_gift_views_GiftCenterDialog.__name__ = ["agario", "module", "gift", "views", "GiftCenterDialog"];
    agario_module_gift_views_GiftCenterDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_gift_views_GiftCenterDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        sendFreeCoinsView: null,
        sendRequestView: null,
        shower: null,
        disconnectDialog: null,
        sendGiftView: null,
        inboxView: null,
        tabs: null,
        tabContainer: null,
        backButton: null,
        giftTab: null,
        inboxTab: null,
        disableKeyboard: null,
        enable: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
            this.closeButton.set_enabled(true)
        },
        showRequestsView: function(friends) {
            this.sendRequestView.show(friends);
            this.sendRequestView.selectFirstFriends(50)
        },
        showGiftableFriends: function(friends) {
            this.sendFreeCoinsView.show(friends);
            this.sendFreeCoinsView.selectFirstFriends(50)
        },
        reset: function() {
            this.updateCounter(this.inboxView.getTotalItems());
            if (this.inboxView.getTotalItems() > 0) {
                this.openInbox();
                return agario_module_gift_controller_ViewState.INBOX
            } else {
                this.showSendView();
                return agario_module_gift_controller_ViewState.GIFTS_REQUESTS
            }
        },
        updateInbox: function(data) {
            this.inboxView.updateData(data);
            this.updateCounter(data.length)
        },
        updateCounter: function(value) {
            if (this.inboxTab != null) {
                this.inboxTab.set_counter(value)
            }
        },
        confirmInboxElementDisable: function(friends) {
            this.inboxView.confirmElementDisable(friends);
            this.inboxView.clearAccepted();
            this.disableInboxButton()
        },
        reactivateInboxButton: function() {
            this.inboxView.activateButton()
        },
        disableInboxButton: function() {
            this.inboxView.disableButton()
        },
        clearInboxAccepted: function() {
            this.inboxView.clearAccepted()
        },
        playCoinShowerAnimation: function() {
            this.shower.play()
        },
        playCoinSplashAnimation: function(animationPosition) {
            var splash = new agario_module_gift_views_component_CoinSplash(15);
            splash.set_x(animationPosition.x);
            splash.set_y(animationPosition.y);
            this.addChild(splash);
            splash.play()
        },
        openRequestGifts: function() {
            this.tabContainer.setTab(0);
            this.closeOnEscape = false;
            this.inboxView.set_visible(false);
            this.sendGiftView.set_visible(false);
            this.backButton.set_visible(true);
            this.tabContainer.set_visible(false);
            this.dispatchEvent(new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.request_friends"))
        },
        openInbox: function() {
            this.setInboxTab()
        },
        dispose: function() {},
        destroy: function() {
            if (this.disconnectDialog != null) {
                this.disconnectDialog.removeEventListener("close", $bind(this, this.closeDisconnect))
            }
            this.sendGiftView.sendFreeCoinsBtn.removeEventListener("click", $bind(this, this.handleSendFreeCoinsClick));
            this.sendGiftView.requestGiftsBtn.removeEventListener("click", $bind(this, this.handleSendRequestClick));
            this.sendGiftView.dispose();
            this.inboxView.dispose();
            this.sendFreeCoinsView.dispose()
        },
        fadeOutFriendElements: function(friends) {
            if (this.sendFreeCoinsView.get_visible()) {
                this.sendFreeCoinsView.fadeOutElements()
            } else {
                if (this.sendRequestView.get_visible()) {
                    this.sendRequestView.fadeOutElements()
                }
            }
        },
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.closeOnEscape = true;
            Core.get_events().addEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            Core.get_events().addEventListener("userLoggedOut", $bind(this, this.onConnectionLost));
            this.addUIelementsToStage()
        },
        createUIElements: function() {
            this.sendGiftView = new agario_module_gift_views_GiftSendView();
            this.inboxView = new agario_module_gift_views_GiftInboxView(this.maxWidth | 0, this.maxHeight | 0);
            this.sendFreeCoinsView = new agario_module_gift_views_GiftSendFreeCoinsView();
            this.sendRequestView = new agario_module_gift_views_GiftRequestsView()
        },
        addUIelementsToStage: function() {
            this.addChild(this.tabContainer);
            this.tabContainer.set_x((this.maxWidth - this.tabContainer.get_width()) / 2);
            this.tabContainer.set_y(75);
            this.giftTab = new agario_module_shop_components_CategoryTab("SendGift", oaktree_ext_localization_I18n.text("menu_gift_center_send_gift"));
            this.giftTab.maxWidth = 200;
            this.inboxTab = new agario_module_gift_views_component_CategoryCounterTab("Inbox", oaktree_ext_localization_I18n.text("menu_gift_center_inbox"));
            this.inboxTab.maxWidth = 200;
            this.addTabPage(this.giftTab, this.sendGiftView);
            this.addTabPage(this.inboxTab, this.inboxView);
            this.addChild(this.sendGiftView);
            this.sendGiftView.sendFreeCoinsBtn.addEventListener("click", $bind(this, this.handleSendFreeCoinsClick));
            this.sendGiftView.requestGiftsBtn.addEventListener("click", $bind(this, this.handleSendRequestClick));
            this.addChild(this.inboxView);
            this.addChild(this.sendFreeCoinsView);
            this.addChild(this.sendRequestView);
            this.addChild(this.backButton);
            this.addChild(this.shower)
        },
        buildUI: function() {
            this.tabs = [];
            this.tabContainer = new oaktree_ext_ui_controls_TabControl();
            this.tabContainer.set_maxWidth(this.maxWidth);
            this.tabContainer.onChange.add($bind(this, this.onTabChange));
            this.sendGiftView.maxWidth = this.maxWidth;
            this.sendGiftView.maxHeight = this.maxHeight;
            this.sendGiftView.set_x((this.maxWidth - this.sendGiftView.maxWidth) / 2);
            this.inboxView.maxWidth = this.maxWidth;
            this.inboxView.maxHeight = this.maxHeight;
            this.inboxView.set_x((this.maxWidth - this.inboxView.maxWidth) / 2);
            this.inboxView.set_visible(false);
            this.sendFreeCoinsView.maxWidth = this.maxWidth;
            this.sendFreeCoinsView.maxHeight = this.maxHeight;
            this.sendFreeCoinsView.set_x((this.maxWidth - this.sendFreeCoinsView.maxWidth) / 2);
            this.sendFreeCoinsView.set_visible(false);
            this.sendRequestView.maxWidth = this.maxWidth;
            this.sendRequestView.maxHeight = this.maxHeight;
            this.sendRequestView.set_x((this.maxWidth - this.sendRequestView.maxWidth) / 2);
            this.sendRequestView.set_visible(false);
            this.backButton = new agario_views_controls_ArrowCircleButton();
            this.backButton.set_visible(false);
            this.backButton.addEventListener("click", $bind(this, this.handleBackButton));
            this.backButton.set_x(30);
            this.backButton.set_y(15);
            this.shower = new agario_module_gift_views_component_CoinShower(300, this.maxWidth);
            this.dispatchEvent(new openfl_events_Event("open", true))
        },
        addTabPage: function(tab, content) {
            this.tabContainer.addTab(tab);
            this.tabs.push(content)
        },
        handleSendFreeCoinsClick: function(e) {
            this.closeOnEscape = false;
            this.sendGiftView.set_visible(false);
            this.sendFreeCoinsView.set_visible(false);
            this.backButton.set_visible(true);
            this.tabContainer.set_visible(false);
            this.dispatchEvent(new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.request_friends_to-send"))
        },
        handleSendRequestClick: function(e) {
            this.openRequestGifts()
        },
        handleBackButton: function(e) {
            this.showSendView();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onEscapePress: function() {
            if (this.disableKeyboard) {
                return true
            } else {
                if (!this.closeOnEscape) {
                    this.handleBackButton(null)
                } else {
                    this.close()
                }
            }
            return true
        },
        showInbox: function() {
            this.closeOnEscape = true;
            this.inboxView.set_visible(true);
            this.sendGiftView.set_visible(false);
            this.sendFreeCoinsView.set_visible(false);
            this.sendRequestView.set_visible(false);
            this.backButton.set_visible(false);
            this.tabContainer.set_visible(true)
        },
        showSendView: function() {
            this.closeOnEscape = true;
            this.sendGiftView.set_visible(true);
            this.sendFreeCoinsView.set_visible(false);
            this.sendRequestView.set_visible(false);
            this.backButton.set_visible(false);
            this.inboxView.set_visible(false);
            this.tabContainer.set_visible(true);
            this.tabContainer.setTab(0)
        },
        onTabChange: function(_tab) {
            this.changeView();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        setInboxTab: function() {
            this.tabContainer.setTab(1);
            this.changeView()
        },
        changeView: function() {
            var currentCategory;
            currentCategory = this.tabContainer.current.id;
            if (currentCategory == "SendGift") {
                this.showSendView()
            } else {
                this.showInbox()
            }
        },
        onConnectionLost: function(e) {
            Core.views.closeAllViews(agario_views_ShopDialog);
            this.disable();
            this.disconnectDialog = new agario_module_shop_view_ConnectionLostDialog();
            Core.views.openView(this.disconnectDialog, {
                priority: 5,
                animate: true,
                allowClickClose: true,
                callerView: this
            });
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            Core.get_events().removeEventListener("userLoggedOut", $bind(this, this.onConnectionLost));
            this.disconnectDialog.addEventListener("close", $bind(this, this.closeDisconnect))
        },
        closeDisconnect: function(e) {
            Core.views.closeTopView()
        },
        onAddedToStage: function(e) {
            oaktree_ext_ui_views_GenericDialog.prototype.onAddedToStage.call(this, e);
            this.dispatchEvent(new openfl_events_Event("open"))
        },
        disable: function() {
            this.closeOnEscape = true;
            oaktree_ext_ui_views_GenericDialog.prototype.disable.call(this)
        },
        toggleKeyboard: function(value) {
            this.disableKeyboard = !value;
            this.sendFreeCoinsView.disableKeyboard = this.disableKeyboard;
            this.sendRequestView.disableKeyboard = this.disableKeyboard
        },
        __class__: agario_module_gift_views_GiftCenterDialog
    });
    var agario_module_gift_views_GiftFriendSelectorView = function() {
        this.currentPage = 0;
        oaktree_ext_ui_View.call(this)
    };
    $hxClasses["agario.module.gift.views.GiftFriendSelectorView"] = agario_module_gift_views_GiftFriendSelectorView;
    agario_module_gift_views_GiftFriendSelectorView.__name__ = ["agario", "module", "gift", "views", "GiftFriendSelectorView"];
    agario_module_gift_views_GiftFriendSelectorView.__super__ = oaktree_ext_ui_View;
    agario_module_gift_views_GiftFriendSelectorView.prototype = $extend(oaktree_ext_ui_View.prototype, {
        friends: null,
        selectAllBtn: null,
        selectAllBox: null,
        selectAllLabel: null,
        friendsData: null,
        noFriendsContainer: null,
        hasFriendsContainer: null,
        titleLabel: null,
        noFriendsLabel: null,
        searchField: null,
        confirmBtn: null,
        leftButton: null,
        rightButton: null,
        paginationController: null,
        friendListContainer: null,
        tabContainer: null,
        giftingIcon: null,
        searchIcon: null,
        currentPage: null,
        amountOfFriends: null,
        maxSelectableFriends: null,
        titleText: null,
        noFriendsText: null,
        buttonText: null,
        disableKeyboard: null,
        initialize: function() {
            if (this._initialized) {
                return
            }
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.noFriendsContainer = new openfl_display_Sprite();
            this.hasFriendsContainer = new openfl_display_Sprite();
            this.addChild(this.noFriendsContainer);
            this.addChild(this.hasFriendsContainer);
            this.tabContainer = new oaktree_ext_ui_controls_TabControl();
            this.tabContainer.set_maxWidth(this.maxWidth);
            this.addChild(this.tabContainer);
            this.tabContainer.onChange.add($bind(this, this.onTabChange));
            var inboxTab = new agario_module_shop_components_CategoryTab("AllFriends", oaktree_ext_localization_I18n.text("menu_outbox_all_friends"));
            inboxTab.maxWidth = 200;
            this.tabContainer.addTab(inboxTab);
            var giftTab = new agario_module_shop_components_CategoryTab("AgarioFriends", oaktree_ext_localization_I18n.text("menu_outbox_agar_friends"));
            giftTab.maxWidth = 200;
            this.tabContainer.addTab(giftTab);
            this.friendListContainer = new oaktree_ext_ui_controls_PaginatedContainer({
                w: 618,
                h: 320
            });
            this.addChild(this.friendListContainer);
            this.friendListContainer.rowsPerPage = 4;
            this.titleLabel = new oaktree_ext_ui_Label({
                text: this.titleText,
                fontSize: 32,
                color: 3421236,
                width: 300,
                autoSize: 1,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            this.selectAllLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_outbox_select_all"),
                fontSize: 15,
                color: 3421236,
                width: 100,
                autoSize: 1,
                align: 3
            });
            this.selectAllLabel.set_height(this.selectAllLabel.get_textHeight() + 10);
            this.selectAllLabel.set_selectable(false);
            this.hasFriendsContainer.addChild(this.selectAllLabel);
            this.noFriendsLabel = new oaktree_ext_ui_Label({
                text: this.noFriendsText,
                fontSize: 20,
                color: 3421236,
                width: 600,
                autoSize: 0,
                align: 0
            });
            this.noFriendsLabel.set_height(this.noFriendsLabel.get_textHeight() + 10);
            this.noFriendsLabel.set_selectable(false);
            this.searchField = new agario_module_gift_views_component_TextFieldHTMLClone();
            this.searchField.set_text(oaktree_ext_localization_I18n.text("filter_search_tag"));
            this.searchField.setTextFormat(new openfl_text_TextFormat("Arial", 12, 3421236, true));
            this.searchField.set_height(this.searchField.get_textHeight() + 5);
            this.searchField.set_type(1);
            this.searchField.addEventListener("click", $bind(this, this.focusOnSearch));
            this.searchField.addEventListener("change", $bind(this, this.onSearch));
            this.addChild(this.searchField);
            this.paginationController = new oaktree_ext_ui_controls_PaginationControl();
            this.paginationController.gotoFirstButton = new agario_module_shop_components_PaginationGotoFirstButton();
            this.paginationController.gotoPreviousButton = new agario_module_shop_components_PaginationGotoPreviousButton();
            this.paginationController.gotoNextButton = new agario_module_shop_components_PaginationGotoNextButton();
            this.paginationController.gotoLastButton = new agario_module_shop_components_PaginationGotoLastButton();
            this.paginationController.paginationItemClass = agario_module_shop_components_PaginationPageButton;
            this.hasFriendsContainer.addChild(this.paginationController);
            this.paginationController.set_currentPage(0);
            this.leftButton = new agario_module_shop_components_ShopNextArrow();
            this.hasFriendsContainer.addChild(this.leftButton);
            this.rightButton = new agario_module_shop_components_ShopNextArrow();
            this.rightButton.anchorCenter();
            this.rightButton.set_rotation(180);
            this.hasFriendsContainer.addChild(this.rightButton);
            this.leftButton.addEventListener("click", $bind(this, this.onLeftButtonClick));
            this.rightButton.addEventListener("click", $bind(this, this.onRightButtonClick));
            this.selectAllBtn = new agario_views_controls_CheckButton();
            this.selectAllBtn.addEventListener("click", $bind(this, this.onSelectAll));
            this.confirmBtn = new agario_module_gift_views_component_GiftButton({
                labelUp: {
                    text: this.buttonText,
                    fontSize: 15
                },
                width: 130,
                height: 35
            });
            this.hasFriendsContainer.addChild(this.confirmBtn);
            this.giftingIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gifts_icon", "main_shop").get_bitmapData());
            this.addChild(this.giftingIcon);
            var _g = this.giftingIcon;
            _g.set_scaleX(_g.get_scaleX() * 0.6);
            var _g1 = this.giftingIcon;
            _g1.set_scaleY(_g1.get_scaleY() * 0.6);
            this.searchIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("search_mini_icon", "main_shop").get_bitmapData());
            this.addChild(this.searchIcon);
            this.selectAllBox = new openfl_display_Bitmap(Core.get_assets().getTexture("checkbox", "main_shop").get_bitmapData());
            this.addChild(this.selectAllBox);
            this.noFriendsContainer.set_visible(false);
            this.addEventListener("agario.module.gift.events.ViewEvent.on_friend_selected", $bind(this, this.changeSelectAllButton));
            this.friendListContainer.S_onChange.add($bind(this, this.onFriendListChange));
            this.paginationController.S_onChange.add($bind(this, this.onPaginationControllerChange));
            this.amountOfFriends = js_Boot.__cast(Core.models.defaultGiftingSettings.get("amountOfFriendsDefaultSelected"), Int)
        },
        show: function(data) {
            if (this.tabContainer != null && !this.get_visible()) {
                this.tabContainer.setTab(0)
            }
            this.friendsData = data;
            this.set_visible(true);
            if (this.searchField != null) {
                this.searchField.set_text(oaktree_ext_localization_I18n.text("filter_search_tag"))
            }
            this.resetContent()
        },
        position: function() {
            this.tabContainer.set_x((this.maxWidth - this.tabContainer.w) / 2);
            this.tabContainer.set_y(75);
            this.friendListContainer.set_x(Math.round((this.maxWidth - this.friendListContainer.w) * 0.5));
            this.friendListContainer.set_y(Math.round(this.tabContainer.get_y() + this.tabContainer.get_height() + 30));
            this.paginationController.set_y(Math.round(this.friendListContainer.get_y() + this.friendListContainer.get_height() - 10));
            this.paginationController.set_x(Math.round((this.maxWidth - this.paginationController.get_width()) * 0.5));
            this.leftButton.set_x(this.friendListContainer.get_x() - this.leftButton.get_width() - 10);
            this.rightButton.set_x(this.friendListContainer.get_x() + this.friendListContainer.w + 10);
            this.leftButton.set_y(this.friendListContainer.get_y() + (280 - this.leftButton.get_height()) * 0.5);
            this.rightButton.set_y(this.leftButton.get_y());
            this.selectAllBtn.set_x(30);
            this.selectAllBtn.set_y(Math.round(this.friendListContainer.get_y() + this.friendListContainer.get_height() - 15));
            this.selectAllBox.set_x(this.selectAllBtn.get_x());
            this.selectAllBox.set_y(this.selectAllBtn.get_y());
            this.hasFriendsContainer.addChild(this.selectAllBox);
            this.hasFriendsContainer.addChild(this.selectAllBtn);
            this.selectAllBtn.set_selected(true);
            this.confirmBtn.set_x(this.maxWidth * 0.5 - this.confirmBtn.get_width() * 0.5);
            this.confirmBtn.set_y(this.maxHeight - this.confirmBtn.get_height() - 30);
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(15);
            this.selectAllLabel.set_x(this.selectAllBtn.get_x() + this.selectAllBtn.get_width() + 5);
            this.selectAllLabel.set_y(Math.round(this.friendListContainer.get_y() + this.friendListContainer.get_height() - 15));
            this.noFriendsLabel.set_x((this.maxWidth - this.noFriendsLabel.get_width()) * 0.5);
            this.noFriendsLabel.set_y(this.friendListContainer.get_y() + (this.friendListContainer.get_height() - this.noFriendsLabel.get_height()) * 0.5);
            this.searchField.set_x(this.maxWidth - this.searchField.get_width() - 50);
            this.searchField.set_y(this.tabContainer.get_y());
            this.giftingIcon.set_y(this.maxHeight - this.giftingIcon.get_height() - 20);
            this.giftingIcon.set_x(this.maxWidth - this.giftingIcon.get_width() - 40);
            this.searchIcon.set_y(this.searchField.get_y());
            this.searchIcon.set_x(this.searchField.get_x() + this.searchField.get_width() + 5);
            this.noFriendsContainer.get_graphics().clear();
            this.get_graphics().clear();
            this.noFriendsContainer.get_graphics().beginFill(16119285, 1);
            this.noFriendsContainer.get_graphics().drawRect(this.tabContainer.get_x(), this.friendListContainer.get_y(), this.tabContainer.get_width(), this.friendListContainer.get_height() + 50);
            this.noFriendsContainer.get_graphics().endFill();
            this.noFriendsContainer.addChild(this.noFriendsLabel);
            this.get_graphics().lineStyle(0.5, 3421236, 0.5);
            this.get_graphics().beginFill(0, 0);
            this.get_graphics().drawRoundRect(this.searchField.get_x() - 10, this.searchField.get_y() - 5, this.searchField.get_width() + 10, this.searchField.get_height() + 5, 15, 15);
            this.get_graphics().endFill();
            this.updateLayout()
        },
        _update: function() {
            this.rightButton.set_enabled(this.friendListContainer.currentPage < this.friendListContainer.totalPages - 1);
            this.leftButton.set_enabled(this.friendListContainer.currentPage > 0);
            this.leftButton.set_alpha(1);
            this.rightButton.set_alpha(1);
            if (!this.rightButton.get_enabled()) {
                this.rightButton.set_alpha(0.6)
            }
            if (!this.leftButton.get_enabled()) {
                this.leftButton.set_alpha(0.6)
            }
            this.changeSelectAllButton();
            return this
        },
        updateLayout: function() {
            if (this.friendListContainer.items.length == 0) {
                this.noFriendsContainer.set_visible(true);
                this.hasFriendsContainer.set_visible(false)
            } else {
                this.noFriendsContainer.set_visible(false);
                this.hasFriendsContainer.set_visible(true)
            }
        },
        loadContent: function() {
            if (this.currentCategory() == "AgarioFriends") {
                this.friends = this.friendsData.agarioFriends
            } else {
                this.friends = this.friendsData.allFriends
            }
            this.addFriendsToContainer(this.friends);
            this.currentPage = Math.round(oaktree_utils_Maths.clamp(this.currentPage, 0, this.friendListContainer.totalPages - 1));
            this.friendListContainer.set_page(this.currentPage);
            this.onFriendListChange();
            this.position()
        },
        addFriendsToContainer: function(data) {
            this.friendListContainer.addArray(this.createItemsFromData(data))
        },
        currentCategory: function() {
            return this.tabContainer.current.id
        },
        createItemsFromData: function(data) {
            var ret = [];
            if (data == null) {
                return ret
            }
            var _g1 = 0;
            var _g = data.length;
            while (_g1 < _g) {
                var i = _g1++;
                var friend = new agario_module_gift_views_component_FriendElement(data[i], {});
                ret.push(friend)
            }
            return ret
        },
        onRightButtonClick: function(e) {
            this.friendListContainer.next_page();
            this._update()
        },
        onLeftButtonClick: function(e) {
            this.friendListContainer.previous_page();
            this._update()
        },
        onTabChange: function(_tab) {
            this.loadContent();
            if (this.searchField.get_text() != oaktree_ext_localization_I18n.text("filter_search_tag")) {
                this.filterFriends()
            }
            this.friendListContainer.currentPage = 0;
            this.changeSelectAllButton();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        updateView: function() {
            this.currentPage = this.friendListContainer.currentPage;
            this.loadContent()
        },
        openTab: function(target) {
            this.paginationController.set_currentPage(0);
            this.tabContainer.setTabByName(target);
            this.loadContent()
        },
        resetContent: function() {
            this.paginationController.set_currentPage(0);
            this.currentPage = 0;
            this.friendListContainer.set_page(0)
        },
        onPaginationControllerChange: function() {
            this.friendListContainer.set_page(this.paginationController.currentPage);
            this._update();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onFriendListChange: function() {
            this.paginationController.set_totalPages(this.friendListContainer.totalPages);
            this.paginationController.set_currentPage(this.friendListContainer.currentPage);
            this._update()
        },
        selectFirstFriends: function(quantity) {
            this.maxSelectableFriends = quantity;
            var _g1 = 0;
            var _g = this.friendListContainer.items.length;
            while (_g1 < _g) {
                var i = _g1++;
                var item;
                item = js_Boot.__cast(this.friendListContainer.items[i], agario_module_gift_views_component_FriendElement);
                item.toggleSelection(i < quantity)
            }
            this.dispatchEvent(new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.on_friend_selected"))
        },
        onSelectAll: function(e) {
            var value = !this.checkIfAllSelected();
            var firstItem = this.friendListContainer.currentPage * this.friendListContainer.itemsPerPage;
            var lastItem = firstItem + this.friendListContainer.itemsPerPage - 1;
            var _g1 = 0;
            var _g = this.friendListContainer.items.length;
            while (_g1 < _g) {
                var i = _g1++;
                var item;
                item = js_Boot.__cast(this.friendListContainer.items[i], agario_module_gift_views_component_FriendElement);
                if (i >= firstItem && i <= lastItem) {
                    item.toggleSelection(value)
                }
            }
            /*agario_sounds_GameSounds.play("sfxClick")*/;
            this.dispatchEvent(new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.on_friend_selected"))
        },
        changeSelectAllButton: function(e) {
            this.selectAllBtn.toggleBitmap(this.checkIfAllSelected())
        },
        checkIfAllSelected: function() {
            if (this.friendListContainer.items.length == 0) {
                return false
            }
            var result = true;
            var firstItem = this.friendListContainer.currentPage * this.friendListContainer.itemsPerPage;
            var lastItem;
            if (this.friendListContainer.currentPage == this.friendListContainer.totalPages - 1) {
                if (this.friendListContainer.items.length % this.friendListContainer.itemsPerPage == 0) {
                    lastItem = firstItem + this.friendListContainer.itemsPerPage
                } else {
                    lastItem = firstItem + this.friendListContainer.items.length % this.friendListContainer.itemsPerPage
                }
            } else {
                lastItem = firstItem + this.friendListContainer.itemsPerPage
            }
            var _g = firstItem;
            while (_g < lastItem) {
                var i = _g++;
                var item;
                item = js_Boot.__cast(this.friendListContainer.items[i], agario_module_gift_views_component_FriendElement);
                if (!item.get_selected()) {
                    result = false;
                    break
                }
            }
            return result
        },
        getSelected: function() {
            var ret = [];
            var _g1 = 0;
            var _g = this.friendListContainer.items.length;
            while (_g1 < _g) {
                var i = _g1++;
                var friend;
                friend = js_Boot.__cast(this.friendListContainer.items[i], agario_module_gift_views_component_FriendElement);
                if (friend.get_selected()) {
                    ret.push(friend)
                }
                if (ret.length >= this.maxSelectableFriends) {
                    break
                }
            }
            return ret
        },
        getSelectedFriends: function() {
            var ret = [];
            var items = this.getSelected();
            var _g = 0;
            while (_g < items.length) {
                var item = items[_g];
                ++_g;
                ret.push(item.friend)
            }
            return ret
        },
        focusOnSearch: function(e) {
            if (this.searchField.get_text() == oaktree_ext_localization_I18n.text("filter_search_tag")) {
                this.searchField.set_text("")
            }
            this.stage.set_focus(this.searchField)
        },
        onSearch: function(e) {
            if (this.searchField.get_text() == oaktree_ext_localization_I18n.text("filter_search_tag")) {
                this.searchField.set_text("")
            }
            this.filterFriends();
            this.changeSelectAllButton()
        },
        filterFriends: function() {
            var _g = this;
            if (this.friends == null) {
                return
            }
            if (this.searchField.get_text() == oaktree_ext_localization_I18n.text("filter_search_tag")) {
                this.searchField.set_text("")
            }
            var list = this.friends.filter(function(value) {
                return value.name.toLowerCase().indexOf(_g.searchField.get_text().toLowerCase()) >= 0
            });
            this.updateFriendListContent(this.createItemsFromData(list), false)
        },
        updateFriendListContent: function(list, update) {
            if (update == null) {
                update = true
            }
            this.friendListContainer.addArray(list);
            this.resetContent();
            if (update) {
                this.updateLayout()
            } else {
                this.paginationController.set_y(Math.round(this.friendListContainer.get_y() + this.friendListContainer.get_height() - 10));
                this.paginationController.set_x(Math.round((this.maxWidth - this.paginationController.get_width()) * 0.5))
            }
        },
        fadeOutElements: function() {
            var list = this.getSelected();
            var _g = 0;
            while (_g < list.length) {
                var item = list[_g];
                ++_g;
                item.fadeOut()
            }
        },
        dispose: function() {
            oaktree_ext_ui_View.prototype.dispose.call(this);
            this.removeEventListener("agario.module.gift.events.ViewEvent.on_friend_selected", $bind(this, this.changeSelectAllButton));
            this.friendListContainer.S_onChange.remove($bind(this, this.onFriendListChange));
            this.paginationController.S_onChange.remove($bind(this, this.onPaginationControllerChange))
        },
        __class__: agario_module_gift_views_GiftFriendSelectorView
    });
    var agario_module_gift_views_GiftInboxView = function(innerWidth, innerHeight) {
        this.currentPage = 0;
        oaktree_ext_ui_View.call(this);
        this._width = innerWidth;
        this._height = innerHeight
    };
    $hxClasses["agario.module.gift.views.GiftInboxView"] = agario_module_gift_views_GiftInboxView;
    agario_module_gift_views_GiftInboxView.__name__ = ["agario", "module", "gift", "views", "GiftInboxView"];
    agario_module_gift_views_GiftInboxView.__super__ = oaktree_ext_ui_View;
    agario_module_gift_views_GiftInboxView.prototype = $extend(oaktree_ext_ui_View.prototype, {
        _width: null,
        _height: null,
        noItemsContainer: null,
        hasItemsContainer: null,
        titleLabel: null,
        noFriendsTitleLabel: null,
        noFriendsDescriptionLabel: null,
        _btnAcceptAll: null,
        _btnRequestGifts: null,
        leftButton: null,
        rightButton: null,
        _listContainer: null,
        paginationController: null,
        noGiftsIcon: null,
        giftsIcon: null,
        items: null,
        currentPage: null,
        show: function() {
            this.set_visible(true);
            this.updateItems()
        },
        hide: function() {
            this.set_visible(false)
        },
        updateData: function(data) {
            this.items = data;
            this.updateItems()
        },
        clearAccepted: function() {
            var _g = 0;
            var _g1 = this._listContainer.items;
            while (_g < _g1.length) {
                var item = _g1[_g];
                ++_g;
                var i;
                i = js_Boot.__cast(item, agario_module_gift_views_component_InboxElement);
                if (i.isAccepted) {
                    i.disableCell()
                }
            }
        },
        getTotalItems: function() {
            if (this.items == null) {
                return 0
            } else {
                return this.items.length
            }
        },
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.noItemsContainer = new openfl_display_Sprite();
            this.hasItemsContainer = new openfl_display_Sprite();
            this.addChild(this.noItemsContainer);
            this.addChild(this.hasItemsContainer);
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_gift_center_inbox"),
                fontSize: 32,
                color: 3421236,
                width: 300,
                autoSize: 1,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            this.noFriendsTitleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_gift_center_no_gifts_title"),
                fontSize: 24,
                color: 3421236,
                width: 500,
                autoSize: 0,
                align: 0
            });
            this.noFriendsTitleLabel.set_height(this.noFriendsTitleLabel.get_textHeight() + 10);
            this.noFriendsTitleLabel.set_selectable(false);
            this.noFriendsDescriptionLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_gift_center_request_gift_message"),
                fontSize: 16,
                color: 3421236,
                width: 500,
                autoSize: 0,
                align: 0
            });
            this.noFriendsDescriptionLabel.set_height(this.noFriendsDescriptionLabel.get_textHeight() + 10);
            this.noFriendsDescriptionLabel.set_selectable(false);
            this._btnAcceptAll = new agario_module_gift_views_component_GiftButton({
                labelUp: {
                    fontSize: 15,
                    text: oaktree_ext_localization_I18n.text("menu_gift_center_accept_all")
                },
                width: 130,
                height: 35
            });
            this._btnAcceptAll.set_x(this._width * 0.5 - this._btnAcceptAll.get_width() * 0.5);
            this._btnAcceptAll.set_y(this._height - this._btnAcceptAll.get_height() - 35);
            this.addChild(this._btnAcceptAll);
            this._btnRequestGifts = new agario_module_gift_views_component_GiftButton({
                labelUp: {
                    fontSize: 15,
                    text: oaktree_ext_localization_I18n.text("menu_gift_center_request_gifts")
                },
                width: 130,
                height: 35
            });
            this._btnRequestGifts.set_x(this._btnAcceptAll.get_x());
            this._btnRequestGifts.set_y(this._btnAcceptAll.get_y());
            this.addChild(this._btnRequestGifts);
            this.paginationController = new oaktree_ext_ui_controls_PaginationControl();
            this.paginationController.gotoFirstButton = new agario_module_shop_components_PaginationGotoFirstButton();
            this.paginationController.gotoPreviousButton = new agario_module_shop_components_PaginationGotoPreviousButton();
            this.paginationController.gotoNextButton = new agario_module_shop_components_PaginationGotoNextButton();
            this.paginationController.gotoLastButton = new agario_module_shop_components_PaginationGotoLastButton();
            this.paginationController.paginationItemClass = agario_module_shop_components_PaginationPageButton;
            this.hasItemsContainer.addChild(this.paginationController);
            this.paginationController.set_currentPage(0);
            this.leftButton = new agario_module_shop_components_ShopNextArrow();
            this.hasItemsContainer.addChild(this.leftButton);
            this.rightButton = new agario_module_shop_components_ShopNextArrow();
            this.rightButton.anchorCenter();
            this.rightButton.set_rotation(180);
            this.hasItemsContainer.addChild(this.rightButton);
            this.leftButton.addEventListener("click", $bind(this, this.onLeftButtonClick));
            this.rightButton.addEventListener("click", $bind(this, this.onRightButtonClick));
            this._listContainer = new oaktree_ext_ui_controls_PaginatedContainer({
                w: 712,
                h: 320
            });
            this.addChild(this._listContainer);
            this._listContainer.rowsPerPage = 4;
            this.giftsIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gifts_icon", "main_shop").get_bitmapData());
            this.hasItemsContainer.addChild(this.giftsIcon);
            var _g = this.giftsIcon;
            _g.set_scaleX(_g.get_scaleX() * 0.6);
            var _g1 = this.giftsIcon;
            _g1.set_scaleY(_g1.get_scaleY() * 0.6);
            this.noGiftsIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gift_big_icons", "main_shop").get_bitmapData());
            this.noItemsContainer.addChild(this.noGiftsIcon);
            this._btnAcceptAll.addEventListener("click", $bind(this, this.onClick_AcceptAll));
            this._btnRequestGifts.addEventListener("click", $bind(this, this.onClick_Request));
            this._listContainer.S_onChange.add($bind(this, this.onFriendListChange));
            this.paginationController.S_onChange.add($bind(this, this.onPaginationControllerChange));
            this.noItemsContainer.set_visible(false);
            this.updateItems()
        },
        position: function() {
            this._listContainer.set_x(Math.round((this._width - this._listContainer.w) * 0.5));
            this._listContainer.set_y(139);
            this.positionPageButtons();
            this.leftButton.set_x(this._listContainer.get_x() - this.leftButton.get_width() - 10);
            this.rightButton.set_x(this._listContainer.get_x() + this._listContainer.w + 10);
            this.leftButton.set_y(this._listContainer.get_y() + (280 - this.leftButton.get_height()) * 0.5);
            this.rightButton.set_y(this.leftButton.get_y());
            this.titleLabel.set_x((this._width - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(15);
            this.noFriendsTitleLabel.set_x((this._width - this.noFriendsTitleLabel.get_width()) * 0.5);
            this.noFriendsTitleLabel.set_y(this._listContainer.get_y() + (this._listContainer.get_height() - this.noFriendsTitleLabel.get_height()) * 0.5 + 70);
            this.noFriendsDescriptionLabel.set_x((this._width - this.noFriendsDescriptionLabel.get_width()) * 0.5);
            this.noFriendsDescriptionLabel.set_y(this.noFriendsTitleLabel.get_y() + this.noFriendsTitleLabel.get_height());
            this.noItemsContainer.get_graphics().beginFill(16119285, 1);
            this.noItemsContainer.get_graphics().drawRect(44, this._listContainer.get_y(), 712, this._listContainer.get_height() - 10);
            this.noItemsContainer.get_graphics().endFill();
            this.noItemsContainer.addChild(this.noFriendsTitleLabel);
            this.noItemsContainer.addChild(this.noFriendsDescriptionLabel);
            this.giftsIcon.set_y(this._height - this.giftsIcon.get_height() - 20);
            this.giftsIcon.set_x(this._width - this.giftsIcon.get_width() - 40);
            this.noGiftsIcon.set_x((this._width - this.noGiftsIcon.get_width()) * 0.5);
            this.noGiftsIcon.set_y((this._height - this.noGiftsIcon.get_height()) * 0.5 - 20)
        },
        positionPageButtons: function() {
            this.paginationController.set_y(Math.round(this._listContainer.get_y() + this._listContainer.get_height() - 10));
            this.paginationController.set_x(Math.round((this._width - this.paginationController.get_width()) * 0.5))
        },
        initBtn: function() {
            this._btnAcceptAll.set_visible(this._listContainer.items.length > 1);
            this._btnRequestGifts.set_visible(this._listContainer.items.length <= 1)
        },
        updateLayout: function() {
            this.noItemsContainer.set_visible(this._listContainer.items.length <= 0);
            this.hasItemsContainer.set_visible(!this.noItemsContainer.get_visible())
        },
        updateBtn: function() {
            if (this._listContainer.items.length <= 1 && !this._btnRequestGifts.get_visible()) {
                this.fadeOutBtn()
            }
        },
        fadeOutBtn: function() {
            this._btnAcceptAll.removeEventListener("click", $bind(this, this.onClick_AcceptAll));
            motion_Actuate.tween(this._btnAcceptAll, 0.5, {
                alpha: 0
            }).onComplete($bind(this, this.fadeInBtn))
        },
        fadeInBtn: function() {
            this._btnAcceptAll.set_visible(false);
            this._btnRequestGifts.set_alpha(0);
            this._btnRequestGifts.set_visible(true);
            motion_Actuate.tween(this._btnRequestGifts, 0.5, {
                alpha: 1
            })
        },
        loadContent: function(data) {
            this._listContainer.addArray(this.createItemsFromData(data));
            this.onFriendListChange();
            this.updateLayout();
            this.position();
            this._listContainer.set_page(0);
            this.initBtn()
        },
        updateItems: function() {
            if (this._listContainer == null) {
                return
            }
            var toRemove = [];
            var _g1 = 0;
            var _g = this._listContainer.items.length;
            while (_g1 < _g) {
                var i = _g1++;
                if ((function($this) {
                        var $r;
                        var _this = $this.items;
                        var x;
                        x = (js_Boot.__cast($this._listContainer.items[i], agario_module_gift_views_component_InboxElement)).item;
                        $r = HxOverrides.lastIndexOf(_this, x, _this.length - 1);
                        return $r
                    }(this)) == -1) {
                    toRemove.push(js_Boot.__cast(this._listContainer.items[i], agario_module_gift_views_component_InboxElement))
                }
            }
            var _g11 = 0;
            var _g2 = toRemove.length;
            while (_g11 < _g2) {
                var i1 = _g11++;
                this._listContainer.removeItem(toRemove[i1])
            }
            this.loadContent(this.items);
            this.updateLayout();
            this.positionPageButtons();
            this.updateBtn();
            this.position();
            if (this.paginationController.currentPage >= this.paginationController.totalPages - 1) {
                this.currentPage = this.paginationController.totalPages - 1
            } else {
                this.currentPage = this.paginationController.currentPage
            }
            this._listContainer.set_page(this.currentPage)
        },
        createItemsFromData: function(data) {
            var ret = [];
            if (data == null) {
                return ret
            }
            var _g = 0;
            while (_g < data.length) {
                var item = data[_g];
                ++_g;
                ret.push(new agario_module_gift_views_component_InboxElement(item, 50, {}))
            }
            ret.sort($bind(this, this.sortInboxByDate));
            return ret
        },
        sortInboxByDate: function(a, b) {
            var itemA;
            var itemB;
            itemA = js_Boot.__cast(a, agario_module_gift_views_component_InboxElement);
            itemB = js_Boot.__cast(b, agario_module_gift_views_component_InboxElement);
            if (itemA.item.date.getTime() < itemB.item.date.getTime()) {
                return 1
            } else {
                if (itemA.item.date.getTime() > itemB.item.date.getTime()) {
                    return -1
                } else {
                    return 0
                }
            }
            return 0
        },
        onFriendListChange: function() {
            this.paginationController.set_totalPages(this._listContainer.totalPages);
            this.paginationController.set_currentPage(this._listContainer.currentPage);
            this._update()
        },
        onPaginationControllerChange: function() {
            this._listContainer.set_page(this.paginationController.currentPage);
            this._update()
        },
        onClick_AcceptAll: function(e) {
            var friends = [];
            var friendsToSendGift = [];
            var _g1 = 0;
            var _g = this._listContainer.items.length;
            while (_g1 < _g) {
                var i = _g1++;
                var inboxElement;
                inboxElement = js_Boot.__cast(this._listContainer.items[i], agario_module_gift_views_component_InboxElement);
                if (inboxElement.item.friend.canReceiveGift || inboxElement.item.type == agario_module_gift_model_data_GiftType.GIFT_REQUEST) {
                    friends.push(inboxElement.item.friend)
                }
                if (inboxElement.item.type == agario_module_gift_model_data_GiftType.GIFT) {
                    var evt = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.accept_gifts");
                    evt.friends = [inboxElement.item.friend];
                    evt.wasFromAcceptAll = true;
                    this.dispatchEvent(evt);
                    inboxElement.disableButton()
                }
            }
            if (friends.length > 0) {
                var evt1 = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.accept_gifts_request");
                evt1.friends = friends;
                this.dispatchEvent(evt1)
            }
            this.dispatchEvent(new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.animate_shower", true))
        },
        onClick_Request: function(e) {
            this.set_visible(false);
            Core.get_events().dispatchEventWith("agario.module.gift.events.ViewEvent.open_gift_requests")
        },
        onRightButtonClick: function(e) {
            this._listContainer.next_page();
            this._update()
        },
        onLeftButtonClick: function(e) {
            this._listContainer.previous_page();
            this._update()
        },
        _update: function() {
            this.rightButton.set_enabled(this._listContainer.currentPage < this._listContainer.totalPages - 1);
            this.leftButton.set_enabled(this._listContainer.currentPage > 0);
            this.leftButton.set_alpha(1);
            this.rightButton.set_alpha(1);
            if (!this.rightButton.get_enabled()) {
                this.rightButton.set_alpha(0.6)
            }
            if (!this.leftButton.get_enabled()) {
                this.leftButton.set_alpha(0.6)
            }
        },
        confirmElementDisable: function(friends) {
            var _g = 0;
            var _g1 = this._listContainer.items;
            while (_g < _g1.length) {
                var i = _g1[_g];
                ++_g;
                var element;
                element = js_Boot.__cast(i, agario_module_gift_views_component_InboxElement);
                if (HxOverrides.indexOf(friends, element.item.friend, 0) >= 0) {
                    element.disableButton()
                }
            }
        },
        activateButton: function() {
            this._btnAcceptAll.addEventListener("click", $bind(this, this.onClick_AcceptAll))
        },
        disableButton: function() {
            this._btnAcceptAll.removeEventListener("click", $bind(this, this.onClick_AcceptAll))
        },
        __class__: agario_module_gift_views_GiftInboxView
    });
    var agario_module_gift_views_GiftRequestsView = function() {
        agario_module_gift_views_GiftFriendSelectorView.call(this)
    };
    $hxClasses["agario.module.gift.views.GiftRequestsView"] = agario_module_gift_views_GiftRequestsView;
    agario_module_gift_views_GiftRequestsView.__name__ = ["agario", "module", "gift", "views", "GiftRequestsView"];
    agario_module_gift_views_GiftRequestsView.__super__ = agario_module_gift_views_GiftFriendSelectorView;
    agario_module_gift_views_GiftRequestsView.prototype = $extend(agario_module_gift_views_GiftFriendSelectorView.prototype, {
        show: function(data) {
            agario_module_gift_views_GiftFriendSelectorView.prototype.show.call(this, data);
            this.updateList()
        },
        initialize: function() {
            if (this._initialized) {
                return
            }
            this.titleText = oaktree_ext_localization_I18n.text("menu_outbox_request_title");
            this.noFriendsText = oaktree_ext_localization_I18n.text("menu_outbox_empty_message_request");
            this.buttonText = oaktree_ext_localization_I18n.text("menu_outbox_request");
            agario_module_gift_views_GiftFriendSelectorView.prototype.initialize.call(this);
            this.confirmBtn.addEventListener("click", $bind(this, this.onSendRequest))
        },
        onSendRequest: function(e) {
            var selecFriends = [];
            var selected = this.getSelected();
            if (selected.length == 0) {
                return
            }
            var _g = 0;
            while (_g < selected.length) {
                var item = selected[_g];
                ++_g;
                selecFriends.push(item.friend)
            }
            var evt = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.request_gifts");
            evt.friends = selecFriends;
            this.dispatchEvent(evt)
        },
        updateList: function() {
            this.updateView()
        },
        dispose: function() {
            agario_module_gift_views_GiftFriendSelectorView.prototype.dispose.call(this);
            this.confirmBtn.removeEventListener("click", $bind(this, this.onSendRequest))
        },
        __class__: agario_module_gift_views_GiftRequestsView
    });
    var agario_module_gift_views_GiftSendFreeCoinsView = function() {
        agario_module_gift_views_GiftFriendSelectorView.call(this)
    };
    $hxClasses["agario.module.gift.views.GiftSendFreeCoinsView"] = agario_module_gift_views_GiftSendFreeCoinsView;
    agario_module_gift_views_GiftSendFreeCoinsView.__name__ = ["agario", "module", "gift", "views", "GiftSendFreeCoinsView"];
    agario_module_gift_views_GiftSendFreeCoinsView.__super__ = agario_module_gift_views_GiftFriendSelectorView;
    agario_module_gift_views_GiftSendFreeCoinsView.prototype = $extend(agario_module_gift_views_GiftFriendSelectorView.prototype, {
        show: function(data) {
            agario_module_gift_views_GiftFriendSelectorView.prototype.show.call(this, data);
            this.updateList()
        },
        initialize: function() {
            if (this._initialized) {
                return
            }
            this.titleText = oaktree_ext_localization_I18n.text("menu_gift_center_send_free_coins");
            this.noFriendsText = oaktree_ext_localization_I18n.text("menu_outbox_empty_message_send");
            this.buttonText = oaktree_ext_localization_I18n.text("menu_gift_center_send");
            agario_module_gift_views_GiftFriendSelectorView.prototype.initialize.call(this);
            this.confirmBtn.addEventListener("click", $bind(this, this.onSendCoins))
        },
        onSendCoins: function(e) {
            if (this.getSelectedFriends().length == 0) {
                return
            }
            var evt = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.send_gifts");
            evt.friends = this.getSelectedFriends();
            this.dispatchEvent(evt)
        },
        updateList: function() {
            this.updateView()
        },
        dispose: function() {
            agario_module_gift_views_GiftFriendSelectorView.prototype.dispose.call(this);
            this.confirmBtn.removeEventListener("click", $bind(this, this.onSendCoins))
        },
        __class__: agario_module_gift_views_GiftSendFreeCoinsView
    });
    var agario_module_gift_views_GiftSendView = function() {
        oaktree_ext_ui_View.call(this);
        this.set_name("Send Gifts")
    };
    $hxClasses["agario.module.gift.views.GiftSendView"] = agario_module_gift_views_GiftSendView;
    agario_module_gift_views_GiftSendView.__name__ = ["agario", "module", "gift", "views", "GiftSendView"];
    agario_module_gift_views_GiftSendView.__super__ = oaktree_ext_ui_View;
    agario_module_gift_views_GiftSendView.prototype = $extend(oaktree_ext_ui_View.prototype, {
        atlas: null,
        titleLabel: null,
        descriptionLabel: null,
        sendFreeCoinsBtn: null,
        requestGiftsBtn: null,
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_gift_center_send_gift"),
                fontSize: 32,
                color: 3421236,
                width: 300,
                autoSize: 1,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(15);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            this.descriptionLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_gift_center_send_gift_message"),
                fontSize: 18,
                color: 3421236,
                width: 500,
                autoSize: 1,
                align: 0
            });
            this.descriptionLabel.set_height(this.descriptionLabel.get_textHeight() + 10);
            this.descriptionLabel.set_x((this.maxWidth - this.descriptionLabel.get_width()) * 0.5);
            this.descriptionLabel.set_y(this.maxHeight - this.descriptionLabel.get_height() - 60);
            this.descriptionLabel.set_selectable(false);
            this.addChild(this.descriptionLabel);
            this.atlas = Core.get_assets().getAtlas("main_shop");
            this.sendFreeCoinsBtn = new agario_module_shop_renderers_ShopSectionButton("gift_send_coins", oaktree_ext_localization_I18n.text("menu_gift_center_send_free_coins"), this.atlas.get("coins_button").get_bitmapData(), 6349312, 3572736);
            this.sendFreeCoinsBtn.set_scaleX(this.sendFreeCoinsBtn.set_scaleY((this.maxWidth / 2 - 20 - 10) / this.sendFreeCoinsBtn.get_width()));
            this.sendFreeCoinsBtn.set_x(25);
            this.sendFreeCoinsBtn.set_y(180);
            this.addChild(this.sendFreeCoinsBtn);
            this.requestGiftsBtn = new agario_module_shop_renderers_ShopSectionButton("gift_request_coins", oaktree_ext_localization_I18n.text("menu_gift_center_request_gifts"), this.atlas.get("gifting_button").get_bitmapData(), 6349312, 3572736);
            this.requestGiftsBtn.set_scaleX(this.requestGiftsBtn.set_scaleY((this.maxWidth / 2 - 20 - 10) / this.requestGiftsBtn.get_width()));
            this.requestGiftsBtn.set_x(this.sendFreeCoinsBtn.get_x() + this.sendFreeCoinsBtn.get_width() + 10);
            this.requestGiftsBtn.set_y(180);
            this.addChild(this.requestGiftsBtn)
        },
        dispose: function() {
            oaktree_ext_ui_View.prototype.dispose.call(this)
        },
        __class__: agario_module_gift_views_GiftSendView
    });
    var agario_module_gift_views_GiftUnavailableDialog = function() {
        oaktree_ext_ui_views_GenericDialog.call(this, "giftUnavailableDialog");
        this.closeOnEscape = true;
        this.maxWidth = 520;
        this.maxHeight = 450
    };
    $hxClasses["agario.module.gift.views.GiftUnavailableDialog"] = agario_module_gift_views_GiftUnavailableDialog;
    agario_module_gift_views_GiftUnavailableDialog.__name__ = ["agario", "module", "gift", "views", "GiftUnavailableDialog"];
    agario_module_gift_views_GiftUnavailableDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_gift_views_GiftUnavailableDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        grayArea: null,
        img: null,
        title: null,
        subTitle: null,
        appleButton: null,
        androidButton: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.title = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_main_gifts"),
                bold: true,
                color: 0,
                fontSize: 34,
                width: this.maxWidth - 25,
                align: 0
            });
            this.title.mouseEnabled = false;
            this.addChild(this.title);
            this.subTitle = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("gifting_unavailable_subtitle"),
                bold: true,
                color: 0,
                fontSize: 21,
                width: this.maxWidth - 20,
                align: 0
            });
            this.addChild(this.subTitle);
            this.grayArea = new openfl_display_Sprite();
            this.grayArea.get_graphics().beginFill(16119285);
            this.grayArea.get_graphics().drawRect(0, 0, this.maxWidth - 40, 230);
            this.grayArea.get_graphics().endFill();
            this.addChild(this.grayArea);
            this.img = new openfl_display_Bitmap(Core.get_assets().getTexture("gifts_icon").get_bitmapData(), 1, true);
            this.addChild(this.img);
            this.appleButton = new agario_views_controls_ImageButton(new openfl_display_Bitmap(Core.get_assets().getTexture("appstore").get_bitmapData(), 1, true));
            this.addChild(this.appleButton);
            this.androidButton = new agario_views_controls_ImageButton(new openfl_display_Bitmap(Core.get_assets().getTexture("Google_Play").get_bitmapData(), 1, true));
            this.addChild(this.androidButton);
            this.doLayout()
        },
        doLayout: function() {
            this.title.set_x(20);
            this.title.set_y(20);
            this.subTitle.set_y(this.title.get_y() + this.title.get_height());
            this.subTitle.set_x(20);
            this.grayArea.set_x(20);
            this.grayArea.set_y(this.subTitle.get_y() + this.subTitle.get_height() + 10);
            this.img.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.img.get_width()) / 2);
            this.img.set_y(this.grayArea.get_y() + 20);
            this.appleButton.set_y(this.androidButton.set_y(this.grayArea.get_y() + this.grayArea.get_height() + 20));
            this.appleButton.set_x(130);
            this.appleButton.addEventListener("click", $bind(this, this.onAppleclick));
            this.androidButton.set_x(this.maxWidth - this.androidButton.get_width() - 130);
            this.androidButton.addEventListener("click", $bind(this, this.onAndroidClick))
        },
        onAppleclick: function(e) {
            openfl_Lib.getURL(new openfl_net_URLRequest("https://itunes.apple.com/app/agar.io/id995999703?mt=8&at=1l3vajp"))
        },
        onAndroidClick: function(e) {
            openfl_Lib.getURL(new openfl_net_URLRequest("https://play.google.com/store/apps/details?id=com.miniclip.agar.io"))
        },
        __class__: agario_module_gift_views_GiftUnavailableDialog
    });
    var oaktree_ext_ui_controls_TabItem = function(_id) {
        openfl_display_Sprite.call(this);
        this.onClick = new msignal_Signal1();
        this.id = _id
    };
    $hxClasses["oaktree.ext.ui.controls.TabItem"] = oaktree_ext_ui_controls_TabItem;
    oaktree_ext_ui_controls_TabItem.__name__ = ["oaktree", "ext", "ui", "controls", "TabItem"];
    oaktree_ext_ui_controls_TabItem.__super__ = openfl_display_Sprite;
    oaktree_ext_ui_controls_TabItem.prototype = $extend(openfl_display_Sprite.prototype, {
        id: null,
        onVisual: null,
        offVisual: null,
        selected: null,
        onClick: null,
        reset: function() {
            this.set_selected(false);
            if (this.contains(this.onVisual)) {
                this.removeChild(this.onVisual)
            }
        },
        handleItemClick: function(e) {
            if (this.contains(this.offVisual) && !this.selected) {
                this.onClick.dispatch(this)
            }
        },
        set_onVisual: function(_visual) {
            if (this.onVisual != null && this.contains(this.onVisual)) {
                this.removeChild(this.onVisual)
            }
            if (_visual != null) {
                this.onVisual = _visual;
                this.addChild(this.onVisual)
            }
            this.set_selected(this.selected);
            return _visual
        },
        set_offVisual: function(_visual) {
            if (this.offVisual != null && this.contains(this.offVisual)) {
                this.offVisual.removeEventListener("click", $bind(this, this.handleItemClick));
                this.removeChild(this.offVisual)
            }
            if (_visual != null) {
                this.offVisual = _visual;
                this.addChild(this.offVisual);
                this.offVisual.addEventListener("click", $bind(this, this.handleItemClick))
            }
            this.set_selected(this.selected);
            return _visual
        },
        set_selected: function(_selected) {
            this.selected = _selected;
            if (this.onVisual != null) {
                this.onVisual.set_visible(this.selected)
            }
            if (this.offVisual != null) {
                this.offVisual.set_visible(!this.selected)
            }
            return this.selected
        },
        __class__: oaktree_ext_ui_controls_TabItem,
        __properties__: $extend(openfl_display_Sprite.prototype.__properties__, {
            set_selected: "set_selected",
            set_offVisual: "set_offVisual",
            set_onVisual: "set_onVisual"
        })
    });
    var agario_module_shop_components_CategoryTab = function(_id, name) {
        this.maxWidth = 0;
        oaktree_ext_ui_controls_TabItem.call(this, _id);
        var offButtonConfig = {
            labelUp: {
                text: name,
                fontSize: 14,
                align: 0,
                color: 5329233
            },
            labelOver: {
                text: name,
                fontSize: 14,
                align: 0,
                color: 5329233
            },
            colorUp: 16777215,
            colorOver: 16777215,
            colorDown: 16777215,
            width: 140,
            height: 30,
            bottomRightRadius: 0,
            bottomLeftRadius: 0
        };
        var onButtonConfig = {
            name: this.id + "_button",
            labelUp: {
                text: name,
                fontSize: 13,
                align: 0,
                color: 16777215
            },
            labelOver: {
                text: name,
                fontSize: 13,
                align: 0,
                color: 16777215
            },
            colorUp: 5685472,
            colorOver: 5685472,
            colorDown: 5685472,
            width: 140,
            height: 30,
            bottomRightRadius: 0,
            bottomLeftRadius: 0
        };
        var unselectedTab = new openfl_display_Sprite();
        var offVisualBtn = new agario_views_controls_FlatButton(offButtonConfig);
        offVisualBtn.set_name("button");
        offVisualBtn.set_y(offVisualBtn.set_x(1));
        unselectedTab.addChild(offVisualBtn);
        this.addOutline(unselectedTab, 142);
        this.set_onVisual(unselectedTab);
        this.set_offVisual(new agario_views_controls_FlatButton(onButtonConfig))
    };
    $hxClasses["agario.module.shop.components.CategoryTab"] = agario_module_shop_components_CategoryTab;
    agario_module_shop_components_CategoryTab.__name__ = ["agario", "module", "shop", "components", "CategoryTab"];
    agario_module_shop_components_CategoryTab.__super__ = oaktree_ext_ui_controls_TabItem;
    agario_module_shop_components_CategoryTab.prototype = $extend(oaktree_ext_ui_controls_TabItem.prototype, {
        maxWidth: null,
        set_width: function(value) {
            if (value > this.maxWidth && this.maxWidth != 0) {
                value = this.maxWidth
            }
            var on;
            on = js_Boot.__cast(this.onVisual, openfl_display_DisplayObjectContainer);
            on.getChildByName("button").set_width(value);
            this.addOutline(on, value);
            this.offVisual.set_width(value);
            return value
        },
        addOutline: function(container, size) {
            var old = container.getChildByName("outline");
            if (old != null) {
                container.removeChild(old)
            }
            var outline = new openfl_display_Shape();
            outline.set_name("outline");
            outline.get_graphics().lineStyle(2, 12566463, 1);
            oaktree_utils_MCGraphics.drawRoundRectComplex(outline.get_graphics(), 0, 0, size, 30, 4, 4, 0, 0);
            container.addChild(outline)
        },
        __class__: agario_module_shop_components_CategoryTab
    });
    var agario_module_gift_views_component_CategoryCounterTab = function(_id, name) {
        agario_module_shop_components_CategoryTab.call(this, _id, name);
        this.quantity = new agario_views_controls_QuantityCircle(0);
        this.quantity.set_x(this.offVisual.get_width());
        this.quantity.set_y(0);
        this.addChild(this.quantity)
    };
    $hxClasses["agario.module.gift.views.component.CategoryCounterTab"] = agario_module_gift_views_component_CategoryCounterTab;
    agario_module_gift_views_component_CategoryCounterTab.__name__ = ["agario", "module", "gift", "views", "component", "CategoryCounterTab"];
    agario_module_gift_views_component_CategoryCounterTab.__super__ = agario_module_shop_components_CategoryTab;
    agario_module_gift_views_component_CategoryCounterTab.prototype = $extend(agario_module_shop_components_CategoryTab.prototype, {
        counter: null,
        quantity: null,
        set_counter: function(value) {
            this.quantity.update(value);
            return value
        },
        set_width: function(value) {
            agario_module_shop_components_CategoryTab.prototype.set_width.call(this, value);
            this.quantity.set_x(this.offVisual.get_width());
            return value
        },
        __class__: agario_module_gift_views_component_CategoryCounterTab,
        __properties__: $extend(agario_module_shop_components_CategoryTab.prototype.__properties__, {
            set_counter: "set_counter"
        })
    });
    var agario_module_gift_views_component_CoinParticle = function(_x, _y, _lifetime, _speed, _angle) {
        openfl_display_Sprite.call(this);
        this.lifetime = _lifetime;
        this.speed = _speed;
        this.angle = _angle;
        this.initialX = _x;
        this.initialY = _y;
        this.set_x(this.initialX);
        this.set_y(this.initialY);
        this.set_alpha(0);
        this.coinBitmap = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon", "main_shop").get_bitmapData());
        this.addChild(this.coinBitmap)
    };
    $hxClasses["agario.module.gift.views.component.CoinParticle"] = agario_module_gift_views_component_CoinParticle;
    agario_module_gift_views_component_CoinParticle.__name__ = ["agario", "module", "gift", "views", "component", "CoinParticle"];
    agario_module_gift_views_component_CoinParticle.__super__ = openfl_display_Sprite;
    agario_module_gift_views_component_CoinParticle.prototype = $extend(openfl_display_Sprite.prototype, {
        initialX: null,
        initialY: null,
        lifetime: null,
        speed: null,
        angle: null,
        coinBitmap: null,
        play: function() {
            this.set_alpha(1);
            this.set_x(this.initialX);
            this.set_y(this.initialY);
            motion_Actuate.tween(this, this.lifetime, {
                x: this.get_x() + Math.cos(this.angle) * this.speed * this.lifetime,
                y: this.get_y() + Math.sin(this.angle) * this.speed * this.lifetime
            }).ease(motion_easing_Linear.get_easeNone()).onComplete($bind(this, this.makeInvisible))
        },
        makeInvisible: function() {
            this.set_alpha(0)
        },
        __class__: agario_module_gift_views_component_CoinParticle
    });
    var agario_module_gift_views_component_CoinShower = function(_coins, _maxWidth) {
        openfl_display_Sprite.call(this);
        this.maxWidth = _maxWidth;
        this.coins = _coins;
        this.maxDelay = 1000;
        this.lifetime = 1;
        this.timer = new haxe_Timer(this.lifetime * 1000);
        this.timer.stop();
        var _g1 = 0;
        var _g = this.coins;
        while (_g1 < _g) {
            var i = _g1++;
            var coin = new agario_module_gift_views_component_CoinParticle(0, 0, this.lifetime, 1000, Math.PI * 0.5);
            this.addChild(coin)
        }
    };
    $hxClasses["agario.module.gift.views.component.CoinShower"] = agario_module_gift_views_component_CoinShower;
    agario_module_gift_views_component_CoinShower.__name__ = ["agario", "module", "gift", "views", "component", "CoinShower"];
    agario_module_gift_views_component_CoinShower.__super__ = openfl_display_Sprite;
    agario_module_gift_views_component_CoinShower.prototype = $extend(openfl_display_Sprite.prototype, {
        maxDelay: null,
        lifetime: null,
        maxWidth: null,
        coins: null,
        timer: null,
        play: function() {
            this.timer.stop();
            this.set_alpha(1);
            var _g1 = 0;
            var _g = this.coins;
            while (_g1 < _g) {
                var i = _g1++;
                (js_Boot.__cast(this.getChildAt(i), agario_module_gift_views_component_CoinParticle)).initialX = Math.random() * (this.maxWidth - agario_module_gift_views_component_CoinParticle.COIN_WIDTH);
                var delay = Std["int"](Math.random() * this.maxDelay);
                haxe_Timer.delay(($_ = (js_Boot.__cast(this.getChildAt(i), agario_module_gift_views_component_CoinParticle)), $bind($_, $_.play)), delay)
            }
            this.timer.run = $bind(this, this.makeInvisible)
        },
        makeInvisible: function() {
            this.set_alpha(0)
        },
        __class__: agario_module_gift_views_component_CoinShower
    });
    var agario_module_gift_views_component_CoinSplash = function(_coins) {
        openfl_display_Sprite.call(this);
        this.lifetime = 1;
        this.coins = _coins;
        var _g1 = 0;
        var _g = this.coins;
        while (_g1 < _g) {
            var i = _g1++;
            this.addChild(new agario_module_gift_views_component_CoinParticle(0, 0, this.lifetime, Math.random() * 175 + 75, i * 1 / this.coins * (Math.PI * 2)))
        }
        haxe_Timer.delay($bind(this, this.fadeOut), this.lifetime * 250)
    };
    $hxClasses["agario.module.gift.views.component.CoinSplash"] = agario_module_gift_views_component_CoinSplash;
    agario_module_gift_views_component_CoinSplash.__name__ = ["agario", "module", "gift", "views", "component", "CoinSplash"];
    agario_module_gift_views_component_CoinSplash.__super__ = openfl_display_Sprite;
    agario_module_gift_views_component_CoinSplash.prototype = $extend(openfl_display_Sprite.prototype, {
        lifetime: null,
        coins: null,
        play: function() {
            var _g1 = 0;
            var _g = this.coins;
            while (_g1 < _g) {
                var i = _g1++;
                (js_Boot.__cast(this.getChildAt(i), agario_module_gift_views_component_CoinParticle)).play()
            }
        },
        fadeOut: function() {
            motion_Actuate.tween(this, 0.5, {
                alpha: 0
            }).onComplete($bind(this, this.dispose))
        },
        dispose: function() {
            this.removeChildren(0, this.get_numChildren() - 1)
        },
        __class__: agario_module_gift_views_component_CoinSplash
    });
    var oaktree_ext_ui_Control = function(_opts) {
        this.updating = false;
        this.maxHeight = 0;
        this.minHeight = 0;
        this.maxWidth = 0;
        this.minWidth = 0;
        openfl_display_Sprite.call(this);
        this._options = _opts;
        this.onCreate = new msignal_Signal0();
        this.onBounds = new msignal_Signal0();
        this.set_name((function($this) {
            var $r;
            if ($this._options.name == null) {
                $this._options.name = "control"
            }
            $r = $this._options.name;
            return $r
        }(this)));
        this.set_minWidth((function($this) {
            var $r;
            if ($this._options.minWidth == null) {
                $this._options.minWidth = 0
            }
            $r = $this._options.minWidth;
            return $r
        }(this)));
        this.set_maxWidth((function($this) {
            var $r;
            if ($this._options.maxWidth == null) {
                $this._options.maxWidth = 0
            }
            $r = $this._options.maxWidth;
            return $r
        }(this)));
        this.set_minHeight((function($this) {
            var $r;
            if ($this._options.minHeight == null) {
                $this._options.minHeight = 0
            }
            $r = $this._options.minHeight;
            return $r
        }(this)));
        this.set_maxHeight((function($this) {
            var $r;
            if ($this._options.maxHeight == null) {
                $this._options.maxHeight = 0
            }
            $r = $this._options.maxHeight;
            return $r
        }(this)));
        this.set_x((function($this) {
            var $r;
            if ($this._options.x == null) {
                $this._options.x = 0
            }
            $r = $this._options.x;
            return $r
        }(this)));
        this.set_y((function($this) {
            var $r;
            if ($this._options.y == null) {
                $this._options.y = 0
            }
            $r = $this._options.y;
            return $r
        }(this)));
        this.set_w((function($this) {
            var $r;
            if ($this._options.w == null) {
                $this._options.w = 0
            }
            $r = $this._options.w;
            return $r
        }(this)));
        this.set_h((function($this) {
            var $r;
            if ($this._options.h == null) {
                $this._options.h = 0
            }
            $r = $this._options.h;
            return $r
        }(this)));
        this.children_bounds = {
            x: 0,
            y: 0,
            right: 0,
            bottom: 0,
            real_x: 0,
            real_y: 0,
            real_w: 0,
            real_h: 0
        };
        this.onCreate.dispatch()
    };
    $hxClasses["oaktree.ext.ui.Control"] = oaktree_ext_ui_Control;
    oaktree_ext_ui_Control.__name__ = ["oaktree", "ext", "ui", "Control"];
    oaktree_ext_ui_Control.__super__ = openfl_display_Sprite;
    oaktree_ext_ui_Control.prototype = $extend(openfl_display_Sprite.prototype, {
        w: null,
        h: null,
        minWidth: null,
        maxWidth: null,
        minHeight: null,
        maxHeight: null,
        children_bounds: null,
        updating: null,
        onCreate: null,
        onBounds: null,
        _options: null,
        set_size: function(_w, _h) {
            this.updating = true;
            var _dw = _w - this.get_x();
            var _dh = _h - this.h;
            this.set_w(_w);
            this.set_h(_h);
            this.updating = false;
            this.bounds_changed(0, 0, _dw, _dh)
        },
        get_right: function() {
            return this.get_x() + this.w
        },
        get_bottom: function() {
            return this.get_y() + this.h
        },
        set_minWidth: function(value) {
            this.minWidth = value;
            if (this.w < this.minWidth) {
                this.set_w(this.minWidth)
            }
            return this.minWidth
        },
        set_minHeight: function(value) {
            this.minHeight = value;
            if (this.h < this.minHeight) {
                this.set_h(this.minHeight)
            }
            return this.minHeight
        },
        set_maxWidth: function(value) {
            this.maxWidth = value;
            if (this.w > this.maxWidth) {
                this.set_w(this.maxWidth)
            }
            return this.maxWidth
        },
        set_maxHeight: function(value) {
            this.maxHeight = value;
            if (this.h > this.maxHeight) {
                this.set_h(this.maxHeight)
            }
            return this.maxHeight
        },
        set_w: function(_w) {
            if (_w < this.minWidth) {
                _w = this.minWidth
            }
            if (_w > this.maxWidth && this.maxWidth != 0) {
                _w = this.maxWidth
            }
            var _dw = _w - this.w;
            this.w = _w;
            this.bounds_changed(0, 0, _dw);
            return this.w
        },
        set_h: function(_h) {
            if (_h < this.minHeight) {
                _h = this.minHeight
            }
            if (_h > this.maxHeight && this.maxHeight != 0) {
                _h = this.maxHeight
            }
            var _dh = _h - this.h;
            this.h = _h;
            this.bounds_changed(0, 0, 0, _dh);
            return this.h
        },
        get_children_bounds: function() {
            if (this.get_numChildren() == 0) {
                this.children_bounds.x = 0;
                this.children_bounds.y = 0;
                this.children_bounds.right = 0;
                this.children_bounds.bottom = 0;
                this.children_bounds.real_x = 0;
                this.children_bounds.real_y = 0;
                this.children_bounds.real_w = 0;
                this.children_bounds.real_h = 0;
                return this.children_bounds
            }
            var _first_child = this.getChildAt(0);
            var _current_x = _first_child.get_x();
            var _current_y = _first_child.get_y();
            var _current_r = _first_child.get_x() + _first_child.get_width();
            var _current_b = _first_child.get_y() + _first_child.get_height();
            var _real_x = _first_child.get_x();
            var _real_y = _first_child.get_y();
            var _g1 = 0;
            var _g = this.get_numChildren();
            while (_g1 < _g) {
                var idx = _g1++;
                var child = this.getChildAt(idx);
                _current_x = Math.min(child.get_x(), _current_x);
                _current_y = Math.min(child.get_y(), _current_y);
                _current_r = Math.max(_current_r, child.get_x() + child.get_width());
                _current_b = Math.max(_current_b, child.get_y() + child.get_height());
                _real_x = Math.min(child.get_x(), _real_x);
                _real_y = Math.min(child.get_y(), _real_y)
            }
            this.children_bounds.x = _current_x;
            this.children_bounds.y = _current_y;
            this.children_bounds.right = _current_r;
            this.children_bounds.bottom = _current_b;
            this.children_bounds.real_x = _real_x;
            this.children_bounds.real_y = _real_y;
            this.children_bounds.real_w = _current_r;
            this.children_bounds.real_h = _current_b;
            return this.children_bounds
        },
        update_bounds: function() {
            var tBounds = this.get_children_bounds();
            this.set_w(tBounds.real_w);
            this.set_h(tBounds.real_h)
        },
        bounds_changed: function(_dx, _dy, _dw, _dh) {
            if (_dh == null) {
                _dh = 0
            }
            if (_dw == null) {
                _dw = 0
            }
            if (_dy == null) {
                _dy = 0
            }
            if (_dx == null) {
                _dx = 0
            }
            if (this.updating) {
                return
            }
            this.onBounds.dispatch()
        },
        __class__: oaktree_ext_ui_Control,
        __properties__: $extend(openfl_display_Sprite.prototype.__properties__, {
            get_bottom: "get_bottom",
            get_right: "get_right",
            get_children_bounds: "get_children_bounds",
            set_maxHeight: "set_maxHeight",
            set_minHeight: "set_minHeight",
            set_maxWidth: "set_maxWidth",
            set_minWidth: "set_minWidth",
            set_h: "set_h",
            set_w: "set_w"
        })
    });
    var agario_module_gift_views_component_FriendElement = function(friend, _opts) {
        _opts.w = 200;
        _opts.h = 70;
        this.options = _opts;
        oaktree_ext_ui_Control.call(this, _opts);
        this.friend = friend;
        this.buildCheckbox();
        this.addEventListener("addedToStage", $bind(this, this.initialize))
    };
    $hxClasses["agario.module.gift.views.component.FriendElement"] = agario_module_gift_views_component_FriendElement;
    agario_module_gift_views_component_FriendElement.__name__ = ["agario", "module", "gift", "views", "component", "FriendElement"];
    agario_module_gift_views_component_FriendElement.__super__ = oaktree_ext_ui_Control;
    agario_module_gift_views_component_FriendElement.prototype = $extend(oaktree_ext_ui_Control.prototype, {
        friend: null,
        photo: null,
        nameLabel: null,
        check: null,
        options: null,
        selected: null,
        get_selected: function() {
            return this.friend.selected
        },
        initialize: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.initialize));
            this.buildUI();
            this.addEventListener("click", $bind(this, this.onClick));
            this.addEventListener("mouseOver", $bind(this, this.onOver));
            this.addEventListener("mouseOut", $bind(this, this.onOut))
        },
        buildCheckbox: function() {
            this.check = new openfl_display_Bitmap(Core.get_assets().getTexture("check", "main_shop").get_bitmapData());
            this.check.set_x(170);
            this.check.set_y(40);
            this.addChild(this.check);
            this.check.set_visible(this.friend.selected)
        },
        buildUI: function() {
            var _g = this;
            this.get_graphics().lineStyle(0.5, 3421236, 0.5);
            this.get_graphics().beginFill(0, 0);
            this.get_graphics().drawRoundRect(0, 0, 200, 70, 25, 25);
            this.get_graphics().endFill();
            this.nameLabel = new oaktree_ext_ui_Label({
                text: this.friend.name,
                fontSize: 14,
                color: 3421236,
                maxHeight: 60,
                multiline: true
            });
            this.nameLabel.set_width(100);
            this.nameLabel.set_height(60);
            this.nameLabel.set_selectable(false);
            this.nameLabel.set_multiline(true);
            this.nameLabel.set_wordWrap(true);
            this.addChild(this.nameLabel);
            this.nameLabel.set_x(70);
            this.nameLabel.set_y(10);
            this.photo = new openfl_display_Bitmap();
            if (this.friend.id == Core.models.giftingFakeUser.get("fictionalPlayerFbId")) {
                this.onLoadProfilePic(Core.get_assets().getTexture("Avatar", "main_shop").get_bitmapData())
            } else {
                openfl_display_BitmapData.loadFromFile(this.friend.picture).then(function(data) {
                    _g.onLoadProfilePic(data);
                    return lime_app_Future.withValue(data)
                })
            }
            this.get_graphics().lineStyle(0.5, 3421236, 0.5);
            this.get_graphics().beginFill(0, 0);
            this.get_graphics().drawCircle(this.check.get_x() + this.check.get_width() / 2, this.check.get_y() + this.check.get_height() / 2, this.check.get_width() / 2 - 1);
            this.get_graphics().endFill()
        },
        onLoadProfilePic: function(data) {
            this.photo = new openfl_display_Bitmap(data);
            this.addChild(this.photo);
            this.photo.set_x(10);
            this.photo.set_y(10)
        },
        toggleSelection: function(value) {
            this.friend.selected = value;
            this.check.set_visible(value)
        },
        onClick: function(e) {
            this.toggleSelection(!this.get_selected());
            this.dispatchEvent(new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.on_friend_selected"));
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onOver: function(e) {
            this.set_alpha(0.8)
        },
        onOut: function(e) {
            this.set_alpha(1)
        },
        fadeOut: function() {
            var _g = this;
            this.removeEventListener("click", $bind(this, this.onClick));
            this.removeEventListener("mouseOver", $bind(this, this.onOver));
            this.removeEventListener("mouseOut", $bind(this, this.onOut));
            motion_Actuate.tween(this, 1, {
                alpha: 0
            }).onComplete(function() {
                var evt = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.post_dispose", true);
                evt.friends = [];
                evt.friends.push(_g.friend);
                _g.dispatchEvent(evt)
            })
        },
        __class__: agario_module_gift_views_component_FriendElement,
        __properties__: $extend(oaktree_ext_ui_Control.prototype.__properties__, {
            get_selected: "get_selected"
        })
    });
    var oaktree_ext_ui_controls_Button = function(id) {
        this._rotation = 0;
        this.rotationAnchorY = 0;
        this.rotationAnchorX = 0;
        openfl_display_Sprite.call(this);
        this.mouseChildren = false;
        this.hasFocus = false;
        this.buttonMode = this.mouseEnabled = true;
        this.statesContainer = new openfl_display_Sprite();
        this.statesContainer.set_name("button_container");
        this.addChild(this.statesContainer);
        this.initializeState(this.upState);
        this.initializeState(this.overState);
        this.initializeState(this.downState);
        this.initializeState(this.disabledState);
        this.updateState();
        this.resize();
        this.addEventListener("addedToStage", $bind(this, this.onAddedToStage))
    };
    $hxClasses["oaktree.ext.ui.controls.Button"] = oaktree_ext_ui_controls_Button;
    oaktree_ext_ui_controls_Button.__name__ = ["oaktree", "ext", "ui", "controls", "Button"];
    oaktree_ext_ui_controls_Button.__super__ = openfl_display_Sprite;
    oaktree_ext_ui_controls_Button.prototype = $extend(openfl_display_Sprite.prototype, {
        rotationAnchorX: null,
        rotationAnchorY: null,
        _rotation: null,
        statesContainer: null,
        onClick: null,
        upState: null,
        downState: null,
        overState: null,
        disabledState: null,
        data: null,
        _currentState: null,
        get_currentState: function() {
            return this._currentState
        },
        set_currentState: function(value) {
            if (this._currentState != value) {
                if (this._currentState != null) {
                    this.statesContainer.removeChild(this._currentState)
                }
                this._currentState = value;
                if (value != null) {
                    this.statesContainer.addChild(value)
                }
            }
            this.update_layout();
            return value
        },
        get_enabled: function() {
            return this.mouseEnabled
        },
        set_enabled: function(value) {
            this.mouseEnabled = value;
            this.updateState();
            return value
        },
        selected: null,
        set_selected: function(value) {
            this.selected = value;
            this.updateState();
            return value
        },
        hasFocus: null,
        mouseIsDown: null,
        mouseIsOver: null,
        upOnMouseOut: null,
        initializeState: function(state) {
            if (state != null && state.parent != null && state != this._currentState) {
                state.parent.removeChild(state)
            }
        },
        updateState: function() {
            var state = null;
            if (!this.get_enabled()) {
                state = this.disabledState
            } else {
                if (this.selected) {
                    state = this.downState
                } else {
                    if (this.mouseIsDown && (this.mouseIsOver || !this.upOnMouseOut)) {
                        state = this.downState
                    } else {
                        if (this.hasFocus && this.mouseIsDown) {
                            state = this.overState
                        } else {
                            if (this.mouseIsOver) {
                                state = this.overState
                            }
                        }
                    }
                }
            }
            if (state == null) {
                state = this.upState
            }
            this.set_currentState(state)
        },
        resize: function() {
            if (this.upState != this.get_currentState()) {
                this.statesContainer.addChild(this.upState)
            }
            var bounds = this.upState.getBounds(this);
            if (this.upState != this.get_currentState()) {
                this.statesContainer.removeChild(this.upState)
            }
            this.update_layout()
        },
        setRotation: function(value) {
            this._rotation = value;
            openfl_display_Sprite.prototype.set_rotation.call(this, 0);
            this.statesContainer.set_rotation(value);
            this.update_layout();
            return value
        },
        set_rotation: function(value) {
            return this.setRotation(value)
        },
        set_rotationAnchorX: function(value) {
            this.rotationAnchorX = value;
            this.update_layout();
            return value
        },
        set_rotationAnchorY: function(value) {
            this.rotationAnchorY = value;
            this.update_layout();
            return value
        },
        setRotationAnchor: function(_x, _y) {
            this.set_rotationAnchorX(_x);
            this.set_rotationAnchorY(_y);
            this.update_layout()
        },
        anchorCenter: function() {
            this.setRotationAnchor(this.get_width() / 2, this.get_height() / 2)
        },
        update_layout: function() {
            if (this.upState != null) {
                this.upState.set_x(-this.rotationAnchorX);
                this.upState.set_y(-this.rotationAnchorY)
            }
            if (this.overState != null) {
                this.overState.set_x(-this.rotationAnchorX);
                this.overState.set_y(-this.rotationAnchorY)
            }
            if (this.downState != null) {
                this.downState.set_x(-this.rotationAnchorX);
                this.downState.set_y(-this.rotationAnchorY)
            }
            if (this.disabledState != null) {
                this.disabledState.set_x(-this.rotationAnchorX);
                this.disabledState.set_y(-this.rotationAnchorY)
            }
            this.statesContainer.set_x(this.rotationAnchorX);
            this.statesContainer.set_y(this.rotationAnchorY)
        },
        onRollOver: function(e) {
            this.mouseIsOver = !e.buttonDown || this.mouseIsDown;
            this.updateState()
        },
        onRollOut: function(e) {
            this.mouseIsOver = false;
            this.updateState()
        },
        onMouseDown: function(e) {
            this.mouseIsDown = true;
            this.updateState();
            this.stage.addEventListener("mouseUp", $bind(this, this.onStageMouseUp))
        },
        onFocusIn: function(e) {
            this.hasFocus = true;
            this.updateState()
        },
        onFocusOut: function(e) {
            this.hasFocus = false;
            this.updateState()
        },
        onStageMouseUp: function(e) {
            this.mouseIsDown = false;
            this.updateState();
            this.stage.removeEventListener("mouseUp", $bind(this, this.onStageMouseUp))
        },
        onAddedToStage: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.onAddedToStage));
            this.addEventListener("removedFromStage", $bind(this, this.onRemovedFromStage));
            this.addEventListener("mouseOver", $bind(this, this.onRollOver));
            this.addEventListener("mouseOut", $bind(this, this.onRollOut));
            this.addEventListener("mouseDown", $bind(this, this.onMouseDown));
            this.addEventListener("focusIn", $bind(this, this.onFocusIn));
            this.addEventListener("focusOut", $bind(this, this.onFocusOut));
            this.mouseIsDown = this.mouseIsOver = this.hasFocus = false;
            this.addEventListener("click", $bind(this, this.handleClick));
            this.updateState()
        },
        handleClick: function(e) {
            if (this.onClick != null) {
                this.onClick(this)
            }
        },
        onRemovedFromStage: function(e) {
            this.addEventListener("addedToStage", $bind(this, this.onAddedToStage));
            this.removeEventListener("removedFromStage", $bind(this, this.onRemovedFromStage));
            this.removeEventListener("rollOver", $bind(this, this.onRollOver));
            this.removeEventListener("rollOut", $bind(this, this.onRollOut));
            this.removeEventListener("mouseDown", $bind(this, this.onMouseDown));
            this.addEventListener("focusIn", $bind(this, this.onFocusIn));
            this.addEventListener("focusOut", $bind(this, this.onFocusOut));
            this.removeEventListener("click", $bind(this, this.handleClick));
            this.stage.removeEventListener("mouseUp", $bind(this, this.onStageMouseUp))
        },
        dispose: function() {
            this.removeEventListener("addedToStage", $bind(this, this.onAddedToStage));
            this.removeEventListener("removedFromStage", $bind(this, this.onRemovedFromStage));
            this.removeEventListener("rollOver", $bind(this, this.onRollOver));
            this.removeEventListener("rollOut", $bind(this, this.onRollOut));
            this.removeEventListener("mouseDown", $bind(this, this.onMouseDown));
            this.removeEventListener("focusIn", $bind(this, this.onFocusIn));
            this.removeEventListener("focusOut", $bind(this, this.onFocusOut));
            if (this.stage != null) {
                this.stage.removeEventListener("mouseUp", $bind(this, this.onStageMouseUp))
            }
        },
        delayedEnable: function(pTime) {
            if (pTime == null) {
                pTime = 1
            }
            var _g = this;
            motion_Actuate.timer(pTime).onComplete(function() {
                _g.set_enabled(true)
            })
        },
        __class__: oaktree_ext_ui_controls_Button,
        __properties__: $extend(openfl_display_Sprite.prototype.__properties__, {
            set_selected: "set_selected",
            set_enabled: "set_enabled",
            get_enabled: "get_enabled",
            set_currentState: "set_currentState",
            get_currentState: "get_currentState",
            set_rotationAnchorY: "set_rotationAnchorY",
            set_rotationAnchorX: "set_rotationAnchorX"
        })
    });
    var agario_views_controls_FlatButton = function(_opts) {
        if (_opts.labelOver == null) {
            if (_opts.labelOver == null) {
                _opts.labelOver = _opts.labelUp
            }
            _opts.labelOver
        }
        if (_opts.labelDown == null) {
            if (_opts.labelDown == null) {
                _opts.labelDown = _opts.labelUp
            }
            _opts.labelDown
        }
        if (_opts.labelDown.text == null) {
            _opts.labelDown.text = _opts.labelUp.text
        }
        _opts.labelDown.text;
        if (_opts.labelOver.text == null) {
            _opts.labelOver.text = _opts.labelUp.text
        }
        _opts.labelOver.text;
        if (_opts.topLeftRadius == null) {
            _opts.topLeftRadius = 4
        }
        _opts.topLeftRadius;
        if (_opts.topRightRadius == null) {
            _opts.topRightRadius = 4
        }
        _opts.topRightRadius;
        if (_opts.bottomLeftRadius == null) {
            _opts.bottomLeftRadius = 4
        }
        _opts.bottomLeftRadius;
        if (_opts.bottomRightRadius == null) {
            _opts.bottomRightRadius = 4
        }
        _opts.bottomRightRadius;
        if (_opts.colorUp == null) {
            _opts.colorUp = 6343424
        }
        _opts.colorUp;
        if (_opts.colorDown == null) {
            _opts.colorDown = 5748225
        }
        _opts.colorDown;
        if (_opts.colorOver == null) {
            _opts.colorOver = 5748225
        }
        _opts.colorOver;
        if (_opts.borderWeight == null) {
            _opts.borderWeight = 0
        }
        _opts.borderWeight;
        if (_opts.borderColor == null) {
            _opts.borderColor = 0
        }
        _opts.borderColor;
        if (_opts.borderWeightOver == null) {
            _opts.borderWeightOver = 0
        }
        _opts.borderWeightOver;
        if (_opts.borderColorOver == null) {
            _opts.borderColorOver = 0
        }
        _opts.borderColorOver;
        if (_opts.borderWeightDown == null) {
            _opts.borderWeightDown = 0
        }
        _opts.borderWeightDown;
        if (_opts.borderColorDown == null) {
            _opts.borderColorDown = 0
        }
        _opts.borderColorDown;
        this.opts = _opts;
        var stateUp = new openfl_display_Sprite();
        var stateOver = new openfl_display_Sprite();
        var stateDown = new openfl_display_Sprite();
        if (_opts.radius != null) {
            _opts.topLeftRadius = _opts.topRightRadius = _opts.bottomLeftRadius = _opts.bottomRightRadius = _opts.radius
        }
        this.labelUp = new oaktree_ext_ui_Label(_opts.labelUp);
        this.labelOver = new oaktree_ext_ui_Label(_opts.labelOver);
        this.labelDown = new oaktree_ext_ui_Label(_opts.labelDown);
        if (this.labelUp.get_textWidth() > _opts.width) {
            this.labelUp.set_width(this.labelOver.set_width(this.labelDown.set_width(_opts.width)))
        }
        stateUp = this.getState(this.labelUp, _opts.borderWeight, _opts.borderColor, _opts.colorUp, _opts.width, _opts.height, _opts.topLeftRadius, _opts.topRightRadius, _opts.bottomLeftRadius, _opts.bottomRightRadius);
        stateOver = this.getState(this.labelOver, _opts.borderWeightOver, _opts.borderColor, _opts.colorOver, _opts.width, _opts.height, _opts.topLeftRadius, _opts.topRightRadius, _opts.bottomLeftRadius, _opts.bottomRightRadius);
        stateDown = this.getState(this.labelDown, _opts.borderWeightDown, _opts.borderColorDown, _opts.colorDown, _opts.width, _opts.height, _opts.topLeftRadius, _opts.topRightRadius, _opts.bottomLeftRadius, _opts.bottomRightRadius);
        this.upState = this.disabledState = stateUp;
        this.overState = stateOver;
        this.downState = stateDown;
        this.labelOver.set_y(this.labelUp.set_y(this.labelDown.set_y((_opts.height - this.labelUp.get_height()) / 2)));
        this.labelOver.set_x(this.labelUp.set_x(this.labelDown.set_x((_opts.width - this.labelUp.get_width()) / 2)));
        oaktree_ext_ui_controls_Button.call(this, _opts.name)
    };
    $hxClasses["agario.views.controls.FlatButton"] = agario_views_controls_FlatButton;
    agario_views_controls_FlatButton.__name__ = ["agario", "views", "controls", "FlatButton"];
    agario_views_controls_FlatButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_FlatButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        opts: null,
        labelUp: null,
        labelOver: null,
        labelDown: null,
        labelWidth: null,
        set_width: function(value) {
            this.updateStateBackground(js_Boot.__cast(this.upState, openfl_display_DisplayObjectContainer), this.opts.borderWeight, this.opts.borderColor, this.opts.colorUp, value - 15, this.opts.height, this.opts.topLeftRadius, this.opts.topRightRadius, this.opts.bottomLeftRadius, this.opts.bottomRightRadius);
            this.updateStateBackground(js_Boot.__cast(this.disabledState, openfl_display_DisplayObjectContainer), this.opts.borderWeight, this.opts.borderColor, this.opts.colorUp, value, this.opts.height, this.opts.topLeftRadius, this.opts.topRightRadius, this.opts.bottomLeftRadius, this.opts.bottomRightRadius);
            this.updateStateBackground(js_Boot.__cast(this.overState, openfl_display_DisplayObjectContainer), this.opts.borderWeightOver, this.opts.borderColor, this.opts.colorOver, value, this.opts.height, this.opts.topLeftRadius, this.opts.topRightRadius, this.opts.bottomLeftRadius, this.opts.bottomRightRadius);
            this.updateStateBackground(js_Boot.__cast(this.downState, openfl_display_DisplayObjectContainer), this.opts.borderWeightDown, this.opts.borderColorDown, this.opts.colorDown, value, this.opts.height, this.opts.topLeftRadius, this.opts.topRightRadius, this.opts.bottomLeftRadius, this.opts.bottomRightRadius);
            this.updateLabel(this.labelUp, value);
            this.updateLabel(this.labelOver, value);
            this.updateLabel(this.labelDown, value);
            return value
        },
        updateLabel: function(label, newWidth) {
            this.labelWidth = newWidth;
            label.set_autoSize(1);
            label.set_scaleX(label.set_scaleY(1));
            var margin = 0;
            if (label.get_width() / label.get_scaleX() > newWidth) {
                label.set_scaleX(label.set_scaleY(newWidth / (label.get_width() / label.get_scaleX() + margin)))
            }
            label.set_x((this.getBackground(this.upState).get_width() - label.getBounds(this).width) * 0.5)
        },
        updateState: function() {
            oaktree_ext_ui_controls_Button.prototype.updateState.call(this);
            if (this.labelWidth > 0) {
                this.set_width(this.labelWidth)
            }
        },
        getBackground: function(state) {
            return (js_Boot.__cast(state, openfl_display_DisplayObjectContainer)).getChildByName("background")
        },
        getState: function(label, borderThickness, borderColor, fillColor, width, height, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius) {
            var state = new openfl_display_Sprite();
            this.updateStateBackground(state, borderThickness, borderColor, fillColor, width, height, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius);
            state.addChild(label);
            return state
        },
        updateStateBackground: function(state, borderThickness, borderColor, fillColor, w, h, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius) {
            var bg = state.getChildByName("background");
            if (bg != null) {
                state.removeChild(bg)
            }
            var background = new openfl_display_Shape();
            background.set_name("background");
            if (borderThickness > 0) {
                background.get_graphics().lineStyle(borderThickness, borderColor, 1)
            }
            background.get_graphics().beginFill(fillColor);
            oaktree_utils_MCGraphics.drawRoundRectComplex(background.get_graphics(), 0, 0, w, h, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius);
            background.get_graphics().endFill();
            state.addChildAt(background, 0)
        },
        __class__: agario_views_controls_FlatButton
    });
    var agario_module_gift_views_component_GiftButton = function(_opts) {
        _opts.colorUp = 7002880;
        if (_opts.labelUp != null && isNaN(_opts.labelUp.fontSize)) {
            _opts.labelUp.fontSize = 12
        }
        if (_opts.labelUp != null && isNaN(_opts.labelUp.color)) {
            _opts.labelUp.color = 16777215
        }
        agario_views_controls_FlatButton.call(this, _opts)
    };
    $hxClasses["agario.module.gift.views.component.GiftButton"] = agario_module_gift_views_component_GiftButton;
    agario_module_gift_views_component_GiftButton.__name__ = ["agario", "module", "gift", "views", "component", "GiftButton"];
    agario_module_gift_views_component_GiftButton.__super__ = agario_views_controls_FlatButton;
    agario_module_gift_views_component_GiftButton.prototype = $extend(agario_views_controls_FlatButton.prototype, {
        __class__: agario_module_gift_views_component_GiftButton
    });
    var agario_module_gift_views_component_InboxElement = function(item, _coins, _opts) {
        this.buttonFontSize = 12;
        _opts.w = 350;
        _opts.h = 70;
        this.options = _opts;
        oaktree_ext_ui_Control.call(this, _opts);
        this.item = item;
        this.addEventListener("addedToStage", $bind(this, this.initialize))
    };
    $hxClasses["agario.module.gift.views.component.InboxElement"] = agario_module_gift_views_component_InboxElement;
    agario_module_gift_views_component_InboxElement.__name__ = ["agario", "module", "gift", "views", "component", "InboxElement"];
    agario_module_gift_views_component_InboxElement.__super__ = oaktree_ext_ui_Control;
    agario_module_gift_views_component_InboxElement.prototype = $extend(oaktree_ext_ui_Control.prototype, {
        item: null,
        isAccepted: null,
        options: null,
        photo: null,
        nameLabel: null,
        descriptionLabel: null,
        button: null,
        disabledButton: null,
        descriptionText: null,
        buttonFontSize: null,
        initialize: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.initialize));
            this.buildUI();
            this.initButton()
        },
        buildUI: function() {
            var _g = this;
            this.get_graphics().lineStyle(0.5, 3421236, 0.5);
            this.get_graphics().beginFill(0, 0);
            this.get_graphics().drawRoundRect(0, 0, 350, 70, 25, 25);
            this.get_graphics().endFill();
            this.nameLabel = new oaktree_ext_ui_Label({
                text: this.item.friend.name,
                fontSize: 14,
                color: 3421236,
                maxHeight: 60,
                multiline: true
            });
            this.nameLabel.set_width(165);
            this.nameLabel.set_height(40);
            this.nameLabel.set_selectable(false);
            this.nameLabel.set_multiline(true);
            this.nameLabel.set_wordWrap(true);
            this.addChild(this.nameLabel);
            this.nameLabel.set_x(70);
            this.nameLabel.set_y(10);
            if (this.item.gift != null) {
                this.descriptionText = oaktree_ext_localization_I18n.text("menu_gift_center_gift_description");
                this.descriptionText = this.descriptionText.split("%@")[0] + (function($this) {
                    var $r;
                    var this1 = $this.item.gift.get_amount();
                    $r = Std.string(_$UInt_UInt_$Impl_$.toFloat(this1));
                    return $r
                }(this)) + this.descriptionText.split("%@")[1]
            } else {
                this.descriptionText = oaktree_ext_localization_I18n.text("menu_gift_center_request_description")
            }
            this.descriptionLabel = new oaktree_ext_ui_Label({
                text: this.descriptionText,
                fontSize: 14,
                color: 3421236,
                width: 200,
                align: 3
            });
            this.descriptionLabel.set_height(this.descriptionLabel.get_textHeight() + 5);
            this.descriptionLabel.set_selectable(false);
            this.addChild(this.descriptionLabel);
            this.descriptionLabel.set_x(70);
            this.descriptionLabel.set_y(70 - this.descriptionLabel.get_height() - 5);
            if (this.item.friend.id == Core.models.giftingFakeUser.get("fictionalPlayerFbId")) {
                this.onLoadProfilePic(Core.get_assets().getTexture("Avatar", "main_shop").get_bitmapData())
            } else {
                openfl_display_BitmapData.loadFromFile(this.item.friend.picture).then(function(data) {
                    _g.onLoadProfilePic(data);
                    return lime_app_Future.withValue(data)
                })
            }
        },
        initButton: function() {
            if (this.item.type == agario_module_gift_model_data_GiftType.GIFT) {
                if (!this.item.friend.canReceiveGift) {
                    this.button = new agario_module_gift_views_component_GiftButton({
                        labelUp: {
                            text: oaktree_ext_localization_I18n.text("menu_gift_center_accept")
                        },
                        width: 100,
                        height: 30
                    })
                } else {
                    this.button = new agario_module_gift_views_component_GiftButton({
                        labelUp: {
                            text: oaktree_ext_localization_I18n.text("menu_gift_center_accept_return")
                        },
                        width: 100,
                        height: 30
                    })
                }
                this.disabledButton = new agario_views_controls_FlatButton({
                    labelUp: {
                        text: oaktree_ext_localization_I18n.text("menu_gift_center_accepted"),
                        fontSize: this.buttonFontSize,
                        color: 16777215
                    },
                    width: 100,
                    height: 30,
                    colorUp: 13290186,
                    colorDown: 13290186,
                    colorOver: 13290186
                })
            } else {
                if (this.item.type == agario_module_gift_model_data_GiftType.GIFT_REQUEST) {
                    this.button = new agario_module_gift_views_component_GiftButton({
                        labelUp: {
                            text: oaktree_ext_localization_I18n.text("menu_gift_center_send"),
                            fontSize: this.buttonFontSize
                        },
                        width: 100,
                        height: 30
                    });
                    this.disabledButton = new agario_views_controls_FlatButton({
                        labelUp: {
                            text: oaktree_ext_localization_I18n.text("menu_gift_center_sent"),
                            fontSize: this.buttonFontSize,
                            color: 16777215
                        },
                        width: 100,
                        height: 30,
                        colorUp: 13290186,
                        colorDown: 13290186,
                        colorOver: 13290186
                    })
                }
            }
            this.button.set_x(350 - this.button.get_width() - 10);
            this.button.set_y((70 - this.button.get_height()) * 0.5);
            this.addChild(this.button);
            this.button.set_visible(true);
            this.button.addEventListener("click", $bind(this, this.handleButton));
            this.disabledButton.set_x(350 - this.disabledButton.get_width() - 10);
            this.disabledButton.set_y((70 - this.disabledButton.get_height()) * 0.5);
            this.addChild(this.disabledButton);
            this.disabledButton.set_visible(false)
        },
        handleButton: function(e) {
            if (this.item.type == agario_module_gift_model_data_GiftType.GIFT) {
                var evt = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.accept_gifts");
                evt.friends = [this.item.friend];
                this.dispatchEvent(evt);
                if (this.item.friend.canReceiveGift) {
                    var evt2 = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.accept_gifts_request");
                    evt2.friends = [this.item.friend];
                    this.dispatchEvent(evt2)
                }
                var splashX = this.get_x() + this.button.get_x() + (this.button.get_width() - agario_module_gift_views_component_CoinParticle.COIN_WIDTH) * 0.5 + 50;
                var splashY = this.get_y() + this.button.get_y() + (this.button.get_height() - agario_module_gift_views_component_CoinParticle.COIN_HEIGHT) * 0.5 + 140;
                var evt1 = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.animate_splash", true);
                evt1.animationPosition = new openfl_geom_Point(splashX, splashY);
                this.dispatchEvent(evt1);
                this.disableButton()
            } else {
                if (this.item.type == agario_module_gift_model_data_GiftType.GIFT_REQUEST) {
                    var evt3 = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.accept_gifts_request");
                    evt3.friends = [this.item.friend];
                    this.dispatchEvent(evt3)
                }
            }
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onLoadProfilePic: function(data) {
            this.photo = new openfl_display_Bitmap(data);
            this.addChild(this.photo);
            this.photo.set_x(10);
            this.photo.set_y(10)
        },
        disableButton: function() {
            this.isAccepted = true;
            this.button.set_visible(false);
            this.disabledButton.set_visible(true)
        },
        disableCell: function() {
            haxe_Timer.delay($bind(this, this.cellAnimation), 1000)
        },
        cellAnimation: function() {
            motion_Actuate.tween(this, 1, {
                alpha: 0
            }).onComplete($bind(this, this.dispose))
        },
        dispose: function() {
            var evt = new agario_module_gift_events_GiftEvent("agario.module.gift.events.ViewEvent.post_dispose_inbox", true);
            this.dispatchEvent(evt);
            this.button.removeEventListener("click", $bind(this, this.handleButton))
        },
        __class__: agario_module_gift_views_component_InboxElement
    });
    var agario_module_gift_views_component_TextFieldHTMLClone = function() {
        openfl_text_TextField.call(this);
        this.addEventListener("addedToStage", $bind(this, this.clone_onAddedToStage));
        this.addEventListener("removedFromStage", $bind(this, this.clone_onRemovedFromStage))
    };
    $hxClasses["agario.module.gift.views.component.TextFieldHTMLClone"] = agario_module_gift_views_component_TextFieldHTMLClone;
    agario_module_gift_views_component_TextFieldHTMLClone.__name__ = ["agario", "module", "gift", "views", "component", "TextFieldHTMLClone"];
    agario_module_gift_views_component_TextFieldHTMLClone.__super__ = openfl_text_TextField;
    agario_module_gift_views_component_TextFieldHTMLClone.prototype = $extend(openfl_text_TextField.prototype, {
        htmlField: null,
        set_text: function(value) {
            if (this.get_htmlField().val() != value) {
                this.get_htmlField().val(value)
            }
            return openfl_text_TextField.prototype.set_text.call(this, value)
        },
        removeFocus: function() {
            this.stage.removeEventListener("keyUp", $bind(this, this.stage_onKeyPress));
            this.stage.removeEventListener("keyDown", $bind(this, this.stage_onKeyPress));
            this.removeEventListener("enterFrame", $bind(this, this.onEnterFrame))
        },
        get_htmlField: function() {
            var _g = this;
            if (this.htmlField == null) {
                var rnd = Math.random() * 1000;
                this.htmlField = $("<input id='auxfield" + rnd + "' style='position:absolute;'></input>");
                $("body").prepend(this.htmlField);
                this.htmlField.change(function(e) {
                    _g.stage_onKeyPress(null)
                })
            }
            return this.htmlField
        },
        clone_onClick: function(e) {
            this.dispatchEvent(new openfl_events_Event("change"));
            this.get_htmlField().prop("selectionStart", this.get_selectionBeginIndex());
            this.get_htmlField().prop("selectionEnd", this.get_selectionEndIndex());
            this.get_htmlField().focus();
            if (agario_module_gift_views_component_TextFieldHTMLClone.focusInstance == this) {
                return
            }
            if (agario_module_gift_views_component_TextFieldHTMLClone.focusInstance != null) {
                agario_module_gift_views_component_TextFieldHTMLClone.focusInstance.removeFocus()
            }
            agario_module_gift_views_component_TextFieldHTMLClone.focusInstance = this;
            this.stage.addEventListener("keyUp", $bind(this, this.stage_onKeyPress));
            this.stage.addEventListener("keyDown", $bind(this, this.stage_onKeyPress));
            this.addEventListener("enterFrame", $bind(this, this.onEnterFrame))
        },
        clone_onAddedToStage: function(e) {
            this.addEventListener("click", $bind(this, this.clone_onClick));
            this.addEventListener("mouseDown", $bind(this, this.clone_onClick));
            this.addEventListener("mouseUp", $bind(this, this.clone_onClick))
        },
        clone_onRemovedFromStage: function(e) {
            this.removeEventListener("click", $bind(this, this.clone_onClick));
            this.removeEventListener("mouseDown", $bind(this, this.clone_onClick));
            this.removeEventListener("mouseUp", $bind(this, this.clone_onClick));
            this.removeEventListener("addedToStage", $bind(this, this.clone_onAddedToStage));
            this.removeEventListener("removedFromStage", $bind(this, this.clone_onRemovedFromStage))
        },
        stage_onKeyPress: function(e) {
            this.get_htmlField().focus()
        },
        onEnterFrame: function(e) {
            if (this.get_htmlField() != null) {
                if (this.get_text() != this.get_htmlField().val()) {
                    this.set_text(this.get_htmlField().val());
                    this.setSelection(this.get_htmlField().prop("selectionStart"), this.get_htmlField().prop("selectionEnd"));
                    this.dispatchEvent(new openfl_events_Event("change"))
                }
                this.get_htmlField().focus()
            }
        },
        __class__: agario_module_gift_views_component_TextFieldHTMLClone,
        __properties__: $extend(openfl_text_TextField.prototype.__properties__, {
            get_htmlField: "get_htmlField"
        })
    });
    var agario_module_quests_controller_QuestsController = function() {
        Core.get_events().listen("shop_event::configComplete", $bind(this, this.onConfigComplete));
        Core.user.onUserChange.add($bind(this, this.onUserDataUpdate_handler))
    };
    $hxClasses["agario.module.quests.controller.QuestsController"] = agario_module_quests_controller_QuestsController;
    agario_module_quests_controller_QuestsController.__name__ = ["agario", "module", "quests", "controller", "QuestsController"];
    agario_module_quests_controller_QuestsController.prototype = {
        model: null,
        dialog: null,
        state: null,
        startTime: null,
        hasSeenQuest: null,
        getActiveQuest: function() {
            if (this.model.activeQuest != null && !this.model.activeQuestCompleted) {
                return this.model.activeQuest
            } else {
                return null
            }
        },
        getProgress: function(foodEaten, highestMass, timeAlive, virusesEaten, cellsEaten, topPosition) {
            if (this.model != null && this.model.activeQuest != null) {
                var _g = this.model.activeQuest.get_type();
                switch (_g) {
                    case "food_eaten":
                        return foodEaten;
                    case "normal_cells_eaten":
                        return cellsEaten;
                    case "viruses_eaten":
                        return virusesEaten;
                    case "top_position":
                        return topPosition;
                    case "time_total":
                        return timeAlive;
                    case "highest_mass":
                        return highestMass
                }
            }
            return 0
        },
        initialize: function() {
            if (Core.models.shopData.walletTimeVariablePrices == null || Core.models.shopData.walletTimeVariablePrices.length == 0) {
                return
            }
            this.model = new agario_module_quests_model_QuestsModel();
            this.model.get_activateQuestResponseSignal().add($bind(this, this.onActivateQuestResponse));
            this.model.get_wonQuestProductSignal().add($bind(this, this.onWonQuestProductResponse));
            this.model.get_softPurchaseResponseSignal().add($bind(this, this.onSoftPurchaseResponse));
            this.dialog = new agario_module_quests_view_QuestsDialog();
            this.dialog.addEventListener("agario.module.quests.events.QuestsEvent.on_play_quest", $bind(this, this.onPlayQuest));
            this.dialog.addEventListener("agario.module.quests.events.QuestsEvent.on_show_reward", $bind(this, this.onShowReward));
            this.dialog.addEventListener("agario.module.quests.events.QuestsEvent.on_collect_reward", $bind(this, this.onCollectReward));
            this.dialog.addEventListener("agario.module.quests.events.QuestsEvent.on_purchase_quest", $bind(this, this.onPurchaseQuest));
            this.dialog.addEventListener("agario.module.quests.events.QuestsEvent.update_request", $bind(this, this.onUpdateRequest));
            Core.get_events().listen("shop_event::openQuestsDialog", $bind(this, this.onOpenQuestsDialog));
            Core.get_events().listen("shop_event::on_quest_progress_label_update", $bind(this, this.onProgressRequest_Handler))
        },
        onConfigComplete: function() {
            Core.get_events().unlisten("shop_event::configComplete", $bind(this, this.onConfigComplete));
            this.initialize()
        },
        onUserDataUpdate_handler: function() {
            if (Core.user == null || Core.user.userInfo == null) {
                lime_utils_Log.debug("QuestsController:::No user info!", {
                    fileName: "QuestsController.hx",
                    lineNumber: 113,
                    className: "agario.module.quests.controller.QuestsController",
                    methodName: "onUserDataUpdate_handler"
                });
                this.showPanel();
                this.setQuestsWarning(false, false);
                return
            }
            if (Core.user.userInfo.isNewUser) {
                lime_utils_Log.debug("QuestsController:::New user!", {
                    fileName: "QuestsController.hx",
                    lineNumber: 124,
                    className: "agario.module.quests.controller.QuestsController",
                    methodName: "onUserDataUpdate_handler"
                });
                this.hidePanel();
                return
            }
            this.showPanel();
            this.model.set_activeQuest(Core.user.userInfo.quest);
            this.model.timedEvent = Core.user.userInfo.getTimedEvent("dailyQuest");
            this.startTime = new Date().getTime();
            this.setState(agario_module_quests_model_data_QuestState.INIT)
        },
        onWonQuestProductResponse: function(product) {
            if (product.get_productId() == "coin") {
                this.updateCoinsAmount(product.get_finalAmount())
            }
            this.state = agario_module_quests_model_data_QuestState.COMPLETE;
            this.onOpenQuestsDialog(null);
            this.updateRewardImage(product.get_productId(), product.get_deltaAmount())
        },
        onUpdateRequest: function(e) {
            if (this.state == agario_module_quests_model_data_QuestState.READY) {
                var time = this.getActiveQuestSeconds();
                if (time <= 0) {
                    lime_utils_Log.debug("QuestsController: Time out!", {
                        fileName: "QuestsController.hx",
                        lineNumber: 160,
                        className: "agario.module.quests.controller.QuestsController",
                        methodName: "onUpdateRequest"
                    });
                    this.state = agario_module_quests_model_data_QuestState.LOADING;
                    this.dialog.close()
                } else {
                    this.setCurrentQuestText();
                    this.updateTimeCounter(time)
                }
            } else {
                if (this.state == agario_module_quests_model_data_QuestState.WAITING) {
                    var time1 = this.getTimedEventSeconds();
                    if (time1 <= 0) {
                        lime_utils_Log.debug("QuestsController: Time out (2)! " + time1, {
                            fileName: "QuestsController.hx",
                            lineNumber: 176,
                            className: "agario.module.quests.controller.QuestsController",
                            methodName: "onUpdateRequest"
                        });
                        this.state = agario_module_quests_model_data_QuestState.LOADING;
                        this.dialog.close()
                    } else {
                        this.updateWaitView(time1)
                    }
                }
            }
        },
        getTimedEventSeconds: function() {
            if (this.model.timedEvent != null) {
                var now = new Date().getTime();
                return this.model.timedEvent.nextAvailableInSeconds - Math.round((now - this.startTime) / 1000)
            } else {
                return this.getActiveQuestSeconds()
            }
        },
        getActiveQuestSeconds: function() {
            if (this.model.activeQuest != null) {
                var now = new Date().getTime();
                var a = this.model.activeQuest.get_expiresInSeconds();
                var b = Math.round((now - this.startTime) / 1000);
                return a - b
            } else {
                return -1
            }
        },
        onOpenQuestsDialog: function(e) {
            var showWarning;
            this.setState(this.state);
            if (this.model.activeQuest == null) {
                showWarning = false
            } else {
                this.hasSeenQuest = true;
                showWarning = !this.model.activeQuestCompleted
            }
            if (this.dialog.parent != null) {
                this.dialog.parent.removeChild(this.dialog)
            }
            var canClose = e != null;
            Core.services.gameui.showContainer();
            Core.views.openView(this.dialog, {
                priority: 1,
                animate: true,
                allowClickClose: canClose,
                active: false
            })
        },
        setState: function(newstate) {
            if (newstate == null) {
                return
            }
            this.state = newstate;
            lime_utils_Log.debug("Quest state: " + Std.string(this.state), {
                fileName: "QuestsController.hx",
                lineNumber: 247,
                className: "agario.module.quests.controller.QuestsController",
                methodName: "setState"
            });
            var _g = this.state;
            switch (_g[1]) {
                case 0:
                    if (this.model.activeQuest != null) {
                        if (this.model.activeQuestCompleted) {
                            this.setState(agario_module_quests_model_data_QuestState.WAITING)
                        } else {
                            this.setState(agario_module_quests_model_data_QuestState.READY)
                        }
                    } else {
                        var activation = Core.user.getWalletItemById("quest_activation_24h");
                        if (this.model.timedEvent == null || activation != null && activation.get_balance() > 0) {
                            this.setState(agario_module_quests_model_data_QuestState.LOADING)
                        } else {
                            this.setState(agario_module_quests_model_data_QuestState.WAITING)
                        }
                    }
                    return;
                case 1:
                    this.model.set_activeQuest(null);
                    this.dialog.showLoadingView();
                    this.model.activateQuestRequest();
                    break;
                case 2:
                    this.dialog.showReadyView();
                    this.setQuestsWarning(true, !this.hasSeenQuest);
                    break;
                case 3:
                    this.model.activeQuestCompleted = true;
                    this.dialog.showCompletedView();
                    this.setQuestsWarning(false, false);
                    break;
                case 4:
                    this.dialog.showRewardView();
                    break;
                case 5:
                    this.model.timedEvent = Core.user.userInfo.getTimedEvent("dailyQuest");
                    this.dialog.showWaitView();
                    this.setQuestsWarning(false, false, this.getTimedEventSeconds());
                    break
            }
        },
        onPlayQuest: function(e) {
            if (this.model.activeQuest == null) {
                this.model.activateQuestRequest()
            } else {
                this.dialog.close();
                Core.get_events().fire(agario_AgarioEvents.START_GAME, {
                    mode: ""
                })
            }
        },
        onActivateQuestResponse: function(msg) {
            this.model.set_activeQuest(msg.get_userQuest());
            this.model.activeQuestCompleted = false;
            this.setCurrentQuestText();
            this.hasSeenQuest = false;
            this.startTime = new Date().getTime();
            this.setState(agario_module_quests_model_data_QuestState.READY);
            lime_utils_Log.debug("Quest Activated:" + this.model.activeQuest.get_productId(), {
                fileName: "QuestsController.hx",
                lineNumber: 340,
                className: "agario.module.quests.controller.QuestsController",
                methodName: "onActivateQuestResponse"
            })
        },
        onShowReward: function(e) {
            this.setState(agario_module_quests_model_data_QuestState.REWARD)
        },
        onCollectReward: function(e) {
            this.setState(agario_module_quests_model_data_QuestState.WAITING)
        },
        onPurchaseQuest: function(e) {
            this.model.waitForPurchase();
            Core.services.shop.S_notEnoughCoins.addOnce($bind(this, this.notEnoughCoins));
            Core.get_events().dispatchEventWith("ShopEvent::BUY", this.model.bundleId)
        },
        notEnoughCoins: function() {
            Core.services.gameui.showContainer();
            var dialog = new agario_views_ShopDialog();
            dialog.addEventListener("addedToStage", $bind(this, this.onAddedToStage_ShopDialog));
            Core.views.openView(dialog, {
                priority: 2,
                animate: false,
                allowClickClose: true
            })
        },
        onAddedToStage_ShopDialog: function(e) {
            var dialog = e.currentTarget;
            dialog.notEnoughCoins()
        },
        onSoftPurchaseResponse: function(response) {
            Core.services.shop.S_notEnoughCoins.remove($bind(this, this.notEnoughCoins));
            if (response.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = response.get_productUpdates();
                while (_g < _g1.length) {
                    var update = _g1[_g];
                    ++_g;
                    if (update.get_productField().get_productId() == "coin") {
                        this.updateCoinsAmount(update.get_productField().get_finalAmount())
                    }
                }
            }
            Core.get_events().dispatchEventWith("ShopEvent::softPurchaseComplete", "dailyQuest");
            this.setState(agario_module_quests_model_data_QuestState.LOADING)
        },
        setCurrentQuestText: function() {
            if (this.model.activeQuest != null) {
                var quest = Core.models.getVisualQuestByType(this.model.activeQuest.get_type());
                var desc = quest.getDescriptionByGoal(this.model.activeQuest.get_goal());
                var goal = this.model.activeQuest.get_goal();
                if (this.model.activeQuest.get_type() == "time_total") {
                    goal = goal / 60 | 0
                }
                this.dialog.updateQuestText(oaktree_ext_localization_I18n.text(desc), goal)
            }
        },
        updateWaitView: function(timeForNextQuest) {
            var price = this.model.getPriceForNextQuest(timeForNextQuest);
            this.dialog.setPrice(price);
            this.updateTimeCounter(timeForNextQuest);
            if (timeForNextQuest <= 0) {
                this.dialog.close()
            }
        },
        updateRewardImage: function(productId, amount) {
            var product = Core.models.getVisualProduct(productId);
            var wallet = Core.models.walletProductsModel.getProductById(productId);
            var skin = null;
            if (wallet.type == "skin") {
                skin = Core.models.shopSkinsModel.getItemById(productId)
            }
            var description = oaktree_ext_localization_I18n.text(product.description);
            if (description == "dna_product_description") {
                return
            }
            description = StringTools.replace(description, "%i", "" + amount);
            this.dialog.updateReward(description, product.visualSource, skin)
        },
        updateTimeCounter: function(timeForNextQuest) {
            var timeStr = this.getTimeString(timeForNextQuest * 1000);
            this.dialog.updateTimer(timeStr)
        },
        getTimeString: function(timeLeft) {
            return agario_utils_TimeUtils.getStringFromTimestamp(timeLeft)
        },
        onProgressRequest_Handler: function(e) {
            if (this.model.activeQuest != null && !this.model.activeQuestCompleted) {
                var quest = Core.models.getVisualQuestByType(this.model.activeQuest.get_type());
                Core.setProgressLabel(quest.getProgressByGoal(this.model.activeQuest.get_goal(), e.data))
            } else {
                Core.setProgressLabel("")
            }
        },
        showPanel: function() {
            var panel = js.JQuery("#dailyquests-panel");
            panel.show()
        },
        hidePanel: function() {
            var panel = js.JQuery("#dailyquests-panel");
            panel.hide()
        },
        setQuestsWarning: function(show, animate, time) {
            if (time == null) {
                time = 0
            }
            Core.services.gameui.setQuestsWarning(show, animate, time)
        },
        updateCoinsAmount: function(amount) {
            Core.user.set_coins(amount);
            Core.get_events().dispatchEventWith(agario_module_shop_events_WalletEvent.WALLET_UPDATED);
            Core.services.gameui.setUserCoins(amount)
        },
        __class__: agario_module_quests_controller_QuestsController
    };
    var agario_module_quests_events_QuestsEvent = function(type, bubbles, cancelable) {
        if (cancelable == null) {
            cancelable = false
        }
        if (bubbles == null) {
            bubbles = true
        }
        openfl_events_Event.call(this, type, bubbles, cancelable)
    };
    $hxClasses["agario.module.quests.events.QuestsEvent"] = agario_module_quests_events_QuestsEvent;
    agario_module_quests_events_QuestsEvent.__name__ = ["agario", "module", "quests", "events", "QuestsEvent"];
    agario_module_quests_events_QuestsEvent.__super__ = openfl_events_Event;
    agario_module_quests_events_QuestsEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: agario_module_quests_events_QuestsEvent
    });
    var agario_module_quests_model_QuestsModel = function() {
        var _g = this;
        this.server = new agario_module_quests_model_proxies_QuestsServerProxy();
        this.shopService = oaktree_ext_services_ServiceManager.getService(agario_services_ShopService);
        var bonusId = "dailyQuest";
        var bonus = Core.models.getBonusById(bonusId);
        this.bundleId = bonus.bundleId;
        var bundle = Core.models.walletProductBundlesModel.getBundleByBundleId(this.bundleId);
        this.productId = bundle.productId;
        var list = Core.models.shopData.walletTimeVariablePrices.filter(function(item) {
            return item.purchaseIdForTimedEvent == _g.bundleId
        });
        if (list.length > 0) {
            this.prices = list[0]
        }
    };
    $hxClasses["agario.module.quests.model.QuestsModel"] = agario_module_quests_model_QuestsModel;
    agario_module_quests_model_QuestsModel.__name__ = ["agario", "module", "quests", "model", "QuestsModel"];
    agario_module_quests_model_QuestsModel.prototype = {
        activateQuestResponseSignal: null,
        wonQuestProductSignal: null,
        softPurchaseResponseSignal: null,
        server: null,
        shopService: null,
        activeQuest: null,
        activeQuestCompleted: null,
        prices: null,
        productId: null,
        bundleId: null,
        timedEvent: null,
        get_activateQuestResponseSignal: function() {
            return this.server.activateQuestResponseSignal
        },
        get_wonQuestProductSignal: function() {
            return this.server.wonQuestProductSignal
        },
        get_softPurchaseResponseSignal: function() {
            return this.server.softPurchaseResponseSignal
        },
        set_activeQuest: function(value) {
            this.activeQuest = value;
            return value
        },
        activateQuestRequest: function() {
            lime_utils_Log.debug("Quest: activate timed event!", {
                fileName: "QuestsModel.hx",
                lineNumber: 86,
                className: "agario.module.quests.model.QuestsModel",
                methodName: "activateQuestRequest"
            });
            this.server.activateTimedEventResponseSignal.addOnce($bind(this, this.onActivateTimedEventResponse));
            this.shopService.activateTimedEvent("dailyQuest")
        },
        waitForPurchase: function() {
            this.server.waitForPurchase()
        },
        getPriceForNextQuest: function(secondsLeft) {
            var price = Core.models.getSoftPurchaseById(this.bundleId).currencyAmount;
            var totaltime = 86400 - secondsLeft;
            var parts = Math.floor(totaltime / (this.prices.everyXMins * 60));
            var discount = parts * this.prices.decreaseCurrencyAmountBy;
            return price - discount
        },
        onActivateTimedEventResponse: function(message) {
            lime_utils_Log.debug("Quest: Request quest!", {
                fileName: "QuestsModel.hx",
                lineNumber: 111,
                className: "agario.module.quests.model.QuestsModel",
                methodName: "onActivateTimedEventResponse"
            });
            this.server.activateQuestRequest(this.productId)
        },
        onActivateQuestResponse: function(msg) {},
        __class__: agario_module_quests_model_QuestsModel,
        __properties__: {
            set_activeQuest: "set_activeQuest",
            get_softPurchaseResponseSignal: "get_softPurchaseResponseSignal",
            get_wonQuestProductSignal: "get_wonQuestProductSignal",
            get_activateQuestResponseSignal: "get_activateQuestResponseSignal"
        }
    };
    var agario_module_quests_model_data_QuestState = $hxClasses["agario.module.quests.model.data.QuestState"] = {
        __ename__: ["agario", "module", "quests", "model", "data", "QuestState"],
        __constructs__: ["INIT", "LOADING", "READY", "COMPLETE", "REWARD", "WAITING"]
    };
    agario_module_quests_model_data_QuestState.INIT = ["INIT", 0];
    agario_module_quests_model_data_QuestState.INIT.toString = $estr;
    agario_module_quests_model_data_QuestState.INIT.__enum__ = agario_module_quests_model_data_QuestState;
    agario_module_quests_model_data_QuestState.LOADING = ["LOADING", 1];
    agario_module_quests_model_data_QuestState.LOADING.toString = $estr;
    agario_module_quests_model_data_QuestState.LOADING.__enum__ = agario_module_quests_model_data_QuestState;
    agario_module_quests_model_data_QuestState.READY = ["READY", 2];
    agario_module_quests_model_data_QuestState.READY.toString = $estr;
    agario_module_quests_model_data_QuestState.READY.__enum__ = agario_module_quests_model_data_QuestState;
    agario_module_quests_model_data_QuestState.COMPLETE = ["COMPLETE", 3];
    agario_module_quests_model_data_QuestState.COMPLETE.toString = $estr;
    agario_module_quests_model_data_QuestState.COMPLETE.__enum__ = agario_module_quests_model_data_QuestState;
    agario_module_quests_model_data_QuestState.REWARD = ["REWARD", 4];
    agario_module_quests_model_data_QuestState.REWARD.toString = $estr;
    agario_module_quests_model_data_QuestState.REWARD.__enum__ = agario_module_quests_model_data_QuestState;
    agario_module_quests_model_data_QuestState.WAITING = ["WAITING", 5];
    agario_module_quests_model_data_QuestState.WAITING.toString = $estr;
    agario_module_quests_model_data_QuestState.WAITING.__enum__ = agario_module_quests_model_data_QuestState;
    var agario_module_quests_model_proxies_QuestsServerProxy = function() {
        this.server = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
        this.server.register(111, $bind(this, this.onActivateTimedEventResponse));
        this.server.register(115, $bind(this, this.onActivateQuestResponse));
        this.server.register(62, $bind(this, this.onGameOver));
        this.activateQuestResponseSignal = new msignal_Signal1();
        this.activateTimedEventResponseSignal = new msignal_Signal1();
        this.wonQuestProductSignal = new msignal_Signal1();
        this.softPurchaseResponseSignal = new msignal_Signal1()
    };
    $hxClasses["agario.module.quests.model.proxies.QuestsServerProxy"] = agario_module_quests_model_proxies_QuestsServerProxy;
    agario_module_quests_model_proxies_QuestsServerProxy.__name__ = ["agario", "module", "quests", "model", "proxies", "QuestsServerProxy"];
    agario_module_quests_model_proxies_QuestsServerProxy.prototype = {
        activateQuestResponseSignal: null,
        activateTimedEventResponseSignal: null,
        wonQuestProductSignal: null,
        softPurchaseResponseSignal: null,
        server: null,
        activateQuestRequest: function(productId) {
            var msg = new agario_proto_Activate_$quest_$request();
            msg.set_productId(productId);
            this.server.sendMessage(114, msg)
        },
        waitForPurchase: function() {
            this.server.register(71, $bind(this, this.onSoftPurchaseResponse))
        },
        onActivateQuestResponse: function(type, msg) {
            this.activateQuestResponseSignal.dispatch(js_Boot.__cast(msg, agario_proto_Activate_$quest_$response))
        },
        onGameOver: function(type, msg) {
            var gameover = msg;
            var _g = 0;
            var _g1 = gameover.get_userDataUpdates();
            while (_g < _g1.length) {
                var product = _g1[_g];
                ++_g;
                if (product.get_type() == 20 && product.get_productField().get_productId() != "dna") {
                    if (product.get_productField().get_origin() == 12) {
                        this.wonQuestProductSignal.dispatch(product.get_productField());
                        return
                    }
                }
            }
        },
        onActivateTimedEventResponse: function(type, msg) {
            if (type != 111) {
                return
            }
            var message = msg;
            this.activateTimedEventResponseSignal.dispatch(message)
        },
        onSoftPurchaseResponse: function(type, msg) {
            this.server.unregister(71, $bind(this, this.onSoftPurchaseResponse));
            var message = msg;
            this.softPurchaseResponseSignal.dispatch(message)
        },
        __class__: agario_module_quests_model_proxies_QuestsServerProxy
    };
    var oaktree_core_VO = function(obj) {
        if (obj != null) {
            this.setValues(obj)
        }
    };
    $hxClasses["oaktree.core.VO"] = oaktree_core_VO;
    oaktree_core_VO.__name__ = ["oaktree", "core", "VO"];
    oaktree_core_VO.addFieldDeclaration = function(className, fieldName, fieldType) {
        if (!oaktree_core_VO.classCache.exists(className)) {
            var value = new haxe_ds_StringMap();
            oaktree_core_VO.classCache.set(className, value)
        }
        var this1 = oaktree_core_VO.classCache.get(className);
        this1.set(fieldName, fieldType)
    };
    oaktree_core_VO.classHasField = function(className, fieldName) {
        if (oaktree_core_VO.classCache.exists(className)) {
            var tmpList = oaktree_core_VO.classCache.get(className);
            if (__map_reserved[fieldName] != null ? tmpList.existsReserved(fieldName) : tmpList.h.hasOwnProperty(fieldName)) {
                return true
            }
        }
        return false
    };
    oaktree_core_VO.prototype = {
        handleSpecialTypes: function(key, obj) {
            return false
        },
        hasField: function(fieldToFind) {
            var fields = Type.getInstanceFields(js_Boot.getClass(this));
            var _g = 0;
            while (_g < fields.length) {
                var field = fields[_g];
                ++_g;
                if (field == fieldToFind) {
                    return true
                }
            }
            return false
        },
        setValues: function(obj) {
            var classObj = js_Boot.getClass(this);
            var className = Type.getClassName(classObj);
            this.loadFieldInfo(true, className, classObj);
            var metafields = haxe_rtti_Meta.getFields(classObj);
            var fieldNameMapping = new haxe_ds_StringMap();
            var _g = 0;
            var _g1 = Reflect.fields(metafields);
            while (_g < _g1.length) {
                var fieldName = _g1[_g];
                ++_g;
                var mfield = Reflect.field(metafields, fieldName);
                if (Object.prototype.hasOwnProperty.call(mfield, "name")) {
                    var key = Reflect.field(mfield, "name")[0];
                    if (__map_reserved[key] != null) {
                        fieldNameMapping.setReserved(key, fieldName)
                    } else {
                        fieldNameMapping.h[key] = fieldName
                    }
                }
            }
            var _g2 = 0;
            var _g11 = Reflect.fields(obj);
            while (_g2 < _g11.length) {
                var field = _g11[_g2];
                ++_g2;
                var targetField = field;
                if (__map_reserved[field] != null ? fieldNameMapping.existsReserved(field) : fieldNameMapping.h.hasOwnProperty(field)) {
                    targetField = __map_reserved[field] != null ? fieldNameMapping.getReserved(field) : fieldNameMapping.h[field]
                }
                if (this.handleSpecialTypes(field, obj)) {} else {
                    if (oaktree_core_VO.classHasField(className, targetField)) {
                        var voType = this.getDeclaredTypeOfField(className, targetField);
                        var fieldObject = this._parse(voType, Reflect.getProperty(obj, field));
                        if (fieldObject == "YES") {
                            fieldObject = true
                        } else {
                            if (fieldObject == "NO") {
                                fieldObject = false
                            }
                        }
                        Reflect.setProperty(this, targetField, fieldObject)
                    } else {}
                }
            }
        },
        _parse: function(type, v) {
            switch (type[1]) {
                case 0:
                    var name = type[2];
                    return v;
                case 3:
                    var valueType = type[2];
                    var vClass = this.resolveVOType(valueType);
                    return this._parseArray(vClass, valueType, v);
                case 1:
                    var name1 = type[2];
                    return this._parseClass(name1, v);
                default:
                    return null
            }
            return null
        },
        _parseClass: function(name, v) {
            var _g = 0;
            var _g1 = Reflect.fields(v);
            while (_g < _g1.length) {
                var n = _g1[_g];
                ++_g;
                var d = Reflect.getProperty(v, n);
                if (d != null) {
                    var isDefaultType = typeof(d) == "string" || ((d | 0) === d) || typeof(d) == "number";
                    if (!isDefaultType) {
                        if (d._value != null) {
                            Reflect.setProperty(v, n, d._value)
                        } else {
                            if (d._key != null) {
                                Reflect.setProperty(v, n, d._key)
                            }
                        }
                    }
                }
            }
            return Type.createInstance(Type.resolveClass(name), [v])
        },
        resolveVOType: function(type) {
            switch (type[1]) {
                case 0:
                    var name = type[2];
                    var resuClass = Type.resolveClass(name);
                    return resuClass;
                case 1:
                    var name1 = type[2];
                    var resuClass1 = Type.resolveClass(name1);
                    return resuClass1;
                default:
                    return null
            }
            return null
        },
        _parseArray: function(valueClass, valueType, v) {
            var result = [];
            var arr = v;
            var _g1 = 0;
            var _g = arr.length;
            while (_g1 < _g) {
                var ii = _g1++;
                result.push(this._parse(valueType, arr[ii]))
            }
            return result
        },
        parseRTTIFields: function(type) {
            switch (type[1]) {
                case 7:
                    var params = type[3];
                    var name = type[2];
                    return this.parseFieldType(name, params);
                case 2:
                    var params1 = type[3];
                    var name1 = type[2];
                    return this.parseFieldType(name1, params1);
                default:
            }
            return oaktree_core_VOTypes.VT_Unknown
        },
        parseFieldType: function(name, params) {
            switch (name) {
                case "String":
                case "Int":
                case "Float":
                case "Bool":
                case "Date":
                    return oaktree_core_VOTypes.VT_Native(name);
                case "Array":
                    var firstField = this.parseRTTIFields(params.pop());
                    if (firstField != null) {
                        return oaktree_core_VOTypes.VT_Array(firstField)
                    }
                    break;
                default:
            }
            return oaktree_core_VOTypes.VT_Class(name)
        },
        loadFieldInfo: function(rootCall, className, classObj) {
            if (rootCall == null) {
                rootCall = false
            }
            if (rootCall && oaktree_core_VO.classCache.exists(className)) {
                return
            }
            var rtti = haxe_rtti_Rtti.getRtti(classObj);
            var _g_head = rtti.fields.h;
            var _g_val = null;
            while (_g_head != null) {
                var field;
                field = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                if (field.isPublic) {
                    var _g = field.type;
                    switch (_g[1]) {
                        case 7:
                            var params = _g[3];
                            var name = _g[2];
                            oaktree_core_VO.addFieldDeclaration(className, field.name, this.parseFieldType(name, params));
                            break;
                        case 2:
                            var params1 = _g[3];
                            var name1 = _g[2];
                            oaktree_core_VO.addFieldDeclaration(className, field.name, this.parseFieldType(name1, params1));
                            break;
                        default:
                    }
                }
            }
            if (rtti.superClass != null) {
                this.loadFieldInfo(false, className, Type.resolveClass(rtti.superClass.path))
            }
        },
        getDeclaredTypeOfField: function(className, field) {
            if (oaktree_core_VO.classCache.exists(className)) {
                var tmpList = oaktree_core_VO.classCache.get(className);
                if (__map_reserved[field] != null ? tmpList.existsReserved(field) : tmpList.h.hasOwnProperty(field)) {
                    return __map_reserved[field] != null ? tmpList.getReserved(field) : tmpList.h[field]
                }
            }
            return oaktree_core_VOTypes.VT_Unknown
        },
        get_DEBUG: function() {
            return true
        },
        __class__: oaktree_core_VO,
        __properties__: {
            get_DEBUG: "get_DEBUG"
        }
    };
    var agario_module_quests_model_vo_VisualQuestVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.quests.model.vo.VisualQuestVO"] = agario_module_quests_model_vo_VisualQuestVO;
    agario_module_quests_model_vo_VisualQuestVO.__name__ = ["agario", "module", "quests", "model", "vo", "VisualQuestVO"];
    agario_module_quests_model_vo_VisualQuestVO.__super__ = oaktree_core_VO;
    agario_module_quests_model_vo_VisualQuestVO.prototype = $extend(oaktree_core_VO.prototype, {
        originId: null,
        productIdToQuantify: null,
        questType: null,
        questTypeDescriptionSingularTag: null,
        questTypeDescriptionPluralTag: null,
        questActiveImage: null,
        serverConversionDivisor: null,
        questProgressDescriptionTag: null,
        getProgressByGoal: function(goal, progress) {
            if (this.questType == "time_total") {
                progress = progress / 1000 | 0
            }
            if (this.questType != "top_position" && progress >= goal) {
                progress = goal
            }
            var label = oaktree_ext_localization_I18n.text(this.questProgressDescriptionTag);
            if (this.questType == "time_total") {
                var seconds = goal - progress;
                var minutes = seconds / 60 | 0;
                seconds -= minutes * 60;
                label = label.split("%@")[0] + minutes + "m " + seconds + "s"
            } else {
                if (this.questType == "top_position") {
                    label = label.split("%i")[0] + goal
                } else {
                    label = label.split("%i")[0] + progress + label.split("%i")[1] + goal
                }
            }
            return label
        },
        getDescriptionByGoal: function(goal) {
            var string;
            if (goal <= 1) {
                string = this.questTypeDescriptionSingularTag
            } else {
                string = this.questTypeDescriptionPluralTag
            }
            return StringTools.replace(string, "%i", goal == null ? "null" : "" + goal)
        },
        __class__: agario_module_quests_model_vo_VisualQuestVO
    });
    var agario_module_quests_view_QuestsDialog = function() {
        oaktree_ext_ui_views_GenericDialog.call(this, "quests_dialog");
        this.maxWidth = 450;
        this.maxHeight = 500;
        this.createViews()
    };
    $hxClasses["agario.module.quests.view.QuestsDialog"] = agario_module_quests_view_QuestsDialog;
    agario_module_quests_view_QuestsDialog.__name__ = ["agario", "module", "quests", "view", "QuestsDialog"];
    agario_module_quests_view_QuestsDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_quests_view_QuestsDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        activeView: null,
        readyView: null,
        completedView: null,
        rewardView: null,
        waitView: null,
        loadingView: null,
        enable: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
            this.closeButton.set_enabled(true)
        },
        disable: function() {
            this.closeOnEscape = true;
            oaktree_ext_ui_views_GenericDialog.prototype.disable.call(this)
        },
        showLoadingView: function() {
            this.showView(this.loadingView, false);
            this.canClose(true)
        },
        showReadyView: function() {
            this.showView(this.readyView, false);
            this.canClose(true)
        },
        showCompletedView: function() {
            this.showView(this.completedView, true);
            this.canClose(false)
        },
        showRewardView: function() {
            this.showView(this.rewardView, false);
            this.canClose(false)
        },
        showWaitView: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.showView(this.waitView, animate);
            this.canClose(true)
        },
        setAllViewsAlpha: function(value) {
            this.readyView.set_alpha(value);
            this.completedView.set_alpha(value);
            this.rewardView.set_alpha(value);
            this.waitView.set_alpha(value)
        },
        updateTimer: function(timeLeft) {
            this.readyView.updateTimer(timeLeft);
            this.waitView.updateTimer(timeLeft)
        },
        updateQuestText: function(questText, goal) {
            this.readyView.updateQuestText(questText, goal);
            this.completedView.updateQuestText(questText, goal)
        },
        updateReward: function(newText, imageSource, skin) {
            this.rewardView.updateReward(newText, imageSource, skin)
        },
        setPrice: function(price) {
            this.waitView.setPrice(price)
        },
        dispose: function() {},
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.addViews();
            Core.get_events().addEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            Core.get_events().addEventListener("userLoggedOut", $bind(this, this.onConnectionLost))
        },
        createViews: function() {
            this.loadingView = new agario_module_quests_view_QuestsViewLoading();
            this.loadingView.maxHeight = 250;
            this.loadingView.maxWidth = this.maxWidth;
            this.readyView = new agario_module_quests_view_QuestsViewReady();
            this.readyView.maxHeight = this.maxHeight;
            this.readyView.maxWidth = this.maxWidth;
            this.completedView = new agario_module_quests_view_QuestsViewCompleted();
            this.completedView.maxHeight = this.maxHeight;
            this.completedView.maxWidth = this.maxWidth;
            this.rewardView = new agario_module_quests_view_QuestsViewReward();
            this.rewardView.maxHeight = this.maxHeight;
            this.rewardView.maxWidth = this.maxWidth;
            this.waitView = new agario_module_quests_view_QuestsViewWait();
            this.waitView.maxHeight = this.maxHeight;
            this.waitView.maxWidth = this.maxWidth
        },
        addViews: function() {
            this.addChild(this.loadingView);
            this.addChild(this.readyView);
            this.addChild(this.completedView);
            this.addChild(this.rewardView);
            this.addChild(this.waitView)
        },
        showView: function(view, animate) {
            if (this.activeView != null) {
                this.activeView.close()
            }
            this.activeView = view;
            view.open(animate)
        },
        canClose: function(value) {
            this.closeOnEscape = value;
            this.closeButton.set_visible(value);
            this.allowDisableClose = value
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            if (this.closeButton.get_visible()) {
                oaktree_ext_ui_views_GenericDialog.prototype.close.call(this, animate)
            }
        },
        onAddedToStage: function(e) {
            oaktree_ext_ui_views_GenericDialog.prototype.onAddedToStage.call(this, e);
            this.dispatchEvent(new openfl_events_Event("open"))
        },
        onConnectionLost: function(e) {
            Core.views.closeAllViews(agario_views_ShopDialog);
            this.disable();
            var disconnectDialog = new agario_module_shop_view_ConnectionLostDialog();
            Core.views.openView(disconnectDialog, {
                priority: 2,
                animate: true,
                allowClickClose: true,
                callerView: this
            });
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            Core.get_events().removeEventListener("userLoggedOut", $bind(this, this.onConnectionLost));
            disconnectDialog.addEventListener("close", $bind(this, this.closeDisconnect))
        },
        closeDisconnect: function(e) {
            Core.views.closeTopView()
        },
        __class__: agario_module_quests_view_QuestsDialog
    });
    var agario_module_quests_view_QuestsViewCompleted = function() {
        this.hasBuiltUI = false;
        this.questText = "";
        oaktree_ext_ui_View.call(this);
        this.particleSystem1 = [];
        this.particleSystem1.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_1.plist"));
        this.particleSystem1.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_1a.plist"));
        this.particleSystem1.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_1b.plist"));
        this.particleSystem1.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_1c.plist"));
        this.particleSystem2 = [];
        this.particleSystem2.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_2.plist"));
        this.particleSystem2.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_2a.plist"));
        this.particleSystem2.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_2b.plist"));
        this.particleSystem2.push(org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Sparkles_2c.plist"));
        this.set_visible(false);
        this.shakeTimer = new haxe_Timer(3000)
    };
    $hxClasses["agario.module.quests.view.QuestsViewCompleted"] = agario_module_quests_view_QuestsViewCompleted;
    agario_module_quests_view_QuestsViewCompleted.__name__ = ["agario", "module", "quests", "view", "QuestsViewCompleted"];
    agario_module_quests_view_QuestsViewCompleted.__super__ = oaktree_ext_ui_View;
    agario_module_quests_view_QuestsViewCompleted.prototype = $extend(oaktree_ext_ui_View.prototype, {
        titleLabel: null,
        completedLabel: null,
        questLabel: null,
        openButton: null,
        chest: null,
        rectangle: null,
        questText: null,
        renderer: null,
        particleSystem1: null,
        particleSystem2: null,
        shakeTimer: null,
        hasBuiltUI: null,
        updateQuestText: function(newText, goal) {
            newText = StringTools.replace(newText, "%i", "" + goal);
            newText = StringTools.replace(newText, "%@", oaktree_ext_localization_I18n.text("daily_quests_ffa_match"));
            if (this.questLabel != null) {
                this.questLabel.set_text(newText);
                this.positionUI()
            }
        },
        open: function(animate) {
            if (animate == null) {
                animate = true
            }
            this.set_visible(true);
            this.showChest()
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(false);
            this.shakeTimer.stop()
        },
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.buildUI();
            this.positionUI();
            this.openButton.addEventListener("click", $bind(this, this.onCollectReward))
        },
        buildUI: function() {
            if (this.hasBuiltUI) {
                return
            }
            this.hasBuiltUI = true;
            this.rectangle = new openfl_display_Sprite();
            this.rectangle.get_graphics().beginFill(16119285, 1);
            this.rectangle.get_graphics().drawRect(25, 120, 400, 280);
            this.rectangle.get_graphics().endFill();
            this.addChild(this.rectangle);
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_title"),
                fontSize: 32,
                color: 3421236,
                width: 300,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            this.completedLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_complete_subtitle"),
                fontSize: 20,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.completedLabel.set_height(this.completedLabel.get_textHeight() + 10);
            this.completedLabel.set_selectable(false);
            this.addChild(this.completedLabel);
            this.questLabel = new oaktree_ext_ui_Label({
                text: this.questText,
                fontSize: 18,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.questLabel.set_height(this.questLabel.get_textHeight() + 10);
            this.questLabel.set_selectable(false);
            this.addChild(this.questLabel);
            this.openButton = new agario_views_controls_FlatButton({
                labelUp: {
                    text: oaktree_ext_localization_I18n.text("menu_daily_quest_complete_button"),
                    fontSize: 15,
                    color: 16777215
                },
                width: 130,
                height: 35
            });
            this.addChild(this.openButton);
            this.renderer = new org_zamedev_particles_renderers_SpritesParticleRenderer();
            this.addChild(this.renderer);
            this.chest = new openfl_display_Sprite();
            var bottom = new openfl_display_Bitmap(Core.get_assets().getTexture("chest_bottom", "main_shop").get_bitmapData());
            bottom.set_x(-bottom.get_width() * 0.5);
            bottom.set_y(-bottom.get_height() * 0.5);
            var top = new openfl_display_Sprite();
            var bmp = new openfl_display_Bitmap(Core.get_assets().getTexture("chest_top", "main_shop").get_bitmapData());
            bmp.set_x(-bmp.get_width() * 0.5);
            top.addChild(bmp);
            top.set_y(bottom.get_y() - 100);
            this.chest.addChild(bottom);
            this.chest.addChild(top);
            this.addChild(this.chest);
            this.addParticles(this.particleSystem1);
            this.addParticles(this.particleSystem2)
        },
        positionUI: function() {
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(30);
            this.completedLabel.set_x((this.maxWidth - this.completedLabel.get_width()) * 0.5);
            this.completedLabel.set_y(this.titleLabel.get_y() + this.titleLabel.get_height());
            this.questLabel.set_x((this.maxWidth - this.questLabel.get_width()) * 0.5);
            this.questLabel.set_y(120 + this.rectangle.get_y() + this.rectangle.get_height() - this.questLabel.get_height() - 10);
            this.openButton.set_x((this.maxWidth - this.openButton.get_width()) * 0.5);
            this.openButton.set_y(this.maxHeight - this.openButton.get_height() - 35);
            this.chest.set_x(this.maxWidth * 0.5);
            this.chest.set_y(120 + this.rectangle.get_y() + this.rectangle.get_height() * 0.5);
            this.chest.set_scaleX(this.chest.set_scaleY(0.5))
        },
        showChest: function() {
            this.buildUI();
            this.positionUI();
            this.chest.set_alpha(0);
            this.chest.set_scaleX(this.chest.set_scaleY(2));
            motion_Actuate.update($bind(this, this.animateChest), 0.5, [2, 0], [0.5, 1]).delay(0.5).onComplete($bind(this, this.showChestComplete))
        },
        animateChest: function(chestScale, chestAlpha) {
            this.chest.set_scaleX(this.chest.set_scaleY(chestScale));
            this.chest.set_alpha(chestAlpha)
        },
        showChestComplete: function() {
            this.emitParticles(this.particleSystem1, this.maxWidth / 2, this.maxHeight / 2);
            this.emitParticles(this.particleSystem2, this.maxWidth / 2, this.maxHeight / 2);
            this.shakeTimer.run = $bind(this, this.shakeChest);
            agario_sounds_GameSounds.play("sfxQuestCompleteChestImpact")
        },
        shakeChest: function() {
            var posy = this.chest.get_y();
            motion_Actuate.tween(this.chest, 0.15, {
                y: posy - 5
            });
            motion_Actuate.tween(this.chest.getChildAt(1), 0.1, {
                rotation: -5
            }, false);
            motion_Actuate.tween(this.chest.getChildAt(1), 0.1, {
                rotation: 5
            }, false).delay(0.1);
            motion_Actuate.tween(this.chest.getChildAt(1), 0.1, {
                rotation: 0
            }, false).delay(0.2);
            motion_Actuate.tween(this.chest, 0.15, {
                y: posy
            }, false).delay(0.15);
            agario_sounds_GameSounds.play("sfxQuestCompleteQuestShake")
        },
        addParticles: function(ps) {
            if (js_Boot.__instanceof(ps, org_zamedev_particles_ParticleSystem)) {
                var singlePs = ps;
                this.renderer.addParticleSystem(singlePs)
            } else {
                var multiPs = ps;
                var _g = 0;
                while (_g < multiPs.length) {
                    var item = multiPs[_g];
                    ++_g;
                    this.renderer.addParticleSystem(item)
                }
            }
        },
        emitParticles: function(ps, posx, posy) {
            if (js_Boot.__instanceof(ps, org_zamedev_particles_ParticleSystem)) {
                var singlePs = ps;
                singlePs.emit(posx, posy)
            } else {
                var multiPs = ps;
                var _g = 0;
                while (_g < multiPs.length) {
                    var item = multiPs[_g];
                    ++_g;
                    item.emit(posx, posy)
                }
            }
        },
        onCollectReward: function(e) {
            this.dispatchEvent(new agario_module_quests_events_QuestsEvent("agario.module.quests.events.QuestsEvent.on_show_reward"));
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        __class__: agario_module_quests_view_QuestsViewCompleted
    });
    var agario_module_quests_view_QuestsViewLoading = function() {
        oaktree_ext_ui_View.call(this);
        this.set_visible(false);
        this.animTimer = new haxe_Timer(500)
    };
    $hxClasses["agario.module.quests.view.QuestsViewLoading"] = agario_module_quests_view_QuestsViewLoading;
    agario_module_quests_view_QuestsViewLoading.__name__ = ["agario", "module", "quests", "view", "QuestsViewLoading"];
    agario_module_quests_view_QuestsViewLoading.__super__ = oaktree_ext_ui_View;
    agario_module_quests_view_QuestsViewLoading.prototype = $extend(oaktree_ext_ui_View.prototype, {
        rectangle: null,
        titleLabel: null,
        incentiveLabel: null,
        questLabel: null,
        animTimer: null,
        questBitmap: null,
        count: null,
        open: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(true);
            this.startAnimateText()
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(false);
            this.stopAnimateText()
        },
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.buildUI();
            this.positionUI()
        },
        buildUI: function() {
            this.rectangle = new openfl_display_Sprite();
            this.rectangle.get_graphics().beginFill(16119285, 1);
            this.rectangle.get_graphics().drawRect(25, 0, 400, 250);
            this.rectangle.get_graphics().endFill();
            this.rectangle.set_y(125);
            this.addChild(this.rectangle);
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_title"),
                fontSize: 32,
                color: 3421236,
                width: 300,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            this.incentiveLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_active_subtitle"),
                fontSize: 20,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.incentiveLabel.set_height(this.incentiveLabel.get_textHeight() + 10);
            this.incentiveLabel.set_selectable(false);
            this.addChild(this.incentiveLabel);
            this.questLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_active_loading"),
                fontSize: 28,
                color: 3421236,
                width: 300,
                align: 0
            });
            this.questLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.questLabel.set_selectable(false);
            this.addChild(this.questLabel);
            this.questBitmap = new openfl_display_Bitmap(Core.get_assets().getTexture("dailyquest_chestbudle", "main_shop").get_bitmapData());
            this.addChild(this.questBitmap)
        },
        positionUI: function() {
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(30);
            this.incentiveLabel.set_x((this.maxWidth - this.incentiveLabel.get_width()) * 0.5);
            this.incentiveLabel.set_y(this.titleLabel.get_y() + this.titleLabel.get_height());
            this.questLabel.set_x((this.maxWidth - this.questLabel.get_width()) * 0.5);
            this.questLabel.set_y(this.rectangle.get_y() + this.rectangle.get_height() - this.questLabel.get_height() - 10);
            this.questBitmap.set_x((this.maxWidth - this.questBitmap.get_width()) * 0.5);
            this.questBitmap.set_y(150)
        },
        startAnimateText: function() {
            this.count = 0;
            this.animTimer.run = $bind(this, this.animBalls)
        },
        stopAnimateText: function() {
            if (this.animTimer != null) {
                this.animTimer.stop();
                this.animTimer.run = null
            }
        },
        animBalls: function() {
            if (this.rectangle == null) {
                return
            }
            this.count++;
            this.get_graphics().clear();
            this.get_graphics().beginFill(0);
            var posX = this.rectangle.get_x() + this.rectangle.get_width() * 0.5 - 40;
            var posY = this.rectangle.get_y() + this.rectangle.get_height() + 60;
            var _g = 1;
            while (_g < 6) {
                var i = _g++;
                this.get_graphics().drawCircle(posX + i * 20, posY, (-this.count + i) % 5 == 0 ? 10 : 5)
            }
            this.get_graphics().endFill()
        },
        __class__: agario_module_quests_view_QuestsViewLoading
    });
    var agario_module_quests_view_QuestsViewReady = function() {
        this.questText = "";
        oaktree_ext_ui_View.call(this);
        this.set_visible(false)
    };
    $hxClasses["agario.module.quests.view.QuestsViewReady"] = agario_module_quests_view_QuestsViewReady;
    agario_module_quests_view_QuestsViewReady.__name__ = ["agario", "module", "quests", "view", "QuestsViewReady"];
    agario_module_quests_view_QuestsViewReady.__super__ = oaktree_ext_ui_View;
    agario_module_quests_view_QuestsViewReady.prototype = $extend(oaktree_ext_ui_View.prototype, {
        titleLabel: null,
        incentiveLabel: null,
        nextQuestLabel: null,
        timerLabel: null,
        questLabel: null,
        playButton: null,
        questBitmap: null,
        rectangle: null,
        questText: null,
        updateRequestTimer: null,
        updateQuestText: function(newText, goal) {
            this.questText = StringTools.replace(newText, "%@", oaktree_ext_localization_I18n.text("menu_daily_quest_active_quest_title"));
            this.questText = StringTools.replace(this.questText, "%i", goal == null ? "null" : "" + goal);
            this.questText = this.questText.split(":")[0] + ":\n" + this.questText.split(":")[1];
            if (this.questLabel != null) {
                this.questLabel.set_text(this.questText);
                this.positionUI()
            }
        },
        updateTimer: function(timeLeft) {
            if (this.timerLabel != null) {
                this.timerLabel.set_text(" " + timeLeft);
                this.positionTimer()
            }
        },
        open: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(true);
            if (animate) {
                this.set_alpha(0);
                motion_Actuate.tween(this, 1, {
                    alpha: 1
                })
            }
            if (this.updateRequestTimer != null) {
                this.updateRequestTimer.stop()
            }
            this.updateRequestTimer = new haxe_Timer(200);
            this.updateRequestTimer.run = $bind(this, this.onUpdateTimer)
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(false);
            this.updateRequestTimer.stop()
        },
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.buildUI();
            this.positionUI();
            this.playButton.addEventListener("click", $bind(this, this.onPlayNow))
        },
        buildUI: function() {
            this.rectangle = new openfl_display_Sprite();
            this.rectangle.get_graphics().beginFill(16119285, 1);
            this.rectangle.get_graphics().drawRect(25, 150, 400, 250);
            this.rectangle.get_graphics().endFill();
            this.addChild(this.rectangle);
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_title"),
                fontSize: 32,
                color: 3421236,
                width: 300,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            this.incentiveLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_active_subtitle"),
                fontSize: 20,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.incentiveLabel.set_height(this.incentiveLabel.get_textHeight() + 10);
            this.incentiveLabel.set_selectable(false);
            this.addChild(this.incentiveLabel);
            var txt = StringTools.replace(oaktree_ext_localization_I18n.text("menu_daily_quest_active_timer"), "%@", "");
            this.nextQuestLabel = new oaktree_ext_ui_Label({
                text: txt,
                fontSize: 18,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.nextQuestLabel.set_height(this.nextQuestLabel.get_textHeight() + 10);
            this.nextQuestLabel.set_selectable(false);
            this.addChild(this.nextQuestLabel);
            this.timerLabel = new oaktree_ext_ui_Label({
                text: "",
                fontSize: 20,
                color: 13913668,
                width: 400,
                align: 0
            });
            this.timerLabel.set_height(this.timerLabel.get_textHeight() + 10);
            this.timerLabel.set_selectable(false);
            this.addChild(this.timerLabel);
            this.questLabel = new oaktree_ext_ui_Label({
                text: this.questText,
                fontSize: 18,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.questLabel.set_height(this.questLabel.get_textHeight() + 10);
            this.questLabel.set_selectable(false);
            this.addChild(this.questLabel);
            this.playButton = new agario_views_controls_FlatButton({
                labelUp: {
                    text: oaktree_ext_localization_I18n.text("menu_daily_quest_active_play_button"),
                    fontSize: 15,
                    color: 16777215
                },
                width: 130,
                height: 35
            });
            this.addChild(this.playButton);
            this.questBitmap = new openfl_display_Bitmap(Core.get_assets().getTexture("dailyquest_chestbudle", "main_shop").get_bitmapData());
            this.addChild(this.questBitmap)
        },
        positionUI: function() {
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(30);
            this.incentiveLabel.set_x((this.maxWidth - this.incentiveLabel.get_width()) * 0.5);
            this.incentiveLabel.set_y(this.titleLabel.get_y() + this.titleLabel.get_height());
            this.positionTimer();
            this.questLabel.set_x((this.maxWidth - this.questLabel.get_width()) * 0.5);
            this.questLabel.set_y(this.rectangle.get_y() + this.rectangle.get_height() + 150 - this.questLabel.get_height() - 10);
            this.playButton.set_x((this.maxWidth - this.playButton.get_width()) * 0.5);
            this.playButton.set_y(this.maxHeight - this.playButton.get_height() - 35);
            this.questBitmap.set_x((this.maxWidth - this.questBitmap.get_width()) * 0.5);
            this.questBitmap.set_y(170)
        },
        positionTimer: function() {
            this.nextQuestLabel.set_x((this.maxWidth - this.nextQuestLabel.get_width() - this.timerLabel.get_textWidth()) * 0.5);
            this.nextQuestLabel.set_y(this.incentiveLabel.get_y() + this.incentiveLabel.get_height());
            this.timerLabel.set_x((this.maxWidth - this.nextQuestLabel.get_width() + this.nextQuestLabel.get_textWidth()) * 0.5);
            this.timerLabel.set_y(this.incentiveLabel.get_y() + this.incentiveLabel.get_height())
        },
        onPlayNow: function(e) {
            this.dispatchEvent(new agario_module_quests_events_QuestsEvent("agario.module.quests.events.QuestsEvent.on_play_quest"));
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onUpdateTimer: function() {
            this.dispatchEvent(new agario_module_quests_events_QuestsEvent("agario.module.quests.events.QuestsEvent.update_request"))
        },
        __class__: agario_module_quests_view_QuestsViewReady
    });
    var agario_module_quests_view_QuestsViewReward = function() {
        this.rewardText = "";
        oaktree_ext_ui_View.call(this);
        this.set_visible(false);
        this.particleSystem = org_zamedev_particles_loaders_ParticleLoader.load("particle/Daily_Quest_Chest.plist")
    };
    $hxClasses["agario.module.quests.view.QuestsViewReward"] = agario_module_quests_view_QuestsViewReward;
    agario_module_quests_view_QuestsViewReward.__name__ = ["agario", "module", "quests", "view", "QuestsViewReward"];
    agario_module_quests_view_QuestsViewReward.__super__ = oaktree_ext_ui_View;
    agario_module_quests_view_QuestsViewReward.prototype = $extend(oaktree_ext_ui_View.prototype, {
        titleLabel: null,
        congratulationsLabel: null,
        rewardLabel: null,
        rewardContainer: null,
        nextQuestButton: null,
        rectangle: null,
        chest: null,
        renderer: null,
        particleSystem: null,
        rewardText: null,
        updateReward: function(newText, imageSource, skin) {
            this.buildUI();
            if (this.rewardContainer == null) {
                this.rewardContainer = new openfl_display_Sprite();
                this.addChild(this.rewardContainer)
            }
            if (this.rewardLabel != null) {
                this.rewardLabel.set_text(newText)
            }
            if (this.rewardContainer != null && this.rewardContainer.get_numChildren() > 0) {
                this.rewardContainer.removeChildAt(0)
            }
            if (skin != null) {
                var cell = new agario_module_shop_components_SkinnedCell({
                    bitmap: null,
                    imageSource: imageSource,
                    w: 150,
                    h: 150,
                    borderColor: skin.gamePlayInfo.get_cellColor()
                });
                cell.set_x(-75);
                cell.set_y(-75);
                this.rewardContainer.addChild(cell)
            } else {
                var rewardBitmap = new agario_views_components_ImageWrap({
                    url: null,
                    image: imageSource,
                    w: 150,
                    h: 150
                });
                rewardBitmap.set_x(-rewardBitmap.get_width() * 0.5);
                rewardBitmap.set_y(-rewardBitmap.get_height() * 0.5);
                this.rewardContainer.addChild(rewardBitmap)
            }
            this.rewardContainer.set_alpha(0)
        },
        open: function(animate) {
            if (animate == null) {
                animate = false
            }
            var _g = this;
            this.set_alpha(1);
            this.set_visible(true);
            var bottom = this.chest.getChildAt(0);
            bottom.set_alpha(1);
            bottom.set_scaleX(bottom.set_scaleY(1));
            bottom.set_x(0);
            bottom.set_y(-bottom.get_height() * 0.5);
            bottom.set_visible(true);
            var top = this.chest.getChildAt(1);
            top.set_alpha(1);
            top.set_rotation(0);
            top.set_x(0);
            top.set_y(bottom.get_y() - 100);
            top.set_visible(true);
            this.rewardLabel.set_alpha(0);
            motion_Actuate.timer(1).onComplete(function() {
                _g.particleSystem.emit(_g.chest.get_x(), _g.chest.get_y());
                agario_sounds_GameSounds.play("sfxQuestCompleteChestOpen")
            });
            motion_Actuate.tween(top, 1, {
                y: top.get_y() - 300,
                alpha: 0,
                rotation: -180
            }, true).delay(1);
            motion_Actuate.tween(bottom, 1, {
                alpha: 0,
                scaleX: 0,
                scaleY: 0
            }, true).delay(1).onComplete(function() {
                _g.rewardContainer.set_x(_g.maxWidth * 0.5);
                _g.rewardContainer.set_y(-_g.rewardContainer.get_height());
                _g.rewardContainer.set_rotation(-360);
                _g.rewardContainer.set_scaleX(_g.rewardContainer.set_scaleY(0));
                motion_Actuate.tween(_g.rewardContainer, 1, {
                    y: _g.maxHeight * 0.5,
                    alpha: 1,
                    rotation: 0,
                    scaleX: 1,
                    scaleY: 1
                });
                _g.nextQuestButton.set_visible(true);
                _g.nextQuestButton.set_alpha(0);
                motion_Actuate.tween(_g.nextQuestButton, 1, {
                    alpha: 1
                })
            });
            motion_Actuate.tween(this.rewardLabel, 0.5, {
                alpha: 1
            }, true).delay(2)
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(false)
        },
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.buildUI();
            this.positionUI();
            this.nextQuestButton.addEventListener("click", $bind(this, this.onNextQuest))
        },
        buildUI: function() {
            if (this.rectangle != null) {
                return
            }
            this.rectangle = new openfl_display_Sprite();
            this.rectangle.get_graphics().beginFill(16119285, 1);
            this.rectangle.get_graphics().drawRect(25, 120, 400, 280);
            this.rectangle.get_graphics().endFill();
            this.addChild(this.rectangle);
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_title"),
                fontSize: 32,
                color: 3421236,
                width: 300,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            this.congratulationsLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_reward_subtitle"),
                fontSize: 20,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.congratulationsLabel.set_height(this.congratulationsLabel.get_textHeight() + 10);
            this.congratulationsLabel.set_selectable(false);
            this.addChild(this.congratulationsLabel);
            this.rewardLabel = new oaktree_ext_ui_Label({
                text: this.rewardText,
                fontSize: 18,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.rewardLabel.set_height(this.rewardLabel.get_textHeight() + 10);
            this.rewardLabel.set_selectable(false);
            this.addChild(this.rewardLabel);
            this.renderer = new org_zamedev_particles_renderers_SpritesParticleRenderer();
            this.renderer.addParticleSystem(this.particleSystem);
            this.addChild(this.renderer);
            this.chest = new openfl_display_Sprite();
            var bottom = new openfl_display_Sprite();
            var bmp = new openfl_display_Bitmap(Core.get_assets().getTexture("chest_bottom", "main_shop").get_bitmapData());
            bmp.set_x(-bmp.get_width() * 0.5);
            bottom.addChild(bmp);
            bottom.set_y(-bottom.get_height() * 0.5);
            var top = new openfl_display_Sprite();
            var bmp1 = new openfl_display_Bitmap(Core.get_assets().getTexture("chest_top", "main_shop").get_bitmapData());
            bmp1.set_x(-bmp1.get_width() * 0.5);
            top.addChild(bmp1);
            top.set_y(bottom.get_y() - 100);
            this.chest.addChild(bottom);
            this.chest.addChild(top);
            this.addChild(this.chest);
            this.nextQuestButton = new agario_views_controls_FlatButton({
                labelUp: {
                    text: oaktree_ext_localization_I18n.text("menu_daily_quest_reward_button"),
                    fontSize: 15,
                    color: 16777215
                },
                width: 130,
                height: 35
            });
            this.nextQuestButton.set_visible(false);
            this.addChild(this.nextQuestButton);
            if (this.rewardContainer == null) {
                this.rewardContainer = new openfl_display_Sprite();
                this.addChild(this.rewardContainer)
            }
        },
        positionUI: function() {
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(30);
            this.congratulationsLabel.set_x((this.maxWidth - this.congratulationsLabel.get_width()) * 0.5);
            this.congratulationsLabel.set_y(this.titleLabel.get_y() + this.titleLabel.get_height());
            this.nextQuestButton.set_x((this.maxWidth - this.nextQuestButton.get_width()) * 0.5);
            this.nextQuestButton.set_y(this.maxHeight - this.nextQuestButton.get_height() - 35);
            this.rewardLabel.set_x((this.maxWidth - this.rewardLabel.get_width()) * 0.5);
            this.rewardLabel.set_y(120 + this.rectangle.get_y() + this.rectangle.get_height() - this.rewardLabel.get_height() - 30);
            this.chest.set_x(this.maxWidth * 0.5);
            this.chest.set_y(120 + this.rectangle.get_y() + this.rectangle.get_height() * 0.5);
            this.chest.set_scaleX(this.chest.set_scaleY(0.5))
        },
        onNextQuest: function(e) {
            this.nextQuestButton.removeEventListener("click", $bind(this, this.onNextQuest));
            /*agario_sounds_GameSounds.play("sfxClick")*/;
            this.fadeOut()
        },
        fadeOut: function() {
            var _g = this;
            motion_Actuate.tween(this, 1, {
                alpha: 0
            }).onComplete(function() {
                _g.nextQuestButton.addEventListener("click", $bind(_g, _g.onNextQuest));
                _g.dispatchEvent(new agario_module_quests_events_QuestsEvent("agario.module.quests.events.QuestsEvent.on_collect_reward"))
            })
        },
        fadeIn: function() {
            this.set_alpha(0);
            motion_Actuate.tween(this, 1, {
                alpha: 1
            })
        },
        __class__: agario_module_quests_view_QuestsViewReward
    });
    var agario_module_quests_view_QuestsViewWait = function() {
        oaktree_ext_ui_View.call(this);
        this.set_visible(false)
    };
    $hxClasses["agario.module.quests.view.QuestsViewWait"] = agario_module_quests_view_QuestsViewWait;
    agario_module_quests_view_QuestsViewWait.__name__ = ["agario", "module", "quests", "view", "QuestsViewWait"];
    agario_module_quests_view_QuestsViewWait.__super__ = oaktree_ext_ui_View;
    agario_module_quests_view_QuestsViewWait.prototype = $extend(oaktree_ext_ui_View.prototype, {
        titleLabel: null,
        nextQuestLabel: null,
        timerLabel: null,
        incentiveLabel1: null,
        incentiveLabel2: null,
        purchaseButton: null,
        chestBitmap: null,
        coinIcon: null,
        rectangle: null,
        updateRequestTimer: null,
        setPrice: function(price) {
            if (this.purchaseButton != null) {
                if (price > 0) {
                    this.purchaseButton.set_text("" + price);
                    this.purchaseButton.set_visible(true)
                } else {
                    this.purchaseButton.set_visible(false)
                }
            }
        },
        updateTimer: function(timeLeft) {
            if (this.timerLabel != null) {
                this.timerLabel.set_text(" " + timeLeft);
                this.positionTimer()
            }
        },
        open: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(true);
            if (this.purchaseButton != null && Std.parseInt(this.purchaseButton.get_text()) > 0) {
                this.purchaseButton.set_visible(true)
            }
            if (animate) {
                this.set_alpha(0);
                motion_Actuate.tween(this, 1, {
                    alpha: 1
                })
            }
            if (this.updateRequestTimer != null) {
                this.updateRequestTimer.stop()
            }
            this.updateRequestTimer = new haxe_Timer(1000);
            this.updateRequestTimer.run = $bind(this, this.onUpdateTimer)
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            this.set_visible(false);
            this.updateRequestTimer.stop()
        },
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.buildUI();
            this.positionUI();
            this.purchaseButton.addEventListener("click", $bind(this, this.onPurchaseQuest))
        },
        buildUI: function() {
            this.rectangle = new openfl_display_Sprite();
            this.rectangle.get_graphics().beginFill(16119285, 1);
            this.rectangle.get_graphics().drawRect(25, 120, 400, 280);
            this.rectangle.get_graphics().endFill();
            this.addChild(this.rectangle);
            this.titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_title"),
                fontSize: 32,
                color: 3421236,
                width: 300,
                align: 0
            });
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 10);
            this.titleLabel.set_selectable(false);
            this.addChild(this.titleLabel);
            var txt = StringTools.replace(oaktree_ext_localization_I18n.text("menu_daily_quest_waiting_remaining"), "%@", "");
            this.nextQuestLabel = new oaktree_ext_ui_Label({
                text: txt,
                fontSize: 20,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.nextQuestLabel.set_height(this.nextQuestLabel.get_textHeight() + 10);
            this.nextQuestLabel.set_selectable(false);
            this.addChild(this.nextQuestLabel);
            this.timerLabel = new oaktree_ext_ui_Label({
                text: "",
                fontSize: 20,
                color: 13913668,
                width: 400,
                align: 0
            });
            this.timerLabel.set_height(this.timerLabel.get_textHeight() + 10);
            this.timerLabel.set_selectable(false);
            this.addChild(this.timerLabel);
            this.incentiveLabel1 = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_description_1"),
                fontSize: 22,
                color: 3421236,
                width: 400,
                align: 0
            });
            this.incentiveLabel1.set_height(this.incentiveLabel1.get_textHeight() + 10);
            this.incentiveLabel1.set_selectable(false);
            this.addChild(this.incentiveLabel1);
            this.incentiveLabel2 = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_daily_quest_description_2"),
                fontSize: 24,
                color: 13913668,
                width: 400,
                align: 0
            });
            this.incentiveLabel2.set_height(this.incentiveLabel2.get_textHeight() + 10);
            this.incentiveLabel2.set_selectable(false);
            this.addChild(this.incentiveLabel2);
            this.chestBitmap = new openfl_display_Bitmap(Core.get_assets().getTexture("dailyquest_chest", "main_shop").get_bitmapData());
            this.addChild(this.chestBitmap);
            this.coinIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon", "main_shop").get_bitmapData());
            this.purchaseButton = new agario_views_controls_ColorButton(null, {
                color: 6343424,
                overColor: 5748225,
                text: "",
                fontSize: 15,
                bold: true,
                textColor: 16777215,
                textColorOver: 16777215,
                icon: this.coinIcon,
                w: 130,
                h: 35
            });
            this.purchaseButton.set_visible(false);
            this.addChild(this.purchaseButton)
        },
        positionUI: function() {
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_width()) * 0.5);
            this.titleLabel.set_y(30);
            this.positionTimer();
            this.incentiveLabel1.set_x((this.maxWidth - this.incentiveLabel1.get_width()) * 0.5);
            this.incentiveLabel1.set_y(310);
            this.incentiveLabel2.set_x((this.maxWidth - this.incentiveLabel2.get_width()) * 0.5);
            this.incentiveLabel2.set_y(this.incentiveLabel1.get_y() + this.incentiveLabel1.get_height());
            this.purchaseButton.set_x((this.maxWidth - this.purchaseButton.get_width()) * 0.5);
            this.purchaseButton.set_y(this.maxHeight - this.purchaseButton.get_height() - 35);
            this.chestBitmap.set_x((this.maxWidth - this.chestBitmap.get_width()) * 0.5);
            this.chestBitmap.set_y(170)
        },
        positionTimer: function() {
            this.nextQuestLabel.set_x((this.maxWidth - this.nextQuestLabel.get_width() - this.timerLabel.get_textWidth()) * 0.5);
            this.nextQuestLabel.set_y(this.titleLabel.get_y() + this.titleLabel.get_height());
            this.timerLabel.set_x((this.maxWidth - this.nextQuestLabel.get_width() + this.nextQuestLabel.get_textWidth()) * 0.5);
            this.timerLabel.set_y(this.titleLabel.get_y() + this.titleLabel.get_height())
        },
        onPurchaseQuest: function(e) {
            this.purchaseButton.set_visible(false);
            this.dispatchEvent(new agario_module_quests_events_QuestsEvent("agario.module.quests.events.QuestsEvent.on_purchase_quest"));
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onUpdateTimer: function() {
            this.dispatchEvent(new agario_module_quests_events_QuestsEvent("agario.module.quests.events.QuestsEvent.update_request"))
        },
        __class__: agario_module_quests_view_QuestsViewWait
    });
    var agario_module_shop_components_AlignmentSprite = function() {
        openfl_display_Sprite.call(this);
        this.spacing = 0
    };
    $hxClasses["agario.module.shop.components.AlignmentSprite"] = agario_module_shop_components_AlignmentSprite;
    agario_module_shop_components_AlignmentSprite.__name__ = ["agario", "module", "shop", "components", "AlignmentSprite"];
    agario_module_shop_components_AlignmentSprite.__super__ = openfl_display_Sprite;
    agario_module_shop_components_AlignmentSprite.prototype = $extend(openfl_display_Sprite.prototype, {
        spacing: null,
        align: function() {
            var totWidth = this.getChildrenWidth();
            var maxHeight = 0;
            var pos = -totWidth * 0.5;
            var _g1 = 0;
            var _g = this.get_numChildren();
            while (_g1 < _g) {
                var i = _g1++;
                var child = this.getChildAt(i);
                child.set_x(pos);
                child.set_y(-child.get_height() * 0.5);
                pos += child.get_width() + this.spacing;
                if (child.get_height() * 0.5 > maxHeight) {
                    maxHeight = child.get_height() * 0.5
                }
            }
            var _g11 = 0;
            var _g2 = this.get_numChildren();
            while (_g11 < _g2) {
                var i1 = _g11++;
                var child1 = this.getChildAt(i1);
                var _g21 = child1;
                _g21.set_y(_g21.get_y() + maxHeight)
            }
        },
        getChildrenWidth: function() {
            var ret = 0;
            var _g1 = 0;
            var _g = this.get_numChildren();
            while (_g1 < _g) {
                var i = _g1++;
                ret += this.getChildAt(i).get_width() + this.spacing
            }
            return ret
        },
        __class__: agario_module_shop_components_AlignmentSprite
    });
    var agario_module_shop_components_PaginationGotoButton = function(asset_id) {
        var assetBitmapData = Core.get_assets().getTexture(asset_id).get_bitmapData();
        var assetOverData = assetBitmapData.clone();
        var assetDisabledData = assetBitmapData.clone();
        var colorTransform = new openfl_geom_ColorTransform(1, 1, 1, 0.5, 0, 0, 0, 0);
        colorTransform.set_color(5329233);
        assetDisabledData.colorTransform(assetDisabledData.rect, colorTransform);
        this.upState = new openfl_display_Bitmap(assetBitmapData);
        this.overState = new openfl_display_Bitmap(assetOverData);
        this.downState = new openfl_display_Bitmap(assetBitmapData);
        this.disabledState = new openfl_display_Bitmap(assetDisabledData);
        this.upState.set_alpha(this.downState.set_alpha(0.8));
        oaktree_ext_ui_controls_Button.call(this)
    };
    $hxClasses["agario.module.shop.components.PaginationGotoButton"] = agario_module_shop_components_PaginationGotoButton;
    agario_module_shop_components_PaginationGotoButton.__name__ = ["agario", "module", "shop", "components", "PaginationGotoButton"];
    agario_module_shop_components_PaginationGotoButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_module_shop_components_PaginationGotoButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        __class__: agario_module_shop_components_PaginationGotoButton
    });
    var agario_module_shop_components_PaginationGotoFirstButton = function() {
        agario_module_shop_components_PaginationGotoButton.call(this, "fast_play")
    };
    $hxClasses["agario.module.shop.components.PaginationGotoFirstButton"] = agario_module_shop_components_PaginationGotoFirstButton;
    agario_module_shop_components_PaginationGotoFirstButton.__name__ = ["agario", "module", "shop", "components", "PaginationGotoFirstButton"];
    agario_module_shop_components_PaginationGotoFirstButton.__super__ = agario_module_shop_components_PaginationGotoButton;
    agario_module_shop_components_PaginationGotoFirstButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype, {
        __class__: agario_module_shop_components_PaginationGotoFirstButton
    });
    var agario_module_shop_components_PaginationGotoLastButton = function() {
        agario_module_shop_components_PaginationGotoButton.call(this, "fast_play");
        this.set_rotationAnchorX(this.get_width() / 2);
        this.set_rotationAnchorY(this.get_height() / 2);
        this.set_rotation(180)
    };
    $hxClasses["agario.module.shop.components.PaginationGotoLastButton"] = agario_module_shop_components_PaginationGotoLastButton;
    agario_module_shop_components_PaginationGotoLastButton.__name__ = ["agario", "module", "shop", "components", "PaginationGotoLastButton"];
    agario_module_shop_components_PaginationGotoLastButton.__super__ = agario_module_shop_components_PaginationGotoButton;
    agario_module_shop_components_PaginationGotoLastButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype, {
        __class__: agario_module_shop_components_PaginationGotoLastButton
    });
    var agario_module_shop_components_PaginationGotoPreviousButton = function() {
        agario_module_shop_components_PaginationGotoButton.call(this, "play")
    };
    $hxClasses["agario.module.shop.components.PaginationGotoPreviousButton"] = agario_module_shop_components_PaginationGotoPreviousButton;
    agario_module_shop_components_PaginationGotoPreviousButton.__name__ = ["agario", "module", "shop", "components", "PaginationGotoPreviousButton"];
    agario_module_shop_components_PaginationGotoPreviousButton.__super__ = agario_module_shop_components_PaginationGotoButton;
    agario_module_shop_components_PaginationGotoPreviousButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype, {
        __class__: agario_module_shop_components_PaginationGotoPreviousButton
    });
    var agario_module_shop_components_PaginationGotoNextButton = function() {
        agario_module_shop_components_PaginationGotoButton.call(this, "play");
        this.set_rotationAnchorX(this.get_width() / 2);
        this.set_rotationAnchorY(this.get_height() / 2);
        this.set_rotation(180)
    };
    $hxClasses["agario.module.shop.components.PaginationGotoNextButton"] = agario_module_shop_components_PaginationGotoNextButton;
    agario_module_shop_components_PaginationGotoNextButton.__name__ = ["agario", "module", "shop", "components", "PaginationGotoNextButton"];
    agario_module_shop_components_PaginationGotoNextButton.__super__ = agario_module_shop_components_PaginationGotoButton;
    agario_module_shop_components_PaginationGotoNextButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype, {
        __class__: agario_module_shop_components_PaginationGotoNextButton
    });
    var oaktree_ext_ui_controls_IPaginationControl = function() {};
    $hxClasses["oaktree.ext.ui.controls.IPaginationControl"] = oaktree_ext_ui_controls_IPaginationControl;
    oaktree_ext_ui_controls_IPaginationControl.__name__ = ["oaktree", "ext", "ui", "controls", "IPaginationControl"];
    oaktree_ext_ui_controls_IPaginationControl.prototype = {
        set_selected: null,
        selected: null,
        setText: null,
        __class__: oaktree_ext_ui_controls_IPaginationControl,
        __properties__: {
            set_selected: "set_selected"
        }
    };
    var agario_module_shop_components_PaginationPageButton = function() {
        var pageButtonConfig = {
            labelUp: {
                text: "0",
                fontSize: 12,
                align: 0,
                color: 16777215
            },
            labelDown: {
                text: "0",
                fontSize: 12,
                align: 0,
                color: 2400453
            },
            colorUp: 5685472,
            colorOver: 2400453,
            colorDown: 16777215,
            width: 24,
            height: 20,
            radius: 5,
            borderWeightDown: 2,
            borderColorDown: 5685472
        };
        agario_views_controls_FlatButton.call(this, pageButtonConfig)
    };
    $hxClasses["agario.module.shop.components.PaginationPageButton"] = agario_module_shop_components_PaginationPageButton;
    agario_module_shop_components_PaginationPageButton.__name__ = ["agario", "module", "shop", "components", "PaginationPageButton"];
    agario_module_shop_components_PaginationPageButton.__interfaces__ = [oaktree_ext_ui_controls_IPaginationControl];
    agario_module_shop_components_PaginationPageButton.__super__ = agario_views_controls_FlatButton;
    agario_module_shop_components_PaginationPageButton.prototype = $extend(agario_views_controls_FlatButton.prototype, {
        setText: function(value) {
            this.labelUp.set_text(this.labelOver.set_text(this.labelDown.set_text(value)));
            this.labelUp.set_width(this.labelOver.set_width(this.labelDown.set_width(25)));
            this.labelUp.set_x(this.labelOver.set_x(this.labelDown.set_x(0)));
            this.labelUp.set_y(this.labelOver.set_y(this.labelDown.set_y(1)));
            this.labelUp.set_x(this.labelOver.set_x(this.labelDown.set_x(-1)));
            return value
        },
        __class__: agario_module_shop_components_PaginationPageButton
    });
    var agario_module_shop_components_ShopNextArrow = function() {
        var arrowBitmapData = Core.get_assets().getTexture("arrow").get_bitmapData();
        var arrowOverData = arrowBitmapData.clone();
        var arrowDisabledData = arrowBitmapData.clone();
        var colorTransform = new openfl_geom_ColorTransform(1, 1, 1, 0.5, 0, 0, 0, 0);
        colorTransform.set_color(5329233);
        arrowDisabledData.colorTransform(arrowDisabledData.rect, colorTransform);
        this.upState = new openfl_display_Bitmap(arrowBitmapData);
        this.overState = new openfl_display_Bitmap(arrowOverData);
        this.downState = new openfl_display_Bitmap(arrowBitmapData);
        this.disabledState = new openfl_display_Bitmap(arrowDisabledData);
        this.upState.set_alpha(this.downState.set_alpha(0.8));
        oaktree_ext_ui_controls_Button.call(this)
    };
    $hxClasses["agario.module.shop.components.ShopNextArrow"] = agario_module_shop_components_ShopNextArrow;
    agario_module_shop_components_ShopNextArrow.__name__ = ["agario", "module", "shop", "components", "ShopNextArrow"];
    agario_module_shop_components_ShopNextArrow.__super__ = oaktree_ext_ui_controls_Button;
    agario_module_shop_components_ShopNextArrow.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        __class__: agario_module_shop_components_ShopNextArrow
    });
    var agario_module_shop_components_SkinElement = function(_opts) {
        this.showPrice = true;
        if (_opts.name == null) {
            _opts.name = "skin_element." + _opts.model.purchaseId
        }
        _opts.name;
        _opts.w = 150;
        _opts.h = 360;
        this.item = _opts.model;
        this.options = _opts;
        oaktree_ext_ui_Control.call(this, _opts);
        this.addEventListener("addedToStage", $bind(this, this.initialize))
    };
    $hxClasses["agario.module.shop.components.SkinElement"] = agario_module_shop_components_SkinElement;
    agario_module_shop_components_SkinElement.__name__ = ["agario", "module", "shop", "components", "SkinElement"];
    agario_module_shop_components_SkinElement.__super__ = oaktree_ext_ui_Control;
    agario_module_shop_components_SkinElement.prototype = $extend(oaktree_ext_ui_Control.prototype, {
        item: null,
        showPrice: null,
        options: null,
        title: null,
        data: null,
        skinCell: null,
        tooltipSpr: null,
        priceButton: null,
        initialize: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.initialize));
            this.data = this.item;
            var background = new openfl_display_Shape();
            background.set_y(2);
            if (this.options.model.get_inUse()) {
                background.get_graphics().lineStyle(2, 12907007, 1);
                background.get_graphics().beginFill(12907007, 1)
            } else {
                background.get_graphics().lineStyle(2, 12566463, 1);
                background.get_graphics().beginFill(16777215, 1)
            }
            background.get_graphics().drawRoundRect(0, 0, this.w, this.h - 80, 15, 15);
            background.get_graphics().endFill();
            this.addChild(background);
            this.title = new oaktree_ext_ui_Label({
                text: this.options.model.get_title(),
                fontSize: 14,
                multiline: true,
                wordWrap: true,
                height: 50,
                autoSize: 0
            });
            this.addChild(this.title);
            var tf = this.title.get_defaultTextFormat();
            tf.align = 0;
            this.title.setTextFormat(tf);
            this.title.set_width(this.w - 5);
            this.title.set_height(50);
            this.title.set_wordWrap(true);
            this.title.set_x((this.w - this.title.get_width()) * 0.5);
            this.title.set_y(10);
            var skinImage;
            if (this.options.model.gamePlayInfo.image != null) {
                skinImage = this.options.model.gamePlayInfo.image.source
            } else {
                skinImage = null
            }
            this.skinCell = new agario_module_shop_components_SkinnedCell({
                bitmap: null,
                imageSource: this.options.model.gamePlayInfo.image,
                w: this.options.w - 20,
                h: this.options.w - 20,
                borderColor: this.options.model.gamePlayInfo.get_cellColor()
            });
            this.addChild(this.skinCell);
            this.skinCell.set_x((this.w - this.skinCell.get_width()) * 0.5);
            this.skinCell.set_y((background.get_height() - this.skinCell.get_height()) / 2);
            var icon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon", "main_shop").get_bitmapData());
            var buttonColor = agario_display_ButtonColors.green;
            var btnLabel = Std.string(this.options.model.price);
            var showIcon = true;
            var showOutline = false;
            if (this.options.model.isOfferable()) {
                btnLabel = oaktree_ext_localization_I18n.text("menu_shop_get_for_free");
                showIcon = false
            }
            if (this.options.model.get_owned() == true) {
                showIcon = false;
                buttonColor = agario_display_ButtonColors.lightBlue;
                btnLabel = oaktree_ext_localization_I18n.text("menu_shop_use");
                if (this.options.model.get_inUse() == true) {
                    buttonColor = agario_display_ButtonColors.whiteWithOutline;
                    showOutline = true;
                    btnLabel = oaktree_ext_localization_I18n.text("menu_shop_cancel")
                }
                if (Core.ui.state.isPlayerAlive) {
                    buttonColor = agario_display_ButtonColors.grey
                }
            }
            if (this.options.model.purchaseId == "") {
                showIcon = false;
                buttonColor = agario_display_ButtonColors.lightBlue;
                btnLabel = oaktree_ext_localization_I18n.text("menu_shop_skins_node_placeholder")
            }
            if (this.showPrice) {
                this.priceButton = new agario_views_controls_ColorButton(this.item.purchaseId, {
                    text: btnLabel,
                    icon: showIcon ? icon : null,
                    w: background.get_width() - 1,
                    h: 40,
                    fontSize: 14,
                    bold: true,
                    showOutline: showOutline,
                    buttonColor: buttonColor
                });
                this.priceButton.buttonMode = true;
                this.priceButton.data = this.item;
                if (Core.ui.state.isPlayerAlive && this.options.model.get_owned()) {
                    this.priceButton.set_alpha(0.5)
                } else {
                    this.priceButton.addEventListener("click", $bind(this, this.onClick))
                }
                this.addChild(this.priceButton);
                this.priceButton.set_y(background.get_y() + background.get_height() + 10);
                this.priceButton.addEventListener("mouseOver", $bind(this, this.onOver));
                this.priceButton.addEventListener("mouseOut", $bind(this, this.onOut));
                this.addChild(this.priceButton)
            } else {
                var icon1 = new openfl_display_Bitmap(Core.get_assets().getTexture("locket").get_bitmapData());
                var txtOptions = {
                    text: "LEVEL " + this.options.model.availableAtLevel,
                    fontSize: 16,
                    align: 3,
                    color: 0,
                    bold: true
                };
                var iconLabel = new oaktree_ext_ui_controls_IconLabel(txtOptions, icon1, "left", 5, -2);
                this.addChild(iconLabel);
                iconLabel.set_y(background.get_y() + background.get_height() + 20);
                iconLabel.set_x((background.get_width() - iconLabel.get_width()) / 2);
                this.skinCell.set_alpha(0.35)
            }
            this.update_bounds()
        },
        onOver: function(e) {
            if (Core.ui.state.isPlayerAlive && this.item.get_owned()) {
                this.showTooltip()
            } else {
                this.skinCell.set_alpha(0.8)
            }
        },
        onOut: function(e) {
            if (Core.ui.state.isPlayerAlive && this.item.get_owned()) {
                this.hideTooltip()
            } else {
                this.skinCell.set_alpha(1)
            }
        },
        showTooltip: function() {
            this.tooltipSpr = new openfl_display_Sprite();
            var lbl = new oaktree_ext_ui_Label({
                text: "Finish the match to change skin.",
                fontSize: 12,
                width: 120,
                align: 0,
                color: 16777215
            });
            this.tooltipSpr.addChild(lbl);
            lbl.set_x((this.tooltipSpr.get_width() - lbl.get_width()) / 2);
            lbl.set_y(10);
            this.tooltipSpr.get_graphics().beginFill(7851238);
            this.tooltipSpr.get_graphics().drawRoundRect(0, 0, 120, 50, 15, 15);
            this.tooltipSpr.get_graphics().endFill();
            this.addChild(this.tooltipSpr);
            var triangle = new openfl_display_Sprite();
            triangle.get_graphics().beginFill(7851238);
            triangle.get_graphics().moveTo(0, 0);
            triangle.get_graphics().lineTo(20, 0);
            triangle.get_graphics().lineTo(10, 15);
            triangle.get_graphics().lineTo(0, 0);
            triangle.get_graphics().endFill();
            triangle.set_x((this.tooltipSpr.get_width() - triangle.get_width()) / 2);
            triangle.set_y(this.tooltipSpr.get_height() - 2);
            this.tooltipSpr.addChild(triangle);
            this.tooltipSpr.set_x((this.priceButton.get_width() - this.tooltipSpr.get_width()) / 2);
            this.tooltipSpr.set_y(this.priceButton.get_y() - this.tooltipSpr.get_height() - 10)
        },
        hideTooltip: function() {
            this.removeChild(this.tooltipSpr)
        },
        onClick: function(e) {
            var btn = e.currentTarget;
            btn.set_enabled(false);
            if (Core.user.isGuest) {
                btn.delayedEnable()
            }
            var data = btn.data;
            if (data != null) {
                if (data.get_owned() == true && data.get_inUse() == false) {
                    this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::USE", data))
                } else {
                    if (data.get_owned() == false) {
                        this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::BUY", data))
                    } else {
                        if (data.get_owned() == true && data.get_inUse() == true) {
                            this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::UNEQUIP", data))
                        }
                    }
                }
            }
            openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage)
        },
        __class__: agario_module_shop_components_SkinElement
    });
    var agario_module_shop_components_SkinnedCell = function(_opts) {
        openfl_display_Sprite.call(this);
        if (_opts.borderSize == null) {
            _opts.borderSize = 4
        }
        _opts.borderSize;
        this.options = _opts;
        this.container = new openfl_display_Sprite();
        this.addChild(this.container);
        var filler = new openfl_display_Sprite();
        filler.get_graphics().beginFill(16777215);
        filler.get_graphics().drawRect(0, 0, this.options.w, this.options.h);
        filler.get_graphics().endFill();
        this.container.addChild(filler);
        this.cellMask = new openfl_display_Shape();
        this.cellMask.get_graphics().beginFill(16777215, 1);
        this.cellMask.get_graphics().drawCircle(1, 0, this.get_width() / 2);
        this.cellMask.get_graphics().endFill();
        this.cellMask.set_x(this.options.w / 2);
        this.cellMask.set_y(this.options.h / 2);
        this.drawOutline(Std.parseInt(this.options.borderColor), this.options.borderSize);
        var skinImage = null;
        if (this.options.imageSource != null) {
            skinImage = new agario_views_components_ImageWrap({
                url: null,
                image: this.options.imageSource,
                w: this.options.w,
                h: this.options.h
            })
        } else {
            if (this.options.bitmap != null) {
                skinImage = new agario_views_components_ImageWrap({
                    url: this.options.bitmap,
                    w: this.options.w,
                    h: this.options.h
                })
            }
        }
        if (skinImage != null) {
            this.container.addChild(skinImage);
            this.container.addChild(this.cellMask);
            this.container.set_mask(this.cellMask);
            this.container.set_cacheAsBitmap(true);
            skinImage.addEventListener("complete", function(e) {
                motion_Actuate.tween(e.currentTarget, 0.6, {
                    alpha: 1
                })
            })
        }
    };
    $hxClasses["agario.module.shop.components.SkinnedCell"] = agario_module_shop_components_SkinnedCell;
    agario_module_shop_components_SkinnedCell.__name__ = ["agario", "module", "shop", "components", "SkinnedCell"];
    agario_module_shop_components_SkinnedCell.__super__ = openfl_display_Sprite;
    agario_module_shop_components_SkinnedCell.prototype = $extend(openfl_display_Sprite.prototype, {
        options: null,
        container: null,
        cellMask: null,
        drawOutline: function(color, borderSize) {
            var outline = new openfl_display_Shape();
            outline.get_graphics().lineStyle(this.options.borderSize, color, 1);
            outline.get_graphics().drawCircle(1, 0, this.get_width() / 2);
            outline.get_graphics().endFill();
            outline.set_x(this.options.w / 2);
            outline.set_y(this.options.h / 2);
            this.addChild(outline)
        },
        setContainerCacheAsBitmap: function(value) {
            this.container.set_cacheAsBitmap(value)
        },
        __class__: agario_module_shop_components_SkinnedCell
    });
    var agario_module_shop_components_SlotControl = function(totalSlots, filled) {
        this.S_slotFilled = new msignal_Signal1();
        this.S_slotsFull = new msignal_Signal0();
        this.paused = false;
        this.slotQueue = 0;
        this.highlightColor = 16777215;
        this.filledColor = 16507144;
        this.emptyColor = 14079702;
        oaktree_ext_ui_Control.call(this, {
            w: 150,
            h: 360
        });
        this.filledArray = [];
        this.highlightArray = [];
        this.filled = filled;
        this.totalSlots = totalSlots;
        this.addEventListener("addedToStage", $bind(this, this.initialize))
    };
    $hxClasses["agario.module.shop.components.SlotControl"] = agario_module_shop_components_SlotControl;
    agario_module_shop_components_SlotControl.__name__ = ["agario", "module", "shop", "components", "SlotControl"];
    agario_module_shop_components_SlotControl.__super__ = oaktree_ext_ui_Control;
    agario_module_shop_components_SlotControl.prototype = $extend(oaktree_ext_ui_Control.prototype, {
        totalSlots: null,
        filled: null,
        emptyColor: null,
        filledColor: null,
        highlightColor: null,
        filledArray: null,
        slotQueue: null,
        paused: null,
        highlightArray: null,
        hasFinished: null,
        get_hasFinished: function() {
            return this.slotQueue <= 0
        },
        S_slotsFull: null,
        S_slotFilled: null,
        setSlotActive: function() {
            this.filledArray[this.filled].set_visible(true);
            this.filledArray[this.filled].set_alpha(1);
            this.filled++
        },
        addSlotToQueue: function() {
            this.slotQueue++
        },
        pauseProcess: function() {
            this.paused = true
        },
        resumeProcess: function() {
            this.paused = false;
            this.process()
        },
        process: function() {
            if (!this.paused) {
                this.fillSlot()
            }
        },
        initialize: function(e) {
            this.slotQueue = 0;
            this.removeEventListener("addedToStage", $bind(this, this.initialize));
            this.drawEmptySlots();
            this.drawHighlightSlots();
            this.drawFilledSlots()
        },
        fillSlot: function(delay) {
            if (delay == null) {
                delay = 0
            }
            if (this.slotQueue > 0) {
                this.S_slotFilled.dispatch(this.filled);
                this.filledArray[this.filled].set_visible(true);
                this.filledArray[this.filled].set_alpha(0);
                motion_Actuate.tween(this.highlightArray[this.filled], 0.5, {
                    alpha: 1
                }).delay(delay).onComplete($bind(this, this.fillSlotResult));
                motion_Actuate.tween(this.filledArray[this.filled], 0.5, {
                    alpha: 1
                }).delay(delay + 0.3)
            }
        },
        drawEmptySlots: function() {
            var _g1 = 0;
            var _g = this.totalSlots;
            while (_g1 < _g) {
                var i = _g1++;
                var s = this.createSlot(this.emptyColor);
                s.set_x(20 * i);
                this.addChild(s)
            }
        },
        drawFilledSlots: function() {
            var _g1 = 0;
            var _g = this.totalSlots;
            while (_g1 < _g) {
                var i = _g1++;
                var s = this.createSlot(this.filledColor);
                s.set_x(20 * i);
                this.addChild(s);
                s.set_visible(false);
                this.filledArray.push(s)
            }
        },
        drawHighlightSlots: function() {
            var _g1 = 0;
            var _g = this.totalSlots;
            while (_g1 < _g) {
                var i = _g1++;
                var highlight = this.createSlot(this.highlightColor);
                highlight.set_x(20 * i);
                this.addChild(highlight);
                highlight.set_alpha(0);
                this.highlightArray.push(highlight)
            }
        },
        createSlot: function(color) {
            var spr = new openfl_display_Sprite();
            spr.get_graphics().beginFill(color);
            spr.get_graphics().drawRoundRect(0, 0, 13, 20, 4, 4);
            spr.get_graphics().endFill();
            return spr
        },
        fillSlotResult: function() {
            if (!this.paused) {
                this.slotQueue--;
                this.filled++;
                if (this.filled > this.totalSlots - 1) {
                    this.S_slotsFull.dispatch();
                    this.clearAllSlots();
                    this.filled = 0
                }
                if (this.slotQueue > 0) {
                    this.process()
                } else {
                    this.slotQueue = 0
                }
            }
        },
        clearAllSlots: function() {
            var _g1 = 0;
            var _g = this.totalSlots;
            while (_g1 < _g) {
                var i = _g1++;
                this.filledArray[i].set_alpha(0);
                this.filledArray[i].set_visible(false);
                this.highlightArray[i].set_alpha(0)
            }
            this.filled = 0
        },
        __class__: agario_module_shop_components_SlotControl,
        __properties__: $extend(oaktree_ext_ui_Control.prototype.__properties__, {
            get_hasFinished: "get_hasFinished"
        })
    });
    var oaktree_core_events_GameEvent = function(type, data, bubbles, cancelable) {
        if (cancelable == null) {
            cancelable = false
        }
        if (bubbles == null) {
            bubbles = false
        }
        this.data = data;
        openfl_events_Event.call(this, type, bubbles, cancelable)
    };
    $hxClasses["oaktree.core.events.GameEvent"] = oaktree_core_events_GameEvent;
    oaktree_core_events_GameEvent.__name__ = ["oaktree", "core", "events", "GameEvent"];
    oaktree_core_events_GameEvent.__super__ = openfl_events_Event;
    oaktree_core_events_GameEvent.prototype = $extend(openfl_events_Event.prototype, {
        data: null,
        __class__: oaktree_core_events_GameEvent
    });
    var agario_module_shop_events_HintTooltipEvent = function(type, data, bubbles, cancelable) {
        if (cancelable == null) {
            cancelable = false
        }
        if (bubbles == null) {
            bubbles = false
        }
        oaktree_core_events_GameEvent.call(this, type, data, bubbles, cancelable)
    };
    $hxClasses["agario.module.shop.events.HintTooltipEvent"] = agario_module_shop_events_HintTooltipEvent;
    agario_module_shop_events_HintTooltipEvent.__name__ = ["agario", "module", "shop", "events", "HintTooltipEvent"];
    agario_module_shop_events_HintTooltipEvent.__super__ = oaktree_core_events_GameEvent;
    agario_module_shop_events_HintTooltipEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype, {
        __class__: agario_module_shop_events_HintTooltipEvent
    });
    var agario_module_shop_events_ShopEvent = function(type, data, bubbles, cancelable) {
        if (cancelable == null) {
            cancelable = false
        }
        if (bubbles == null) {
            bubbles = false
        }
        oaktree_core_events_GameEvent.call(this, type, data, bubbles, cancelable)
    };
    $hxClasses["agario.module.shop.events.ShopEvent"] = agario_module_shop_events_ShopEvent;
    agario_module_shop_events_ShopEvent.__name__ = ["agario", "module", "shop", "events", "ShopEvent"];
    agario_module_shop_events_ShopEvent.__super__ = oaktree_core_events_GameEvent;
    agario_module_shop_events_ShopEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype, {
        __class__: agario_module_shop_events_ShopEvent
    });
    var agario_module_shop_events_WalletEvent = function(type, data, bubbles, cancelable) {
        if (cancelable == null) {
            cancelable = false
        }
        if (bubbles == null) {
            bubbles = false
        }
        oaktree_core_events_GameEvent.call(this, type, data, bubbles, cancelable)
    };
    $hxClasses["agario.module.shop.events.WalletEvent"] = agario_module_shop_events_WalletEvent;
    agario_module_shop_events_WalletEvent.__name__ = ["agario", "module", "shop", "events", "WalletEvent"];
    agario_module_shop_events_WalletEvent.__super__ = oaktree_core_events_GameEvent;
    agario_module_shop_events_WalletEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype, {
        __class__: agario_module_shop_events_WalletEvent
    });
    var oaktree_ext_security_IUser = function() {};
    $hxClasses["oaktree.ext.security.IUser"] = oaktree_ext_security_IUser;
    oaktree_ext_security_IUser.__name__ = ["oaktree", "ext", "security", "IUser"];
    oaktree_ext_security_IUser.prototype = {
        id: null,
        name: null,
        __class__: oaktree_ext_security_IUser
    };
    var oaktree_ext_security_User = function(id, name) {
        this.id = id;
        this.name = name
    };
    $hxClasses["oaktree.ext.security.User"] = oaktree_ext_security_User;
    oaktree_ext_security_User.__name__ = ["oaktree", "ext", "security", "User"];
    oaktree_ext_security_User.__interfaces__ = [oaktree_ext_security_IUser];
    oaktree_ext_security_User.prototype = {
        id: null,
        name: null,
        __class__: oaktree_ext_security_User
    };
    var agario_module_shop_models_GameUser = function(id, name) {
        this.massBoostAmount = 0;
        this.xpBoostAmount = 0;
        this.socialId = "";
        this.realm = agario_services_WebAuthProvider.Guest;
        this.currencyCode = "";
        this.selectedLanguage = "";
        this.defaultSkin = "";
        this.gamesPlayed = 0;
        this.isLoggingIn = false;
        this.isGuest = true;
        this.loggedIn = false;
        this.onUserChange = new msignal_Signal0();
        this.onUserDataUpdate = new msignal_Signal0();
        oaktree_ext_security_User.call(this, id, name);
        this.set_isLoggingIn(true);
        this._serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
        this._serverModel.register(62, $bind(this, this.onGameOver));
        this._serverModel.register(116, $bind(this, this.onUserTimedEventsUpdate));
        Core.get_events().addEventListener("UserEvent::USER_LOGGED", $bind(this, this.onUserLogged));
        this.avatarUrl = Core.services.config.getRootUrl("mc/img/profilepic_guest.png");
        this.loadLocalFacebookFriends()
    };
    $hxClasses["agario.module.shop.models.GameUser"] = agario_module_shop_models_GameUser;
    agario_module_shop_models_GameUser.__name__ = ["agario", "module", "shop", "models", "GameUser"];
    agario_module_shop_models_GameUser.__super__ = oaktree_ext_security_User;
    agario_module_shop_models_GameUser.prototype = $extend(oaktree_ext_security_User.prototype, {
        loggedIn: null,
        isGuest: null,
        isLoggingIn: null,
        set_isLoggingIn: function(value) {
            this.isLoggingIn = value;
            if (Core.ui != null && Core.ui.mainUI != null) {
                Core.ui.mainUI.updateButtonsState()
            }
            return value
        },
        stats: null,
        userInfo: null,
        serverInfo: null,
        userSettings: null,
        userWallet: null,
        userBoosts: null,
        wallet: null,
        facebookId: null,
        facebookFriends: null,
        avatarUrl: null,
        nickName: null,
        gamesPlayed: null,
        defaultSkin: null,
        selectedLanguage: null,
        currencyCode: null,
        realm: null,
        socialId: null,
        selectedSkin: null,
        coins: null,
        onUserChange: null,
        onUserDataUpdate: null,
        xpBoostAmount: null,
        massBoostAmount: null,
        _serverModel: null,
        dataRealm: null,
        destroy: function() {
            if (this._serverModel != null) {
                this._serverModel.unregister(62, $bind(this, this.onGameOver))
            }
            this.set_realm(agario_services_WebAuthProvider.Guest)
        },
        setGuest: function() {
            this.id = "";
            this.name = "";
            this.nickName = "";
            this.set_realm(agario_services_WebAuthProvider.Guest);
            this.userSettings = null;
            this.userWallet = null;
            this.userBoosts = null;
            this.userInfo = null;
            this.loggedIn = false;
            this.isGuest = true;
            this.facebookId = null;
            this.set_isLoggingIn(false);
            Core.ui.mainUI.changeSettingVisibility("showOnlineStatus", false);
            this.onUserChange.dispatch();
            Core.storage.save("facebookFriends", "");
            Core.resetFindServerWithFriends()
        },
        onUserTimedEventsUpdate: function(type, msg) {
            if (type != 116) {
                return
            }
            if (msg == null) {
                return
            }
            this.updateUserTimedEvents((js_Boot.__cast(msg, agario_proto_User_$timed_$event_$updates)).get_userTimedEvents())
        },
        onGameOver: function(type, msg) {
            if (type != 62) {
                return
            }
            var message = msg;
            this.setUserStats(message.get_userStats());
            this.handleUserUpdates(message.get_userDataUpdates())
        },
        handleUserData: function(data) {
            if (this.userInfo == null) {
                this.userInfo = new agario_module_shop_models_vo_UserInfoVO(data.get_userInfo())
            }
            this.userInfo.userGifts = data.get_userGifts();
            this.userInfo.quest = data.get_userActiveQuests()[0];
            this.userInfo.userTimedEvents = [];
            this.id = data.get_userInfo().get_id();
            this.name = data.get_userInfo().get_displayName();
            this.wallet = [];
            this.stats = new agario_module_shop_models_vo_UserStatsVO(data.get_userStats());
            this.userInfo.setValues(data.get_userInfo());
            this.serverInfo = new agario_module_shop_models_vo_ServerInfoVO(data.get_serverInfo());
            this.setUserStats(data.get_userStats());
            this.createFirstTimeEvent("hourlyBonus", data.get_userTimedEvents());
            this.updateUserTimedEvents(data.get_userTimedEvents());
            this.userSettings = data.get_userSettings();
            Core.ui.settings.load(this.userSettings);
            this.set_selectedSkin(Core.ui.settings.get_skinId());
            this.userWallet = data.get_userWallet();
            var _g1 = 0;
            var _g = this.userWallet.length;
            while (_g1 < _g) {
                var i = _g1++;
                var walletItem = new agario_module_shop_models_vo_WalletItemVO({
                    productId: this.userWallet[i].get_productId(),
                    balance: this.userWallet[i].get_quantity()
                });
                this.wallet.push(walletItem)
            }
            this.userBoosts = data.get_userBoosts();
            if (data.get_realm() == 2) {
                Core.services.gameui.getUserSocialId($bind(this, this.onUserFbId))
            } else {
                Core.ui.mainUI.changeSettingVisibility("showOnlineStatus", false)
            }
            this.evaluateWallet();
            this.loggedIn = true;
            this.isGuest = false;
            this.dataRealm = data.get_realm();
            this.onUserChange.dispatch();
            Core.sendGoogleAnalyticsEvent("Login", "SS", null, true)
        },
        dispatchPromoEvents: function() {
            var _g = this;
            var timer = new haxe_Timer(1000);
            timer.run = function() {
                Core.services.promo.postEvent("PROMO_SESSION_STARTED", null);
                if (_g.userInfo != null && _g.userInfo.isPayingUser) {
                    Core.services.promo.postEvent("PROMO_IS_PAYING_USER")
                } else {
                    Core.services.promo.postEvent("PROMO_IS_NONPAYING_USER")
                }
                var _g1 = _g.dataRealm;
                switch (_g1) {
                    case 2:
                        _g.set_realm(agario_services_WebAuthProvider.Facebook);
                        Core.services.promo.postEvent("PROMO_USER_LOGGED_IN_FACEBOOK");
                        break;
                    case 3:
                        _g.set_realm(agario_services_WebAuthProvider.Google);
                        Core.services.promo.postEvent("PROMO_USER_LOGGED_IN_GOOGLE");
                        break;
                    default:
                        null
                }
                timer.stop();
                timer = null
            }
        },
        onUserFbId: function(id) {
            this.facebookId = id;
            this.fetchFriends();
            this.onUserDataUpdate.dispatch();
            Core.ui.mainUI.changeSettingVisibility("showOnlineStatus", true)
        },
        fetchFriends: function() {
            var _g = this;
            var facebook = new agario_module_gift_model_proxies_FacebookProxy("");
            facebook.getAllFriends().then(function(response) {
                _g.facebookFriends = response;
                Core.storage.save("facebookFriends", _g.friendsToString(response));
                _g.onUserDataUpdate.dispatch()
            })
        },
        loadLocalFacebookFriends: function() {
            if (this.facebookFriends == null) {
                var friendsString = Core.storage.get("facebookFriends");
                if (friendsString != null) {
                    var friendIds = friendsString.split("|");
                    this.facebookFriends = [];
                    var _g1 = 0;
                    var _g = friendIds.length;
                    while (_g1 < _g) {
                        var i = _g1++;
                        var friendId = friendIds[i];
                        if (friendId != "") {
                            this.facebookFriends.push(new agario_module_gift_model_data_Friend({
                                id: friendIds[i]
                            }))
                        }
                    }
                    if (this.facebookFriends.length <= 0) {
                        this.facebookFriends = null
                    }
                }
            }
        },
        friendsToString: function(friends) {
            var s = "";
            if (friends == null) {
                return s
            }
            var _g1 = 0;
            var _g = friends.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (i > 0) {
                    s += "|"
                }
                s += friends[i].id
            }
            return s
        },
        createFirstTimeEvent: function(eventId, events) {
            if (this.findTimedEvent(events, eventId) == null) {
                var firstTime = new agario_proto_User_$timed_$event();
                firstTime.set_nextAvailableInSeconds(0);
                firstTime.set_eventId(eventId);
                this.userInfo.userTimedEvents.push(new agario_module_shop_models_vo_TimedEventVO(firstTime))
            }
        },
        findTimedEvent: function(list, eventId) {
            if (list == null || list.length == 0) {
                return null
            }
            var _g = 0;
            while (_g < list.length) {
                var te = list[_g];
                ++_g;
                if (te.get_eventId() == eventId) {
                    return te
                }
            }
            return null
        },
        checkUsingBoosts: function() {
            var indexesToRemove = [];
            var _g1 = 0;
            var _g = this.userBoosts.length;
            while (_g1 < _g) {
                var i = _g1++;
                var userBoost = this.userBoosts[i];
                if (userBoost == null) {
                    continue
                }
                var boostItem = Core.models.shopBoostItems.getItemByProductId(userBoost.get_productId());
                if (boostItem == null) {
                    continue
                }
                var boosts = Core.models.shopBoostItems.getItemsByType(boostItem.categoryShopId);
                var _g3 = 0;
                var _g2 = boosts.length;
                while (_g3 < _g2) {
                    var j = _g3++;
                    boosts[j].set_inUse(true)
                }
                var secondsToExpire = userBoost.get_expiresInSeconds();
                if (secondsToExpire > 0) {
                    Core.services.gameui.setTimerForBoost(boostItem.categoryShopId, this.userBoosts[i].get_expiresInSeconds(), $bind(this, this.onBoostEnded), this.userBoosts[i].get_productId());
                    Core.services.gameui.setIcon(boostItem.categoryShopId, "img/" + boostItem.category.image)
                } else {
                    indexesToRemove.push(this.userBoosts[i])
                }
            }
            var _g11 = 0;
            var _g4 = indexesToRemove.length;
            while (_g11 < _g4) {
                var i1 = _g11++;
                HxOverrides.remove(this.userBoosts, indexesToRemove[i1])
            }
        },
        getWalletItemById: function(id) {
            return this.wallet.filter(function(item) {
                return item.productId == id
            })[0]
        },
        handleUserUpdates: function(userUpdates) {
            var update;
            var _g = 0;
            while (_g < userUpdates.length) {
                var update1 = userUpdates[_g];
                ++_g;
                if (update1.get_type() == 20) {
                    this.handleProductUpdate(update1.get_productField())
                } else {
                    if (update1.get_type() == 10) {
                        this.handleXpLevelUpdate(update1.get_xpLevelField())
                    }
                }
            }
        },
        handleXpLevelUpdate: function(update) {
            if (this.userInfo == null) {
                this.userInfo = new agario_module_shop_models_vo_UserInfoVO()
            }
            var deltaLevel = update.get_deltaLevel();
            if (deltaLevel > 0) {
                if (MiniclipAPI.instance != null) {
                    MiniclipAPI.instance.showLevelUp(deltaLevel * 50, this.userInfo.level, update.get_finalLevel())
                }
                Core.services.promo.postEvent("PROMO_LEVEL_UP");
                Core.services.promo.postEvent(oaktree_utils_StringUtility.withFormat("PROMO_LEVEL_UP_%@", [update.get_finalLevel()]))
            }
            this.userInfo.level = update.get_finalLevel();
            this.userInfo.xp = update.get_finalXpForLevel();
            if (this.userInfo.level >= Core.models.xpModel.xpList.length + 1) {
                this.userInfo.xp = this.userInfo.xpNeeded;
                this.userInfo.level = Core.models.xpModel.xpList[Core.models.xpModel.xpList.length - 1].level + 1
            }
            Core.services.gameui.setAccountData({
                level: this.userInfo.level,
                xp: this.userInfo.xp,
                xpNeeded: Core.models.xpModel.getMaxXpForLevel(this.userInfo.level)
            }, true)
        },
        evaluateWallet: function() {
            if (!Core.models.shopLoaded) {
                return
            }
            this.checkUserSkin();
            this.checkWalletBoosts();
            this.checkUsingBoosts();
            this.checkUserGifts()
        },
        setUserStats: function(user_stats) {
            if (this.stats == null) {
                this.stats = new agario_module_shop_models_vo_UserStatsVO()
            }
            this.stats.gamesPlayed = user_stats.get_gamesPlayed();
            this.stats.massConsumed = user_stats.get_massConsumed();
            this.stats.highestMass = user_stats.get_highestMass();
            this.stats.longestTimeAlive = user_stats.get_longestTimeAlive();
            this.stats.mostCellsEaten = user_stats.get_mostCellsEaten();
            if (js_Boot.__cast(user_stats.get_gamesPlayed(), Int) == 0) {
                this.stats.averageScore = 0
            } else {
                this.stats.averageScore = Math.floor((function($this) {
                    var $r;
                    var a = user_stats.get_allTimeScore();
                    var b = user_stats.get_gamesPlayed();
                    $r = _$UInt_UInt_$Impl_$.toFloat(a) / _$UInt_UInt_$Impl_$.toFloat(b);
                    return $r
                }(this)))
            }
        },
        checkWalletBoosts: function() {
            this.xpBoostAmount = 0;
            this.massBoostAmount = 0;
            var _g1 = 0;
            var _g = Core.models.shopBoostItems.boostList.length;
            while (_g1 < _g) {
                var i = _g1++;
                var shopItem = Core.models.shopBoostItems.boostList[i];
                var _g3 = 0;
                var _g2 = this.wallet.length;
                while (_g3 < _g2) {
                    var j = _g3++;
                    if (this.wallet[j].productId == shopItem.productIdToQuantify && this.wallet[j].get_balance() > 0) {
                        Core.services.gameui.setIcon(shopItem.categoryShopId, "img/" + shopItem.category.image);
                        if (shopItem.categoryShopId == agario_module_shop_models_types_BoostType.XP_BOOST) {
                            this.xpBoostAmount += this.wallet[j].get_balance()
                        } else {
                            if (shopItem.categoryShopId == agario_module_shop_models_types_BoostType.MASS_BOOST) {
                                this.massBoostAmount += this.wallet[j].get_balance()
                            }
                        }
                    }
                }
            }
            Core.services.gameui.setUserXPBoost(Std.string(this.xpBoostAmount));
            Core.services.gameui.setUserMassBoost(Std.string(this.massBoostAmount))
        },
        checkUserSkin: function() {
            if (this.wallet.length > 0) {
                var _g1 = 0;
                var _g = this.wallet.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    var item = Core.models.shopSkinsModel.getItemById(this.wallet[i].productId);
                    if (item != null) {
                        item.set_inUse(false);
                        if (item.productIdToQuantify == this.get_selectedSkin()) {
                            item.set_inUse(true)
                        }
                        item.set_owned(true)
                    }
                }
            }
        },
        checkUserGifts: function() {},
        handleProductUpdate: function(productUpdate) {
            if (productUpdate.get_productId() == "coin") {
                Core.user.set_coins(productUpdate.get_finalAmount());
                Core.get_events().dispatchEventWith(agario_module_shop_events_WalletEvent.WALLET_UPDATED);
                Core.services.gameui.setUserCoins(Core.user.get_coins());
                return
            }
            var walletItem = Core.user.getWalletItemById(productUpdate.get_productId());
            if (walletItem == null) {
                this.wallet.push(new agario_module_shop_models_vo_WalletItemVO({
                    productId: productUpdate.get_productId(),
                    balance: productUpdate.get_finalAmount()
                }))
            } else {
                walletItem.set_balance(productUpdate.get_finalAmount())
            }
            this.evaluateWallet()
        },
        onBoostEnded: function(pid) {
            var endedType = "";
            var _g1 = 0;
            var _g = this.wallet.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.wallet[i].productId == pid) {
                    endedType = Core.models.shopBoostItems.getItemByProductId(pid).categoryShopId;
                    var _g2 = this.wallet[i];
                    var _g3 = _g2.get_balance();
                    _g2.set_balance(_g3 - 1);
                    _g3
                }
            }
            var _g11 = 0;
            var _g4 = this.userBoosts.length;
            while (_g11 < _g4) {
                var i1 = _g11++;
                if (this.userBoosts[i1].get_productId() == pid) {
                    this.userBoosts[i1].set_expiresInSeconds(0)
                }
            }
            var allBoosts = Core.models.shopBoostItems.getItemsByType(endedType);
            var _g12 = 0;
            var _g5 = allBoosts.length;
            while (_g12 < _g5) {
                var i2 = _g12++;
                var bItem = allBoosts[i2];
                bItem.set_inUse(false)
            }
            this.checkWalletBoosts()
        },
        freeCoinTimeLeft: function() {
            var timedEvent = this.userInfo.getTimedEvent("hourlyBonus");
            if (timedEvent != null) {
                var delta = timedEvent.finalTimer - new Date().getTime();
                if (delta < 0) {
                    delta = 0
                }
                return delta
            }
            return 0
        },
        updateUserTimedEvents: function(events) {
            var _g = 0;
            while (_g < events.length) {
                var event = events[_g];
                ++_g;
                var timedEvent = this.userInfo.getTimedEvent(event.get_eventId());
                if (timedEvent == null) {
                    timedEvent = new agario_module_shop_models_vo_TimedEventVO();
                    this.userInfo.userTimedEvents.push(timedEvent)
                }
                timedEvent.update(event)
            }
        },
        onUserLogged: function(e) {
            if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Facebook) {
                Core.writeToConsole("%cLogged in to Facebook!", "background: green; color: white;")
            } else {
                if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) {
                    Core.writeToConsole("%cLogged in to Googgle+!", "background: green; color: white;")
                }
            }
        },
        get_realm: function() {
            return this.realm
        },
        set_realm: function(value) {
            this.realm = value;
            this.onUserDataUpdate.dispatch();
            return value
        },
        get_socialId: function() {
            return this.socialId
        },
        set_socialId: function(value) {
            this.socialId = value;
            this.onUserDataUpdate.dispatch();
            return value
        },
        get_selectedSkin: function() {
            return this.selectedSkin
        },
        set_selectedSkin: function(value) {
            return this.selectedSkin = value
        },
        get_coins: function() {
            if (this.isGuest) {
                return 100
            }
            if (this.userWallet == null) {
                return 0
            }
            var _g1 = 0;
            var _g = this.userWallet.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.userWallet[i].get_productId() == "coin") {
                    return this.userWallet[i].get_quantity()
                }
            }
            return 0
        },
        set_coins: function(value) {
            var _g1 = 0;
            var _g = this.userWallet.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.userWallet[i].get_productId() == "coin") {
                    this.userWallet[i].set_quantity(value)
                }
            }
            return value
        },
        __class__: agario_module_shop_models_GameUser,
        __properties__: {
            set_coins: "set_coins",
            get_coins: "get_coins",
            set_selectedSkin: "set_selectedSkin",
            get_selectedSkin: "get_selectedSkin",
            set_socialId: "set_socialId",
            get_socialId: "get_socialId",
            set_realm: "set_realm",
            get_realm: "get_realm",
            set_isLoggingIn: "set_isLoggingIn"
        }
    });
    var agario_module_shop_models_PriceMatrixModel = function() {
        this.currencyList = []
    };
    $hxClasses["agario.module.shop.models.PriceMatrixModel"] = agario_module_shop_models_PriceMatrixModel;
    agario_module_shop_models_PriceMatrixModel.__name__ = ["agario", "module", "shop", "models", "PriceMatrixModel"];
    agario_module_shop_models_PriceMatrixModel.prototype = {
        currencyList: null,
        add: function(p) {
            this.currencyList.push(p)
        },
        hasCurrency: function(currency_code) {
            if (this.currencyList.length > 0) {
                return this.currencyList[0].currencies.exists(currency_code)
            }
            return false
        },
        getPriceForTier: function(priceTier, currency) {
            if (currency == null) {
                currency = "USD"
            }
            var _g1 = 0;
            var _g = this.currencyList.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.currencyList[i].tier == priceTier) {
                    return this.currencyList[i].getPriceByCurrency(currency)
                }
            }
            return 0
        },
        __class__: agario_module_shop_models_PriceMatrixModel
    };
    var agario_module_shop_models_SettingsModel = function(pList) {
        this.settingsList = pList;
        if (this.settingsList == null) {
            this.settingsList = []
        }
    };
    $hxClasses["agario.module.shop.models.SettingsModel"] = agario_module_shop_models_SettingsModel;
    agario_module_shop_models_SettingsModel.__name__ = ["agario", "module", "shop", "models", "SettingsModel"];
    agario_module_shop_models_SettingsModel.createMap = function(settings) {
        var result = new haxe_ds_StringMap();
        if (settings != null) {
            var _g = 0;
            while (_g < settings.length) {
                var setting = settings[_g];
                ++_g;
                if (result.exists(setting.key)) {
                    null
                }
                result.set(setting.key, setting.value)
            }
        }
        return result
    };
    agario_module_shop_models_SettingsModel.prototype = {
        settingsList: null,
        concat: function(other) {
            if (other != null) {
                this.settingsList = this.settingsList.concat(other)
            }
            return this
        },
        getSettingByKey: function(k) {
            if (this.settingsList == null) {
                return null
            }
            return this.settingsList.filter(function(item) {
                return item.key == k
            })[0].value
        },
        get: function(pKey) {
            return this.getSettingByKey(pKey)
        },
        exists: function(pKey) {
            return this.getSettingByKey(pKey) != null
        },
        __class__: agario_module_shop_models_SettingsModel
    };
    var agario_module_shop_models_ShopBoostsModel = function() {
        this.itemsByType = new haxe_ds_StringMap();
        this.boostList = []
    };
    $hxClasses["agario.module.shop.models.ShopBoostsModel"] = agario_module_shop_models_ShopBoostsModel;
    agario_module_shop_models_ShopBoostsModel.__name__ = ["agario", "module", "shop", "models", "ShopBoostsModel"];
    agario_module_shop_models_ShopBoostsModel.prototype = {
        boostList: null,
        itemsByType: null,
        add: function(bi) {
            this.boostList.push(bi);
            if (!this.itemsByType.exists(bi.categoryShopId)) {
                var value = [];
                this.itemsByType.set(bi.categoryShopId, value)
            }
            this.itemsByType.get(bi.categoryShopId).push(bi)
        },
        getItemByPurchaseId: function(id) {
            var _g1 = 0;
            var _g = this.boostList.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.boostList[i].purchaseId == id) {
                    return this.boostList[i]
                }
            }
            return null
        },
        getItemByProductId: function(id) {
            var _g1 = 0;
            var _g = this.boostList.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.boostList[i].productIdToQuantify == id) {
                    return this.boostList[i]
                }
            }
            return null
        },
        getItemsByType: function(itemType) {
            if (this.itemsByType.exists(itemType)) {
                return this.itemsByType.get(itemType)
            } else {
                return []
            }
        },
        __class__: agario_module_shop_models_ShopBoostsModel
    };
    var agario_module_shop_models_ShopCoinModel = function() {
        this.shopCoinsList = []
    };
    $hxClasses["agario.module.shop.models.ShopCoinModel"] = agario_module_shop_models_ShopCoinModel;
    agario_module_shop_models_ShopCoinModel.__name__ = ["agario", "module", "shop", "models", "ShopCoinModel"];
    agario_module_shop_models_ShopCoinModel.prototype = {
        shopCoinsList: null,
        instance: null,
        add: function(item) {
            this.shopCoinsList.push(item)
        },
        getItemById: function(pItemId) {
            if (pItemId == null) {
                return null
            }
            var _g1 = 0;
            var _g = this.shopCoinsList.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.shopCoinsList[i].purchaseId == pItemId) {
                    return this.shopCoinsList[i]
                }
            }
            return null
        },
        __class__: agario_module_shop_models_ShopCoinModel
    };
    var agario_module_shop_models_ShopItemsCollection = function() {
        this.shopItemsList = [];
        this.itemsByType = new haxe_ds_StringMap()
    };
    $hxClasses["agario.module.shop.models.ShopItemsCollection"] = agario_module_shop_models_ShopItemsCollection;
    agario_module_shop_models_ShopItemsCollection.__name__ = ["agario", "module", "shop", "models", "ShopItemsCollection"];
    agario_module_shop_models_ShopItemsCollection.prototype = {
        shopItemsList: null,
        itemsByType: null,
        instance: null,
        add: function(item) {
            this.shopItemsList.push(item);
            if (!this.itemsByType.exists(item.type)) {
                var value = [];
                this.itemsByType.set(item.type, value)
            }
            this.itemsByType.get(item.type).push(item)
        },
        getItemByPurchaseId: function(itemId) {
            var _g1 = 0;
            var _g = this.shopItemsList.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.shopItemsList[i].purchaseId == itemId) {
                    return this.shopItemsList[i]
                }
            }
            return null
        },
        getItemsByPurchaseId: function(itemId) {
            var result = [];
            var _g1 = 0;
            var _g = this.shopItemsList.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.shopItemsList[i].purchaseId == itemId) {
                    result.push(this.shopItemsList[i])
                }
            }
            return result
        },
        getItemsByType: function(itemType) {
            if (this.itemsByType.exists(itemType)) {
                return this.itemsByType.get(itemType)
            } else {
                return []
            }
        },
        setSkinUse: function(itemId) {
            var _g1 = 0;
            var _g = Core.models.shopSkinsModel.skinList.length;
            while (_g1 < _g) {
                var i = _g1++;
                Core.models.shopSkinsModel.skinList[i].set_inUse(false);
                if (Core.models.shopSkinsModel.skinList[i].productIdToQuantify == itemId) {
                    Core.models.shopSkinsModel.skinList[i].set_inUse(true);
                    Core.user.set_selectedSkin(itemId)
                }
            }
        },
        __class__: agario_module_shop_models_ShopItemsCollection
    };
    var agario_module_shop_models_ShopModel = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.ShopModel"] = agario_module_shop_models_ShopModel;
    agario_module_shop_models_ShopModel.__name__ = ["agario", "module", "shop", "models", "ShopModel"];
    agario_module_shop_models_ShopModel.__super__ = oaktree_core_VO;
    agario_module_shop_models_ShopModel.prototype = $extend(oaktree_core_VO.prototype, {
        countr_code: null,
        currency: null,
        achievements: null,
        abTestsSettings: null,
        userSettings: null,
        localizationSettings: null,
        defaultCommunicationSettings: null,
        defaultGiftingSettings: null,
        defaultPromoSettings: null,
        defaultSoundSettings: null,
        shopCoins: null,
        shopBoostCategories: null,
        shopBoostItems: null,
        shopSkins: null,
        shopPriceCurrency: null,
        shopPriceMatrix: null,
        visualBundles: null,
        visualProducts: null,
        visualQuests: null,
        shopSkinTabs: null,
        tabsAssociation: null,
        walletBonusRewards: null,
        walletInappPurchases: null,
        walletSoftPurchases: null,
        walletOfferableBundles: null,
        walletProductBundles: null,
        walletProducts: null,
        walletTimeVariablePrices: null,
        externalSocialStories: null,
        gamePlayBoosts: null,
        gamePlaySkins: null,
        freeSkins: null,
        xpList: null,
        giftingFakeUser: null,
        __class__: agario_module_shop_models_ShopModel
    });
    var agario_module_shop_models_ShopPurchasesModel = function() {
        this.walletInappPurchases = [];
        this.walletOfferableBundles = []
    };
    $hxClasses["agario.module.shop.models.ShopPurchasesModel"] = agario_module_shop_models_ShopPurchasesModel;
    agario_module_shop_models_ShopPurchasesModel.__name__ = ["agario", "module", "shop", "models", "ShopPurchasesModel"];
    agario_module_shop_models_ShopPurchasesModel.prototype = {
        walletInappPurchases: null,
        walletSoftPurchases: null,
        walletOfferableBundles: null,
        getInappPurchaseByBundleId: function(bundleId) {
            return this.walletInappPurchases.filter(function(item) {
                item.type = "INAPP";
                return item.bundleId == bundleId
            })[0]
        },
        getSoftPurchaseByBundleId: function(bundleId) {
            return this.walletSoftPurchases.filter(function(item) {
                item.type = "SOFT";
                return item.bundleId == bundleId
            })[0]
        },
        getInappPurchaseByPurchaseId: function(purchaseId) {
            return this.walletInappPurchases.filter(function(item) {
                item.type = "INAPP";
                return item.id == purchaseId
            })[0]
        },
        getSoftPurchaseByPurchaseId: function(purchaseId) {
            return this.walletSoftPurchases.filter(function(item) {
                item.type = "SOFT";
                return item.id == purchaseId
            })[0]
        },
        getPurchaseByPurchaseId: function(purchaseId) {
            var soft = this.walletSoftPurchases.filter(function(item) {
                return item.id == purchaseId
            });
            var inapp = this.walletInappPurchases.filter(function(item1) {
                return item1.id == purchaseId
            });
            var offer = this.walletOfferableBundles.filter(function(item2) {
                return item2.bundleId == purchaseId
            });
            if (soft.length > 0) {
                soft[0].type = "SOFT";
                return soft[0]
            } else {
                if (inapp.length > 0) {
                    inapp[0].type = "INAPP";
                    return inapp[0]
                } else {
                    if (offer.length > 0) {
                        offer[0].type = "OFFER";
                        return offer[0]
                    } else {
                        return null
                    }
                }
            }
        },
        getPurchaseByBundleId: function(bundleId) {
            var soft = this.walletSoftPurchases.filter(function(item) {
                return item.bundleId == bundleId
            });
            var inapp = this.walletInappPurchases.filter(function(item1) {
                return item1.bundleId == bundleId
            });
            if (soft.length > 0) {
                soft[0].type = "SOFT";
                return soft[0]
            } else {
                if (inapp.length > 0) {
                    inapp[0].type = "INAPP";
                    return inapp[0]
                } else {
                    return null
                }
            }
        },
        __class__: agario_module_shop_models_ShopPurchasesModel
    };
    var agario_module_shop_models_ShopSkinModel = function() {
        this.skinList = [];
        this.skinTabs = [];
        this.tabsAssociation = []
    };
    $hxClasses["agario.module.shop.models.ShopSkinModel"] = agario_module_shop_models_ShopSkinModel;
    agario_module_shop_models_ShopSkinModel.__name__ = ["agario", "module", "shop", "models", "ShopSkinModel"];
    agario_module_shop_models_ShopSkinModel.prototype = {
        skinList: null,
        skinTabs: null,
        tabsAssociation: null,
        getItemById: function(pId) {
            if (pId == null) {
                return null
            }
            var _g1 = 0;
            var _g = this.skinList.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.skinList[i].productIdToQuantify == pId) {
                    return this.skinList[i]
                }
            }
            return null
        },
        getLastRewardSkin: function(lvl) {
            var returnSkin = null;
            var lastLevel = -1;
            var _g1 = 0;
            var _g = this.skinList.length;
            while (_g1 < _g) {
                var i = _g1++;
                var skinItem = this.skinList[i];
                if (skinItem.availableAtLevel <= lvl && skinItem.isReward && skinItem.skinType == "VETERAN") {
                    if (returnSkin == null || skinItem.availableAtLevel > lastLevel) {
                        returnSkin = skinItem;
                        lastLevel = skinItem.availableAtLevel
                    }
                }
            }
            return returnSkin
        },
        getNextRewardSkin: function(lvl) {
            var _g = 0;
            var _g1 = this.skinList;
            while (_g < _g1.length) {
                var skinItem = _g1[_g];
                ++_g;
                if (skinItem.availableAtLevel > lvl) {
                    return skinItem
                }
            }
            return null
        },
        getTabs: function() {
            return this.skinTabs
        },
        addSkin: function(s) {
            this.skinList.push(s)
        },
        addTab: function(t) {
            var ass = this.getTabAssociationByDescription(t.tabDescription);
            if (ass != null) {
                t.skinType = ass.skinType
            }
            this.skinTabs.push(t)
        },
        getTabBySkinType: function(skinType) {
            var tab = this.getTabAssociationBySkinType(skinType);
            if (tab == null) {
                return null
            }
            var description = tab.tabDescription;
            var tabs = this.skinTabs.filter(function(tab1) {
                return tab1.tabDescription == description
            });
            if (tabs != null && tabs.length > 0) {
                return tabs[0]
            } else {
                return null
            }
        },
        getTabAssociationByDescription: function(description) {
            if (Core.models.shopData.tabsAssociation == null) {
                return null
            }
            var tabs = Core.models.shopData.tabsAssociation.filter(function(tab) {
                return tab.tabDescription == description
            });
            if (tabs == null || tabs.length == 0) {
                return null
            }
            return tabs[0]
        },
        getTabAssociationBySkinType: function(type) {
            var tabs = Core.models.shopData.tabsAssociation.filter(function(tab) {
                return tab.skinType == type
            });
            if (tabs == null || tabs.length == 0) {
                return null
            }
            return tabs[0]
        },
        getTabByDescription: function(description) {
            var tabs = this.skinTabs.filter(function(tab) {
                return tab.tabDescription == description
            });
            if (tabs != null && tabs.length > 0) {
                return tabs[0]
            } else {
                return null
            }
        },
        getOfferByBundleId: function(bundleId) {
            if (Core.models.shopData.walletOfferableBundles == null) {
                return null
            }
            var offers = Core.models.shopData.walletOfferableBundles.filter(function(offer) {
                return offer.bundleId == bundleId
            });
            if (offers != null && offers.length > 0) {
                return offers[0]
            } else {
                return null
            }
        },
        __class__: agario_module_shop_models_ShopSkinModel
    };
    var agario_module_shop_models_WalletProductBundlesModel = function() {
        this.products = []
    };
    $hxClasses["agario.module.shop.models.WalletProductBundlesModel"] = agario_module_shop_models_WalletProductBundlesModel;
    agario_module_shop_models_WalletProductBundlesModel.__name__ = ["agario", "module", "shop", "models", "WalletProductBundlesModel"];
    agario_module_shop_models_WalletProductBundlesModel.prototype = {
        products: null,
        add: function(item) {
            this.products.push(item)
        },
        getBundleByProductId: function(id) {
            var _g = 0;
            var _g1 = this.products;
            while (_g < _g1.length) {
                var productBundle = _g1[_g];
                ++_g;
                if (productBundle.productId == id) {
                    return productBundle
                }
            }
            return null
        },
        getBundleByBundleId: function(id) {
            var _g = 0;
            var _g1 = this.products;
            while (_g < _g1.length) {
                var productBundle = _g1[_g];
                ++_g;
                if (productBundle.id == id) {
                    return productBundle
                }
            }
            return null
        },
        getProductsByBundleId: function(id) {
            var result = new List();
            var _g = 0;
            var _g1 = this.products;
            while (_g < _g1.length) {
                var productBundle = _g1[_g];
                ++_g;
                if (productBundle.id == id) {
                    result.push(productBundle)
                }
            }
            return result
        },
        __class__: agario_module_shop_models_WalletProductBundlesModel
    };
    var agario_module_shop_models_WalletProductsModel = function() {
        this.walletProducts = []
    };
    $hxClasses["agario.module.shop.models.WalletProductsModel"] = agario_module_shop_models_WalletProductsModel;
    agario_module_shop_models_WalletProductsModel.__name__ = ["agario", "module", "shop", "models", "WalletProductsModel"];
    agario_module_shop_models_WalletProductsModel.prototype = {
        walletProducts: null,
        add: function(item) {
            this.walletProducts.push(item)
        },
        getProductById: function(productId) {
            return this.walletProducts.filter(function(item) {
                return item.id == productId
            })[0]
        },
        __class__: agario_module_shop_models_WalletProductsModel
    };
    var agario_module_shop_models_XPModel = function() {};
    $hxClasses["agario.module.shop.models.XPModel"] = agario_module_shop_models_XPModel;
    agario_module_shop_models_XPModel.__name__ = ["agario", "module", "shop", "models", "XPModel"];
    agario_module_shop_models_XPModel.prototype = {
        xpList: null,
        getMaxXpForLevel: function(level) {
            if (level >= this.xpList.length) {
                return this.xpList[this.xpList.length - 1].xpToNextLevel
            } else {
                var _g = 0;
                var _g1 = this.xpList;
                while (_g < _g1.length) {
                    var xpItem = _g1[_g];
                    ++_g;
                    if (xpItem.level == level) {
                        return xpItem.xpToNextLevel
                    }
                }
            }
            return 0
        },
        getPercentage: function(xp, level) {
            var targetXP = this.getMaxXpForLevel(level);
            return xp / targetXP
        },
        getLevelForReward: function(rewardId) {
            return this.xpList.filter(function(item) {
                return item.levelUpBonusId == rewardId
            })[0]
        },
        updateXpList: function(list) {
            this.xpList = list
        },
        __class__: agario_module_shop_models_XPModel
    };
    var agario_module_shop_models_types_BoostType = function() {};
    $hxClasses["agario.module.shop.models.types.BoostType"] = agario_module_shop_models_types_BoostType;
    agario_module_shop_models_types_BoostType.__name__ = ["agario", "module", "shop", "models", "types", "BoostType"];
    var agario_module_shop_models_types_CurrencyType = function() {};
    $hxClasses["agario.module.shop.models.types.CurrencyType"] = agario_module_shop_models_types_CurrencyType;
    agario_module_shop_models_types_CurrencyType.__name__ = ["agario", "module", "shop", "models", "types", "CurrencyType"];
    var agario_module_shop_models_types_ProductType = function() {};
    $hxClasses["agario.module.shop.models.types.ProductType"] = agario_module_shop_models_types_ProductType;
    agario_module_shop_models_types_ProductType.__name__ = ["agario", "module", "shop", "models", "types", "ProductType"];
    var agario_module_shop_models_types_ShopItemType = function() {};
    $hxClasses["agario.module.shop.models.types.ShopItemType"] = agario_module_shop_models_types_ShopItemType;
    agario_module_shop_models_types_ShopItemType.__name__ = ["agario", "module", "shop", "models", "types", "ShopItemType"];
    var agario_module_shop_models_types_ShopReferenceSheet = function() {};
    $hxClasses["agario.module.shop.models.types.ShopReferenceSheet"] = agario_module_shop_models_types_ShopReferenceSheet;
    agario_module_shop_models_types_ShopReferenceSheet.__name__ = ["agario", "module", "shop", "models", "types", "ShopReferenceSheet"];
    var agario_module_shop_models_types_VisualBundlesPopupType = function() {};
    $hxClasses["agario.module.shop.models.types.VisualBundlesPopupType"] = agario_module_shop_models_types_VisualBundlesPopupType;
    agario_module_shop_models_types_VisualBundlesPopupType.__name__ = ["agario", "module", "shop", "models", "types", "VisualBundlesPopupType"];
    var agario_module_shop_models_vo_AchievementVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.AchievementVO"] = agario_module_shop_models_vo_AchievementVO;
    agario_module_shop_models_vo_AchievementVO.__name__ = ["agario", "module", "shop", "models", "vo", "AchievementVO"];
    agario_module_shop_models_vo_AchievementVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_AchievementVO.prototype = $extend(oaktree_core_VO.prototype, {
        playGamesId: null,
        goal: null,
        conversion: null,
        type: null,
        __class__: agario_module_shop_models_vo_AchievementVO
    });
    var agario_module_shop_models_vo_BonusRewardVO = function(obj) {
        this.bonusQty = -1;
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.BonusRewardVO"] = agario_module_shop_models_vo_BonusRewardVO;
    agario_module_shop_models_vo_BonusRewardVO.__name__ = ["agario", "module", "shop", "models", "vo", "BonusRewardVO"];
    agario_module_shop_models_vo_BonusRewardVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_BonusRewardVO.prototype = $extend(oaktree_core_VO.prototype, {
        bonusId: null,
        bonusQty: null,
        bonusProductId: null,
        bundleId: null,
        productUpdateOrigin: null,
        __class__: agario_module_shop_models_vo_BonusRewardVO
    });
    var agario_module_shop_models_vo_ShopItemVO = function(obj) {
        this.inUse = false;
        this.owned = false;
        this.isReward = false;
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.ShopItemVO"] = agario_module_shop_models_vo_ShopItemVO;
    agario_module_shop_models_vo_ShopItemVO.__name__ = ["agario", "module", "shop", "models", "vo", "ShopItemVO"];
    agario_module_shop_models_vo_ShopItemVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_ShopItemVO.prototype = $extend(oaktree_core_VO.prototype, {
        purchaseId: null,
        price: null,
        purchaseType: null,
        type: null,
        isReward: null,
        purchaseInfo: null,
        owned: null,
        get_owned: function() {
            return this.owned
        },
        set_owned: function(value) {
            return this.owned = value
        },
        inUse: null,
        get_inUse: function() {
            return this.inUse
        },
        set_inUse: function(value) {
            return this.inUse = value
        },
        name: null,
        description: null,
        __class__: agario_module_shop_models_vo_ShopItemVO,
        __properties__: $extend(oaktree_core_VO.prototype.__properties__, {
            set_inUse: "set_inUse",
            get_inUse: "get_inUse",
            set_owned: "set_owned",
            get_owned: "get_owned"
        })
    });
    var agario_module_shop_models_vo_CurrencyItemVO = function(obj) {
        agario_module_shop_models_vo_ShopItemVO.call(this, obj);
        this.type = "INAPP"
    };
    $hxClasses["agario.module.shop.models.vo.CurrencyItemVO"] = agario_module_shop_models_vo_CurrencyItemVO;
    agario_module_shop_models_vo_CurrencyItemVO.__name__ = ["agario", "module", "shop", "models", "vo", "CurrencyItemVO"];
    agario_module_shop_models_vo_CurrencyItemVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
    agario_module_shop_models_vo_CurrencyItemVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype, {
        preAmount: null,
        finalAmount: null,
        banner: null,
        visibility: null,
        orderInShop: null,
        currency_code: null,
        percentage: null,
        __class__: agario_module_shop_models_vo_CurrencyItemVO
    });
    var agario_module_shop_models_vo_ExchangeRateVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.ExchangeRateVO"] = agario_module_shop_models_vo_ExchangeRateVO;
    agario_module_shop_models_vo_ExchangeRateVO.__name__ = ["agario", "module", "shop", "models", "vo", "ExchangeRateVO"];
    agario_module_shop_models_vo_ExchangeRateVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_ExchangeRateVO.prototype = $extend(oaktree_core_VO.prototype, {
        currency_offset: null,
        usd_exchange: null,
        usd_exchange_inverse: null,
        user_currency: null,
        __class__: agario_module_shop_models_vo_ExchangeRateVO
    });
    var agario_module_shop_models_vo_GamePlayBoostVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.GamePlayBoostVO"] = agario_module_shop_models_vo_GamePlayBoostVO;
    agario_module_shop_models_vo_GamePlayBoostVO.__name__ = ["agario", "module", "shop", "models", "vo", "GamePlayBoostVO"];
    agario_module_shop_models_vo_GamePlayBoostVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_GamePlayBoostVO.prototype = $extend(oaktree_core_VO.prototype, {
        productId: null,
        type: null,
        multiplier: null,
        durationMins: null,
        __class__: agario_module_shop_models_vo_GamePlayBoostVO
    });
    var agario_module_shop_models_vo_GamePlaySkinVO = function(obj) {
        oaktree_core_VO.call(this, obj);
        if (this.image != null) {
            this.set_shopImage(this.image.source)
        }
    };
    $hxClasses["agario.module.shop.models.vo.GamePlaySkinVO"] = agario_module_shop_models_vo_GamePlaySkinVO;
    agario_module_shop_models_vo_GamePlaySkinVO.__name__ = ["agario", "module", "shop", "models", "vo", "GamePlaySkinVO"];
    agario_module_shop_models_vo_GamePlaySkinVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_GamePlaySkinVO.prototype = $extend(oaktree_core_VO.prototype, {
        gameplayId: null,
        image: null,
        shopImage: null,
        get_shopImage: function() {
            var path = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService).getConfigUrl(this.image.source);
            return path
        },
        set_shopImage: function(value) {
            return this.shopImage = value
        },
        gamePlayImage: null,
        get_gamePlayImage: function() {
            var path = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService).getConfigUrl(this.image.sourceHigh);
            return path
        },
        set_gamePlayImage: function(value) {
            return this.gamePlayImage = value
        },
        cellColor: null,
        get_cellColor: function() {
            return this.cellColor
        },
        set_cellColor: function(value) {
            return this.cellColor = value.substring(0, 8)
        },
        productId: null,
        skinName: null,
        get_skinName: function() {
            var ret = this.productId;
            if (StringTools.startsWith(ret, "skin_")) {
                ret = HxOverrides.substr(ret, 5, null)
            }
            ret = "%" + ret;
            return ret
        },
        __class__: agario_module_shop_models_vo_GamePlaySkinVO,
        __properties__: $extend(oaktree_core_VO.prototype.__properties__, {
            get_skinName: "get_skinName",
            set_cellColor: "set_cellColor",
            get_cellColor: "get_cellColor",
            set_gamePlayImage: "set_gamePlayImage",
            get_gamePlayImage: "get_gamePlayImage",
            set_shopImage: "set_shopImage",
            get_shopImage: "get_shopImage"
        })
    });
    var agario_module_shop_models_vo_FreeSkinVO = function(obj) {
        this.showName = false;
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.FreeSkinVO"] = agario_module_shop_models_vo_FreeSkinVO;
    agario_module_shop_models_vo_FreeSkinVO.__name__ = ["agario", "module", "shop", "models", "vo", "FreeSkinVO"];
    agario_module_shop_models_vo_FreeSkinVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_FreeSkinVO.prototype = $extend(oaktree_core_VO.prototype, {
        id: null,
        image: null,
        showName: null,
        gamePlayImage: null,
        get_gamePlayImage: function() {
            var fileName = this.image.substring(0, this.image.lastIndexOf("."));
            var extension = this.image.substring(this.image.lastIndexOf("."), this.image.length);
            var finalFileName = fileName + "_hi" + extension;
            var path = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService).getConfigUrl(finalFileName);
            return path
        },
        __class__: agario_module_shop_models_vo_FreeSkinVO,
        __properties__: $extend(oaktree_core_VO.prototype.__properties__, {
            get_gamePlayImage: "get_gamePlayImage"
        })
    });
    var agario_module_shop_models_vo_GiftingFakeUser = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.GiftingFakeUser"] = agario_module_shop_models_vo_GiftingFakeUser;
    agario_module_shop_models_vo_GiftingFakeUser.__name__ = ["agario", "module", "shop", "models", "vo", "GiftingFakeUser"];
    agario_module_shop_models_vo_GiftingFakeUser.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_GiftingFakeUser.prototype = $extend(oaktree_core_VO.prototype, {
        key: null,
        value: null,
        __class__: agario_module_shop_models_vo_GiftingFakeUser
    });
    var agario_module_shop_models_vo_ImageSourceVO = function(obj) {
        oaktree_core_VO.call(this, obj);
        if (this.spriteFilename == null) {
            if (this.source == null) {
                this.source = js_Boot.__cast(obj, String)
            }
            this.id = this.source;
            var fileName = this.source.substring(0, this.source.lastIndexOf("."));
            var extension = this.source.substring(this.source.lastIndexOf("."), this.source.length);
            this.sourceHigh = fileName + "_hi" + extension
        } else {
            this.plistFilename = this.plistFilename.split("plist").join("xml");
            var len = this.plistFilename.indexOf(".xml");
            this.id = HxOverrides.substr(this.plistFilename, 0, len);
            var len1 = this.frameName.indexOf(".png");
            this.textureName = HxOverrides.substr(this.frameName, 0, len1)
        }
    };
    $hxClasses["agario.module.shop.models.vo.ImageSourceVO"] = agario_module_shop_models_vo_ImageSourceVO;
    agario_module_shop_models_vo_ImageSourceVO.__name__ = ["agario", "module", "shop", "models", "vo", "ImageSourceVO"];
    agario_module_shop_models_vo_ImageSourceVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_ImageSourceVO.prototype = $extend(oaktree_core_VO.prototype, {
        id: null,
        spriteFilename: null,
        plistFilename: null,
        frameName: null,
        source: null,
        sourceHigh: null,
        textureName: null,
        isTextureAtlas: function() {
            return this.plistFilename != null
        },
        __class__: agario_module_shop_models_vo_ImageSourceVO
    });
    var agario_module_shop_models_vo_KeyValueSettingVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.KeyValueSettingVO"] = agario_module_shop_models_vo_KeyValueSettingVO;
    agario_module_shop_models_vo_KeyValueSettingVO.__name__ = ["agario", "module", "shop", "models", "vo", "KeyValueSettingVO"];
    agario_module_shop_models_vo_KeyValueSettingVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_KeyValueSettingVO.prototype = $extend(oaktree_core_VO.prototype, {
        key: null,
        value: null,
        abTest: null,
        get_abTest: function() {
            if (this.abTest != null) {
                return this.abTest
            }
            var ret = {};
            if (this.value.indexOf("abTest") > -1) {
                var values = this.value.substring(this.value.indexOf("(") + 1, this.value.indexOf(")"));
                var valuesArr = values.split(",");
                var _g = 0;
                while (_g < valuesArr.length) {
                    var value = valuesArr[_g];
                    ++_g;
                    var valueArr = value.split("=");
                    Reflect.setProperty(ret, "_" + valueArr[0], valueArr[1])
                }
            }
            return this.abTest = ret
        },
        __class__: agario_module_shop_models_vo_KeyValueSettingVO,
        __properties__: $extend(oaktree_core_VO.prototype.__properties__, {
            get_abTest: "get_abTest"
        })
    });
    var agario_module_shop_models_vo_PlayerInfoVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.PlayerInfoVO"] = agario_module_shop_models_vo_PlayerInfoVO;
    agario_module_shop_models_vo_PlayerInfoVO.__name__ = ["agario", "module", "shop", "models", "vo", "PlayerInfoVO"];
    agario_module_shop_models_vo_PlayerInfoVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_PlayerInfoVO.prototype = $extend(oaktree_core_VO.prototype, {
        currentSkin: null,
        wallet: null,
        coinAmount: null,
        getWalletItemById: function(id) {
            return this.wallet.filter(function(item) {
                return item.productId == id
            })[0]
        },
        __class__: agario_module_shop_models_vo_PlayerInfoVO
    });
    var agario_module_shop_models_vo_PriceCurrencyVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.PriceCurrencyVO"] = agario_module_shop_models_vo_PriceCurrencyVO;
    agario_module_shop_models_vo_PriceCurrencyVO.__name__ = ["agario", "module", "shop", "models", "vo", "PriceCurrencyVO"];
    agario_module_shop_models_vo_PriceCurrencyVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_PriceCurrencyVO.prototype = $extend(oaktree_core_VO.prototype, {
        id: null,
        __class__: agario_module_shop_models_vo_PriceCurrencyVO
    });
    var agario_module_shop_models_vo_PriceTierVO = function(obj) {
        oaktree_core_VO.call(this, null);
        this.currencies = new haxe_ds_StringMap();
        var fields = Reflect.fields(obj);
        var _g = 0;
        while (_g < fields.length) {
            var field = fields[_g];
            ++_g;
            var value = Reflect.getProperty(obj, field);
            this.currencies.set(field, value)
        }
        this.tier = obj.tier
    };
    $hxClasses["agario.module.shop.models.vo.PriceTierVO"] = agario_module_shop_models_vo_PriceTierVO;
    agario_module_shop_models_vo_PriceTierVO.__name__ = ["agario", "module", "shop", "models", "vo", "PriceTierVO"];
    agario_module_shop_models_vo_PriceTierVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_PriceTierVO.prototype = $extend(oaktree_core_VO.prototype, {
        tier: null,
        currencies: null,
        getPriceByCurrency: function(currency) {
            if (this.currencies.exists(currency)) {
                return this.currencies.get(currency)
            } else {
                return this.currencies.get("USD")
            }
        },
        __class__: agario_module_shop_models_vo_PriceTierVO
    });
    var agario_module_shop_models_vo_ServerInfoVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.ServerInfoVO"] = agario_module_shop_models_vo_ServerInfoVO;
    agario_module_shop_models_vo_ServerInfoVO.__name__ = ["agario", "module", "shop", "models", "vo", "ServerInfoVO"];
    agario_module_shop_models_vo_ServerInfoVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_ServerInfoVO.prototype = $extend(oaktree_core_VO.prototype, {
        host: null,
        tcpPort: null,
        udpPort: null,
        __class__: agario_module_shop_models_vo_ServerInfoVO
    });
    var agario_module_shop_models_vo_ShopBoostCategoryVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.ShopBoostCategoryVO"] = agario_module_shop_models_vo_ShopBoostCategoryVO;
    agario_module_shop_models_vo_ShopBoostCategoryVO.__name__ = ["agario", "module", "shop", "models", "vo", "ShopBoostCategoryVO"];
    agario_module_shop_models_vo_ShopBoostCategoryVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_ShopBoostCategoryVO.prototype = $extend(oaktree_core_VO.prototype, {
        shopId: null,
        position: null,
        title: null,
        description: null,
        image: null,
        spritesheet: null,
        __class__: agario_module_shop_models_vo_ShopBoostCategoryVO
    });
    var agario_module_shop_models_vo_ShopBoostItemVO = function(obj) {
        agario_module_shop_models_vo_ShopItemVO.call(this, obj);
        this.type = "SOFT"
    };
    $hxClasses["agario.module.shop.models.vo.ShopBoostItemVO"] = agario_module_shop_models_vo_ShopBoostItemVO;
    agario_module_shop_models_vo_ShopBoostItemVO.__name__ = ["agario", "module", "shop", "models", "vo", "ShopBoostItemVO"];
    agario_module_shop_models_vo_ShopBoostItemVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
    agario_module_shop_models_vo_ShopBoostItemVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype, {
        categoryShopId: null,
        title: null,
        bestDealSticker: null,
        position: null,
        categoryPosition: null,
        productIdToQuantify: null,
        category: null,
        gameplayInfo: null,
        __class__: agario_module_shop_models_vo_ShopBoostItemVO
    });
    var agario_module_shop_models_vo_ShopSkinItemVO = function(obj) {
        this.availableAtLevel = -1;
        this.orderInOwnedTab = -1;
        this.orderInShop = -1;
        agario_module_shop_models_vo_ShopItemVO.call(this, obj);
        var _g = this.skinType;
        switch (_g) {
            case "INAPP":
                this.type = "INAPP";
                break;
            case "VETERAN":
                this.type = "REWARD";
                break;
            default:
                this.type = "SOFT"
        }
    };
    $hxClasses["agario.module.shop.models.vo.ShopSkinItemVO"] = agario_module_shop_models_vo_ShopSkinItemVO;
    agario_module_shop_models_vo_ShopSkinItemVO.__name__ = ["agario", "module", "shop", "models", "vo", "ShopSkinItemVO"];
    agario_module_shop_models_vo_ShopSkinItemVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
    agario_module_shop_models_vo_ShopSkinItemVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype, {
        referenceSheet: null,
        referenceKey: null,
        referenceValue: null,
        productIdToQuantify: null,
        skinType: null,
        image: null,
        visibility: null,
        orderInShop: null,
        orderInOwnedTab: null,
        title: null,
        get_title: function() {
            return oaktree_ext_localization_I18n.text(this.title)
        },
        set_title: function(value) {
            return this.title = value
        },
        gamePlayInfo: null,
        availableAtLevel: null,
        isOfferable: function() {
            return this.referenceSheet == "Wallet - Offerable Bundles"
        },
        __class__: agario_module_shop_models_vo_ShopSkinItemVO,
        __properties__: $extend(agario_module_shop_models_vo_ShopItemVO.prototype.__properties__, {
            set_title: "set_title",
            get_title: "get_title"
        })
    });
    var agario_module_shop_models_vo_ShopSkinTabVO = function(obj) {
        agario_module_shop_models_vo_ShopItemVO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.ShopSkinTabVO"] = agario_module_shop_models_vo_ShopSkinTabVO;
    agario_module_shop_models_vo_ShopSkinTabVO.__name__ = ["agario", "module", "shop", "models", "vo", "ShopSkinTabVO"];
    agario_module_shop_models_vo_ShopSkinTabVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
    agario_module_shop_models_vo_ShopSkinTabVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype, {
        tabName: null,
        tabDescription: null,
        tabOrder: null,
        skinType: null,
        skins: null,
        __class__: agario_module_shop_models_vo_ShopSkinTabVO
    });
    var agario_module_shop_models_vo_SocialStoryVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.SocialStoryVO"] = agario_module_shop_models_vo_SocialStoryVO;
    agario_module_shop_models_vo_SocialStoryVO.__name__ = ["agario", "module", "shop", "models", "vo", "SocialStoryVO"];
    agario_module_shop_models_vo_SocialStoryVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_SocialStoryVO.prototype = $extend(oaktree_core_VO.prototype, {
        id: null,
        icon: null,
        iconURL: null,
        titleTag: null,
        subtitleTag: null,
        descriptionTag: null,
        twitterTag: null,
        googleTag: null,
        __class__: agario_module_shop_models_vo_SocialStoryVO
    });
    var agario_module_shop_models_vo_TimedEventVO = function(data) {
        this.finalTimer = 0;
        this.nextAvailableInSeconds = 0;
        this.update(data)
    };
    $hxClasses["agario.module.shop.models.vo.TimedEventVO"] = agario_module_shop_models_vo_TimedEventVO;
    agario_module_shop_models_vo_TimedEventVO.__name__ = ["agario", "module", "shop", "models", "vo", "TimedEventVO"];
    agario_module_shop_models_vo_TimedEventVO.prototype = {
        eventId: null,
        nextAvailableInSeconds: null,
        finalTimer: null,
        update: function(event, initialTime) {
            if (event == null) {
                return
            }
            if (initialTime == null) {
                initialTime = new Date().getTime()
            }
            this.eventId = event.get_eventId();
            this.nextAvailableInSeconds = event.get_nextAvailableInSeconds();
            if (this.nextAvailableInSeconds == 0) {
                this.finalTimer = 0
            } else {
                this.finalTimer = initialTime + this.nextAvailableInSeconds * 1000
            }
        },
        __class__: agario_module_shop_models_vo_TimedEventVO
    };
    var agario_module_shop_models_vo_UserInfoVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.UserInfoVO"] = agario_module_shop_models_vo_UserInfoVO;
    agario_module_shop_models_vo_UserInfoVO.__name__ = ["agario", "module", "shop", "models", "vo", "UserInfoVO"];
    agario_module_shop_models_vo_UserInfoVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_UserInfoVO.prototype = $extend(oaktree_core_VO.prototype, {
        id: null,
        displayName: null,
        xp: null,
        level: null,
        hasLoggedIntoMobile: null,
        isPayingUser: null,
        isNewUser: null,
        xpNeeded: null,
        userTimedEvents: null,
        userGifts: null,
        quest: null,
        setTimedEvent: function(te) {
            if (this.userTimedEvents.length > 0) {
                this.userTimedEvents.splice(0, this.userTimedEvents.length)
            }
            this.userTimedEvents.push(te)
        },
        getTimedEvent: function(eventId) {
            var results = this.userTimedEvents.filter(function(item) {
                return item.eventId == eventId
            });
            if (results.length == 0) {
                return null
            }
            return results[0]
        },
        __class__: agario_module_shop_models_vo_UserInfoVO
    });
    var agario_module_shop_models_vo_UserSettingVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.UserSettingVO"] = agario_module_shop_models_vo_UserSettingVO;
    agario_module_shop_models_vo_UserSettingVO.__name__ = ["agario", "module", "shop", "models", "vo", "UserSettingVO"];
    agario_module_shop_models_vo_UserSettingVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_UserSettingVO.prototype = $extend(oaktree_core_VO.prototype, {
        key: null,
        value: null,
        __class__: agario_module_shop_models_vo_UserSettingVO
    });
    var agario_module_shop_models_vo_UserStatsVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.UserStatsVO"] = agario_module_shop_models_vo_UserStatsVO;
    agario_module_shop_models_vo_UserStatsVO.__name__ = ["agario", "module", "shop", "models", "vo", "UserStatsVO"];
    agario_module_shop_models_vo_UserStatsVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_UserStatsVO.prototype = $extend(oaktree_core_VO.prototype, {
        gamesPlayed: null,
        massConsumed: null,
        averageScore: null,
        highestMass: null,
        longestTimeAlive: null,
        mostCellsEaten: null,
        __class__: agario_module_shop_models_vo_UserStatsVO
    });
    var agario_module_shop_models_vo_VisualBundleVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.VisualBundleVO"] = agario_module_shop_models_vo_VisualBundleVO;
    agario_module_shop_models_vo_VisualBundleVO.__name__ = ["agario", "module", "shop", "models", "vo", "VisualBundleVO"];
    agario_module_shop_models_vo_VisualBundleVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_VisualBundleVO.prototype = $extend(oaktree_core_VO.prototype, {
        bundleId: null,
        description: null,
        visualSource: null,
        imageType: null,
        popupType: null,
        getBitmap: function() {
            var defer = new promhx_deferred_DeferredPromise();
            agario_utils_AssetsUtils.getBitmap(this.visualSource.source).then(function(bitmap) {
                defer.resolve(bitmap)
            });
            return defer.boundPromise
        },
        __class__: agario_module_shop_models_vo_VisualBundleVO
    });
    var agario_module_shop_models_vo_VisualProductVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.VisualProductVO"] = agario_module_shop_models_vo_VisualProductVO;
    agario_module_shop_models_vo_VisualProductVO.__name__ = ["agario", "module", "shop", "models", "vo", "VisualProductVO"];
    agario_module_shop_models_vo_VisualProductVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_VisualProductVO.prototype = $extend(oaktree_core_VO.prototype, {
        productId: null,
        description: null,
        visualSource: null,
        imageType: null,
        getBitmap: function() {
            var defer = new promhx_deferred_DeferredPromise();
            agario_utils_AssetsUtils.getBitmap(this.visualSource.source).then(function(bitmap) {
                defer.resolve(bitmap)
            });
            return defer.boundPromise
        },
        __class__: agario_module_shop_models_vo_VisualProductVO
    });
    var agario_module_shop_models_vo_VisualTabsAssociationVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.VisualTabsAssociationVO"] = agario_module_shop_models_vo_VisualTabsAssociationVO;
    agario_module_shop_models_vo_VisualTabsAssociationVO.__name__ = ["agario", "module", "shop", "models", "vo", "VisualTabsAssociationVO"];
    agario_module_shop_models_vo_VisualTabsAssociationVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_VisualTabsAssociationVO.prototype = $extend(oaktree_core_VO.prototype, {
        skinType: null,
        tabDescription: null,
        __class__: agario_module_shop_models_vo_VisualTabsAssociationVO
    });
    var agario_module_shop_models_vo_WalletPurchaseVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletPurchaseVO"] = agario_module_shop_models_vo_WalletPurchaseVO;
    agario_module_shop_models_vo_WalletPurchaseVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletPurchaseVO"];
    agario_module_shop_models_vo_WalletPurchaseVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_WalletPurchaseVO.prototype = $extend(oaktree_core_VO.prototype, {
        bundleId: null,
        id: null,
        type: null,
        __class__: agario_module_shop_models_vo_WalletPurchaseVO
    });
    var agario_module_shop_models_vo_WalletInappPurchaseVO = function(obj) {
        agario_module_shop_models_vo_WalletPurchaseVO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletInappPurchaseVO"] = agario_module_shop_models_vo_WalletInappPurchaseVO;
    agario_module_shop_models_vo_WalletInappPurchaseVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletInappPurchaseVO"];
    agario_module_shop_models_vo_WalletInappPurchaseVO.__super__ = agario_module_shop_models_vo_WalletPurchaseVO;
    agario_module_shop_models_vo_WalletInappPurchaseVO.prototype = $extend(agario_module_shop_models_vo_WalletPurchaseVO.prototype, {
        priceTier: null,
        localizedName: null,
        localizedDescription: null,
        __class__: agario_module_shop_models_vo_WalletInappPurchaseVO
    });
    var agario_module_shop_models_vo_WalletItemVO = function(obj) {
        this.inUse = false;
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletItemVO"] = agario_module_shop_models_vo_WalletItemVO;
    agario_module_shop_models_vo_WalletItemVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletItemVO"];
    agario_module_shop_models_vo_WalletItemVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_WalletItemVO.prototype = $extend(oaktree_core_VO.prototype, {
        productId: null,
        _balance: null,
        balance: null,
        get_balance: function() {
            return this._balance
        },
        set_balance: function(value) {
            if (value < 0) {
                value = 0
            }
            return this._balance = value
        },
        inUse: null,
        __class__: agario_module_shop_models_vo_WalletItemVO,
        __properties__: $extend(oaktree_core_VO.prototype.__properties__, {
            set_balance: "set_balance",
            get_balance: "get_balance"
        })
    });
    var agario_module_shop_models_vo_WalletOfferableBundlesVO = function(obj) {
        agario_module_shop_models_vo_WalletPurchaseVO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletOfferableBundlesVO"] = agario_module_shop_models_vo_WalletOfferableBundlesVO;
    agario_module_shop_models_vo_WalletOfferableBundlesVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletOfferableBundlesVO"];
    agario_module_shop_models_vo_WalletOfferableBundlesVO.__super__ = agario_module_shop_models_vo_WalletPurchaseVO;
    agario_module_shop_models_vo_WalletOfferableBundlesVO.prototype = $extend(agario_module_shop_models_vo_WalletPurchaseVO.prototype, {
        availableFrom: null,
        availableTo: null,
        __class__: agario_module_shop_models_vo_WalletOfferableBundlesVO
    });
    var agario_module_shop_models_vo_WalletProductBundleVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletProductBundleVO"] = agario_module_shop_models_vo_WalletProductBundleVO;
    agario_module_shop_models_vo_WalletProductBundleVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletProductBundleVO"];
    agario_module_shop_models_vo_WalletProductBundleVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_WalletProductBundleVO.prototype = $extend(oaktree_core_VO.prototype, {
        id: null,
        productId: null,
        quantity: null,
        visual: null,
        __class__: agario_module_shop_models_vo_WalletProductBundleVO
    });
    var agario_module_shop_models_vo_WalletProductVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletProductVO"] = agario_module_shop_models_vo_WalletProductVO;
    agario_module_shop_models_vo_WalletProductVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletProductVO"];
    agario_module_shop_models_vo_WalletProductVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_WalletProductVO.prototype = $extend(oaktree_core_VO.prototype, {
        id: null,
        type: null,
        consumable: null,
        visual: null,
        __class__: agario_module_shop_models_vo_WalletProductVO
    });
    var agario_module_shop_models_vo_WalletSoftPurchaseVO = function(obj) {
        agario_module_shop_models_vo_WalletPurchaseVO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletSoftPurchaseVO"] = agario_module_shop_models_vo_WalletSoftPurchaseVO;
    agario_module_shop_models_vo_WalletSoftPurchaseVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletSoftPurchaseVO"];
    agario_module_shop_models_vo_WalletSoftPurchaseVO.__super__ = agario_module_shop_models_vo_WalletPurchaseVO;
    agario_module_shop_models_vo_WalletSoftPurchaseVO.prototype = $extend(agario_module_shop_models_vo_WalletPurchaseVO.prototype, {
        currencyAmount: null,
        currencyProductId: null,
        __class__: agario_module_shop_models_vo_WalletSoftPurchaseVO
    });
    var agario_module_shop_models_vo_WalletTimeVariablePricesVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.WalletTimeVariablePricesVO"] = agario_module_shop_models_vo_WalletTimeVariablePricesVO;
    agario_module_shop_models_vo_WalletTimeVariablePricesVO.__name__ = ["agario", "module", "shop", "models", "vo", "WalletTimeVariablePricesVO"];
    agario_module_shop_models_vo_WalletTimeVariablePricesVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_WalletTimeVariablePricesVO.prototype = $extend(oaktree_core_VO.prototype, {
        purchaseIdForTimedEvent: null,
        timedEventId: null,
        everyXMins: null,
        decreaseCurrencyAmountBy: null,
        __class__: agario_module_shop_models_vo_WalletTimeVariablePricesVO
    });
    var agario_module_shop_models_vo_XPItemVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.XPItemVO"] = agario_module_shop_models_vo_XPItemVO;
    agario_module_shop_models_vo_XPItemVO.__name__ = ["agario", "module", "shop", "models", "vo", "XPItemVO"];
    agario_module_shop_models_vo_XPItemVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_XPItemVO.prototype = $extend(oaktree_core_VO.prototype, {
        level: null,
        xpToNextLevel: null,
        levelUpBonusId: null,
        __class__: agario_module_shop_models_vo_XPItemVO
    });
    var agario_module_shop_models_vo_XsollaShopItemsVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.XsollaShopItemsVO"] = agario_module_shop_models_vo_XsollaShopItemsVO;
    agario_module_shop_models_vo_XsollaShopItemsVO.__name__ = ["agario", "module", "shop", "models", "vo", "XsollaShopItemsVO"];
    agario_module_shop_models_vo_XsollaShopItemsVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_XsollaShopItemsVO.prototype = $extend(oaktree_core_VO.prototype, {
        items: null,
        currency_code: null,
        __class__: agario_module_shop_models_vo_XsollaShopItemsVO
    });
    var agario_module_shop_models_vo_XsollaShopItemVO = function(obj) {
        oaktree_core_VO.call(this, obj)
    };
    $hxClasses["agario.module.shop.models.vo.XsollaShopItemVO"] = agario_module_shop_models_vo_XsollaShopItemVO;
    agario_module_shop_models_vo_XsollaShopItemVO.__name__ = ["agario", "module", "shop", "models", "vo", "XsollaShopItemVO"];
    agario_module_shop_models_vo_XsollaShopItemVO.__super__ = oaktree_core_VO;
    agario_module_shop_models_vo_XsollaShopItemVO.prototype = $extend(oaktree_core_VO.prototype, {
        sku: null,
        description: null,
        price: null,
        __class__: agario_module_shop_models_vo_XsollaShopItemVO
    });
    var agario_module_shop_renderers_CurrencyShopItem = function(item) {
        this.maxHeight = 65;
        this.maxWidth = 800;
        openfl_display_Sprite.call(this);
        this.item = item;
        this._payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment)
    };
    $hxClasses["agario.module.shop.renderers.CurrencyShopItem"] = agario_module_shop_renderers_CurrencyShopItem;
    agario_module_shop_renderers_CurrencyShopItem.__name__ = ["agario", "module", "shop", "renderers", "CurrencyShopItem"];
    agario_module_shop_renderers_CurrencyShopItem.__super__ = openfl_display_Sprite;
    agario_module_shop_renderers_CurrencyShopItem.prototype = $extend(openfl_display_Sprite.prototype, {
        maxWidth: null,
        maxHeight: null,
        item: null,
        background: null,
        plusLabel: null,
        stampIcon: null,
        percentage: null,
        price: null,
        amountLabel: null,
        multiplierLabel: null,
        finalAmountLabel: null,
        equalLabel: null,
        buy: null,
        currencyIcon: null,
        _payModel: null,
        onClick: function(e) {
            this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::BUY"))
        },
        render: function() {
            this.drawItem();
            this.doLayout()
        },
        update: function() {
            this.doLayout()
        },
        drawItem: function() {
            var bgColor = 16768658;
            var percentageBg = 16742656;
            var priceBackground = 16775095;
            if (this.item.banner.toLowerCase() == "none") {
                bgColor = 16775095;
                percentageBg = 16769024;
                priceBackground = 16768658
            }
            this.background = new openfl_display_Sprite();
            this.background.get_graphics().beginFill(bgColor, 1);
            this.background.get_graphics().drawRoundRect(0, 0, this.maxWidth, this.maxHeight, 5, 5);
            this.background.get_graphics().endFill();
            this.addChild(this.background);
            this.amountLabel = new oaktree_ext_ui_Label({
                text: Std.string(this.item.preAmount),
                fontSize: 18,
                align: 3
            });
            this.amountLabel.set_autoSize(1);
            this.disableTextField(this.amountLabel);
            this.addChild(this.amountLabel);
            if (this.item.banner != "none") {
                this.stampIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("multiplier_stamp", "main_shop").get_bitmapData());
                this.addChild(this.stampIcon);
                this.multiplierLabel = new oaktree_ext_ui_Label({
                    text: oaktree_ext_localization_I18n.text(this.item.banner),
                    fontSize: 20,
                    color: 16777215,
                    wordWrap: true,
                    maxWidth: 55
                });
                this.addChild(this.multiplierLabel);
                this.multiplierLabel.set_textGroup(agario_module_shop_renderers_CurrencyShopItem.MULTIPLIER_LABEL_TEXTGROUP)
            }
            this.plusLabel = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 16,
                align: 3
            });
            this.plusLabel.set_autoSize(1);
            this.disableTextField(this.plusLabel);
            this.addChild(this.plusLabel);
            var baseRectOptions = {
                labelOptions: {
                    text: Std.string(this.item.percentage) + "%",
                    fontSize: 16,
                    align: 3,
                    color: 16777215
                },
                labelWidth: 90,
                labelHeight: this.maxHeight - 10,
                radius: 5,
                backgroundColor: percentageBg
            };
            this.percentage = new oaktree_ext_ui_controls_LabelRectangle(baseRectOptions);
            this.addChild(this.percentage);
            this.equalLabel = new oaktree_ext_ui_Label({
                text: "=",
                fontSize: 16,
                align: 3,
                color: 16742656
            });
            this.equalLabel.set_autoSize(1);
            this.disableTextField(this.equalLabel);
            this.addChild(this.equalLabel);
            this.finalAmountLabel = new oaktree_ext_ui_Label({
                text: Std.string(this.item.finalAmount),
                fontSize: 18,
                align: 4,
                color: 16742656
            });
            this.finalAmountLabel.set_autoSize(3);
            this.finalAmountLabel.set_selectable(false);
            this.finalAmountLabel.mouseEnabled = false;
            this.addChild(this.finalAmountLabel);
            baseRectOptions.labelOptions.fontSize = 14;
            baseRectOptions.labelWidth = 100;
            baseRectOptions.labelOptions.color = 0;
            baseRectOptions.labelOptions.text = agario_utils_CurrencyTools.getFormatedCurrencyPrice(this._payModel, this.item.price);
            baseRectOptions.backgroundColor = priceBackground;
            this.price = new oaktree_ext_ui_controls_LabelRectangle(baseRectOptions);
            this.addChild(this.price);
            var atlas = Core.get_assets().getAtlas("main_shop");
            this.currencyIcon = new openfl_display_Bitmap(atlas.getTexture("currency_icon").get_bitmapData());
            this.addChild(this.currencyIcon);
            this.buy = new agario_views_controls_SemiRoundButton(oaktree_ext_localization_I18n.text("menu_shop_buy"), 80, this.maxHeight);
            this.addChild(this.buy);
            this.buttonMode = true;
            this.useHandCursor = true;
            this.addEventListener("click", $bind(this, this.onClick));
            this.addEventListener("mouseOver", $bind(this, this.onRollIOverItem));
            this.addEventListener("mouseOut", $bind(this, this.onRollOutItem))
        },
        disableTextField: function(input) {
            input.set_selectable(false);
            input.mouseEnabled = false
        },
        onRollOutItem: function(e) {
            this.buy.set_currentState(this.buy.upState);
            this.background.set_alpha(1)
        },
        onRollIOverItem: function(e) {
            this.buy.set_currentState(this.buy.overState);
            this.background.set_alpha(0.5)
        },
        doLayout: function() {
            if (this.stampIcon != null) {
                while (this.stampIcon.get_height() > this.maxHeight) {
                    this.stampIcon.set_scaleX((function($this) {
                        var $r;
                        var _g = $this.stampIcon;
                        $r = _g.set_scaleY(_g.get_scaleY() - 0.001);
                        return $r
                    }(this)))
                }
                this.stampIcon.smoothing = true;
                this.stampIcon.set_y((this.maxHeight - this.stampIcon.get_height()) / 2);
                this.stampIcon.set_x(0);
                this.multiplierLabel.set_x((this.stampIcon.get_width() - this.multiplierLabel.get_width()) / 2 + 5);
                this.multiplierLabel.set_y((this.maxHeight - this.multiplierLabel.get_height()) / 2)
            }
            this.background.set_x(70);
            this.background.set_y(0);
            this.amountLabel.set_x(90);
            this.amountLabel.set_y((this.maxHeight - this.amountLabel.get_height()) / 2);
            this.percentage.set_x(this.maxWidth / 3);
            this.percentage.set_y((this.maxHeight - this.percentage.get_height()) / 2);
            this.plusLabel.set_x(this.percentage.get_x() - 40);
            this.plusLabel.set_y((this.maxHeight - this.plusLabel.get_height()) / 2);
            this.equalLabel.set_x(this.percentage.get_x() + this.percentage.get_width() + 20);
            this.equalLabel.set_y((this.maxHeight - this.equalLabel.get_height()) / 2);
            this.buy.set_x(this.background.get_x() + this.maxWidth - this.buy.get_width());
            this.price.set_x(this.buy.get_x() - this.price.get_width() - 50);
            this.price.set_y((this.background.get_height() - this.price.get_height()) / 2);
            this.currencyIcon.set_x(this.price.get_x() - 60);
            this.currencyIcon.set_y((this.maxHeight - this.currencyIcon.get_height()) / 2);
            this.finalAmountLabel.set_x(this.currencyIcon.get_x() - this.finalAmountLabel.get_width() - 5);
            this.finalAmountLabel.set_y((this.maxHeight - this.finalAmountLabel.get_height()) / 2)
        },
        __class__: agario_module_shop_renderers_CurrencyShopItem
    });
    var agario_module_shop_renderers_ShopBoostItem = function(itemDataList) {
        oaktree_ext_ui_View.call(this);
        this.itemDataList = itemDataList;
        this.maxWidth = 277;
        this.maxHeight = 331;
        this.pricesContainerWidth = this.maxWidth - 20;
        this.btnColors = [6349312, 16742401];
        this.btnOverColors = [5622016, 15166464];
        Core.get_events().addEventListener("ShopEvent::DISABLE_CLOSED", $bind(this, this.onTooltipClose))
    };
    $hxClasses["agario.module.shop.renderers.ShopBoostItem"] = agario_module_shop_renderers_ShopBoostItem;
    agario_module_shop_renderers_ShopBoostItem.__name__ = ["agario", "module", "shop", "renderers", "ShopBoostItem"];
    agario_module_shop_renderers_ShopBoostItem.__super__ = oaktree_ext_ui_View;
    agario_module_shop_renderers_ShopBoostItem.prototype = $extend(oaktree_ext_ui_View.prototype, {
        itemIcon: null,
        title: null,
        background: null,
        buyOptionsContainer: null,
        hint: null,
        itemDataList: null,
        pricesContainerWidth: null,
        btnColors: null,
        btnOverColors: null,
        originalPosition: null,
        onTooltipClose: function(e) {
            agario_views_ShopDialog.discardNextClose = true;
            this.closeTooltip()
        },
        closeTooltip: function() {
            this.addChild(this.hint);
            this.hint.set_x(this.originalPosition.x);
            this.hint.set_y(this.originalPosition.y);
            this.hint.closeHint();
            Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
            Core.get_events().dispatchEventWith("shop_event::allow_disable_close", false)
        },
        onRemovedFromStage: function(e) {
            this.closeTooltip();
            oaktree_ext_ui_View.prototype.onRemovedFromStage.call(this, e);
            this._initialized = false
        },
        initialize: function() {
            this.background = new openfl_display_Shape();
            this.background.get_graphics().beginFill(16053492, 1);
            this.background.get_graphics().drawRoundRect(0, 0, this.maxWidth, this.maxHeight, 5, 5);
            this.background.get_graphics().endFill();
            this.addChild(this.background);
            this.title = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text(this.itemDataList[0].category.title),
                fontSize: 18,
                align: 0,
                bold: true
            });
            this.addChild(this.title);
            this.title.set_width(this.maxWidth - 20);
            this.title.mouseEnabled = false;
            var hintText = oaktree_ext_localization_I18n.text(this.itemDataList[0].category.description);
            this.hint = new agario_views_controls_HintTooltip(hintText, this.maxWidth - 10 | 0, 50, "left");
            this.addChild(this.hint);
            Core.get_events().addEventListener("ShopEvent::SHOP_ENABLED", $bind(this, this.handleShopEnabled));
            this.hint.addEventListener(agario_module_shop_events_HintTooltipEvent.CLOSED, $bind(this, this.onHintClosed));
            this.hint.addEventListener(agario_module_shop_events_HintTooltipEvent.OPENED, $bind(this, this.onHintOpened));
            var atlas = Core.get_assets().getAtlas("main_shop");
            var imgName = StringTools.replace(this.itemDataList[0].category.image, ".png", "");
            this.itemIcon = new openfl_display_Bitmap(atlas.getTexture(imgName).get_bitmapData());
            this.addChild(this.itemIcon);
            this.drawDynamicContent()
        },
        handleShopEnabled: function(e) {
            Core.get_events().dispatchEventWith("shop_event::allow_disable_close", false);
            this.addChild(this.hint);
            this.hint.set_x(this.originalPosition.x);
            this.hint.set_y(this.originalPosition.y);
            this.hint.closeHint()
        },
        onHintOpened: function(e) {
            Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
            Core.get_events().dispatchEventWith("shop_event::allow_disable_close", true);
            var mousePosition = this.localToGlobal(new openfl_geom_Point(this.hint.get_x(), this.hint.get_y()));
            this.hint.set_x(mousePosition.x);
            this.hint.set_y(mousePosition.y);
            this.stage.addChild(this.hint)
        },
        onHintClosed: function(e) {
            this.addChild(this.hint);
            this.hint.set_x(this.originalPosition.x);
            this.hint.set_y(this.originalPosition.y);
            Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
            Core.get_events().dispatchEventWith("shop_event::allow_disable_close", false)
        },
        drawDynamicContent: function() {
            this.buyOptionsContainer = new openfl_display_Sprite();
            this.addChild(this.buyOptionsContainer);
            var idx = 0;
            var cursor_y = 0;
            var _g1 = 0;
            var _g = this.itemDataList.length;
            while (_g1 < _g) {
                var i = _g1++;
                var infoData = [this.itemDataList[i]];
                var priceContainer = new openfl_display_Sprite();
                this.buyOptionsContainer.addChild(priceContainer);
                if (idx > 0) {
                    var line = new openfl_display_Shape();
                    line.get_graphics().lineStyle(1, 13421772, 1);
                    line.get_graphics().lineTo(this.pricesContainerWidth, 0);
                    priceContainer.addChild(line)
                }
                var priceName = new oaktree_ext_ui_Label({
                    text: oaktree_ext_localization_I18n.text(infoData[0].title),
                    align: 0
                });
                priceName.set_width(this.pricesContainerWidth);
                priceName.set_selectable(false);
                priceContainer.addChild(priceName);
                priceName.set_x((this.pricesContainerWidth - priceName.get_width()) * 0.5);
                priceName.set_y(10);
                var icon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
                var priceButton = new agario_views_controls_ColorButton(null, {
                    color: this.btnColors[idx],
                    overColor: this.btnOverColors[idx],
                    text: "" + infoData[0].price,
                    textColorOver: 16777215,
                    textColor: 16777215,
                    icon: icon,
                    w: 140,
                    h: 40,
                    fontSize: 14,
                    bold: true
                });
                priceContainer.addChild(priceButton);
                priceButton.set_x((this.pricesContainerWidth - priceButton.get_width()) * 0.5);
                priceButton.set_y(priceName.get_y() + priceName.get_height() + 5);
                priceButton.data = Core.models.shopBoostItems.getItemByPurchaseId(infoData[0].purchaseId);
                var userBoost = null;
                if (!Core.user.isGuest) {
                    userBoost = Core.user.wallet.filter((function(infoData) {
                        return function(item) {
                            return item.productId == infoData[0].gameplayInfo.productId
                        }
                    })(infoData))[0]
                }
                if (userBoost != null && userBoost.get_balance() > 0) {
                    var quantity = new agario_views_controls_QuantityCircle(userBoost.get_balance());
                    priceContainer.addChild(quantity);
                    quantity.set_x(priceButton.get_x() + priceButton.get_width());
                    quantity.set_y(priceButton.get_y());
                    if (this.itemDataList[i].get_inUse() == false) {
                        priceButton.hideIcon();
                        priceButton.set_text(oaktree_ext_localization_I18n.text("menu_shop_use"));
                        priceButton.addEventListener("click", $bind(this, this.onUseClick))
                    } else {
                        priceButton.addEventListener("click", $bind(this, this.onClick))
                    }
                } else {
                    priceButton.addEventListener("click", $bind(this, this.onClick))
                }
                if (this.itemDataList[i].bestDealSticker) {
                    var sticker = new agario_views_controls_StampSticker(oaktree_ext_localization_I18n.text("menu_shop_coins_best"));
                    priceContainer.addChild(sticker);
                    sticker.set_x(priceButton.get_x());
                    sticker.set_y(priceButton.get_y())
                }
                priceContainer.set_x((this.maxWidth - this.pricesContainerWidth) * 0.5);
                priceContainer.set_y(cursor_y + 20 * idx);
                cursor_y += 25 * idx + priceContainer.get_height();
                idx++
            }
            this.doLayout()
        },
        updateView: function() {
            oaktree_ext_ui_View.prototype.updateView.call(this);
            while (this.buyOptionsContainer.get_numChildren() > 0) {
                this.buyOptionsContainer.removeChildAt(0)
            }
            this.removeChild(this.buyOptionsContainer);
            this.drawDynamicContent()
        },
        onUseClick: function(e) {
            var btn = e.currentTarget;
            btn.set_enabled(false);
            var data = btn.data;
            if (data != null) {
                this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::USE", data))
            }
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onClick: function(e) {
            var btn = e.currentTarget;
            btn.set_enabled(false);
            if (Core.user.isGuest) {
                btn.delayedEnable()
            }
            var data = btn.data;
            if (data != null) {
                this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::BUY", data))
            }
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        doLayout: function() {
            this.hint.set_x(this.maxWidth - this.hint.get_width() - 10);
            this.hint.set_y(10);
            this.originalPosition = new openfl_geom_Point(this.hint.get_x(), this.hint.get_y());
            this.title.set_x(10);
            this.title.set_y(10);
            this.itemIcon.set_x((this.maxWidth - this.itemIcon.get_width()) * 0.5);
            this.itemIcon.set_y(80);
            this.buyOptionsContainer.set_y(this.itemIcon.get_y() + this.itemIcon.get_height() + 10)
        },
        dispose: function() {
            Core.get_events().removeEventListener("ShopEvent::SHOP_ENABLED", $bind(this, this.handleShopEnabled));
            Core.get_events().removeEventListener("ShopEvent::DISABLE_CLOSED", $bind(this, this.onTooltipClose));
            this.hint.removeEventListener(agario_module_shop_events_HintTooltipEvent.CLOSED, $bind(this, this.onHintClosed));
            this.hint.removeEventListener(agario_module_shop_events_HintTooltipEvent.OPENED, $bind(this, this.onHintOpened));
            oaktree_ext_ui_View.prototype.dispose.call(this)
        },
        __class__: agario_module_shop_renderers_ShopBoostItem
    });
    var agario_module_shop_renderers_ShopSectionButton = function(id, label, face, color, textColor) {
        var state = new openfl_display_Sprite();
        this.sectionFace = new openfl_display_Bitmap(face);
        this.sectionFace.smoothing = true;
        state.addChild(this.sectionFace);
        this.normalSubtitleArea = new openfl_display_Shape();
        this.normalSubtitleArea.get_graphics().beginFill(color, 0.8);
        this.normalSubtitleArea.get_graphics().drawRoundRect(0, 0, this.sectionFace.get_width(), this.sectionFace.get_height() / 5, 5, 5);
        this.normalSubtitleArea.get_graphics().endFill();
        state.addChild(this.normalSubtitleArea);
        this.overSubtitleArea = new openfl_display_Shape();
        this.overSubtitleArea.get_graphics().beginFill(color, 1);
        this.overSubtitleArea.get_graphics().drawRoundRect(0, 0, this.sectionFace.get_width(), this.sectionFace.get_height() / 5, 5, 5);
        this.overSubtitleArea.get_graphics().endFill();
        state.addChild(this.overSubtitleArea);
        this.overSubtitleArea.set_visible(false);
        this.normalSubtitleArea.set_y(this.overSubtitleArea.set_y(this.sectionFace.get_height() - this.normalSubtitleArea.get_height()));
        var format = new openfl_text_TextFormat(Core.get_fontName(), 23, 0, true);
        format.align = 3;
        this.subtitleText = new openfl_text_TextField();
        this.subtitleText.set_defaultTextFormat(format);
        this.subtitleText.set_text(label);
        this.subtitleText.set_height(this.subtitleText.get_textHeight() + 5);
        this.subtitleText.set_autoSize(1);
        this.subtitleText.set_textColor(textColor);
        this.subtitleText.set_x((this.sectionFace.get_width() - this.subtitleText.get_textWidth()) * 0.5);
        this.subtitleText.set_y(this.normalSubtitleArea.get_y() + (this.normalSubtitleArea.get_height() - this.subtitleText.get_textHeight()) * 0.5);
        state.addChild(this.subtitleText);
        this.addEventListener("click", $bind(this, this.handleButtonClick));
        this.upState = this.downState = this.overState = state;
        this.mouseChildren = false;
        oaktree_ext_ui_controls_Button.call(this, id)
    };
    $hxClasses["agario.module.shop.renderers.ShopSectionButton"] = agario_module_shop_renderers_ShopSectionButton;
    agario_module_shop_renderers_ShopSectionButton.__name__ = ["agario", "module", "shop", "renderers", "ShopSectionButton"];
    agario_module_shop_renderers_ShopSectionButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_module_shop_renderers_ShopSectionButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        sectionFace: null,
        subtitleText: null,
        normalSubtitleArea: null,
        overSubtitleArea: null,
        updateState: function() {
            oaktree_ext_ui_controls_Button.prototype.updateState.call(this);
            if (this.mouseIsOver) {
                this.overSubtitleArea.set_visible(true);
                this.normalSubtitleArea.set_visible(false)
            } else {
                this.overSubtitleArea.set_visible(false);
                this.normalSubtitleArea.set_visible(true)
            }
        },
        handleButtonClick: function(e) {
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        __class__: agario_module_shop_renderers_ShopSectionButton
    });
    var agario_module_shop_screens_ShopCoinsScreen = function() {
        oaktree_ext_ui_View.call(this);
        this.bundleItems = new List();
        this.set_name(oaktree_ext_localization_I18n.text("menu_shop_coins_title"))
    };
    $hxClasses["agario.module.shop.screens.ShopCoinsScreen"] = agario_module_shop_screens_ShopCoinsScreen;
    agario_module_shop_screens_ShopCoinsScreen.__name__ = ["agario", "module", "shop", "screens", "ShopCoinsScreen"];
    agario_module_shop_screens_ShopCoinsScreen.__super__ = oaktree_ext_ui_View;
    agario_module_shop_screens_ShopCoinsScreen.prototype = $extend(oaktree_ext_ui_View.prototype, {
        bundleItems: null,
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.buildCoinShop()
        },
        sortByOrderInShop: function(a, b) {
            if (a.orderInShop < b.orderInShop) {
                return 1
            }
            if (a.orderInShop > b.orderInShop) {
                return -1
            }
            return 0
        },
        buildCoinShop: function() {
            var shopWidth = 645;
            var list = new oaktree_ext_ui_View();
            list.set_y(30);
            list.set_x(15);
            this.addChild(list);
            Core.models.shopCoins.shopCoinsList.sort($bind(this, this.sortByOrderInShop));
            var idx = 0;
            var _g = 0;
            var _g1 = Core.models.shopCoins.shopCoinsList;
            while (_g < _g1.length) {
                var shopCoinItem = _g1[_g];
                ++_g;
                var finalPack = shopCoinItem;
                var replacementId = agario_services_promo_PromoUtils.getConfigIdReplacement(shopCoinItem.purchaseId);
                var replacementPack = Core.models.shopCoins.getItemById(replacementId);
                if (replacementPack == null) {
                    if (agario_services_promo_PromoUtils.shouldSkipConfigEntry(finalPack.purchaseId, finalPack.visibility)) {
                        continue
                    }
                } else {
                    finalPack = replacementPack
                }
                var item = new agario_module_shop_renderers_CurrencyShopItem(finalPack);
                item.addEventListener("ShopEvent::BUY", $bind(this, this.onBuyClick));
                item.maxWidth = shopWidth;
                item.maxHeight = 60;
                list.addChild(item);
                item.set_y(70 * idx);
                item.render();
                idx++;
                this.bundleItems.push(item)
            }
            var multiplayerTextGroup = oaktree_ext_ui_Label.getTextGroup(agario_module_shop_renderers_CurrencyShopItem.MULTIPLIER_LABEL_TEXTGROUP);
            if (multiplayerTextGroup != null) {
                multiplayerTextGroup.useLowestFontSize(12, true)
            }
            oaktree_ext_ui_Label.clearTextGroup(agario_module_shop_renderers_CurrencyShopItem.MULTIPLIER_LABEL_TEXTGROUP);
            var _g_head = this.bundleItems.h;
            var _g_val = null;
            while (_g_head != null) {
                var item1;
                item1 = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                item1.update()
            }
            var freeBackground = new openfl_display_Shape();
            freeBackground.get_graphics().beginFill(16711680);
            oaktree_utils_MCGraphics.drawRoundRectComplex(freeBackground.get_graphics(), 0, 0, 90, 25, 5, 5, 0, 0);
            freeBackground.get_graphics().endFill();
            this.addChild(freeBackground);
            freeBackground.set_x(list.get_x() + shopWidth / 3);
            freeBackground.set_y(list.get_y() - freeBackground.get_height());
            var freeLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_shop_coins_free"),
                fontSize: 16,
                align: 0,
                color: 16777215
            });
            freeLabel.mouseEnabled = false;
            freeLabel.set_selectable(false);
            this.addChild(freeLabel);
            freeLabel.set_x(freeBackground.get_x() + (freeBackground.get_width() - freeLabel.get_width()) / 2);
            freeLabel.set_y(freeBackground.get_y() + (freeBackground.get_height() - freeLabel.get_height()) / 2)
        },
        onBuyClick: function(e) {
            var item = e.currentTarget;
            Core.get_events().dispatchEventWith("ShopEvent::BUY", item.item.purchaseId)
        },
        __class__: agario_module_shop_screens_ShopCoinsScreen
    });
    var agario_module_shop_screens_ShopGenericBoostScreen = function() {
        oaktree_ext_ui_View.call(this)
    };
    $hxClasses["agario.module.shop.screens.ShopGenericBoostScreen"] = agario_module_shop_screens_ShopGenericBoostScreen;
    agario_module_shop_screens_ShopGenericBoostScreen.__name__ = ["agario", "module", "shop", "screens", "ShopGenericBoostScreen"];
    agario_module_shop_screens_ShopGenericBoostScreen.__super__ = oaktree_ext_ui_View;
    agario_module_shop_screens_ShopGenericBoostScreen.prototype = $extend(oaktree_ext_ui_View.prototype, {
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this)
        },
        createBoostItems: function(data) {
            var list = new haxe_ds_IntMap();
            var _g1 = 0;
            var _g = data.length;
            while (_g1 < _g) {
                var i = _g1++;
                var cat = data[i].categoryPosition;
                var arr = list.h[cat];
                if (arr == null) {
                    arr = []
                }
                arr.push(data[i]);
                list.h[cat] = arr
            }
            var posX = 0;
            var $it0 = list.iterator();
            while ($it0.hasNext()) {
                var dataList = $it0.next();
                var boostItem = new agario_module_shop_renderers_ShopBoostItem(dataList);
                boostItem.maxWidth = this.maxWidth / 2 - 10;
                boostItem.maxHeight = this.maxHeight - 20;
                boostItem.addEventListener("ShopEvent::BUY", $bind(this, this.onBuy));
                boostItem.addEventListener("ShopEvent::USE", $bind(this, this.onUse));
                this.addChild(boostItem);
                var margin = 0;
                if (posX > 0) {
                    margin = 20
                }
                boostItem.set_x(posX * boostItem.maxWidth + margin);
                posX++
            }
        },
        onBuy: function(e) {
            var data = e.data;
            if (data != null) {
                Core.get_events().dispatchEventWith("ShopEvent::BUY", data.purchaseId)
            }
        },
        onUse: function(e) {
            var data = e.data;
            if (data != null) {
                Core.get_events().dispatchEventWith("ShopEvent::USE", data)
            }
        },
        updateView: function() {
            oaktree_ext_ui_View.prototype.updateView.call(this);
            var _g1 = 0;
            var _g = this.get_numChildren();
            while (_g1 < _g) {
                var i = _g1++;
                if (Std.is(this.getChildAt(i), agario_module_shop_renderers_ShopBoostItem)) {
                    (js_Boot.__cast(this.getChildAt(i), agario_module_shop_renderers_ShopBoostItem)).updateView()
                }
            }
        },
        onRemovedFromStage: function(e) {
            oaktree_ext_ui_View.prototype.onRemovedFromStage.call(this, e);
            this._initialized = false
        },
        __class__: agario_module_shop_screens_ShopGenericBoostScreen
    });
    var agario_module_shop_screens_ShopMainScreen = function() {
        oaktree_ext_ui_View.call(this);
        this.set_name(oaktree_ext_localization_I18n.text("menu_main_shop"))
    };
    $hxClasses["agario.module.shop.screens.ShopMainScreen"] = agario_module_shop_screens_ShopMainScreen;
    agario_module_shop_screens_ShopMainScreen.__name__ = ["agario", "module", "shop", "screens", "ShopMainScreen"];
    agario_module_shop_screens_ShopMainScreen.__super__ = oaktree_ext_ui_View;
    agario_module_shop_screens_ShopMainScreen.prototype = $extend(oaktree_ext_ui_View.prototype, {
        coinsSectionBtn: null,
        skinsSectionBtn: null,
        massSectionBtn: null,
        xpSectionBtn: null,
        initialize: function() {
            oaktree_ext_ui_View.prototype.initialize.call(this);
            var sectionsContainer = new openfl_display_Sprite();
            this.addChild(sectionsContainer);
            var atlas = Core.get_assets().getAtlas("main_shop");
            this.coinsSectionBtn = this.createSection(0, "shop_coins", oaktree_ext_localization_I18n.text("menu_shop_button_coins"), atlas.get("coins_button").get_bitmapData(), 6349312, 3572736);
            sectionsContainer.addChild(this.coinsSectionBtn);
            this.skinsSectionBtn = this.createSection(1, "shop_skins", oaktree_ext_localization_I18n.text("menu_shop_skins_title"), atlas.get("skins_button").get_bitmapData(), 16768001, 12285696);
            sectionsContainer.addChild(this.skinsSectionBtn);
            this.massSectionBtn = this.createSection(2, "shop_mass", oaktree_ext_localization_I18n.text("menu_shop_button_mass"), atlas.get("mass_button").get_bitmapData(), 16742401, 11286528);
            sectionsContainer.addChild(this.massSectionBtn);
            this.xpSectionBtn = this.createSection(3, "shop_xp", oaktree_ext_localization_I18n.text("menu_shop_button_boost"), atlas.get("xp_button").get_bitmapData(), 57087, 30889);
            sectionsContainer.addChild(this.xpSectionBtn);
            sectionsContainer.set_y(0);
            sectionsContainer.set_x((this.maxWidth - sectionsContainer.get_width()) * 0.5)
        },
        createSection: function(idx, name, label, asset, color, textColor) {
            var sectionBtn = new agario_module_shop_renderers_ShopSectionButton(name, label, asset, color, textColor);
            var fitScale = (this.maxWidth / 2 - 20 - 10) / sectionBtn.get_width();
            sectionBtn.set_scaleX(sectionBtn.set_scaleY(fitScale));
            var idxX = idx % 2;
            var idxY = Math.floor(idx / 2);
            sectionBtn.set_x(idxX * (sectionBtn.get_width() + 10));
            sectionBtn.set_y(idxY * (sectionBtn.get_height() + 10));
            return sectionBtn
        },
        dispose: function() {
            oaktree_ext_ui_View.prototype.dispose.call(this)
        },
        __class__: agario_module_shop_screens_ShopMainScreen
    });
    var agario_module_shop_screens_ShopMassScreen = function() {
        agario_module_shop_screens_ShopGenericBoostScreen.call(this);
        this.set_name(oaktree_ext_localization_I18n.text("menu_shop_mass_title"))
    };
    $hxClasses["agario.module.shop.screens.ShopMassScreen"] = agario_module_shop_screens_ShopMassScreen;
    agario_module_shop_screens_ShopMassScreen.__name__ = ["agario", "module", "shop", "screens", "ShopMassScreen"];
    agario_module_shop_screens_ShopMassScreen.__super__ = agario_module_shop_screens_ShopGenericBoostScreen;
    agario_module_shop_screens_ShopMassScreen.prototype = $extend(agario_module_shop_screens_ShopGenericBoostScreen.prototype, {
        initialize: function() {
            agario_module_shop_screens_ShopGenericBoostScreen.prototype.initialize.call(this);
            var massBoostsData = Core.models.shopBoostItems.getItemsByType(agario_module_shop_models_types_BoostType.MASS_BOOST);
            this.createBoostItems(massBoostsData)
        },
        __class__: agario_module_shop_screens_ShopMassScreen
    });
    var agario_module_shop_screens_ShopSkinsScreen = function() {
        oaktree_ext_ui_View.call(this);
        this.set_name(oaktree_ext_localization_I18n.text("menu_shop_skins_title"))
    };
    $hxClasses["agario.module.shop.screens.ShopSkinsScreen"] = agario_module_shop_screens_ShopSkinsScreen;
    agario_module_shop_screens_ShopSkinsScreen.__name__ = ["agario", "module", "shop", "screens", "ShopSkinsScreen"];
    agario_module_shop_screens_ShopSkinsScreen.__super__ = oaktree_ext_ui_View;
    agario_module_shop_screens_ShopSkinsScreen.prototype = $extend(oaktree_ext_ui_View.prototype, {
        view: null,
        initialize: function() {
            if (this._initialized) {
                return
            }
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.view = new agario_module_shop_view_ShopSkinsView();
            this.view.maxWidth = this.maxWidth;
            this.view.maxHeight = this.maxHeight;
            this.addChild(this.view)
        },
        updateView: function() {
            if (this.view == null) {
                return
            }
            this.view.updateView()
        },
        showTab: function(targetTab) {
            if (this.view != null) {
                this.view.openTab(targetTab);
                this.view.resetContent()
            }
        },
        __class__: agario_module_shop_screens_ShopSkinsScreen
    });
    var agario_module_shop_screens_ShopXPScreen = function() {
        agario_module_shop_screens_ShopGenericBoostScreen.call(this);
        this.set_name(oaktree_ext_localization_I18n.text("menu_shop_button_boost"))
    };
    $hxClasses["agario.module.shop.screens.ShopXPScreen"] = agario_module_shop_screens_ShopXPScreen;
    agario_module_shop_screens_ShopXPScreen.__name__ = ["agario", "module", "shop", "screens", "ShopXPScreen"];
    agario_module_shop_screens_ShopXPScreen.__super__ = agario_module_shop_screens_ShopGenericBoostScreen;
    agario_module_shop_screens_ShopXPScreen.prototype = $extend(agario_module_shop_screens_ShopGenericBoostScreen.prototype, {
        initialize: function() {
            agario_module_shop_screens_ShopGenericBoostScreen.prototype.initialize.call(this);
            var xpBoostsData = Core.models.shopBoostItems.getItemsByType(agario_module_shop_models_types_BoostType.XP_BOOST);
            this.createBoostItems(xpBoostsData)
        },
        __class__: agario_module_shop_screens_ShopXPScreen
    });
    var agario_module_shop_view_TextDialog = function(titleString, descriptionString) {
        oaktree_ext_ui_views_GenericDialog.call(this);
        this.titleString = titleString;
        this.descriptionString = descriptionString;
        this.maxWidth = 420;
        this.maxHeight = 250
    };
    $hxClasses["agario.module.shop.view.TextDialog"] = agario_module_shop_view_TextDialog;
    agario_module_shop_view_TextDialog.__name__ = ["agario", "module", "shop", "view", "TextDialog"];
    agario_module_shop_view_TextDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_shop_view_TextDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        title: null,
        description: null,
        descriptionString: null,
        descriptionContainer: null,
        titleString: null,
        textMaxWidth: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            var color = 15658734;
            var margin = 25;
            var padding = 30;
            this.textMaxWidth = Math.round(this.maxWidth) - margin * 2 - 20;
            this.title = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 24,
                align: 0,
                bold: true
            });
            this.title.set_text(this.titleString);
            this.title.set_width(this.maxWidth);
            this.title.mouseEnabled = false;
            this.addChild(this.title);
            this.description = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 14,
                align: 0,
                bold: true,
                multiline: true,
                wordWrap: true,
                width: this.textMaxWidth,
                maxWidth: this.textMaxWidth
            });
            this.description.set_text(this.descriptionString);
            this.descriptionContainer = new openfl_display_Sprite();
            this.descriptionContainer.get_graphics().beginFill(color);
            this.descriptionContainer.get_graphics().drawRect(0, 0, this.maxWidth - margin * 2, this.description.get_textHeight() + padding);
            this.descriptionContainer.get_graphics().endFill();
            this.descriptionContainer.addChild(this.description);
            this.addChild(this.descriptionContainer);
            this.doLayout()
        },
        doLayout: function() {
            this.title.set_y(15);
            this.descriptionContainer.set_y(this.title.get_y() + this.title.get_height() + 25);
            this.descriptionContainer.set_x((this.maxWidth - this.descriptionContainer.get_width()) / 2);
            this.description.set_x((this.descriptionContainer.get_width() - this.textMaxWidth) / 2);
            this.description.set_y((this.descriptionContainer.get_height() - this.description.get_textHeight()) * 0.5)
        },
        __class__: agario_module_shop_view_TextDialog
    });
    var agario_module_shop_view_ConnectionLostDialog = function() {
        agario_module_shop_view_TextDialog.call(this, "Connection Lost!", "Shop not available at the moment,\n please come back later.");
        this._viewState = "connectionLostDialog";
        this.closeOnEscape = true
    };
    $hxClasses["agario.module.shop.view.ConnectionLostDialog"] = agario_module_shop_view_ConnectionLostDialog;
    agario_module_shop_view_ConnectionLostDialog.__name__ = ["agario", "module", "shop", "view", "ConnectionLostDialog"];
    agario_module_shop_view_ConnectionLostDialog.__super__ = agario_module_shop_view_TextDialog;
    agario_module_shop_view_ConnectionLostDialog.prototype = $extend(agario_module_shop_view_TextDialog.prototype, {
        __class__: agario_module_shop_view_ConnectionLostDialog
    });
    var agario_module_shop_view_ProductActionDialog = function(titleText, name, description, subtitleText, bottomText, productImage) {
        if (bottomText == null) {
            bottomText = ""
        }
        if (subtitleText == null) {
            subtitleText = ""
        }
        if (description == null) {
            description = ""
        }
        if (name == null) {
            name = ""
        }
        if (titleText == null) {
            titleText = ""
        }
        oaktree_ext_ui_views_GenericDialog.call(this);
        this.set_bottomText(bottomText);
        this.set_titleText(titleText);
        this.set_subtitleText(subtitleText);
        this.itemName = name;
        this.itemDescription = description;
        this.productImage = productImage;
        this.maxWidth = 420;
        this.maxHeight = 240
    };
    $hxClasses["agario.module.shop.view.ProductActionDialog"] = agario_module_shop_view_ProductActionDialog;
    agario_module_shop_view_ProductActionDialog.__name__ = ["agario", "module", "shop", "view", "ProductActionDialog"];
    agario_module_shop_view_ProductActionDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_shop_view_ProductActionDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        title: null,
        subtitle: null,
        productImage: null,
        productBackground: null,
        bottomLabel: null,
        productDurationLabel: null,
        itemName: null,
        itemDescription: null,
        subtitleText: null,
        get_subtitleText: function() {
            return this.subtitleText
        },
        set_subtitleText: function(value) {
            if (this.subtitle != null) {
                this.subtitle.set_text(value)
            }
            return this.subtitleText = value
        },
        titleText: null,
        get_titleText: function() {
            return this.titleText
        },
        set_titleText: function(value) {
            if (this.title != null) {
                this.title.set_text(value)
            }
            return this.titleText = value
        },
        bottomText: null,
        get_bottomText: function() {
            return this.bottomText
        },
        set_bottomText: function(value) {
            if (this.bottomLabel != null) {
                this.bottomLabel.set_text(value)
            }
            return this.bottomText = value
        },
        draw: function() {
            if (this.productBackground == null) {
                this.productBackground = new openfl_display_Shape();
                this.addChild(this.productBackground)
            }
            if (this.subtitle == null) {
                this.subtitle = new oaktree_ext_ui_Label({
                    text: "+",
                    fontSize: 18,
                    align: 0,
                    bold: true
                });
                this.subtitle.set_autoSize(0);
                this.addChild(this.subtitle)
            }
            this.subtitle.set_text(this.get_subtitleText());
            if (this.productImage != null) {
                var MAX_WIDTH = 359;
                var MAX_HEIGHT = 170;
                var productImageContainer = new openfl_display_Sprite();
                var scale = Math.min(MAX_WIDTH / this.productImage.get_width(), MAX_HEIGHT / this.productImage.get_height());
                if (scale < 1) {
                    this.productImage.set_scaleX(this.productImage.set_scaleY(scale))
                }
                productImageContainer.addChild(this.productImage);
                this.addChild(productImageContainer)
            }
            if (this.productDurationLabel == null) {
                this.productDurationLabel = new oaktree_ext_ui_Label({
                    text: this.itemDescription,
                    fontSize: 16,
                    align: 0
                });
                this.productDurationLabel.set_autoSize(0);
                this.addChild(this.productDurationLabel)
            }
            this.productDurationLabel.set_text(this.itemDescription);
            if (this.bottomLabel == null) {
                this.bottomLabel = new oaktree_ext_ui_Label({
                    text: "+",
                    fontSize: 14,
                    align: 0
                });
                this.bottomLabel.set_multiline(true);
                this.bottomLabel.set_height(50);
                this.addChild(this.bottomLabel)
            }
            this.bottomLabel.set_text(this.get_bottomText());
            this.doLayout()
        },
        onData: function(e) {
            this.closeButton.set_enabled(true);
            this.resizeBackground(this.maxWidth, this.maxHeight, true, $bind(this, this.onDataReady))
        },
        onDataReady: function() {},
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.title = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 28,
                align: 0,
                bold: true
            });
            this.title.set_text(this.get_titleText());
            this.title.set_autoSize(0);
            this.addChild(this.title);
            this.closeButton.set_enabled(false)
        },
        doLayout: function() {
            this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
            this.title.set_y(20);
            this.subtitle.set_x((this.maxWidth - this.subtitle.get_width()) / 2);
            this.subtitle.set_y(this.title.get_y() + this.title.get_height() + 10);
            if (this.productImage != null) {
                this.productBackground.get_graphics().beginFill(16053492, 1);
                this.productBackground.get_graphics().drawRoundRect(0, 0, this.maxWidth - 40, this.productImage.get_height() + 70, 5, 5);
                this.productBackground.get_graphics().endFill();
                this.productBackground.set_x((this.maxWidth - this.productBackground.get_width()) / 2);
                this.productBackground.set_y(this.subtitle.get_y() + this.subtitle.get_height() + 20);
                this.productImage.set_y(this.productBackground.get_y() + 20);
                this.productImage.set_x((this.maxWidth - this.productImage.get_width()) / 2);
                this.productDurationLabel.set_x((this.maxWidth - this.productDurationLabel.get_width()) / 2);
                this.productDurationLabel.set_y(this.productImage.get_y() + this.productImage.get_height() + 10)
            }
            this.bottomLabel.set_x((this.maxWidth - this.bottomLabel.get_width()) / 2);
            this.bottomLabel.set_y(this.productBackground.get_y() + this.productBackground.get_height() + 10)
        },
        __class__: agario_module_shop_view_ProductActionDialog,
        __properties__: $extend(oaktree_ext_ui_views_GenericDialog.prototype.__properties__, {
            set_bottomText: "set_bottomText",
            get_bottomText: "get_bottomText",
            set_titleText: "set_titleText",
            get_titleText: "get_titleText",
            set_subtitleText: "set_subtitleText",
            get_subtitleText: "get_subtitleText"
        })
    });
    var agario_module_shop_view_ProductUseDialog = function(titleText) {
        agario_module_shop_view_ProductActionDialog.call(this);
        this._viewState = "productUseDialog";
        this.closeOnEscape = true
    };
    $hxClasses["agario.module.shop.view.ProductUseDialog"] = agario_module_shop_view_ProductUseDialog;
    agario_module_shop_view_ProductUseDialog.__name__ = ["agario", "module", "shop", "view", "ProductUseDialog"];
    agario_module_shop_view_ProductUseDialog.__super__ = agario_module_shop_view_ProductActionDialog;
    agario_module_shop_view_ProductUseDialog.prototype = $extend(agario_module_shop_view_ProductActionDialog.prototype, {
        item: null,
        initialize: function() {
            agario_module_shop_view_ProductActionDialog.prototype.initialize.call(this);
            this.isLoading = true;
            this.showLoading("Processing Transaction...");
            this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
            this.title.set_y((this.maxHeight - this.title.get_height()) / 2);
            Core.get_events().addEventListener("ShopEvent::useProductResponse", $bind(this, this.onData));
            Core.get_events().addEventListener("ShopEvent::useProductFailed", $bind(this, this.onError));
            Core.get_events().addEventListener("ShopEvent::DISABLE_CLOSED", $bind(this, this.onCloseButtonClick))
        },
        onError: function(e) {
            this.hideLoading();
            this.closeButton.set_enabled(true);
            this.set_titleText(oaktree_ext_localization_I18n.text("transaction_error"))
        },
        onData: function(e) {
            this.maxWidth = 420;
            this.maxHeight = 400;
            agario_module_shop_view_ProductActionDialog.prototype.onData.call(this, e);
            this.item = e.data;
            this.itemName = this.item.name;
            this.itemDescription = this.item.description;
            this.hideLoading()
        },
        onDataReady: function() {
            this.isLoading = false;
            agario_module_shop_view_ProductActionDialog.prototype.onDataReady.call(this);
            this.set_titleText(oaktree_ext_localization_I18n.text("menu_level_up_title"));
            this.drawData();
            this.doLayout()
        },
        drawData: function() {
            if (js_Boot.__instanceof(this.item, agario_module_shop_models_vo_ShopSkinItemVO)) {
                this.set_subtitleText(oaktree_ext_localization_I18n.text("menu_skin_activation_subtitle"));
                this.set_bottomText(oaktree_ext_localization_I18n.text("menu_skin_activation_info"));
                this.productImage = new agario_module_shop_components_SkinnedCell({
                    bitmap: (js_Boot.__cast(this.item, agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.image.source,
                    w: 140,
                    h: 140,
                    borderColor: (js_Boot.__cast(this.item, agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_cellColor()
                })
            } else {
                if (js_Boot.__instanceof(this.item, agario_module_shop_models_vo_ShopBoostItemVO)) {
                    this.set_subtitleText(oaktree_ext_localization_I18n.text("menu_boost_activation_subtitle"));
                    this.set_bottomText(oaktree_ext_localization_I18n.text("menu_boost_activation_info"));
                    var imgString;
                    imgString = (js_Boot.__cast(this.item, agario_module_shop_models_vo_ShopBoostItemVO)).category.image;
                    imgString = StringTools.replace(imgString, ".png", "");
                    this.productImage = new openfl_display_Bitmap(Core.get_assets().getTexture(imgString).get_bitmapData());
                    var hours;
                    hours = (js_Boot.__cast(this.item, agario_module_shop_models_vo_ShopBoostItemVO)).gameplayInfo.durationMins;
                    if (hours <= 1) {
                        this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_1_hour")
                    } else {
                        this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_n_hour", {
                            hours_value: hours == null ? "null" : "" + hours
                        })
                    }
                }
            }
            this.draw()
        },
        dispose: function() {
            agario_module_shop_view_ProductActionDialog.prototype.dispose.call(this);
            Core.get_events().removeEventListener("ShopEvent::useProductResponse", $bind(this, this.onData))
        },
        __class__: agario_module_shop_view_ProductUseDialog
    });
    var agario_module_shop_view_PurchaseCompleteDialog = function() {
        this._viewState = "purchaseCompleteDialog";
        oaktree_ext_ui_views_GenericDialog.call(this, this._viewState);
        this.maxWidth = 420;
        this.maxHeight = 240;
        Core.get_events().listen("ShopEvent::softPurchaseComplete", $bind(this, this.onData));
        Core.get_events().listen("ShopEvent::INAPP_PURCHASE_COMPLETE", $bind(this, this.onData));
        Core.get_events().listen("shopevent::soft_purchase_failed", $bind(this, this.onError))
    };
    $hxClasses["agario.module.shop.view.PurchaseCompleteDialog"] = agario_module_shop_view_PurchaseCompleteDialog;
    agario_module_shop_view_PurchaseCompleteDialog.__name__ = ["agario", "module", "shop", "view", "PurchaseCompleteDialog"];
    agario_module_shop_view_PurchaseCompleteDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_shop_view_PurchaseCompleteDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        item: null,
        purchaseId: null,
        sm: null,
        bundle: null,
        purchase: null,
        title: null,
        subtitle: null,
        bottomLabel: null,
        productDescriptionLabel: null,
        productImage: null,
        productBackground: null,
        itemName: null,
        itemDescription: null,
        titleText: null,
        bottomText: null,
        subtitleText: null,
        _cachedEvent: null,
        initialize: function() {
            this.sm = oaktree_ext_services_ServiceManager.getService(agario_services_social_SocialService);
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.itemName = "";
            this.itemDescription = "";
            this.titleText = "";
            this.bottomText = "";
            this.subtitleText = "";
            this.title = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 28,
                align: 0,
                bold: true
            });
            this.title.set_text(this.titleText);
            this.title.set_autoSize(0);
            this.addChild(this.title);
            this.isLoading = true;
            this.showLoading(oaktree_ext_localization_I18n.text("transaction_in_progress"));
            this.closeOnEscape = true;
            this.allowDisableClose = true
        },
        postInit: function() {
            if (this._cachedEvent != null) {
                this.onData(this._cachedEvent)
            }
        },
        onError: function(e) {
            var _g = this;
            this.maxWidth = 420;
            this.maxHeight = 160;
            this.hideLoading();
            this.isLoading = false;
            this.resizeBackground(this.maxWidth, this.maxHeight, true, function() {
                _g.enable();
                _g.closeButton.set_enabled(true);
                _g.titleText = oaktree_ext_localization_I18n.text("transaction_error");
                _g.subtitleText = oaktree_ext_localization_I18n.text("transaction_error_desc");
                _g.draw()
            })
        },
        onData: function(e) {
            this.hideLoading();
            this.isLoading = false;
            if (!this._initialized) {
                this._cachedEvent = e;
                return
            }
            if (e.data == "dailyQuest") {
                this.close();
                return
            }
            this.maxWidth = 420;
            this.maxHeight = 400;
            if (js_Boot.__instanceof(e.data, agario_module_shop_models_vo_ShopItemVO)) {
                this.item = e.data
            } else {
                this.purchaseId = e.data
            }
            this.resizeBackground(this.maxWidth, this.maxHeight, true, $bind(this, this.onDataReady));
            Core.get_states().enable("purchaseCompleteDialogResponse")
        },
        onDataReady: function() {
            this.titleText = oaktree_ext_localization_I18n.text("menu_purchase_title");
            try {
                if (this.purchaseId != null) {
                    this.showPurchaseCompletePopupWithPurchaseId(this.purchaseId)
                } else {
                    this.showPurchaseCompleteSoftPurchase()
                }
            } catch (error) {
                haxe_CallStack.lastException = error;
                if (error instanceof js__$Boot_HaxeError) {
                    error = error.val
                }
                if (js_Boot.__instanceof(error, String)) {
                    this.onError(null);
                    return
                } else {
                    throw (error)
                }
            }
            agario_sounds_GameSounds.play("sfxPurchase");
            this.createShareButtons()
        },
        showPurchaseCompletePopupWithPurchaseId: function(purchaseId) {
            var purchaseEntity = Core.models.shopPurchasesModel.getInappPurchaseByPurchaseId(purchaseId);
            if (purchaseEntity == null) {
                this.onError(null);
                return
            }
            var bundleId = purchaseEntity.bundleId;
            var bundle = Core.models.walletProductBundlesModel.getBundleByBundleId(bundleId);
            if (bundle == null) {
                this.onError(null);
                return
            }
            if (bundle.visual.popupType == "coins") {
                var bundleProducts = Core.models.walletProductBundlesModel.getProductsByBundleId(bundleId);
                if (bundleProducts.length > 0) {
                    var bundleProduct = bundleProducts.first();
                    var product = Core.models.walletProductsModel.getProductById(bundleProduct.productId);
                    if (product.type == "currency") {
                        var currencyType = "coin";
                        this.showPurchaseCompleteCurrency(purchaseEntity, bundleId, currencyType, bundleProduct.quantity, bundleProduct.visual)
                    }
                }
            } else {
                if (bundle.visual.popupType == "dna") {
                    throw new js__$Boot_HaxeError("DNA is not yet supported!")
                } else {
                    if (bundle.visual.popupType == "promo") {
                        this.showPurchaseCompletePromo(bundleId);
                        this.maxHeight = 350;
                        this.resizeBackground(this.maxWidth, this.maxHeight, true)
                    } else {
                        if (bundle.visual.popupType == "skin") {
                            var skin = Core.models.shopSkinsModel.getItemById(purchaseId);
                            this.showPurchaseCompleteSkins(skin)
                        }
                    }
                }
            }
        },
        showPurchaseCompleteCurrency: function(purchaseEntity, bundleId, currencyType, amount, visualProductEntry) {
            var bundleEntity = Core.models.walletProductBundlesModel.getBundleByBundleId(bundleId);
            this.itemDescription = oaktree_ext_localization_I18n.text("coins_product_description");
            this.itemDescription = StringTools.replace(this.itemDescription, "%i", "" + amount);
            this.bottomText = oaktree_ext_localization_I18n.text(purchaseEntity.localizedName);
            var image = new agario_views_components_ImageWrap({
                url: null,
                image: visualProductEntry.visualSource,
                w: 130,
                h: 130
            });
            image.set_x(-image.get_width() * 0.5);
            this.productImage = new openfl_display_Sprite();
            (js_Boot.__cast(this.productImage, openfl_display_Sprite)).addChild(image);
            this.draw()
        },
        showPurchaseCompletePromo: function(bundleId) {
            var view = new openfl_display_Sprite();
            var bundle = Core.models.walletProductBundlesModel.getBundleByBundleId(bundleId);
            var products = Core.models.walletProductBundlesModel.getProductsByBundleId(bundleId);
            var numberOfRewardedProducts = products.length;
            this.productImage = new agario_module_shop_components_AlignmentSprite();
            var rewardImages;
            rewardImages = js_Boot.__cast(this.productImage, agario_module_shop_components_AlignmentSprite);
            rewardImages.addEventListener("complete", $bind(this, this.onComplete_RewardImages));
            var rewardDescription = "";
            var dynamicPurchaseCompleteThreshold = Std.parseInt(Core.models.defaultPromoSettings.getSettingByKey("dynamicPurchaseCompleteThreshold"));
            var inApp = Core.models.getWalletInappPurchaseById(this.purchaseId);
            this.bottomText = "";
            if (numberOfRewardedProducts > dynamicPurchaseCompleteThreshold) {
                var entry = bundle.visual;
                var imageType = bundle.visual.imageType;
                var localizedText = oaktree_ext_localization_I18n.text(bundle.visual.description);
                if (localizedText != null) {
                    rewardDescription = localizedText
                }
                bundle.visual.getBitmap().then(function(bitmap) {
                    bitmap.set_x(-bitmap.get_width() * 0.5);
                    rewardImages.addChild(bitmap)
                });
                var _g_head = products.h;
                var _g_val = null;
                while (_g_head != null) {
                    var bundledProduct;
                    bundledProduct = (function($this) {
                        var $r;
                        _g_val = _g_head[0];
                        _g_head = _g_head[1];
                        $r = _g_val;
                        return $r
                    }(this));
                    var productEntity = Core.models.walletProductsModel.getProductById(bundledProduct.productId);
                    if (productEntity.type == "skin") {
                        this.useItem(Core.models.shopSkinsModel.getItemById(productEntity.id))
                    }
                }
            } else {
                var popupScaling = 1 + 0.1 * (numberOfRewardedProducts - 2);
                var _g_head1 = products.h;
                var _g_val1 = null;
                while (_g_head1 != null) {
                    var bundledProduct1;
                    bundledProduct1 = (function($this) {
                        var $r;
                        _g_val1 = _g_head1[0];
                        _g_head1 = _g_head1[1];
                        $r = _g_val1;
                        return $r
                    }(this));
                    var productEntity1 = Core.models.walletProductsModel.getProductById(bundledProduct1.productId);
                    var productDescription = oaktree_ext_localization_I18n.text(productEntity1.visual.description);
                    var totProducts = rewardImages.get_numChildren();
                    if (rewardImages.get_numChildren() > 0) {
                        var plusSprite = Core.get_assets().getTexture("purchase_plus");
                        if (plusSprite != null) {
                            rewardImages.addChild(plusSprite.asBitmap())
                        } else {
                            null
                        }
                    }
                    var _g = productEntity1.type;
                    switch (_g) {
                        case "currency":
                            var currencyProductId = productEntity1.id;
                            var visualProductEntry = productEntity1.visual;
                            var currencySprite = new agario_views_components_ImageWrap({
                                url: null,
                                image: visualProductEntry.visualSource,
                                w: 0,
                                h: 0
                            });
                            currencySprite.addEventListener("complete", (function() {
                                return function(e) {
                                    rewardImages.align()
                                }
                            })());
                            rewardImages.addChild(currencySprite);
                            var amount = bundledProduct1.quantity;
                            productDescription = StringTools.replace(productDescription, "%i", "" + amount);
                            break;
                        case "skin":
                            var skinSprite = [new agario_module_shop_components_SkinnedCell({
                                bitmap: productEntity1.visual.visualSource.source,
                                w: 130,
                                h: 130,
                                borderColor: "#ff0000"
                            })];
                            skinSprite[0].addEventListener("complete", (function(skinSprite) {
                                return function(e1) {
                                    rewardImages.align();
                                    skinSprite[0].setContainerCacheAsBitmap(false)
                                }
                            })(skinSprite));
                            rewardImages.addChild(skinSprite[0]);
                            this.useItem(Core.models.shopSkinsModel.getItemById(productEntity1.id));
                            break;
                        case "boost":
                            var productId = productEntity1.id;
                            var visualProductEntry1 = productEntity1.visual;
                            var boostSprite = new agario_views_components_ImageWrap({
                                url: null,
                                image: visualProductEntry1.visualSource,
                                w: 130,
                                h: 130
                            });
                            rewardImages.addChild(boostSprite);
                            break
                    }
                    if (productDescription != "") {
                        if (this.itemDescription != "") {
                            this.itemDescription += " + "
                        }
                        this.itemDescription += productDescription
                    }
                }
                rewardImages.spacing = 24;
                rewardImages.align();
                rewardImages.set_scaleX(rewardImages.set_scaleY(1 - 0.09 * rewardImages.get_numChildren()))
            }
            this.draw()
        },
        onComplete_RewardImages: function(e) {
            var margin = 40;
            var rewardImages = e.currentTarget;
            rewardImages.set_scaleY(rewardImages.set_scaleX((this.productBackground.get_width() - margin) / (rewardImages.get_width() / rewardImages.get_scaleX())));
            this.set_cacheAsBitmap(true)
        },
        getItemsDescriptionSize: function() {
            var arr = this.itemDescription.split(" + ");
            return arr.length
        },
        getItemDescription: function(index) {
            var arr = this.itemDescription.split(" + ");
            if (arr.length > index) {
                return arr[index]
            } else {
                return null
            }
        },
        showPurchaseCompleteSkins: function(skin) {
            this.useItem(skin)
        },
        createAmountLabel: function(amount) {
            var text = amount + " " + oaktree_ext_localization_I18n.text("menu_shop_coins_title");
            return new oaktree_ext_ui_Label({
                text: text,
                fontSize: 16,
                align: 0
            })
        },
        showPurchaseCompleteSoftPurchase: function() {
            if (js_Boot.__instanceof(this.item, agario_module_shop_models_vo_CurrencyItemVO)) {
                this.subtitleText = oaktree_ext_localization_I18n.text("menu_purchase_coins_awarded");
                var walletIap = Core.models.shopPurchasesModel.getInappPurchaseByPurchaseId(this.item.purchaseId);
                this.itemName = oaktree_ext_localization_I18n.text(walletIap.localizedName);
                this.itemDescription = (js_Boot.__cast(this.item, agario_module_shop_models_vo_CurrencyItemVO)).finalAmount + " " + oaktree_ext_localization_I18n.text("menu_shop_coins_title");
                var image = new openfl_display_Bitmap(Core.get_assets().getTexture("giant_coin").get_bitmapData());
                image.set_x(-image.get_width() * 0.5);
                this.productImage = new openfl_display_Sprite();
                (js_Boot.__cast(this.productImage, openfl_display_Sprite)).addChild(image)
            } else {
                if (js_Boot.__instanceof(this.item, agario_module_shop_models_vo_ShopSkinItemVO)) {
                    this.productImage = new openfl_display_Sprite();
                    var skin = this.item;
                    this.item.name = skin.get_title();
                    var imgString = StringTools.replace(skin.gamePlayInfo.image.source, ".png", "");
                    var skinSprite = new agario_module_shop_components_SkinnedCell({
                        bitmap: imgString,
                        w: 130,
                        h: 130,
                        borderColor: skin.gamePlayInfo.get_cellColor()
                    });
                    (js_Boot.__cast(this.productImage, openfl_display_Sprite)).addChild(skinSprite);
                    skinSprite.set_x(-65);
                    skinSprite.setContainerCacheAsBitmap(false);
                    this.set_cacheAsBitmap(true);
                    this.itemDescription = this.item.name;
                    this.useItem(skin)
                } else {
                    if (js_Boot.__instanceof(this.item, agario_module_shop_models_vo_ShopBoostItemVO)) {
                        this.bottomText = oaktree_ext_localization_I18n.text("menu_boost_activation_info");
                        this.subtitleText = oaktree_ext_localization_I18n.text("menu_purchase_coins_awarded");
                        var imgString1;
                        imgString1 = (js_Boot.__cast(this.item, agario_module_shop_models_vo_ShopBoostItemVO)).category.image;
                        imgString1 = StringTools.replace(imgString1, ".png", "");
                        var image1 = new openfl_display_Bitmap(Core.get_assets().getTexture(imgString1).get_bitmapData());
                        image1.set_x(-image1.get_width() * 0.5);
                        this.productImage = new openfl_display_Sprite();
                        (js_Boot.__cast(this.productImage, openfl_display_Sprite)).addChild(image1);
                        var hours;
                        hours = (js_Boot.__cast(this.item, agario_module_shop_models_vo_ShopBoostItemVO)).gameplayInfo.durationMins / 60;
                        if (hours == 1) {
                            this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_1_hour")
                        } else {
                            this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_n_hour", {
                                hours_value: hours == null ? "null" : "" + hours
                            })
                        }
                        this.useItem(this.item)
                    } else {
                        this.onError(null);
                        return
                    }
                }
            }
            this.draw()
        },
        draw: function() {
            if (this.productBackground == null) {
                this.productBackground = new openfl_display_Shape();
                this.addChild(this.productBackground)
            }
            if (this.subtitle == null) {
                this.subtitle = new oaktree_ext_ui_Label({
                    text: "+",
                    fontSize: 18,
                    align: 0,
                    bold: true
                });
                this.subtitle.set_autoSize(0);
                this.addChild(this.subtitle)
            }
            this.title.set_text(this.titleText);
            this.subtitle.set_text(this.subtitleText);
            if (this.productImage != null) {
                var MAX_WIDTH = 359;
                var MAX_HEIGHT = 170;
                var productImageContainer = new openfl_display_Sprite();
                productImageContainer.addChild(this.productImage);
                this.addChild(productImageContainer)
            }
            if (this.productDescriptionLabel == null) {
                this.productDescriptionLabel = new oaktree_ext_ui_Label({
                    text: this.itemDescription,
                    fontSize: 16,
                    align: 0,
                    width: this.maxWidth - 40,
                    height: 60
                });
                this.productDescriptionLabel.set_multiline(true);
                this.productDescriptionLabel.set_autoSize(0);
                this.addChild(this.productDescriptionLabel)
            }
            this.productDescriptionLabel.set_text(this.itemDescription);
            if (this.bottomLabel == null) {
                this.bottomLabel = new oaktree_ext_ui_Label({
                    text: "+",
                    fontSize: 14,
                    align: 0
                });
                this.bottomLabel.set_multiline(true);
                this.bottomLabel.set_height(50);
                this.addChild(this.bottomLabel)
            }
            this.bottomLabel.set_text(this.bottomText);
            this.doLayout()
        },
        doLayout: function() {
            this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
            this.title.set_y(20);
            this.subtitle.set_x((this.maxWidth - this.subtitle.get_width()) / 2);
            this.subtitle.set_y(this.title.get_y() + this.title.get_height() + 10);
            if (this.productImage != null) {
                var imgHeight;
                if (this.productImage.get_height() == 0) {
                    imgHeight = 135
                } else {
                    imgHeight = this.productImage.get_height()
                }
                this.productBackground.get_graphics().beginFill(16053492, 1);
                this.productBackground.get_graphics().drawRoundRect(0, 0, this.maxWidth - 40, imgHeight + 70, 5, 5);
                this.productBackground.get_graphics().endFill();
                this.productBackground.set_x((this.maxWidth - this.productBackground.get_width()) / 2);
                this.productBackground.set_y(this.subtitle.get_y() + this.subtitle.get_height() + 20);
                this.productImage.set_y(this.productBackground.get_y() + (this.productBackground.get_height() - imgHeight) * 0.5);
                this.productImage.set_x(this.maxWidth * 0.5);
                this.productDescriptionLabel.set_x((this.maxWidth - this.productDescriptionLabel.get_width()) / 2);
                this.productDescriptionLabel.set_y(this.productBackground.get_y() + this.productBackground.get_height() + 20)
            }
            this.bottomLabel.set_x((this.maxWidth - this.bottomLabel.get_width()) / 2);
            this.bottomLabel.set_y(this.maxHeight - this.bottomLabel.get_height() - 10)
        },
        createShareButtons: function() {
            if (!js_Boot.__instanceof(this.item, agario_module_shop_models_vo_ShopSkinItemVO)) {
                return
            }
            if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) {
                this.createGoogleButton()
            } else {
                this.createFbButton()
            }
            this.createTwitterButton()
        },
        createTwitterButton: function() {
            var _g = this;
            var twIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("twitter_icon").get_bitmapData());
            var twShareBtn = new agario_views_controls_ColorButton(null, {
                color: 110829,
                overColor: 110829,
                text: oaktree_ext_localization_I18n.text("social_share_tag"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: twIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 140,
                h: 35,
                fontSize: 18,
                bold: true
            });
            this.addChild(twShareBtn);
            twShareBtn.addEventListener("click", function(e) {
                _g.sm.shareTwitter("ss_skinpurchase", {
                    skin: StringTools.replace(_g.item.name, "\\n", " ")
                })
            });
            twShareBtn.set_x(this.get_width() - twShareBtn.get_width() - 60);
            twShareBtn.set_y(this.maxHeight - twShareBtn.get_height() - 10)
        },
        createGoogleButton: function() {
            var _g = this;
            var googleIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gplus_icon").get_bitmapData());
            var googleBtn = new agario_views_controls_ColorButton(null, {
                color: 14699578,
                overColor: 14699578,
                text: oaktree_ext_localization_I18n.text("social_share_tag"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: googleIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 140,
                h: 35,
                fontSize: 18,
                bold: true
            });
            this.addChild(googleBtn);
            googleBtn.addEventListener("click", function(e) {
                var skinName = StringTools.replace(_g.item.name, "\\n", " ");
                _g.sm.prepareGoogleShare("ss_skinpurchase", {
                    skin: skinName
                });
                _g.sm.shareGoogle("ss_skinpurchase", {
                    skin: skinName
                })
            });
            googleBtn.set_x(60);
            googleBtn.set_y(this.maxHeight - googleBtn.get_height() - 10)
        },
        createFbButton: function() {
            var _g = this;
            var fbIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("fb_icon").get_bitmapData());
            var fbShareBtn = new agario_views_controls_ColorButton(null, {
                color: 3625371,
                overColor: 3625371,
                text: oaktree_ext_localization_I18n.text("social_share_tag"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: fbIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 140,
                h: 35,
                fontSize: 18,
                bold: true
            });
            this.addChild(fbShareBtn);
            fbShareBtn.addEventListener("click", function(e) {
                var image = (js_Boot.__cast(_g.item, agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_gamePlayImage();
                var skinName = StringTools.replace(_g.item.name, "\\n", " ");
                _g.sm.shareFB("ss_skinpurchase", {
                    skin: skinName
                }, image)
            });
            fbShareBtn.set_x(60);
            fbShareBtn.set_y(this.maxHeight - fbShareBtn.get_height() - 10)
        },
        useItem: function(item) {
            Core.get_events().dispatchEventWith("ShopEvent::USE", item)
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            if (this.isLoading) {
                return
            }
            oaktree_ext_ui_views_GenericDialog.prototype.close.call(this, animate);
            Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP")
        },
        dispose: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this);
            Core.get_events().unlisten("ShopEvent::softPurchaseComplete", $bind(this, this.onData));
            Core.get_events().unlisten("ShopEvent::INAPP_PURCHASE_COMPLETE", $bind(this, this.onData));
            Core.get_events().unlisten("shopevent::soft_purchase_failed", $bind(this, this.onError));
            Core.get_states().disable("purchaseCompleteDialogResponse");
            Core.get_states().disable("purchaseCompleteDialog")
        },
        onEscapePress: function() {
            return this.isLoading
        },
        __class__: agario_module_shop_view_PurchaseCompleteDialog
    });
    var agario_module_shop_view_ShopSkinsView = function() {
        this.getMoreTab = "";
        this.currentPage = 0;
        oaktree_ext_ui_View.call(this)
    };
    $hxClasses["agario.module.shop.view.ShopSkinsView"] = agario_module_shop_view_ShopSkinsView;
    agario_module_shop_view_ShopSkinsView.__name__ = ["agario", "module", "shop", "view", "ShopSkinsView"];
    agario_module_shop_view_ShopSkinsView.__super__ = oaktree_ext_ui_View;
    agario_module_shop_view_ShopSkinsView.prototype = $extend(oaktree_ext_ui_View.prototype, {
        categoryTabs: null,
        tabSelected: null,
        skinListContainer: null,
        leftButton: null,
        rightButton: null,
        paginationController: null,
        ownedSkins: null,
        allSkins: null,
        availableSkins: null,
        currentPage: null,
        filteredSkins: null,
        getMoreTab: null,
        getSkinPacks: function() {
            var skins = Core.models.shopSkinsModel.skinList;
            var returnSkins = [];
            var _g = 0;
            while (_g < skins.length) {
                var skin = skins[_g];
                ++_g;
                var finalPack = skin;
                var productId = skin.productIdToQuantify;
                var replacementId = agario_services_promo_PromoUtils.getConfigIdReplacement(productId);
                var replacementPack = Core.models.shopSkinsModel.getItemById(replacementId);
                if (replacementPack == null) {
                    if (!finalPack.get_owned()) {
                        if (agario_services_promo_PromoUtils.shouldSkipConfigEntry(finalPack.productIdToQuantify, finalPack.visibility)) {
                            continue
                        }
                    }
                } else {
                    finalPack = replacementPack
                }
                returnSkins.push(finalPack)
            }
            return returnSkins
        },
        initialize: function() {
            if (this._initialized) {
                return
            }
            oaktree_ext_ui_View.prototype.initialize.call(this);
            this.allSkins = this.getSkinPacks();
            this.ownedSkins = this.allSkins.filter(function(item) {
                return item.get_owned() == true
            });
            this.availableSkins = this.allSkins.filter(function(item1) {
                return item1.get_owned() == false
            });
            this.categoryTabs = new agario_views_components_SkinShopTabControl();
            this.categoryTabs.set_maxWidth(this.maxWidth);
            this.addChild(this.categoryTabs);
            this.updateTabs();
            this.categoryTabs.onChange.add($bind(this, this.onTabChange));
            this.skinListContainer = new oaktree_ext_ui_controls_PaginatedContainer({
                w: 624,
                h: 370
            });
            this.addChild(this.skinListContainer);
            this.leftButton = new agario_module_shop_components_ShopNextArrow();
            this.addChild(this.leftButton);
            this.rightButton = new agario_module_shop_components_ShopNextArrow();
            this.rightButton.anchorCenter();
            this.rightButton.set_rotation(180);
            this.addChild(this.rightButton);
            this.leftButton.addEventListener("click", $bind(this, this.onLeftButtonClick));
            this.rightButton.addEventListener("click", $bind(this, this.onRightButtonClick));
            this.paginationController = new oaktree_ext_ui_controls_PaginationControl();
            this.paginationController.gotoFirstButton = new agario_module_shop_components_PaginationGotoFirstButton();
            this.paginationController.gotoPreviousButton = new agario_module_shop_components_PaginationGotoPreviousButton();
            this.paginationController.gotoNextButton = new agario_module_shop_components_PaginationGotoNextButton();
            this.paginationController.gotoLastButton = new agario_module_shop_components_PaginationGotoLastButton();
            this.paginationController.paginationItemClass = agario_module_shop_components_PaginationPageButton;
            this.addChild(this.paginationController);
            this.skinListContainer.S_onChange.add($bind(this, this.onSkinListChange));
            this.paginationController.S_onChange.add($bind(this, this.onPaginationControllerChange));
            this.loadContent();
            this.position()
        },
        position: function() {
            this.categoryTabs.set_x((this.maxWidth - this.categoryTabs.w) / 2);
            this.categoryTabs.set_y(0);
            this.skinListContainer.set_x(Math.round((this.maxWidth - this.skinListContainer.w) * 0.5));
            this.skinListContainer.set_y(Math.round(this.categoryTabs.get_y() + this.categoryTabs.get_height() + 30));
            this.leftButton.set_x(this.skinListContainer.get_x() - this.leftButton.get_width() - 10);
            this.rightButton.set_x(this.skinListContainer.get_x() + this.skinListContainer.w + 10);
            this.leftButton.set_y(this.skinListContainer.get_y() + (280 - this.leftButton.get_height()) * 0.5);
            this.rightButton.set_y(this.leftButton.get_y());
            this.paginationController.set_y(Math.round(this.maxHeight - this.paginationController.get_height() - 10));
            this.paginationController.set_x(Math.round((this.maxWidth - this.paginationController.get_width()) * 0.5));
            return this
        },
        _update: function() {
            this.rightButton.set_enabled(this.skinListContainer.currentPage < this.skinListContainer.totalPages - 1);
            this.leftButton.set_enabled(this.skinListContainer.currentPage > 0);
            this.leftButton.set_alpha(1);
            this.rightButton.set_alpha(1);
            if (!this.rightButton.get_enabled()) {
                this.rightButton.set_alpha(0.6)
            }
            if (!this.leftButton.get_enabled()) {
                this.leftButton.set_alpha(0.6)
            }
            return this
        },
        updateTabs: function() {
            var selectedTab = this.categoryTabs.selectedId;
            this.categoryTabs.clear();
            var tabs = Core.models.shopSkinsModel.getTabs();
            tabs.sort(function(a, b) {
                if (a.tabOrder < b.tabOrder) {
                    return -1
                } else {
                    if (a.tabOrder > b.tabOrder) {
                        return 1
                    } else {
                        return 0
                    }
                }
            });
            var _g = 0;
            while (_g < tabs.length) {
                var tab1 = tabs[_g];
                ++_g;
                tab1.skins = []
            }
            var _g1 = 0;
            var _g11 = this.allSkins;
            while (_g1 < _g11.length) {
                var skin = _g11[_g1];
                ++_g1;
                if (!skin.get_owned() || skin.skinType == "VETERAN") {
                    if (skin.isOfferable()) {
                        var offer = Core.models.shopSkinsModel.getOfferByBundleId(skin.referenceValue);
                        var now = DateTools.format(new Date(), "%Y-%m-%dT%H:%M:%SZ");
                        if (offer == null || now < offer.availableFrom || now > offer.availableTo) {
                            continue
                        }
                    }
                    var tab2 = Core.models.shopSkinsModel.getTabBySkinType(skin.skinType);
                    if (tab2 != null && tab2.skinType != "MYSTERY") {
                        tab2.skins.push(skin)
                    }
                }
            }
            var tab = Core.models.shopSkinsModel.getTabByDescription("OWNED");
            var _g2 = 0;
            var _g12 = this.ownedSkins;
            while (_g2 < _g12.length) {
                var skin1 = _g12[_g2];
                ++_g2;
                if (skin1.skinType != "MYSTERY") {
                    tab.skins.push(skin1)
                }
            }
            var _g3 = 0;
            while (_g3 < tabs.length) {
                var tab3 = tabs[_g3];
                ++_g3;
                if (tab3.skins.length > 0) {
                    var catTab = new agario_module_shop_components_CategoryTab(tab3.tabDescription, oaktree_ext_localization_I18n.text(tab3.tabName));
                    this.categoryTabs.addTab(catTab)
                }
            }
            this.categoryTabs.setTab(selectedTab)
        },
        sortSkins: function(order, skinList, currentCategory) {
            if (currentCategory == null) {
                currentCategory = ""
            }
            var owned = oaktree_ext_localization_I18n.text("skins_owned_tag").toUpperCase();
            skinList.sort(function(a, b) {
                if (currentCategory == owned) {
                    if (a.orderInOwnedTab < b.orderInOwnedTab) {
                        return -1
                    }
                    if (a.orderInOwnedTab > b.orderInOwnedTab) {
                        return 1
                    }
                    if (a.price > b.price) {
                        return -1
                    }
                    if (a.price < b.price) {
                        return 1
                    }
                } else {
                    if (a.orderInShop < b.orderInShop) {
                        return -1
                    }
                    if (a.orderInShop > b.orderInShop) {
                        return 1
                    }
                    if (a.price < b.price) {
                        return -1
                    }
                    if (a.price > b.price) {
                        return 1
                    }
                }
                if (a.referenceValue < b.referenceValue) {
                    return -1
                }
                if (a.referenceValue > b.referenceValue) {
                    return 1
                }
                return 0
            });
            if (order == "des") {
                skinList.reverse()
            }
            if (order == "level") {
                skinList.sort(function(a1, b1) {
                    if (a1.availableAtLevel > b1.availableAtLevel) {
                        return 1
                    } else {
                        return -1
                    }
                    return 0
                })
            }
        },
        loadContent: function() {
            this.ownedSkins = this.allSkins.filter(function(item) {
                return item.get_owned() == true
            });
            this.filteredSkins = [];
            var currentCategory;
            currentCategory = this.categoryTabs.current.id.toUpperCase();
            var showGetMore = true;
            var tab = Core.models.shopSkinsModel.getTabByDescription(currentCategory);
            if (currentCategory == oaktree_ext_localization_I18n.text("skins_owned_tag").toUpperCase()) {
                this.filteredSkins = tab.skins;
                this.sortSkins("asc", this.filteredSkins, currentCategory);
                this.applyVeteranRule();
                var premiumSkins = this.allSkins.filter(function(item1) {
                    return item1.get_owned() == false && item1.isReward == false
                });
                if (premiumSkins.length == 0) {
                    showGetMore = false
                } else {
                    this.getMoreTab = premiumSkins[0].skinType
                }
            } else {
                if (currentCategory.toUpperCase() == "VETERAN") {
                    this.filteredSkins = tab.skins;
                    this.sortSkins("level", this.filteredSkins)
                } else {
                    this.filteredSkins = tab.skins;
                    this.sortSkins("asc", this.filteredSkins)
                }
            }
            this.skinListContainer.empty();
            var element;
            var _g = 0;
            var _g1 = this.filteredSkins;
            while (_g < _g1.length) {
                var skin = _g1[_g];
                ++_g;
                element = new agario_module_shop_components_SkinElement({
                    model: skin
                });
                if (skin.isReward && (Core.user.isGuest || !skin.get_owned() && skin.availableAtLevel > Core.user.userInfo.level)) {
                    element.showPrice = false
                }
                this.skinListContainer.addItem(element);
                element.addEventListener("ShopEvent::USE", $bind(this, this.onUseClick));
                element.addEventListener("ShopEvent::UNEQUIP", $bind(this, this.onUnequip));
                element.addEventListener("ShopEvent::BUY", $bind(this, this.onBuyClick))
            }
            if (currentCategory.toUpperCase() == oaktree_ext_localization_I18n.text("skins_owned_tag").toUpperCase() && showGetMore) {
                var mod = this.skinListContainer.items.length % this.skinListContainer.itemsPerPage;
                if (mod != 0) {
                    while (mod != 0) {
                        this.addDummyElement();
                        mod = this.skinListContainer.items.length % this.skinListContainer.itemsPerPage
                    }
                }
            }
            this.currentPage = Math.round(oaktree_utils_Maths.clamp(this.currentPage, 0, this.skinListContainer.totalPages - 1));
            this.skinListContainer.set_page(this.currentPage);
            this.onSkinListChange();
            this.position()
        },
        applyVeteranRule: function() {
            var veteranSkins = this.filteredSkins.filter(function(item) {
                return item.availableAtLevel > 0
            });
            var otherSkins = this.filteredSkins.filter(function(item1) {
                return item1.availableAtLevel == -1
            });
            if (veteranSkins.length > 0) {
                var lastOwnedSkin = veteranSkins.splice(0, 1)[0];
                otherSkins = otherSkins.concat(veteranSkins);
                otherSkins.unshift(lastOwnedSkin)
            }
            this.filteredSkins = otherSkins
        },
        addDummyElement: function() {
            var buySkin = new agario_module_shop_models_vo_ShopSkinItemVO({});
            buySkin.referenceValue = this.getMoreTab;
            buySkin.set_title("");
            buySkin.purchaseId = "";
            buySkin.gamePlayInfo = new agario_module_shop_models_vo_GamePlaySkinVO();
            buySkin.gamePlayInfo.set_cellColor("0x56c0e0");
            var dummyElement = new agario_module_shop_components_SkinElement({
                model: buySkin
            });
            dummyElement.addEventListener("ShopEvent::BUY", $bind(this, this.onBuyClick));
            this.skinListContainer.addItem(dummyElement)
        },
        onUnequip: function(e) {
            Core.get_events().dispatchEventWith("ShopEvent::UNEQUIP")
        },
        onBuyClick: function(e) {
            var skin = e.currentTarget;
            var shopItem = skin.item;
            if (shopItem.purchaseId == "") {
                if (shopItem.referenceValue != "") {
                    this.categoryTabs.setTabByName(shopItem.referenceValue.toUpperCase())
                } else {
                    this.categoryTabs.setTab(0)
                }
                this.loadContent()
            } else {
                Core.get_events().dispatchEventWith("ShopEvent::BUY", shopItem.purchaseId)
            }
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onUseClick: function(e) {
            var skin;
            skin = js_Boot.__cast(e.currentTarget, agario_module_shop_components_SkinElement);
            Core.get_events().dispatchEventWith("ShopEvent::USE", js_Boot.__cast(skin.item, agario_module_shop_models_vo_ShopSkinItemVO));
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onPaginationControllerChange: function() {
            this.skinListContainer.set_page(this.paginationController.currentPage);
            this._update();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onSkinListChange: function() {
            this.paginationController.set_totalPages(this.skinListContainer.totalPages);
            this.paginationController.set_currentPage(this.skinListContainer.currentPage);
            this._update()
        },
        onRightButtonClick: function(e) {
            this.skinListContainer.next_page();
            this._update();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onLeftButtonClick: function(e) {
            this.skinListContainer.previous_page();
            this._update();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onTabChange: function(_tab) {
            this.currentPage = 0;
            this.skinListContainer.currentPage = 0;
            this.loadContent();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        updateView: function() {
            this.currentPage = this.skinListContainer.currentPage;
            this.loadContent();
            this.updateTabs()
        },
        openTab: function(target) {
            this.paginationController.set_currentPage(0);
            this.categoryTabs.setTabByName(target);
            this.loadContent();
            this.updateTabs()
        },
        resetContent: function() {
            this.paginationController.set_currentPage(0);
            this.currentPage = 0;
            this.skinListContainer.set_page(0)
        },
        __class__: agario_module_shop_view_ShopSkinsView
    });
    var agario_module_shop_view_UpgradeRewardDialog = function(bundleId) {
        this.bundleId = bundleId;
        agario_module_shop_view_PurchaseCompleteDialog.call(this);
        Core.get_events().unlisten("ShopEvent::softPurchaseComplete", $bind(this, this.onData));
        Core.get_events().unlisten("ShopEvent::INAPP_PURCHASE_COMPLETE", $bind(this, this.onData));
        Core.get_events().unlisten("shopevent::soft_purchase_failed", $bind(this, this.onError))
    };
    $hxClasses["agario.module.shop.view.UpgradeRewardDialog"] = agario_module_shop_view_UpgradeRewardDialog;
    agario_module_shop_view_UpgradeRewardDialog.__name__ = ["agario", "module", "shop", "view", "UpgradeRewardDialog"];
    agario_module_shop_view_UpgradeRewardDialog.__super__ = agario_module_shop_view_PurchaseCompleteDialog;
    agario_module_shop_view_UpgradeRewardDialog.prototype = $extend(agario_module_shop_view_PurchaseCompleteDialog.prototype, {
        bundleId: null,
        playButton: null,
        initialize: function() {
            agario_module_shop_view_PurchaseCompleteDialog.prototype.initialize.call(this);
            this.isLoading = false;
            this.hideLoading();
            this.maxWidth = 420;
            this.maxHeight = 400;
            this.titleText = oaktree_ext_localization_I18n.text("account_upgrade_reward_title");
            this.subtitleText = oaktree_ext_localization_I18n.text("account_upgrade_reward_subtitle");
            this.resizeBackground(this.maxWidth, this.maxHeight, true, $bind(this, this.onResize));
            this.playButton = new agario_views_controls_FlatButton({
                labelUp: {
                    text: "Play",
                    fontSize: 15,
                    color: 16777215
                },
                width: 130,
                height: 35
            });
            this.playButton.set_x(this.maxWidth * 0.5 - this.playButton.get_width() * 0.5);
            this.playButton.set_y(this.maxHeight - this.playButton.get_height() - 20);
            this.playButton.addEventListener("click", $bind(this, this.onPlayButton_Click));
            this.addChild(this.playButton)
        },
        onResize: function() {
            this.showPurchaseCompletePromo(this.bundleId)
        },
        onPlayButton_Click: function(e) {
            this.close();
            Core.get_events().fire(agario_AgarioEvents.START_GAME, {
                mode: ""
            })
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            agario_module_shop_view_PurchaseCompleteDialog.prototype.close.call(this);
            this.playButton.removeEventListener("click", $bind(this, this.onPlayButton_Click))
        },
        __class__: agario_module_shop_view_UpgradeRewardDialog
    });
    var agario_module_shop_view_UserBannedDialog = function(userID) {
        agario_module_shop_view_TextDialog.call(this, oaktree_ext_localization_I18n.text("user_banned_title"), oaktree_ext_localization_I18n.text("user_banned_description", {
            userId: userID
        }));
        this._userID = userID;
        this._viewState = "userBannedDialog";
        this.closeOnEscape = true;
        this.maxWidth = 420;
        this.maxHeight = 270
    };
    $hxClasses["agario.module.shop.view.UserBannedDialog"] = agario_module_shop_view_UserBannedDialog;
    agario_module_shop_view_UserBannedDialog.__name__ = ["agario", "module", "shop", "view", "UserBannedDialog"];
    agario_module_shop_view_UserBannedDialog.__super__ = agario_module_shop_view_TextDialog;
    agario_module_shop_view_UserBannedDialog.prototype = $extend(agario_module_shop_view_TextDialog.prototype, {
        supportBtn: null,
        _userID: null,
        initialize: function() {
            agario_module_shop_view_TextDialog.prototype.initialize.call(this);
            this.supportBtn = new agario_views_controls_ColorButton(null, {
                color: 5880408,
                overColor: 4294721,
                text: oaktree_ext_localization_I18n.text("user_banned_button_label"),
                textColorOver: 16777215,
                textColor: 16777215,
                w: 160,
                h: 30,
                fontSize: 14,
                bold: true
            });
            this.addChild(this.supportBtn);
            this.supportBtn.addEventListener("click", $bind(this, this.onClick));
            this.doLayout()
        },
        doLayout: function() {
            agario_module_shop_view_TextDialog.prototype.doLayout.call(this);
            if (this.supportBtn != null) {
                this.supportBtn.set_x(this.maxWidth * 0.5 - this.supportBtn.get_width() * 0.5);
                this.supportBtn.set_y(this.maxHeight - this.supportBtn.get_height() - 15)
            }
            this.description.set_height(160);
            this.description.set_y(this.descriptionContainer.get_height() * 0.5 - this.description.get_height() * 0.5)
        },
        onClick: function(e) {
            var subject = "Agar.io banned account";
            var body = encodeURIComponent('My Agar.io ID is "' + this._userID + '" and I believe I just got banned. Can you give me more details about this? When will my account be unbanned?\n\nThank you.');
            var mailLink = "mailto:support@miniclip.com?subject=" + subject + "&body=" + body;
            openfl_Lib.getURL(new openfl_net_URLRequest(mailLink), "")
        },
        __class__: agario_module_shop_view_UserBannedDialog
    });
    var agario_module_user_view_FreeCoinsCollectDialog = function(pSuggestVideoOffers, waitForData) {
        if (waitForData == null) {
            waitForData = true
        }
        if (pSuggestVideoOffers == null) {
            pSuggestVideoOffers = true
        }
        this.timeLeft = -1;
        this.showVideoOffers = false;
        this._viewState = "stateFreeCoinsCollect";
        agario_module_shop_view_ProductActionDialog.call(this);
        this.waitForData = waitForData;
        this.closeOnEscape = true;
        this.productImage = new openfl_display_Bitmap(Core.get_assets().getTexture("giant_coin").get_bitmapData(), 1, true);
        this.productImage.set_scaleX(this.productImage.set_scaleY(0.8));
        this.set_subtitleText(" ");
        this.set_bottomText("");
        this.showVideoOffers = pSuggestVideoOffers
    };
    $hxClasses["agario.module.user.view.FreeCoinsCollectDialog"] = agario_module_user_view_FreeCoinsCollectDialog;
    agario_module_user_view_FreeCoinsCollectDialog.__name__ = ["agario", "module", "user", "view", "FreeCoinsCollectDialog"];
    agario_module_user_view_FreeCoinsCollectDialog.__super__ = agario_module_shop_view_ProductActionDialog;
    agario_module_user_view_FreeCoinsCollectDialog.prototype = $extend(agario_module_shop_view_ProductActionDialog.prototype, {
        showVideoOffers: null,
        videoBtn: null,
        hasEngagement: null,
        timeLeft: null,
        centerLabel: null,
        leftLabel: null,
        rightLabel: null,
        waitForData: null,
        initialize: function() {
            agario_module_shop_view_ProductActionDialog.prototype.initialize.call(this);
            this.maxWidth = 420;
            this.hasEngagement = Core.services.gameui.getUserEngagement();
            this.resizeBackground(this.maxWidth, this.maxHeight);
            if (this.waitForData) {
                this.isLoading = true;
                this.showLoading("Processing transaction...");
                Core.get_events().addEventListener("ShopEvent::freeCoinsResponse", $bind(this, this.onData))
            } else {
                this.onDataReady()
            }
        },
        onData: function(e) {
            this.timeLeft = Core.user.freeCoinTimeLeft();
            this.maxHeight = this.calculateDialogHeight();
            agario_module_shop_view_ProductActionDialog.prototype.onData.call(this, e)
        },
        calculateDialogHeight: function() {
            var maxH = 450;
            if (!this.showVideoOffers || !this.hasEngagement) {
                maxH = 335
            }
            if (this.timeLeft <= 0) {
                if (!this.showVideoOffers || !this.hasEngagement) {
                    maxH = 360
                }
            }
            return maxH
        },
        onDataReady: function() {
            agario_module_shop_view_ProductActionDialog.prototype.onDataReady.call(this);
            this.isLoading = false;
            this.closeButton.set_enabled(true);
            if (this.timeLeft < 0) {
                this.timeLeft = Core.user.freeCoinTimeLeft()
            }
            if (this.maxHeight != this.calculateDialogHeight()) {
                this.maxHeight = this.calculateDialogHeight();
                this.resizeBackground(this.maxWidth, this.maxHeight, true)
            }
            var hourlyBonus = Core.models.getBonusById("hourlyBonus");
            var videoReward = Core.models.getBonusById("genericVideoAdReward");
            var videoRewardQty = this.getRewardQuantity(videoReward);
            var hourlyBonusQty = this.getRewardQuantity(hourlyBonus);
            if (hourlyBonus == null || videoReward == null) {
                if (hourlyBonus == null) {
                    null
                }
                if (videoReward == null) {
                    null
                }
                this.close();
                return
            }
            if (this.timeLeft > 0) {
                this.set_titleText(oaktree_ext_localization_I18n.text("menu_hourly_title"));
                this.set_subtitleText(" ");
                if (this.showVideoOffers && this.hasEngagement) {
                    this.set_bottomText(oaktree_ext_localization_I18n.text("free_coins_incentivise_video", [videoRewardQty]))
                }
            } else {
                this.set_titleText(oaktree_ext_localization_I18n.text("menu_hourly_title_coins"));
                this.set_subtitleText("Welcome back, you have earned:");
                var timeStr = oaktree_ext_localization_I18n.text("menu_shop_1_hour");
                this.set_bottomText(oaktree_ext_localization_I18n.text("menu_hourly_not_ready", [timeStr, hourlyBonusQty]));
                if (this.showVideoOffers && this.hasEngagement) {
                    var _g = this;
                    _g.set_bottomText(_g.get_bottomText() + (",\n" + oaktree_ext_localization_I18n.text("free_coins_incentivise_video", [videoRewardQty])))
                }
                agario_sounds_GameSounds.play("sfxCoinShower")
            }
            this.itemDescription = 20 + " " + oaktree_ext_localization_I18n.text("menu_shop_coins_title");
            this.draw();
            if (this.timeLeft > 0) {
                this.leftLabel = new oaktree_ext_ui_Label({
                    text: oaktree_ext_localization_I18n.text("menu_hourly_come_back_in"),
                    fontSize: 20,
                    color: 0,
                    bold: true
                });
                this.centerLabel = new oaktree_ext_ui_Label({
                    text: "00m 00s",
                    fontSize: 24,
                    color: 16711680,
                    bold: true
                });
                this.rightLabel = new oaktree_ext_ui_Label({
                    text: oaktree_ext_localization_I18n.text("menu_hourly_to_earn"),
                    fontSize: 20,
                    color: 0,
                    bold: true
                });
                this.addChild(this.leftLabel);
                this.addChild(this.centerLabel);
                this.addChild(this.rightLabel);
                var secs = Math.round(this.timeLeft / 1000);
                this.centerLabel.set_text(Math.floor(secs / 60) + "m " + (secs % 60 >= 10 ? "" : "0") + secs % 60 + "s");
                this.startTimedEvents();
                this.reArrange()
            }
            this.hideLoading();
            if (this.showVideoOffers) {
                this.checkVideoStatus()
            }
        },
        getRewardQuantity: function(reward) {
            if (reward.bonusQty != -1) {
                return reward.bonusQty
            }
            var bundleId = reward.bundleId;
            var productBundle = Core.models.walletProductBundlesModel.getBundleByBundleId(bundleId);
            var quantity = 0;
            if (productBundle != null) {
                quantity = productBundle.quantity
            }
            return quantity
        },
        checkVideoStatus: function() {
            if (!this.hasEngagement) {
                return
            }
            var videoIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("freecoins_video").get_bitmapData());
            this.videoBtn = new agario_views_controls_ColorButton(null, {
                color: 5880408,
                overColor: 4294721,
                text: oaktree_ext_localization_I18n.text("menu_main_free_coins"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: videoIcon,
                iconPadding: 6,
                w: 140,
                h: 50,
                fontSize: 14,
                bold: true
            });
            this.addChild(this.videoBtn);
            this.videoBtn.set_x((this.maxWidth - this.videoBtn.get_width()) / 2);
            this.videoBtn.set_y(this.maxHeight - this.videoBtn.get_height() - 20);
            this.videoBtn.addEventListener("click", $bind(this, this.onVideoClick))
        },
        startTimedEvents: function() {
            var _g = this;
            var timer = new haxe_Timer(1000);
            timer.run = function() {
                var secs = Math.round(_g.timeLeft / 1000);
                _g.centerLabel.set_text(Math.floor(secs / 60) + "m " + (secs % 60 >= 10 ? "" : "0") + secs % 60 + "s");
                _g.timeLeft -= 1000;
                if (secs <= 0) {
                    secs = 0;
                    timer.stop();
                    _g.onTimerComplete()
                }
                _g.reArrange()
            }
        },
        onTimerComplete: function() {
            this.set_subtitleText("Your coins are ready to be collected!");
            this.removeChild(this.leftLabel);
            this.removeChild(this.centerLabel);
            this.removeChild(this.rightLabel)
        },
        reArrange: function() {
            this.leftLabel.set_x((this.maxWidth - (this.leftLabel.get_width() + this.centerLabel.get_width() + this.rightLabel.get_width())) / 2);
            this.leftLabel.set_y(this.rightLabel.set_y(this.subtitle.get_y()));
            this.centerLabel.set_y(this.leftLabel.get_y() - 4);
            this.centerLabel.set_x(this.leftLabel.get_x() + this.leftLabel.get_width() + 4);
            this.rightLabel.set_x(this.centerLabel.get_x() + this.centerLabel.get_width() + 5);
            this.productBackground.set_y(this.centerLabel.get_y() + this.centerLabel.get_height() + 10);
            this.productImage.set_y(this.productBackground.get_y() + 20);
            this.productDurationLabel.set_x((this.maxWidth - this.productDurationLabel.get_width()) / 2);
            this.productDurationLabel.set_y(this.productImage.get_y() + this.productImage.get_height() + 10);
            this.bottomLabel.set_x((this.maxWidth - this.bottomLabel.get_width()) / 2);
            this.bottomLabel.set_y(this.productBackground.get_y() + this.productBackground.get_height() + 10)
        },
        onVideoClick: function(e) {
            if (!this.hasEngagement) {
                return
            }
            Core.services.gameui.openVideoAd();
            this.close()
        },
        onEscapePress: function() {
            return this.isLoading
        },
        __class__: agario_module_user_view_FreeCoinsCollectDialog
    });
    var agario_module_user_view_LevelUpDialog = function(deltaCoins, previousLevel, currentLevel) {
        this.shouldEarnSkin = false;
        oaktree_ext_ui_views_GenericDialog.call(this, "levelUpDialog");
        this.currentLevel = currentLevel;
        this.previousLevel = previousLevel;
        this.deltaCoins = deltaCoins;
        this.maxWidth = 420;
        this.maxHeight = 460;
        this.skinCellSize = 150;
        this.shareStoryId = agario_module_user_view_LevelUpDialog.FB_LEVEL_UP_STORY;
        this.shareData = {
            level: currentLevel
        };
        var deltaLevels = currentLevel - previousLevel;
        if (previousLevel % 5 + deltaLevels >= 5) {
            var skin = Core.models.shopSkinsModel.getLastRewardSkin(currentLevel);
            this.shouldEarnSkin = true;
            this.shareStoryId = agario_module_user_view_LevelUpDialog.FB_SKIN_UNLOCK_STORY;
            this.shareData = {
                level: currentLevel,
                skin: skin.get_title()
            };
            this.nextSkinName = skin.get_title()
        }
    };
    $hxClasses["agario.module.user.view.LevelUpDialog"] = agario_module_user_view_LevelUpDialog;
    agario_module_user_view_LevelUpDialog.__name__ = ["agario", "module", "user", "view", "LevelUpDialog"];
    agario_module_user_view_LevelUpDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_user_view_LevelUpDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        title: null,
        subtitle: null,
        levelIcon: null,
        grayArea: null,
        lvlLabel: null,
        rewardLabel: null,
        sm: null,
        deltaCoins: null,
        slotControl: null,
        previousLevel: null,
        nextSkinCell: null,
        nextSkinLabel: null,
        skinCellSize: null,
        ps: null,
        renderer: null,
        starContainer: null,
        tempLevel: null,
        currentLevel: null,
        shouldEarnSkin: null,
        shareStoryId: null,
        shareData: null,
        nextSkinName: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.tempLevel = this.previousLevel;
            this.sm = oaktree_ext_services_ServiceManager.getService(agario_services_social_SocialService);
            this.title = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 32,
                align: 0,
                bold: true
            });
            this.title.set_text(oaktree_ext_localization_I18n.text("menu_level_up_title"));
            this.title.set_autoSize(0);
            this.addChild(this.title);
            this.subtitle = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 24,
                align: 0,
                bold: true
            });
            this.subtitle.set_text(oaktree_ext_localization_I18n.text("menu_level_up_subtitle"));
            this.subtitle.set_autoSize(0);
            this.addChild(this.subtitle);
            this.grayArea = new openfl_display_Sprite();
            this.grayArea.get_graphics().beginFill(16119285);
            oaktree_utils_MCGraphics.drawRoundRectComplex(this.grayArea.get_graphics(), 1, 1, this.maxWidth - 40, 230, 8, 0, 8, 0);
            this.grayArea.get_graphics().endFill();
            this.addChild(this.grayArea);
            this.starContainer = new openfl_display_Sprite();
            this.addChild(this.starContainer);
            var lvlImg = new openfl_display_Bitmap(Core.get_assets().getTexture("Exp_Star").get_bitmapData(), 1, true);
            lvlImg.set_x(-lvlImg.get_width() / 2);
            lvlImg.set_y(-lvlImg.get_height() / 2);
            this.levelIcon = new openfl_display_Sprite();
            this.levelIcon.addChild(lvlImg);
            this.starContainer.addChild(this.levelIcon);
            this.lvlLabel = new oaktree_ext_ui_Label({
                text: "" + this.tempLevel,
                fontSize: 32,
                align: 0,
                bold: true,
                width: this.maxWidth
            });
            this.addChild(this.lvlLabel);
            var currencyIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
            this.rewardLabel = new oaktree_ext_ui_controls_IconLabel({
                text: "+",
                fontSize: 16,
                align: 3,
                bold: true
            }, currencyIcon, "right", 2);
            this.slotControl = new agario_module_shop_components_SlotControl(5, 0);
            this.slotControl.S_slotFilled.add($bind(this, this.onSlotFilled));
            this.slotControl.S_slotsFull.add($bind(this, this.onSkinEarn));
            this.addChild(this.slotControl);
            var _g1 = 0;
            var _g = this.previousLevel % 5;
            while (_g1 < _g) {
                var i = _g1++;
                this.slotControl.setSlotActive()
            }
            var skin = Core.models.shopSkinsModel.getNextRewardSkin(this.tempLevel);
            if (skin != null) {
                this.nextSkinCell = new agario_module_shop_components_SkinnedCell({
                    bitmap: (js_Boot.__cast(skin, agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.image.source,
                    w: this.skinCellSize,
                    h: this.skinCellSize,
                    borderColor: (js_Boot.__cast(skin, agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_cellColor(),
                    borderSize: 6
                });
                this.addChild(this.nextSkinCell);
                this.nextSkinCell.set_scaleX(this.nextSkinCell.set_scaleY(0.2));
                this.nextSkinLabel = new oaktree_ext_ui_Label({
                    text: oaktree_ext_localization_I18n.text("menu_level_up_next_skin", [skin.availableAtLevel]),
                    fontSize: 16,
                    align: 3,
                    bold: true
                });
                this.addChild(this.nextSkinLabel)
            }
            this.rewardLabel.set_text(oaktree_ext_localization_I18n.text("menu_level_up_reward", [this.deltaCoins]));
            this.addChild(this.rewardLabel);
            this.doLayout();
            this.renderer = new org_zamedev_particles_renderers_SpritesParticleRenderer();
            this.addChild(this.renderer);
            this.ps = org_zamedev_particles_loaders_ParticleLoader.load("particle/LevelUpSlotBar-ipadhd.plist");
            this.renderer.addParticleSystem(this.ps)
        },
        onShow: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.onShow.call(this);
            agario_sounds_GameSounds.play("sfxRewardPopup")
        },
        onSlotFilled: function(filled) {
            this.explodeStar();
            agario_sounds_GameSounds.play("sfxMenuLevelUpPellet");
            this.ps.emit(this.slotControl.get_x() + 20 * filled + 5, this.slotControl.get_y() + 15);
            this.tempLevel++;
            this.lvlLabel.set_text("" + this.tempLevel)
        },
        dialogReady: function() {
            this.animateDialog()
        },
        doLayout: function() {
            this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
            this.title.set_y(10);
            this.subtitle.set_x((this.maxWidth - this.subtitle.get_width()) / 2);
            this.subtitle.set_y(this.title.get_y() + this.title.get_height() + 5);
            this.grayArea.set_x(20);
            this.grayArea.set_y(this.subtitle.get_y() + this.subtitle.get_height() + 10);
            this.levelIcon.set_x(this.grayArea.get_x() + this.grayArea.get_width() / 2);
            this.levelIcon.set_alpha(0);
            this.lvlLabel.set_x(this.levelIcon.get_x() - this.lvlLabel.get_width() / 2);
            this.lvlLabel.set_y(this.levelIcon.get_y() + this.levelIcon.get_height() / 2 - 15);
            this.lvlLabel.set_visible(false);
            this.rewardLabel.set_y(this.grayArea.get_y() + this.grayArea.get_height() - 30);
            this.rewardLabel.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.rewardLabel.get_width()) / 2);
            this.slotControl.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.slotControl.get_width()) / 2);
            this.slotControl.set_y(this.grayArea.get_y() + this.grayArea.get_height() + 15);
            if (this.nextSkinCell != null) {
                this.nextSkinCell.set_y(this.slotControl.get_y() + (this.slotControl.get_height() - this.nextSkinCell.get_height()) / 2);
                this.nextSkinCell.set_x(this.slotControl.get_x() + this.slotControl.get_width() + 5);
                this.nextSkinLabel.set_y(this.slotControl.get_y() + this.slotControl.get_height() + 10);
                this.nextSkinLabel.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.nextSkinLabel.get_width()) / 2)
            }
        },
        animateDialog: function() {
            this.levelIcon.set_y(this.grayArea.get_y());
            var targetIconY = this.grayArea.get_y() + this.grayArea.get_height() / 2;
            motion_Actuate.tween(this.levelIcon, 1, {
                alpha: 1,
                y: targetIconY
            }).ease(motion_easing_Elastic.get_easeOut()).onComplete($bind(this, this.onAnimationComplete));
            motion_Actuate.tween(this.levelIcon, 0.5, {
                scaleY: 0.8
            });
            motion_Actuate.tween(this.levelIcon, 1, {
                scaleY: 1
            }, false).delay(0.3).ease(motion_easing_Elastic.get_easeOut());
            agario_sounds_GameSounds.play("sfxMenuLevelUpStar");
            this.lvlLabel.set_x(this.levelIcon.get_x() - this.lvlLabel.get_width() / 2);
            this.lvlLabel.set_y(targetIconY - 15)
        },
        onSkinEarn: function() {
            var _g = this;
            if (this.nextSkinCell != null) {
                this.slotControl.pauseProcess();
                this.subtitle.set_text(oaktree_ext_localization_I18n.text("menu_level_up_subtitle_skin"));
                var targetX = this.grayArea.get_x() + (this.grayArea.get_width() - this.skinCellSize) / 2;
                var targetY = this.grayArea.get_y() + (this.grayArea.get_height() - this.skinCellSize) / 2;
                var path = new motion_MotionPath().bezier(targetX, targetY, targetX + 140, (this.nextSkinCell.get_y() - targetY) / 2, 2);
                motion_Actuate.motionPath(this.nextSkinCell, 2, {
                    x: path.get_x(),
                    y: path.get_y()
                });
                motion_Actuate.tween(this.nextSkinCell, 2, {
                    scaleX: 1,
                    scaleY: 1
                });
                agario_sounds_GameSounds.play("sfxMenuVeteranSkin");
                if (this.slotControl.get_hasFinished() == false) {
                    motion_Actuate.tween(this.nextSkinCell, 1, {
                        alpha: 0
                    }).delay(3).onComplete(function() {
                        motion_Actuate.tween(_g.starContainer, 0.5, {
                            alpha: 1
                        });
                        motion_Actuate.tween(_g.lvlLabel, 0.5, {
                            alpha: 1
                        });
                        _g.slotControl.resumeProcess()
                    })
                }
                var skin = Core.models.shopSkinsModel.getNextRewardSkin(this.tempLevel);
                if (skin != null) {
                    this.nextSkinCell = new agario_module_shop_components_SkinnedCell({
                        bitmap: (js_Boot.__cast(skin, agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.image.source,
                        w: this.skinCellSize,
                        h: this.skinCellSize,
                        borderColor: (js_Boot.__cast(skin, agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_cellColor(),
                        borderSize: 6
                    });
                    this.addChild(this.nextSkinCell);
                    this.nextSkinCell.set_scaleX(this.nextSkinCell.set_scaleY(0.2));
                    this.nextSkinLabel.set_text(oaktree_ext_localization_I18n.text("menu_level_up_next_skin", [skin.availableAtLevel]));
                    this.nextSkinCell.set_y(this.slotControl.get_y() + (this.slotControl.get_height() - this.nextSkinCell.get_height()) / 2);
                    this.nextSkinCell.set_x(this.slotControl.get_x() + this.slotControl.get_width() + 5)
                }
                motion_Actuate.tween(this.starContainer, 1, {
                    alpha: 0
                });
                motion_Actuate.tween(this.lvlLabel, 1, {
                    alpha: 0
                });
                Core.services.shop.setSkin(Core.models.shopSkinsModel.getNextRewardSkin(this.tempLevel - 1).productIdToQuantify)
            }
        },
        onAnimationComplete: function() {
            this.explodeStar();
            var deltaLevel = this.currentLevel - this.previousLevel;
            var _g = 0;
            while (_g < deltaLevel) {
                var i = _g++;
                this.slotControl.addSlotToQueue()
            }
            this.slotControl.process();
            this.lvlLabel.set_visible(true);
            this.createShareButtons()
        },
        explodeStar: function() {
            var _g = 0;
            while (_g < 6) {
                var i = _g++;
                var littleStar = new openfl_display_Sprite();
                var lvlImg = new openfl_display_Bitmap(Core.get_assets().getTexture("Exp_Star").get_bitmapData(), 1, true);
                lvlImg.set_x(-lvlImg.get_width() / 2);
                lvlImg.set_y(-lvlImg.get_height() / 2);
                littleStar.addChild(lvlImg);
                littleStar.set_alpha(0.7);
                littleStar.set_x(this.levelIcon.get_x());
                littleStar.set_y(this.levelIcon.get_y());
                this.starContainer.addChild(littleStar);
                var targetScale = Math.random() * 0.4;
                motion_Actuate.tween(littleStar, 1, {
                    x: littleStar.get_x() - 120 + Math.random() * 200,
                    y: littleStar.get_y() - Math.random() * 100,
                    scaleX: targetScale,
                    scaleY: targetScale,
                    alpha: 0
                })
            }
        },
        createShareButtons: function() {
            if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) {
                this.createGoogleButton()
            } else {
                this.createFbButton()
            }
            this.createTwitterButton()
        },
        createTwitterButton: function() {
            var _g = this;
            var twIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("twitter_icon").get_bitmapData());
            var twShareBtn = new agario_views_controls_ColorButton(null, {
                color: 110829,
                overColor: 110829,
                text: oaktree_ext_localization_I18n.text("social_share_tag"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: twIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 140,
                h: 35,
                fontSize: 18,
                bold: true
            });
            this.addChild(twShareBtn);
            twShareBtn.addEventListener("click", function(e) {
                _g.sm.shareTwitter(_g.shareStoryId, _g.shareData)
            });
            twShareBtn.set_x(this.maxWidth - twShareBtn.get_width() - 60);
            twShareBtn.set_y(this.nextSkinLabel.get_y() + this.nextSkinLabel.get_height() + 10)
        },
        createGoogleButton: function() {
            var _g = this;
            var googleIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gplus_icon").get_bitmapData());
            var googleBtn = new agario_views_controls_ColorButton(null, {
                color: 14699578,
                overColor: 14699578,
                text: oaktree_ext_localization_I18n.text("social_share_tag"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: googleIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 140,
                h: 35,
                fontSize: 18,
                bold: true
            });
            this.addChild(googleBtn);
            googleBtn.addEventListener("click", function(e) {
                _g.sm.shareGoogle(_g.shareStoryId, _g.shareData)
            });
            this.sm.prepareGoogleShare(this.shareStoryId, this.shareData);
            googleBtn.set_x(60);
            googleBtn.set_y(this.nextSkinLabel.get_y() + this.nextSkinLabel.get_height() + 10)
        },
        createFbButton: function() {
            var _g = this;
            var fbIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("fb_icon").get_bitmapData());
            var fbShareBtn = new agario_views_controls_ColorButton(null, {
                color: 3625371,
                overColor: 3625371,
                text: oaktree_ext_localization_I18n.text("social_share_tag"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: fbIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 140,
                h: 35,
                fontSize: 18,
                bold: true
            });
            this.addChild(fbShareBtn);
            fbShareBtn.addEventListener("click", function(e) {
                var story = _g.sm.getStoryById(_g.shareStoryId);
                if (story == null) {
                    return
                }
                var params = {
                    skin: _g.nextSkinName,
                    level: _g.currentLevel
                };
                var titleText = oaktree_ext_localization_I18n.text(story.titleTag, params);
                var subtitleText = oaktree_ext_localization_I18n.text(story.subtitleTag, params);
                var descriptionText = oaktree_ext_localization_I18n.text(story.subtitleTag, params);
                _g.sm.directShareFB(_g.shareStoryId, titleText, subtitleText, descriptionText)
            });
            fbShareBtn.set_x(60);
            fbShareBtn.set_y(this.nextSkinLabel.get_y() + this.nextSkinLabel.get_height() + 10)
        },
        __class__: agario_module_user_view_LevelUpDialog
    });
    var agario_module_user_view_ProfileDialog = function() {
        this.progressComponent = new openfl_display_Sprite();
        this.currencyLabel = new oaktree_ext_ui_controls_IconLabel({});
        this.profilePic = new openfl_display_Sprite();
        this.padding = 20;
        this.playerName = new oaktree_ext_ui_Label({});
        this.statsTitle = new oaktree_ext_ui_Label({});
        oaktree_ext_ui_views_GenericDialog.call(this, "state_profile_dialog");
        this.closeOnEscape = true;
        this.maxWidth = 620;
        this.maxHeight = 420
    };
    $hxClasses["agario.module.user.view.ProfileDialog"] = agario_module_user_view_ProfileDialog;
    agario_module_user_view_ProfileDialog.__name__ = ["agario", "module", "user", "view", "ProfileDialog"];
    agario_module_user_view_ProfileDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_module_user_view_ProfileDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        titleLabel: null,
        contents: null,
        rightColumn: null,
        statsTitle: null,
        playerName: null,
        padding: null,
        profilePic: null,
        currencyLabel: null,
        progressComponent: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.contents = new openfl_display_Sprite();
            this.addChild(this.contents);
            if (Core.user.userInfo != null && Core.user.get_socialId() != "") {
                this.displayUserInfo()
            } else {
                this.loadingLabel = new oaktree_ext_ui_Label({
                    text: "Loading your information...",
                    fontSize: 28,
                    bold: true
                });
                this.addChild(this.loadingLabel);
                this.loadingLabel.set_x((this.maxWidth - this.loadingLabel.get_width()) / 2);
                this.loadingLabel.set_y((this.maxHeight - this.loadingLabel.get_height()) / 2);
                Core.user.onUserDataUpdate.add($bind(this, this.displayUserInfo))
            }
        },
        displayUserInfo: function() {
            if (Core.user.userInfo == null || Core.user.get_socialId() == "") {
                return
            }
            Core.user.onUserDataUpdate.remove($bind(this, this.displayUserInfo));
            if (this.loadingLabel != null && this.contains(this.loadingLabel)) {
                this.removeChild(this.loadingLabel)
            }
            this.drawBackground();
            this.drawTitle();
            this.createUserProfile();
            this.createStatsPanel();
            this.doLayout()
        },
        createUserProfile: function() {
            var _g = this;
            var name = Core.user.userInfo.displayName;
            if (name != null && name.indexOf("_") != -1) {
                var len = name.lastIndexOf("_");
                name = HxOverrides.substr(name, 0, len)
            }
            this.playerName = new oaktree_ext_ui_Label({
                text: name,
                fontSize: 26,
                bold: true,
                width: this.maxWidth / 2 - this.padding,
                align: 0,
                color: 3421236
            });
            this.contents.addChild(this.playerName);
            var coinAmountString = oaktree_utils_StringUtility.formatNumber(Core.user.get_coins(), "n", " ");
            var currencyIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon", "main_shop").get_bitmapData());
            this.currencyLabel = new oaktree_ext_ui_controls_IconLabel({
                text: coinAmountString,
                fontSize: 16,
                align: 3,
                color: 0,
                bold: true
            }, currencyIcon, "right", 2);
            this.contents.addChild(this.currencyLabel);
            this.progressComponent = this.getProgressBar();
            this.contents.addChild(this.progressComponent);
            openfl_display_BitmapData.loadFromFile(Core.user.avatarUrl).then(function(data) {
                _g.onLoadProfilePic(data);
                return lime_app_Future.withValue(data)
            })
        },
        getProgressBar: function() {
            var progress = new openfl_display_Sprite();
            var progressSprite = this.getBarProgressForXP(Core.user.userInfo.xp, Core.user.userInfo.level);
            progress.addChild(progressSprite);
            var xpBarBackground = new openfl_display_Sprite();
            xpBarBackground.get_graphics().lineStyle(2, 25606);
            xpBarBackground.get_graphics().beginFill(16777215, 0);
            xpBarBackground.get_graphics().drawRoundRect(0, 0, 140, 25, 10, 10);
            xpBarBackground.get_graphics().endFill();
            progress.addChild(xpBarBackground);
            var levelIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("Exp_Star").get_bitmapData(), 1, true);
            progress.addChild(levelIcon);
            levelIcon.set_width(levelIcon.set_height(54));
            levelIcon.set_rotation(12);
            levelIcon.set_x(xpBarBackground.get_x() + xpBarBackground.get_width() - levelIcon.get_width() / 2 + 4);
            levelIcon.set_y((xpBarBackground.get_height() - levelIcon.get_height()) / 2 - 8);
            var levelLabel = new oaktree_ext_ui_Label({
                text: Std.string(Core.user.userInfo.level),
                bold: true,
                color: 3355443,
                width: 46,
                fontSize: 18,
                align: 0
            });
            progress.addChild(levelLabel);
            levelLabel.set_x(levelIcon.get_x());
            levelLabel.set_y(-4);
            levelLabel.set_rotation(12);
            var progressLabel = new oaktree_ext_ui_Label({
                text: Core.user.userInfo.xp + " / " + Core.models.xpModel.getMaxXpForLevel(Core.user.userInfo.level),
                fontSize: 14,
                color: 0,
                autoSize: 1
            });
            progress.addChild(progressLabel);
            progressLabel.set_x(xpBarBackground.get_x() + (xpBarBackground.get_width() - progressLabel.get_width()) / 2);
            progressLabel.set_y(xpBarBackground.get_y() + xpBarBackground.get_height() + 5);
            return progress
        },
        createStatsPanel: function() {
            this.rightColumn = new openfl_display_Sprite();
            this.statsTitle = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_profile_player_stats"),
                fontSize: 26,
                color: 3421236
            });
            this.rightColumn.addChild(this.statsTitle);
            var statsData = [{
                key: oaktree_ext_localization_I18n.text("menu_profile_total_games"),
                value: Core.user.stats.gamesPlayed
            }, {
                key: oaktree_ext_localization_I18n.text("menu_profile_total_mass"),
                value: Core.user.stats.massConsumed
            }, {
                key: oaktree_ext_localization_I18n.text("menu_profile_average_score"),
                value: Core.user.stats.averageScore
            }, {
                key: oaktree_ext_localization_I18n.text("menu_profile_highest_score"),
                value: Core.user.stats.highestMass
            }, {
                key: oaktree_ext_localization_I18n.text("menu_profile_longest_time"),
                value: this.formatTime(Core.user.stats.longestTimeAlive)
            }, {
                key: oaktree_ext_localization_I18n.text("menu_profile_cells_eaten"),
                value: Core.user.stats.mostCellsEaten
            }];
            var _g1 = 0;
            var _g = statsData.length;
            while (_g1 < _g) {
                var i = _g1++;
                var lineSpr = this.createRightColumnKeyValue(statsData[i].key, statsData[i].value);
                lineSpr.set_y(50 + i * 32);
                this.rightColumn.addChild(lineSpr)
            }
            this.contents.addChild(this.rightColumn)
        },
        formatTime: function(timeInSeconds) {
            var secs = timeInSeconds;
            var mins = secs / 60 | 0;
            var hours = mins / 60 | 0;
            var strFinal = "";
            if (hours <= 0) {
                strFinal = mins + "m " + secs % 60 + "s"
            } else {
                strFinal = hours % 60 + "h " + mins % 60 + "m " + secs % 60 + "s"
            }
            return strFinal
        },
        getBarProgressForXP: function(xp, level) {
            var percentage = Math.min(1, Core.models.xpModel.getPercentage(xp, level));
            var progressSprite = new openfl_display_Sprite();
            var progressStriped = new openfl_display_Bitmap(Core.get_assets().getTexture("progress_striped").get_bitmapData());
            progressSprite.addChild(progressStriped);
            var progressMask = new openfl_display_Shape();
            progressMask.get_graphics().lineStyle(2, 25606);
            progressMask.get_graphics().beginFill(26112, 1);
            progressMask.get_graphics().drawRoundRect(0, 0, 140 * (percentage * 0.88), 25, 10, 10);
            progressMask.get_graphics().endFill();
            progressSprite.addChild(progressMask);
            progressStriped.set_mask(progressMask);
            progressSprite.set_cacheAsBitmap(true);
            return progressSprite
        },
        onLoadProfilePic: function(data) {
            if (data == null) {
                return
            }
            while (this.profilePic.get_numChildren() > 0) {
                this.profilePic.removeChildAt(0)
            }
            var bitmap = new openfl_display_Bitmap(data);
            var pic = this.profilePic.addChild(bitmap);
            var ratio = 120 / pic.get_width();
            pic.set_scaleX(pic.set_scaleY(ratio));
            this.contents.addChild(this.profilePic);
            var rect = this.profilePic.getBounds(this.contents);
            var maskSquare = new openfl_display_Shape();
            maskSquare.get_graphics().beginFill(16711680);
            maskSquare.get_graphics().drawRoundRect(0, 0, rect.width, rect.height, 10);
            maskSquare.get_graphics().endFill();
            this.profilePic.addChild(maskSquare);
            pic.set_mask(maskSquare);
            this.profilePic.set_cacheAsBitmap(true);
            this.doLayout()
        },
        doLayout: function() {
            this.rightColumn.set_x(this.maxWidth / 2 + (this.maxWidth / 2 - this.padding - this.rightColumn.get_width()) / 2 - this.padding);
            this.rightColumn.set_y(this.padding);
            this.contents.set_y(this.titleLabel.get_y() + this.titleLabel.get_height() + this.padding);
            this.contents.set_x((this.maxWidth - this.contents.get_width()) / 2);
            this.playerName.set_y(this.padding);
            this.profilePic.set_x((this.maxWidth / 2 - this.profilePic.get_width()) / 2 - 10);
            this.profilePic.set_y(this.playerName.get_y() + this.playerName.get_height() + this.padding / 2);
            this.currencyLabel.set_y(this.profilePic.get_y() + this.profilePic.get_height() + this.padding / 2);
            this.currencyLabel.set_x(this.profilePic.get_x() + (this.profilePic.get_width() - this.currencyLabel.get_width()) / 2 + 5);
            this.progressComponent.set_x((this.maxWidth / 2 - this.progressComponent.get_width()) / 2);
            this.progressComponent.set_y(this.currencyLabel.get_y() + this.currencyLabel.get_height() + this.padding)
        },
        drawBackground: function() {
            var bg = new openfl_display_Shape();
            bg.get_graphics().lineStyle(2, 11316396, 1, true);
            bg.get_graphics().beginFill(16777215);
            bg.get_graphics().drawRoundRect(0, 0, this.maxWidth - this.padding * 2, 320, 8, 8);
            bg.get_graphics().endFill();
            this.contents.addChild(bg);
            var grayArea = new openfl_display_Sprite();
            grayArea.get_graphics().beginFill(16119285);
            oaktree_utils_MCGraphics.drawRoundRectComplex(grayArea.get_graphics(), 1, 1, (this.maxWidth - this.padding * 2) / 2, bg.get_height() - 4, 8, 0, 8, 0);
            grayArea.get_graphics().endFill();
            this.contents.addChild(grayArea)
        },
        drawTitle: function() {
            var format = new openfl_text_TextFormat("Arial", 30, 0, true);
            format.align = 3;
            this.titleLabel = new openfl_text_TextField();
            this.titleLabel.set_defaultTextFormat(format);
            this.titleLabel.set_text(oaktree_ext_localization_I18n.text("menu_profile_title"));
            this.titleLabel.set_width(this.maxWidth - this.padding);
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 5);
            this.titleLabel.set_autoSize(1);
            this.titleLabel.set_selectable(false);
            this.titleLabel.set_embedFonts(false);
            this.titleLabel.set_textColor(5329233);
            this.addChild(this.titleLabel);
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_textWidth()) * 0.5);
            this.titleLabel.set_y(this.padding)
        },
        createRightColumnKeyValue: function(key, value) {
            if ((value == null ? "null" : "" + value) == "NaN") {
                value = "-"
            }
            var spr = new openfl_display_Sprite();
            var keyLabel = new oaktree_ext_ui_Label({
                text: key,
                fontSize: 15,
                autoSize: 1
            });
            var valueLabel = new oaktree_ext_ui_Label({
                text: value == null ? "null" : "" + value,
                bold: true,
                fontSize: 16,
                autoSize: 1
            });
            spr.addChild(keyLabel);
            spr.addChild(valueLabel);
            valueLabel.set_x(keyLabel.get_x() + keyLabel.get_width());
            valueLabel.set_y(keyLabel.get_y() - (valueLabel.get_height() - keyLabel.get_height()) / 2);
            return spr
        },
        __class__: agario_module_user_view_ProfileDialog
    });
    var agario_proto_Activate_$boost_$request = function() {
        protohx_Message.call(this);
        this.set_productId("")
    };
    $hxClasses["agario.proto.Activate_boost_request"] = agario_proto_Activate_$boost_$request;
    agario_proto_Activate_$boost_$request.__name__ = ["agario", "proto", "Activate_boost_request"];
    agario_proto_Activate_$boost_$request.__super__ = protohx_Message;
    agario_proto_Activate_$boost_$request.prototype = $extend(protohx_Message.prototype, {
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("productId", this.get_productId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var product_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_boost_request.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Activate_$boost_$request,
        __properties__: {
            set_productId: "set_productId",
            get_productId: "get_productId"
        }
    });
    var agario_proto_Activate_$boost_$response = function() {
        protohx_Message.call(this);
        this.set_userBoostItem(new agario_proto_User_$boost_$item());
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Activate_boost_response"] = agario_proto_Activate_$boost_$response;
    agario_proto_Activate_$boost_$response.__name__ = ["agario", "proto", "Activate_boost_response"];
    agario_proto_Activate_$boost_$response.__super__ = protohx_Message;
    agario_proto_Activate_$boost_$response.prototype = $extend(protohx_Message.prototype, {
        userBoostItem: null,
        setUserBoostItem: function(value) {
            this.set_userBoostItem(value);
            return this
        },
        set_userBoostItem: function(value) {
            return this.userBoostItem = value
        },
        get_userBoostItem: function() {
            return this.userBoostItem
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userBoostItem());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("userBoostItem", this.get_userBoostItem());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var user_boost_item__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (user_boost_item__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_boost_response.userBoostItem cannot be set twice."))
                        }++user_boost_item__count;
                        this.set_userBoostItem(new agario_proto_User_$boost_$item());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userBoostItem());
                        break;
                    case 2:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Activate_$boost_$response,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_userBoostItem: "set_userBoostItem",
            get_userBoostItem: "get_userBoostItem"
        }
    });
    var agario_proto_Activate_$quest_$request = function() {
        protohx_Message.call(this);
        this.set_productId("")
    };
    $hxClasses["agario.proto.Activate_quest_request"] = agario_proto_Activate_$quest_$request;
    agario_proto_Activate_$quest_$request.__name__ = ["agario", "proto", "Activate_quest_request"];
    agario_proto_Activate_$quest_$request.__super__ = protohx_Message;
    agario_proto_Activate_$quest_$request.prototype = $extend(protohx_Message.prototype, {
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("productId", this.get_productId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var product_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_quest_request.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Activate_$quest_$request,
        __properties__: {
            set_productId: "set_productId",
            get_productId: "get_productId"
        }
    });
    var agario_proto_Activate_$quest_$response = function() {
        protohx_Message.call(this);
        this.set_userQuest(new agario_proto_User_$quest());
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Activate_quest_response"] = agario_proto_Activate_$quest_$response;
    agario_proto_Activate_$quest_$response.__name__ = ["agario", "proto", "Activate_quest_response"];
    agario_proto_Activate_$quest_$response.__super__ = protohx_Message;
    agario_proto_Activate_$quest_$response.prototype = $extend(protohx_Message.prototype, {
        userQuest: null,
        setUserQuest: function(value) {
            this.set_userQuest(value);
            return this
        },
        set_userQuest: function(value) {
            return this.userQuest = value
        },
        get_userQuest: function() {
            return this.userQuest
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userQuest());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("userQuest", this.get_userQuest());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var user_quest__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (user_quest__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_quest_response.userQuest cannot be set twice."))
                        }++user_quest__count;
                        this.set_userQuest(new agario_proto_User_$quest());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userQuest());
                        break;
                    case 2:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Activate_$quest_$response,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_userQuest: "set_userQuest",
            get_userQuest: "get_userQuest"
        }
    });
    var agario_proto_Activate_$timed_$event_$request = function() {
        protohx_Message.call(this);
        this.set_eventId("")
    };
    $hxClasses["agario.proto.Activate_timed_event_request"] = agario_proto_Activate_$timed_$event_$request;
    agario_proto_Activate_$timed_$event_$request.__name__ = ["agario", "proto", "Activate_timed_event_request"];
    agario_proto_Activate_$timed_$event_$request.__super__ = protohx_Message;
    agario_proto_Activate_$timed_$event_$request.prototype = $extend(protohx_Message.prototype, {
        eventId: null,
        setEventId: function(value) {
            this.set_eventId(value);
            return this
        },
        set_eventId: function(value) {
            return this.eventId = value
        },
        get_eventId: function() {
            return this.eventId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_eventId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("eventId", this.get_eventId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var event_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (event_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_timed_event_request.eventId cannot be set twice."))
                        }++event_id__count;
                        this.set_eventId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Activate_$timed_$event_$request,
        __properties__: {
            set_eventId: "set_eventId",
            get_eventId: "get_eventId"
        }
    });
    var agario_proto_Activate_$timed_$event_$response = function() {
        protohx_Message.call(this);
        this.set_userTimedEvent(new agario_proto_User_$timed_$event());
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Activate_timed_event_response"] = agario_proto_Activate_$timed_$event_$response;
    agario_proto_Activate_$timed_$event_$response.__name__ = ["agario", "proto", "Activate_timed_event_response"];
    agario_proto_Activate_$timed_$event_$response.__super__ = protohx_Message;
    agario_proto_Activate_$timed_$event_$response.prototype = $extend(protohx_Message.prototype, {
        userTimedEvent: null,
        setUserTimedEvent: function(value) {
            this.set_userTimedEvent(value);
            return this
        },
        set_userTimedEvent: function(value) {
            return this.userTimedEvent = value
        },
        get_userTimedEvent: function() {
            return this.userTimedEvent
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userTimedEvent());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("userTimedEvent", this.get_userTimedEvent());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var user_timed_event__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (user_timed_event__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_timed_event_response.userTimedEvent cannot be set twice."))
                        }++user_timed_event__count;
                        this.set_userTimedEvent(new agario_proto_User_$timed_$event());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userTimedEvent());
                        break;
                    case 2:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Activate_$timed_$event_$response,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_userTimedEvent: "set_userTimedEvent",
            get_userTimedEvent: "get_userTimedEvent"
        }
    });
    var agario_proto_Apple_$inapp_$purchase_$request = function() {
        protohx_Message.call(this);
        this.set_transactionId(this.defaultUInt64());
        this.set_receiptData("");
        this.set_purchaseToken("")
    };
    $hxClasses["agario.proto.Apple_inapp_purchase_request"] = agario_proto_Apple_$inapp_$purchase_$request;
    agario_proto_Apple_$inapp_$purchase_$request.__name__ = ["agario", "proto", "Apple_inapp_purchase_request"];
    agario_proto_Apple_$inapp_$purchase_$request.__super__ = protohx_Message;
    agario_proto_Apple_$inapp_$purchase_$request.prototype = $extend(protohx_Message.prototype, {
        transactionId: null,
        setTransactionId: function(value) {
            this.set_transactionId(value);
            return this
        },
        set_transactionId: function(value) {
            return this.transactionId = value
        },
        get_transactionId: function() {
            return this.transactionId
        },
        receiptData: null,
        setReceiptData: function(value) {
            this.set_receiptData(value);
            return this
        },
        set_receiptData: function(value) {
            return this.receiptData = value
        },
        get_receiptData: function() {
            return this.receiptData
        },
        purchaseToken: null,
        setPurchaseToken: function(value) {
            this.set_purchaseToken(value);
            return this
        },
        set_purchaseToken: function(value) {
            return this.purchaseToken = value
        },
        get_purchaseToken: function() {
            return this.purchaseToken
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT64(output, this.get_transactionId());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_receiptData());
            protohx_WriteUtils.writeTag(output, 2, 3);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_purchaseToken());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("transactionId", this.get_transactionId());
            fn("receiptData", this.get_receiptData());
            fn("purchaseToken", this.get_purchaseToken())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var transaction_id__count = 0;
            var receipt_data__count = 0;
            var purchase_token__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (transaction_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Apple_inapp_purchase_request.transactionId cannot be set twice."))
                        }++transaction_id__count;
                        this.set_transactionId(protohx_ReadUtils.read__TYPE_UINT64(input));
                        break;
                    case 2:
                        if (receipt_data__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Apple_inapp_purchase_request.receiptData cannot be set twice."))
                        }++receipt_data__count;
                        this.set_receiptData(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (purchase_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Apple_inapp_purchase_request.purchaseToken cannot be set twice."))
                        }++purchase_token__count;
                        this.set_purchaseToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Apple_$inapp_$purchase_$request,
        __properties__: {
            set_purchaseToken: "set_purchaseToken",
            get_purchaseToken: "get_purchaseToken",
            set_receiptData: "set_receiptData",
            get_receiptData: "get_receiptData",
            set_transactionId: "set_transactionId",
            get_transactionId: "get_transactionId"
        }
    });
    var agario_proto_Arena_$dimensions = function() {
        protohx_Message.call(this);
        this.set_width(0);
        this.set_height(0)
    };
    $hxClasses["agario.proto.Arena_dimensions"] = agario_proto_Arena_$dimensions;
    agario_proto_Arena_$dimensions.__name__ = ["agario", "proto", "Arena_dimensions"];
    agario_proto_Arena_$dimensions.__super__ = protohx_Message;
    agario_proto_Arena_$dimensions.prototype = $extend(protohx_Message.prototype, {
        width: null,
        setWidth: function(value) {
            this.set_width(value);
            return this
        },
        set_width: function(value) {
            return this.width = value
        },
        get_width: function() {
            return this.width
        },
        height: null,
        setHeight: function(value) {
            this.set_height(value);
            return this
        },
        set_height: function(value) {
            return this.height = value
        },
        get_height: function() {
            return this.height
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 5, 1);
            protohx_WriteUtils.write__TYPE_FLOAT(output, this.get_width());
            protohx_WriteUtils.writeTag(output, 5, 2);
            protohx_WriteUtils.write__TYPE_FLOAT(output, this.get_height());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("width", this.get_width());
            fn("height", this.get_height())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var width__count = 0;
            var height__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (width__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Arena_dimensions.width cannot be set twice."))
                        }++width__count;
                        this.set_width(protohx_ReadUtils.read__TYPE_FLOAT(input));
                        break;
                    case 2:
                        if (height__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Arena_dimensions.height cannot be set twice."))
                        }++height__count;
                        this.set_height(protohx_ReadUtils.read__TYPE_FLOAT(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Arena_$dimensions,
        __properties__: {
            set_height: "set_height",
            get_height: "get_height",
            set_width: "set_width",
            get_width: "get_width"
        }
    });
    var agario_proto_Arena_$state = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this);
        this.set_orderId(0);
        this.set_appeared([]);
        this.set_changed([]);
        this.set_disappeared([]);
        this.set_died([])
    };
    $hxClasses["agario.proto.Arena_state"] = agario_proto_Arena_$state;
    agario_proto_Arena_$state.__name__ = ["agario", "proto", "Arena_state"];
    agario_proto_Arena_$state.__super__ = protohx_Message;
    agario_proto_Arena_$state.prototype = $extend(protohx_Message.prototype, {
        orderId: null,
        setOrderId: function(value) {
            this.set_orderId(value);
            return this
        },
        set_orderId: function(value) {
            return this.orderId = value
        },
        get_orderId: function() {
            return this.orderId
        },
        appeared: null,
        setAppeared: function(value) {
            this.set_appeared(value);
            return this
        },
        set_appeared: function(value) {
            return this.appeared = value
        },
        get_appeared: function() {
            return this.appeared
        },
        addAppeared: function(value) {
            if (this.get_appeared() == null) {
                this.set_appeared([value])
            } else {
                this.get_appeared().push(value)
            }
        },
        changed: null,
        setChanged: function(value) {
            this.set_changed(value);
            return this
        },
        set_changed: function(value) {
            return this.changed = value
        },
        get_changed: function() {
            return this.changed
        },
        addChanged: function(value) {
            if (this.get_changed() == null) {
                this.set_changed([value])
            } else {
                this.get_changed().push(value)
            }
        },
        disappeared: null,
        setDisappeared: function(value) {
            this.set_disappeared(value);
            return this
        },
        set_disappeared: function(value) {
            return this.disappeared = value
        },
        get_disappeared: function() {
            return this.disappeared
        },
        addDisappeared: function(value) {
            if (this.get_disappeared() == null) {
                this.set_disappeared([value])
            } else {
                this.get_disappeared().push(value)
            }
        },
        died: null,
        setDied: function(value) {
            this.set_died(value);
            return this
        },
        set_died: function(value) {
            return this.died = value
        },
        get_died: function() {
            return this.died
        },
        addDied: function(value) {
            if (this.get_died() == null) {
                this.set_died([value])
            } else {
                this.get_died().push(value)
            }
        },
        isDead: null,
        setIsDead: function(value) {
            this.set_isDead(value);
            return this
        },
        hasField__0: null,
        clearIsDead: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_isDead(false)
        },
        hasIsDead: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_isDead: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.isDead = value
        },
        get_isDead: function() {
            return this.isDead
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_orderId());
            if (this.get_appeared() != null) {
                var _g = 0;
                var _g1 = this.get_appeared();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            if (this.get_changed() != null) {
                var _g2 = 0;
                var _g11 = this.get_changed();
                while (_g2 < _g11.length) {
                    var value1 = _g11[_g2];
                    ++_g2;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value1)
                }
            }
            if (this.get_disappeared() != null) {
                var _g3 = 0;
                var _g12 = this.get_disappeared();
                while (_g3 < _g12.length) {
                    var value2 = _g12[_g3];
                    ++_g3;
                    protohx_WriteUtils.writeTag(output, 0, 4);
                    protohx_WriteUtils.write__TYPE_UINT32(output, value2)
                }
            }
            if (this.get_died() != null) {
                var _g4 = 0;
                var _g13 = this.get_died();
                while (_g4 < _g13.length) {
                    var value3 = _g13[_g4];
                    ++_g4;
                    protohx_WriteUtils.writeTag(output, 2, 5);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value3)
                }
            }
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 6);
                protohx_WriteUtils.write__TYPE_BOOL(output, this.get_isDead())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("orderId", this.get_orderId());
            if (this.get_appeared() != null && this.get_appeared().length > 0) {
                fn("appeared", this.get_appeared())
            }
            if (this.get_changed() != null && this.get_changed().length > 0) {
                fn("changed", this.get_changed())
            }
            if (this.get_disappeared() != null && this.get_disappeared().length > 0) {
                fn("disappeared", this.get_disappeared())
            }
            if (this.get_died() != null && this.get_died().length > 0) {
                fn("died", this.get_died())
            }
            if ((this.hasField__0 & 1) != 0) {
                fn("isDead", this.get_isDead())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var order_id__count = 0;
            var is_dead__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (order_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Arena_state.orderId cannot be set twice."))
                        }++order_id__count;
                        this.set_orderId(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 2:
                        if (this.get_appeared() == null) {
                            this.set_appeared([])
                        }
                        this.get_appeared().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_Cell_$state()));
                        break;
                    case 3:
                        if (this.get_changed() == null) {
                            this.set_changed([])
                        }
                        this.get_changed().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_Cell_$state()));
                        break;
                    case 4:
                        if (this.get_disappeared() == null) {
                            this.set_disappeared([])
                        }
                        if ((function($this) {
                                var $r;
                                var a;
                                a = js_Boot.__cast(tag & 7, Int);
                                $r = a == 2;
                                return $r
                            }(this))) {
                            protohx_ReadUtils.readPackedRepeated(input, protohx_ReadUtils.read__TYPE_UINT32, this.get_disappeared())
                        } else {
                            this.get_disappeared().push(protohx_ReadUtils.read__TYPE_UINT32(input))
                        }
                        break;
                    case 5:
                        if (this.get_died() == null) {
                            this.set_died([])
                        }
                        this.get_died().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_Cell_$death()));
                        break;
                    case 6:
                        if (is_dead__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Arena_state.isDead cannot be set twice."))
                        }++is_dead__count;
                        this.set_isDead(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Arena_$state,
        __properties__: {
            set_isDead: "set_isDead",
            get_isDead: "get_isDead",
            set_died: "set_died",
            get_died: "get_died",
            set_disappeared: "set_disappeared",
            get_disappeared: "get_disappeared",
            set_changed: "set_changed",
            get_changed: "get_changed",
            set_appeared: "set_appeared",
            get_appeared: "get_appeared",
            set_orderId: "set_orderId",
            get_orderId: "get_orderId"
        }
    });
    var agario_proto_Brew_$potion_$for_$slot_$request = function() {
        protohx_Message.call(this);
        this.set_slot(0)
    };
    $hxClasses["agario.proto.Brew_potion_for_slot_request"] = agario_proto_Brew_$potion_$for_$slot_$request;
    agario_proto_Brew_$potion_$for_$slot_$request.__name__ = ["agario", "proto", "Brew_potion_for_slot_request"];
    agario_proto_Brew_$potion_$for_$slot_$request.__super__ = protohx_Message;
    agario_proto_Brew_$potion_$for_$slot_$request.prototype = $extend(protohx_Message.prototype, {
        slot: null,
        setSlot: function(value) {
            this.set_slot(value);
            return this
        },
        set_slot: function(value) {
            return this.slot = value
        },
        get_slot: function() {
            return this.slot
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_slot());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("slot", this.get_slot())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var slot__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (slot__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Brew_potion_for_slot_request.slot cannot be set twice."))
                        }++slot__count;
                        this.set_slot(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Brew_$potion_$for_$slot_$request,
        __properties__: {
            set_slot: "set_slot",
            get_slot: "get_slot"
        }
    });
    var agario_proto_Brew_$potion_$for_$slot_$response = function() {
        protohx_Message.call(this);
        this.set_result(0);
        this.set_userPotions([])
    };
    $hxClasses["agario.proto.Brew_potion_for_slot_response"] = agario_proto_Brew_$potion_$for_$slot_$response;
    agario_proto_Brew_$potion_$for_$slot_$response.__name__ = ["agario", "proto", "Brew_potion_for_slot_response"];
    agario_proto_Brew_$potion_$for_$slot_$response.__super__ = protohx_Message;
    agario_proto_Brew_$potion_$for_$slot_$response.prototype = $extend(protohx_Message.prototype, {
        result: null,
        setResult: function(value) {
            this.set_result(value);
            return this
        },
        set_result: function(value) {
            return this.result = value
        },
        get_result: function() {
            return this.result
        },
        userPotions: null,
        setUserPotions: function(value) {
            this.set_userPotions(value);
            return this
        },
        set_userPotions: function(value) {
            return this.userPotions = value
        },
        get_userPotions: function() {
            return this.userPotions
        },
        addUserPotions: function(value) {
            if (this.get_userPotions() == null) {
                this.set_userPotions([value])
            } else {
                this.get_userPotions().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_result());
            if (this.get_userPotions() != null) {
                var _g = 0;
                var _g1 = this.get_userPotions();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("result", this.get_result());
            if (this.get_userPotions() != null && this.get_userPotions().length > 0) {
                fn("userPotions", this.get_userPotions())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var result__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (result__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Brew_potion_for_slot_response.result cannot be set twice."))
                        }++result__count;
                        this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (this.get_userPotions() == null) {
                            this.set_userPotions([])
                        }
                        this.get_userPotions().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$potion()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Brew_$potion_$for_$slot_$response,
        __properties__: {
            set_userPotions: "set_userPotions",
            get_userPotions: "get_userPotions",
            set_result: "set_result",
            get_result: "get_result"
        }
    });
    var agario_proto_Cell_$death = function() {
        protohx_Message.call(this);
        this.set_id(0);
        this.set_killerId(0)
    };
    $hxClasses["agario.proto.Cell_death"] = agario_proto_Cell_$death;
    agario_proto_Cell_$death.__name__ = ["agario", "proto", "Cell_death"];
    agario_proto_Cell_$death.__super__ = protohx_Message;
    agario_proto_Cell_$death.prototype = $extend(protohx_Message.prototype, {
        id: null,
        setId: function(value) {
            this.set_id(value);
            return this
        },
        set_id: function(value) {
            return this.id = value
        },
        get_id: function() {
            return this.id
        },
        killerId: null,
        setKillerId: function(value) {
            this.set_killerId(value);
            return this
        },
        set_killerId: function(value) {
            return this.killerId = value
        },
        get_killerId: function() {
            return this.killerId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_id());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_killerId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("id", this.get_id());
            fn("killerId", this.get_killerId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var id__count = 0;
            var killer_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_death.id cannot be set twice."))
                        }++id__count;
                        this.set_id(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 2:
                        if (killer_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_death.killerId cannot be set twice."))
                        }++killer_id__count;
                        this.set_killerId(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Cell_$death,
        __properties__: {
            set_killerId: "set_killerId",
            get_killerId: "get_killerId",
            set_id: "set_id",
            get_id: "get_id"
        }
    });
    var agario_proto_Cell_$state = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this);
        this.set_type(0);
        this.set_id(0);
        this.set_x(0);
        this.set_y(0);
        this.set_radius(0)
    };
    $hxClasses["agario.proto.Cell_state"] = agario_proto_Cell_$state;
    agario_proto_Cell_$state.__name__ = ["agario", "proto", "Cell_state"];
    agario_proto_Cell_$state.__super__ = protohx_Message;
    agario_proto_Cell_$state.prototype = $extend(protohx_Message.prototype, {
        type: null,
        setType: function(value) {
            this.set_type(value);
            return this
        },
        set_type: function(value) {
            return this.type = value
        },
        get_type: function() {
            return this.type
        },
        id: null,
        setId: function(value) {
            this.set_id(value);
            return this
        },
        set_id: function(value) {
            return this.id = value
        },
        get_id: function() {
            return this.id
        },
        x: null,
        setX: function(value) {
            this.set_x(value);
            return this
        },
        set_x: function(value) {
            return this.x = value
        },
        get_x: function() {
            return this.x
        },
        y: null,
        setY: function(value) {
            this.set_y(value);
            return this
        },
        set_y: function(value) {
            return this.y = value
        },
        get_y: function() {
            return this.y
        },
        radius: null,
        setRadius: function(value) {
            this.set_radius(value);
            return this
        },
        set_radius: function(value) {
            return this.radius = value
        },
        get_radius: function() {
            return this.radius
        },
        name: null,
        setName: function(value) {
            this.set_name(value);
            return this
        },
        clearName: function() {
            this.set_name(null)
        },
        hasName: function() {
            return this.get_name() != null
        },
        set_name: function(value) {
            return this.name = value
        },
        get_name: function() {
            return this.name
        },
        userLevel: null,
        setUserLevel: function(value) {
            this.set_userLevel(value);
            return this
        },
        hasField__0: null,
        clearUserLevel: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_userLevel(0)
        },
        hasUserLevel: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_userLevel: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.userLevel = value
        },
        get_userLevel: function() {
            return this.userLevel
        },
        skinGameplayId: null,
        setSkinGameplayId: function(value) {
            this.set_skinGameplayId(value);
            return this
        },
        clearSkinGameplayId: function() {
            this.hasField__0 = this.hasField__0 & -3;
            this.set_skinGameplayId(0)
        },
        hasSkinGameplayId: function() {
            return (this.hasField__0 & 2) != 0
        },
        set_skinGameplayId: function(value) {
            this.hasField__0 = this.hasField__0 | 2;
            return this.skinGameplayId = value
        },
        get_skinGameplayId: function() {
            return this.skinGameplayId
        },
        color: null,
        setColor: function(value) {
            this.set_color(value);
            return this
        },
        clearColor: function() {
            this.hasField__0 = this.hasField__0 & -5;
            this.set_color(0)
        },
        hasColor: function() {
            return (this.hasField__0 & 4) != 0
        },
        set_color: function(value) {
            this.hasField__0 = this.hasField__0 | 4;
            return this.color = value
        },
        get_color: function() {
            return this.color
        },
        playerOwned: null,
        setPlayerOwned: function(value) {
            this.set_playerOwned(value);
            return this
        },
        clearPlayerOwned: function() {
            this.hasField__0 = this.hasField__0 & -9;
            this.set_playerOwned(false)
        },
        hasPlayerOwned: function() {
            return (this.hasField__0 & 8) != 0
        },
        set_playerOwned: function(value) {
            this.hasField__0 = this.hasField__0 | 8;
            return this.playerOwned = value
        },
        get_playerOwned: function() {
            return this.playerOwned
        },
        ownerId: null,
        setOwnerId: function(value) {
            this.set_ownerId(value);
            return this
        },
        clearOwnerId: function() {
            this.hasField__0 = this.hasField__0 & -17;
            this.set_ownerId(0)
        },
        hasOwnerId: function() {
            return (this.hasField__0 & 16) != 0
        },
        set_ownerId: function(value) {
            this.hasField__0 = this.hasField__0 | 16;
            return this.ownerId = value
        },
        get_ownerId: function() {
            return this.ownerId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_type());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_id());
            protohx_WriteUtils.writeTag(output, 5, 3);
            protohx_WriteUtils.write__TYPE_FLOAT(output, this.get_x());
            protohx_WriteUtils.writeTag(output, 5, 4);
            protohx_WriteUtils.write__TYPE_FLOAT(output, this.get_y());
            protohx_WriteUtils.writeTag(output, 5, 5);
            protohx_WriteUtils.write__TYPE_FLOAT(output, this.get_radius());
            if (this.get_name() != null) {
                protohx_WriteUtils.writeTag(output, 2, 6);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_name())
            }
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 7);
                protohx_WriteUtils.write__TYPE_UINT32(output, this.get_userLevel())
            }
            if ((this.hasField__0 & 2) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 8);
                protohx_WriteUtils.write__TYPE_UINT32(output, this.get_skinGameplayId())
            }
            if ((this.hasField__0 & 4) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 9);
                protohx_WriteUtils.write__TYPE_UINT32(output, this.get_color())
            }
            if ((this.hasField__0 & 8) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 10);
                protohx_WriteUtils.write__TYPE_BOOL(output, this.get_playerOwned())
            }
            if ((this.hasField__0 & 16) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 11);
                protohx_WriteUtils.write__TYPE_UINT32(output, this.get_ownerId())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("type", this.get_type());
            fn("id", this.get_id());
            fn("x", this.get_x());
            fn("y", this.get_y());
            fn("radius", this.get_radius());
            if (this.get_name() != null) {
                fn("name", this.get_name())
            }
            if ((this.hasField__0 & 1) != 0) {
                fn("userLevel", this.get_userLevel())
            }
            if ((this.hasField__0 & 2) != 0) {
                fn("skinGameplayId", this.get_skinGameplayId())
            }
            if ((this.hasField__0 & 4) != 0) {
                fn("color", this.get_color())
            }
            if ((this.hasField__0 & 8) != 0) {
                fn("playerOwned", this.get_playerOwned())
            }
            if ((this.hasField__0 & 16) != 0) {
                fn("ownerId", this.get_ownerId())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var type__count = 0;
            var id__count = 0;
            var x__count = 0;
            var y__count = 0;
            var radius__count = 0;
            var name__count = 0;
            var user_level__count = 0;
            var skin_gameplay_id__count = 0;
            var color__count = 0;
            var player_owned__count = 0;
            var owner_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.type cannot be set twice."))
                        }++type__count;
                        this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.id cannot be set twice."))
                        }++id__count;
                        this.set_id(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 3:
                        if (x__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.x cannot be set twice."))
                        }++x__count;
                        this.set_x(protohx_ReadUtils.read__TYPE_FLOAT(input));
                        break;
                    case 4:
                        if (y__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.y cannot be set twice."))
                        }++y__count;
                        this.set_y(protohx_ReadUtils.read__TYPE_FLOAT(input));
                        break;
                    case 5:
                        if (radius__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.radius cannot be set twice."))
                        }++radius__count;
                        this.set_radius(protohx_ReadUtils.read__TYPE_FLOAT(input));
                        break;
                    case 6:
                        if (name__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.name cannot be set twice."))
                        }++name__count;
                        this.set_name(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 7:
                        if (user_level__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.userLevel cannot be set twice."))
                        }++user_level__count;
                        this.set_userLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 8:
                        if (skin_gameplay_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.skinGameplayId cannot be set twice."))
                        }++skin_gameplay_id__count;
                        this.set_skinGameplayId(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 9:
                        if (color__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.color cannot be set twice."))
                        }++color__count;
                        this.set_color(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 10:
                        if (player_owned__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.playerOwned cannot be set twice."))
                        }++player_owned__count;
                        this.set_playerOwned(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    case 11:
                        if (owner_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.ownerId cannot be set twice."))
                        }++owner_id__count;
                        this.set_ownerId(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Cell_$state,
        __properties__: {
            set_ownerId: "set_ownerId",
            get_ownerId: "get_ownerId",
            set_playerOwned: "set_playerOwned",
            get_playerOwned: "get_playerOwned",
            set_color: "set_color",
            get_color: "get_color",
            set_skinGameplayId: "set_skinGameplayId",
            get_skinGameplayId: "get_skinGameplayId",
            set_userLevel: "set_userLevel",
            get_userLevel: "get_userLevel",
            set_name: "set_name",
            get_name: "get_name",
            set_radius: "set_radius",
            get_radius: "get_radius",
            set_y: "set_y",
            get_y: "get_y",
            set_x: "set_x",
            get_x: "get_x",
            set_id: "set_id",
            get_id: "get_id",
            set_type: "set_type",
            get_type: "get_type"
        }
    });
    var agario_proto_Claim_$gifts_$request = function() {
        protohx_Message.call(this);
        this.set_giftIds([])
    };
    $hxClasses["agario.proto.Claim_gifts_request"] = agario_proto_Claim_$gifts_$request;
    agario_proto_Claim_$gifts_$request.__name__ = ["agario", "proto", "Claim_gifts_request"];
    agario_proto_Claim_$gifts_$request.__super__ = protohx_Message;
    agario_proto_Claim_$gifts_$request.prototype = $extend(protohx_Message.prototype, {
        giftIds: null,
        setGiftIds: function(value) {
            this.set_giftIds(value);
            return this
        },
        set_giftIds: function(value) {
            return this.giftIds = value
        },
        get_giftIds: function() {
            return this.giftIds
        },
        addGiftIds: function(value) {
            if (this.get_giftIds() == null) {
                this.set_giftIds([value])
            } else {
                this.get_giftIds().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_giftIds() != null) {
                var _g = 0;
                var _g1 = this.get_giftIds();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_STRING(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_giftIds() != null && this.get_giftIds().length > 0) {
                fn("giftIds", this.get_giftIds())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_giftIds() == null) {
                            this.set_giftIds([])
                        }
                        this.get_giftIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Claim_$gifts_$request,
        __properties__: {
            set_giftIds: "set_giftIds",
            get_giftIds: "get_giftIds"
        }
    });
    var agario_proto_Claim_$gifts_$response = function() {
        protohx_Message.call(this);
        this.set_userDataUpdate(new agario_proto_User_$data_$update())
    };
    $hxClasses["agario.proto.Claim_gifts_response"] = agario_proto_Claim_$gifts_$response;
    agario_proto_Claim_$gifts_$response.__name__ = ["agario", "proto", "Claim_gifts_response"];
    agario_proto_Claim_$gifts_$response.__super__ = protohx_Message;
    agario_proto_Claim_$gifts_$response.prototype = $extend(protohx_Message.prototype, {
        userDataUpdate: null,
        setUserDataUpdate: function(value) {
            this.set_userDataUpdate(value);
            return this
        },
        set_userDataUpdate: function(value) {
            return this.userDataUpdate = value
        },
        get_userDataUpdate: function() {
            return this.userDataUpdate
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userDataUpdate());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("userDataUpdate", this.get_userDataUpdate())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var user_data_update__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (user_data_update__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Claim_gifts_response.userDataUpdate cannot be set twice."))
                        }++user_data_update__count;
                        this.set_userDataUpdate(new agario_proto_User_$data_$update());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userDataUpdate());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Claim_$gifts_$response,
        __properties__: {
            set_userDataUpdate: "set_userDataUpdate",
            get_userDataUpdate: "get_userDataUpdate"
        }
    });
    var agario_proto_Configuration_$change = function() {
        protohx_Message.call(this);
        this.set_latest(0)
    };
    $hxClasses["agario.proto.Configuration_change"] = agario_proto_Configuration_$change;
    agario_proto_Configuration_$change.__name__ = ["agario", "proto", "Configuration_change"];
    agario_proto_Configuration_$change.__super__ = protohx_Message;
    agario_proto_Configuration_$change.prototype = $extend(protohx_Message.prototype, {
        latest: null,
        setLatest: function(value) {
            this.set_latest(value);
            return this
        },
        set_latest: function(value) {
            return this.latest = value
        },
        get_latest: function() {
            return this.latest
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_latest());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("latest", this.get_latest())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var latest__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (latest__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Configuration_change.latest cannot be set twice."))
                        }++latest__count;
                        this.set_latest(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Configuration_$change,
        __properties__: {
            set_latest: "set_latest",
            get_latest: "get_latest"
        }
    });
    var agario_proto_Connect_$request = function() {
        protohx_Message.call(this);
        this.set_connectToken("")
    };
    $hxClasses["agario.proto.Connect_request"] = agario_proto_Connect_$request;
    agario_proto_Connect_$request.__name__ = ["agario", "proto", "Connect_request"];
    agario_proto_Connect_$request.__super__ = protohx_Message;
    agario_proto_Connect_$request.prototype = $extend(protohx_Message.prototype, {
        connectToken: null,
        setConnectToken: function(value) {
            this.set_connectToken(value);
            return this
        },
        set_connectToken: function(value) {
            return this.connectToken = value
        },
        get_connectToken: function() {
            return this.connectToken
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_connectToken());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("connectToken", this.get_connectToken())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var connect_token__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (connect_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Connect_request.connectToken cannot be set twice."))
                        }++connect_token__count;
                        this.set_connectToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Connect_$request,
        __properties__: {
            set_connectToken: "set_connectToken",
            get_connectToken: "get_connectToken"
        }
    });
    var agario_proto_Connect_$response = function() {
        protohx_Message.call(this);
        this.set_serverInfo(new agario_proto_Server_$info())
    };
    $hxClasses["agario.proto.Connect_response"] = agario_proto_Connect_$response;
    agario_proto_Connect_$response.__name__ = ["agario", "proto", "Connect_response"];
    agario_proto_Connect_$response.__super__ = protohx_Message;
    agario_proto_Connect_$response.prototype = $extend(protohx_Message.prototype, {
        serverInfo: null,
        setServerInfo: function(value) {
            this.set_serverInfo(value);
            return this
        },
        set_serverInfo: function(value) {
            return this.serverInfo = value
        },
        get_serverInfo: function() {
            return this.serverInfo
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_serverInfo());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("serverInfo", this.get_serverInfo())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var server_info__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (server_info__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Connect_response.serverInfo cannot be set twice."))
                        }++server_info__count;
                        this.set_serverInfo(new agario_proto_Server_$info());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_serverInfo());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Connect_$response,
        __properties__: {
            set_serverInfo: "set_serverInfo",
            get_serverInfo: "get_serverInfo"
        }
    });
    var agario_proto_Consume_$requests = function() {
        protohx_Message.call(this);
        this.set_requestIds([])
    };
    $hxClasses["agario.proto.Consume_requests"] = agario_proto_Consume_$requests;
    agario_proto_Consume_$requests.__name__ = ["agario", "proto", "Consume_requests"];
    agario_proto_Consume_$requests.__super__ = protohx_Message;
    agario_proto_Consume_$requests.prototype = $extend(protohx_Message.prototype, {
        requestIds: null,
        setRequestIds: function(value) {
            this.set_requestIds(value);
            return this
        },
        set_requestIds: function(value) {
            return this.requestIds = value
        },
        get_requestIds: function() {
            return this.requestIds
        },
        addRequestIds: function(value) {
            if (this.get_requestIds() == null) {
                this.set_requestIds([value])
            } else {
                this.get_requestIds().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_requestIds() != null) {
                var _g = 0;
                var _g1 = this.get_requestIds();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_STRING(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_requestIds() != null && this.get_requestIds().length > 0) {
                fn("requestIds", this.get_requestIds())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_requestIds() == null) {
                            this.set_requestIds([])
                        }
                        this.get_requestIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Consume_$requests,
        __properties__: {
            set_requestIds: "set_requestIds",
            get_requestIds: "get_requestIds"
        }
    });
    var agario_proto_Device = function() {
        protohx_Message.call(this);
        this.set_platform(0);
        this.set_version("");
        this.set_width(0);
        this.set_height(0)
    };
    $hxClasses["agario.proto.Device"] = agario_proto_Device;
    agario_proto_Device.__name__ = ["agario", "proto", "Device"];
    agario_proto_Device.__super__ = protohx_Message;
    agario_proto_Device.prototype = $extend(protohx_Message.prototype, {
        platform: null,
        setPlatform: function(value) {
            this.set_platform(value);
            return this
        },
        set_platform: function(value) {
            return this.platform = value
        },
        get_platform: function() {
            return this.platform
        },
        version: null,
        setVersion: function(value) {
            this.set_version(value);
            return this
        },
        set_version: function(value) {
            return this.version = value
        },
        get_version: function() {
            return this.version
        },
        width: null,
        setWidth: function(value) {
            this.set_width(value);
            return this
        },
        set_width: function(value) {
            return this.width = value
        },
        get_width: function() {
            return this.width
        },
        height: null,
        setHeight: function(value) {
            this.set_height(value);
            return this
        },
        set_height: function(value) {
            return this.height = value
        },
        get_height: function() {
            return this.height
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_platform());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_version());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_width());
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_height());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("platform", this.get_platform());
            fn("version", this.get_version());
            fn("width", this.get_width());
            fn("height", this.get_height())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var platform__count = 0;
            var version__count = 0;
            var width__count = 0;
            var height__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (platform__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.platform cannot be set twice."))
                        }++platform__count;
                        this.set_platform(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (version__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.version cannot be set twice."))
                        }++version__count;
                        this.set_version(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (width__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.width cannot be set twice."))
                        }++width__count;
                        this.set_width(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 4:
                        if (height__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.height cannot be set twice."))
                        }++height__count;
                        this.set_height(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Device,
        __properties__: {
            set_height: "set_height",
            get_height: "get_height",
            set_width: "set_width",
            get_width: "get_width",
            set_version: "set_version",
            get_version: "get_version",
            set_platform: "set_platform",
            get_platform: "get_platform"
        }
    });
    var agario_proto_Direction_$vector = function() {
        protohx_Message.call(this);
        this.set_x(0);
        this.set_y(0)
    };
    $hxClasses["agario.proto.Direction_vector"] = agario_proto_Direction_$vector;
    agario_proto_Direction_$vector.__name__ = ["agario", "proto", "Direction_vector"];
    agario_proto_Direction_$vector.__super__ = protohx_Message;
    agario_proto_Direction_$vector.prototype = $extend(protohx_Message.prototype, {
        x: null,
        setX: function(value) {
            this.set_x(value);
            return this
        },
        set_x: function(value) {
            return this.x = value
        },
        get_x: function() {
            return this.x
        },
        y: null,
        setY: function(value) {
            this.set_y(value);
            return this
        },
        set_y: function(value) {
            return this.y = value
        },
        get_y: function() {
            return this.y
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 5, 1);
            protohx_WriteUtils.write__TYPE_FLOAT(output, this.get_x());
            protohx_WriteUtils.writeTag(output, 5, 2);
            protohx_WriteUtils.write__TYPE_FLOAT(output, this.get_y());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("x", this.get_x());
            fn("y", this.get_y())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var x__count = 0;
            var y__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (x__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Direction_vector.x cannot be set twice."))
                        }++x__count;
                        this.set_x(protohx_ReadUtils.read__TYPE_FLOAT(input));
                        break;
                    case 2:
                        if (y__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Direction_vector.y cannot be set twice."))
                        }++y__count;
                        this.set_y(protohx_ReadUtils.read__TYPE_FLOAT(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Direction_$vector,
        __properties__: {
            set_y: "set_y",
            get_y: "get_y",
            set_x: "set_x",
            get_x: "get_x"
        }
    });
    var agario_proto_Disconnect = function() {
        protohx_Message.call(this);
        this.set_reason(0)
    };
    $hxClasses["agario.proto.Disconnect"] = agario_proto_Disconnect;
    agario_proto_Disconnect.__name__ = ["agario", "proto", "Disconnect"];
    agario_proto_Disconnect.__super__ = protohx_Message;
    agario_proto_Disconnect.prototype = $extend(protohx_Message.prototype, {
        reason: null,
        setReason: function(value) {
            this.set_reason(value);
            return this
        },
        set_reason: function(value) {
            return this.reason = value
        },
        get_reason: function() {
            return this.reason
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_reason());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("reason", this.get_reason())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var reason__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (reason__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Disconnect.reason cannot be set twice."))
                        }++reason__count;
                        this.set_reason(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Disconnect,
        __properties__: {
            set_reason: "set_reason",
            get_reason: "get_reason"
        }
    });
    var agario_proto_Enter_$game = function() {
        protohx_Message.call(this);
        this.set_nickname("")
    };
    $hxClasses["agario.proto.Enter_game"] = agario_proto_Enter_$game;
    agario_proto_Enter_$game.__name__ = ["agario", "proto", "Enter_game"];
    agario_proto_Enter_$game.__super__ = protohx_Message;
    agario_proto_Enter_$game.prototype = $extend(protohx_Message.prototype, {
        nickname: null,
        setNickname: function(value) {
            this.set_nickname(value);
            return this
        },
        set_nickname: function(value) {
            return this.nickname = value
        },
        get_nickname: function() {
            return this.nickname
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_nickname());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("nickname", this.get_nickname())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var nickname__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (nickname__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Enter_game.nickname cannot be set twice."))
                        }++nickname__count;
                        this.set_nickname(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Enter_$game,
        __properties__: {
            set_nickname: "set_nickname",
            get_nickname: "get_nickname"
        }
    });
    var agario_proto_Enter_$lobby = function() {
        protohx_Message.call(this);
        this.set_lobbyType(0);
        this.set_nickname("")
    };
    $hxClasses["agario.proto.Enter_lobby"] = agario_proto_Enter_$lobby;
    agario_proto_Enter_$lobby.__name__ = ["agario", "proto", "Enter_lobby"];
    agario_proto_Enter_$lobby.__super__ = protohx_Message;
    agario_proto_Enter_$lobby.prototype = $extend(protohx_Message.prototype, {
        lobbyType: null,
        setLobbyType: function(value) {
            this.set_lobbyType(value);
            return this
        },
        set_lobbyType: function(value) {
            return this.lobbyType = value
        },
        get_lobbyType: function() {
            return this.lobbyType
        },
        nickname: null,
        setNickname: function(value) {
            this.set_nickname(value);
            return this
        },
        set_nickname: function(value) {
            return this.nickname = value
        },
        get_nickname: function() {
            return this.nickname
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_lobbyType());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_nickname());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("lobbyType", this.get_lobbyType());
            fn("nickname", this.get_nickname())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var lobby_type__count = 0;
            var nickname__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (lobby_type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Enter_lobby.lobbyType cannot be set twice."))
                        }++lobby_type__count;
                        this.set_lobbyType(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (nickname__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Enter_lobby.nickname cannot be set twice."))
                        }++nickname__count;
                        this.set_nickname(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Enter_$lobby,
        __properties__: {
            set_nickname: "set_nickname",
            get_nickname: "get_nickname",
            set_lobbyType: "set_lobbyType",
            get_lobbyType: "get_lobbyType"
        }
    });
    var agario_proto_Envelope = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this);
        this.set_contentType(0)
    };
    $hxClasses["agario.proto.Envelope"] = agario_proto_Envelope;
    agario_proto_Envelope.__name__ = ["agario", "proto", "Envelope"];
    agario_proto_Envelope.__super__ = protohx_Message;
    agario_proto_Envelope.prototype = $extend(protohx_Message.prototype, {
        contentType: null,
        setContentType: function(value) {
            this.set_contentType(value);
            return this
        },
        set_contentType: function(value) {
            return this.contentType = value
        },
        get_contentType: function() {
            return this.contentType
        },
        uncompressedData: null,
        setUncompressedData: function(value) {
            this.set_uncompressedData(value);
            return this
        },
        clearUncompressedData: function() {
            this.set_uncompressedData(null)
        },
        hasUncompressedData: function() {
            return this.get_uncompressedData() != null
        },
        set_uncompressedData: function(value) {
            return this.uncompressedData = value
        },
        get_uncompressedData: function() {
            return this.uncompressedData
        },
        compressedData: null,
        setCompressedData: function(value) {
            this.set_compressedData(value);
            return this
        },
        clearCompressedData: function() {
            this.set_compressedData(null)
        },
        hasCompressedData: function() {
            return this.get_compressedData() != null
        },
        set_compressedData: function(value) {
            return this.compressedData = value
        },
        get_compressedData: function() {
            return this.compressedData
        },
        uncompressedSize: null,
        setUncompressedSize: function(value) {
            this.set_uncompressedSize(value);
            return this
        },
        hasField__0: null,
        clearUncompressedSize: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_uncompressedSize(0)
        },
        hasUncompressedSize: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_uncompressedSize: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.uncompressedSize = value
        },
        get_uncompressedSize: function() {
            return this.uncompressedSize
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_contentType());
            if (this.get_uncompressedData() != null) {
                protohx_WriteUtils.writeTag(output, 2, 2);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_uncompressedData())
            }
            if (this.get_compressedData() != null) {
                protohx_WriteUtils.writeTag(output, 2, 3);
                protohx_WriteUtils.write__TYPE_BYTES(output, this.get_compressedData())
            }
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 4);
                protohx_WriteUtils.write__TYPE_UINT32(output, this.get_uncompressedSize())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("contentType", this.get_contentType());
            if (this.get_uncompressedData() != null) {
                fn("uncompressedData", this.get_uncompressedData())
            }
            if (this.get_compressedData() != null) {
                fn("compressedData", this.get_compressedData())
            }
            if ((this.hasField__0 & 1) != 0) {
                fn("uncompressedSize", this.get_uncompressedSize())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var content_type__count = 0;
            var uncompressed_data__count = 0;
            var compressed_data__count = 0;
            var uncompressed_size__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (content_type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.contentType cannot be set twice."))
                        }++content_type__count;
                        this.set_contentType(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (uncompressed_data__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.uncompressedData cannot be set twice."))
                        }++uncompressed_data__count;
                        this.set_uncompressedData(new agario_proto_Req());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_uncompressedData());
                        break;
                    case 3:
                        if (compressed_data__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.compressedData cannot be set twice."))
                        }++compressed_data__count;
                        this.set_compressedData(protohx_ReadUtils.read__TYPE_BYTES(input));
                        break;
                    case 4:
                        if (uncompressed_size__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.uncompressedSize cannot be set twice."))
                        }++uncompressed_size__count;
                        this.set_uncompressedSize(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Envelope,
        __properties__: {
            set_uncompressedSize: "set_uncompressedSize",
            get_uncompressedSize: "get_uncompressedSize",
            set_compressedData: "set_compressedData",
            get_compressedData: "get_compressedData",
            set_uncompressedData: "set_uncompressedData",
            get_uncompressedData: "get_uncompressedData",
            set_contentType: "set_contentType",
            get_contentType: "get_contentType"
        }
    });
    var agario_proto_Game_$joined = function() {
        protohx_Message.call(this);
        this.set_gameType(0);
        this.set_arenaState(new agario_proto_Arena_$state());
        this.set_arenaDimensions(new agario_proto_Arena_$dimensions())
    };
    $hxClasses["agario.proto.Game_joined"] = agario_proto_Game_$joined;
    agario_proto_Game_$joined.__name__ = ["agario", "proto", "Game_joined"];
    agario_proto_Game_$joined.__super__ = protohx_Message;
    agario_proto_Game_$joined.prototype = $extend(protohx_Message.prototype, {
        gameType: null,
        setGameType: function(value) {
            this.set_gameType(value);
            return this
        },
        set_gameType: function(value) {
            return this.gameType = value
        },
        get_gameType: function() {
            return this.gameType
        },
        arenaState: null,
        setArenaState: function(value) {
            this.set_arenaState(value);
            return this
        },
        set_arenaState: function(value) {
            return this.arenaState = value
        },
        get_arenaState: function() {
            return this.arenaState
        },
        arenaDimensions: null,
        setArenaDimensions: function(value) {
            this.set_arenaDimensions(value);
            return this
        },
        set_arenaDimensions: function(value) {
            return this.arenaDimensions = value
        },
        get_arenaDimensions: function() {
            return this.arenaDimensions
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_gameType());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_arenaState());
            protohx_WriteUtils.writeTag(output, 2, 3);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_arenaDimensions());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("gameType", this.get_gameType());
            fn("arenaState", this.get_arenaState());
            fn("arenaDimensions", this.get_arenaDimensions())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var game_type__count = 0;
            var arena_state__count = 0;
            var arena_dimensions__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (game_type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_joined.gameType cannot be set twice."))
                        }++game_type__count;
                        this.set_gameType(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (arena_state__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_joined.arenaState cannot be set twice."))
                        }++arena_state__count;
                        this.set_arenaState(new agario_proto_Arena_$state());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_arenaState());
                        break;
                    case 3:
                        if (arena_dimensions__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_joined.arenaDimensions cannot be set twice."))
                        }++arena_dimensions__count;
                        this.set_arenaDimensions(new agario_proto_Arena_$dimensions());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_arenaDimensions());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Game_$joined,
        __properties__: {
            set_arenaDimensions: "set_arenaDimensions",
            get_arenaDimensions: "get_arenaDimensions",
            set_arenaState: "set_arenaState",
            get_arenaState: "get_arenaState",
            set_gameType: "set_gameType",
            get_gameType: "get_gameType"
        }
    });
    var agario_proto_Game_$over = function() {
        protohx_Message.call(this);
        this.set_gameType(0);
        this.set_reason(0);
        this.set_userDataUpdates([]);
        this.set_userStats(new agario_proto_User_$stats());
        this.set_gameSessionStats(new agario_proto_Game_$session_$stats());
        this.set_potionInfo(new agario_proto_Potion_$info())
    };
    $hxClasses["agario.proto.Game_over"] = agario_proto_Game_$over;
    agario_proto_Game_$over.__name__ = ["agario", "proto", "Game_over"];
    agario_proto_Game_$over.__super__ = protohx_Message;
    agario_proto_Game_$over.prototype = $extend(protohx_Message.prototype, {
        gameType: null,
        setGameType: function(value) {
            this.set_gameType(value);
            return this
        },
        set_gameType: function(value) {
            return this.gameType = value
        },
        get_gameType: function() {
            return this.gameType
        },
        reason: null,
        setReason: function(value) {
            this.set_reason(value);
            return this
        },
        set_reason: function(value) {
            return this.reason = value
        },
        get_reason: function() {
            return this.reason
        },
        userDataUpdates: null,
        setUserDataUpdates: function(value) {
            this.set_userDataUpdates(value);
            return this
        },
        set_userDataUpdates: function(value) {
            return this.userDataUpdates = value
        },
        get_userDataUpdates: function() {
            return this.userDataUpdates
        },
        addUserDataUpdates: function(value) {
            if (this.get_userDataUpdates() == null) {
                this.set_userDataUpdates([value])
            } else {
                this.get_userDataUpdates().push(value)
            }
        },
        userStats: null,
        setUserStats: function(value) {
            this.set_userStats(value);
            return this
        },
        set_userStats: function(value) {
            return this.userStats = value
        },
        get_userStats: function() {
            return this.userStats
        },
        gameSessionStats: null,
        setGameSessionStats: function(value) {
            this.set_gameSessionStats(value);
            return this
        },
        set_gameSessionStats: function(value) {
            return this.gameSessionStats = value
        },
        get_gameSessionStats: function() {
            return this.gameSessionStats
        },
        potionInfo: null,
        setPotionInfo: function(value) {
            this.set_potionInfo(value);
            return this
        },
        set_potionInfo: function(value) {
            return this.potionInfo = value
        },
        get_potionInfo: function() {
            return this.potionInfo
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_gameType());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_reason());
            if (this.get_userDataUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_userDataUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_WriteUtils.writeTag(output, 2, 4);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userStats());
            protohx_WriteUtils.writeTag(output, 2, 5);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_gameSessionStats());
            protohx_WriteUtils.writeTag(output, 2, 6);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_potionInfo());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("gameType", this.get_gameType());
            fn("reason", this.get_reason());
            if (this.get_userDataUpdates() != null && this.get_userDataUpdates().length > 0) {
                fn("userDataUpdates", this.get_userDataUpdates())
            }
            fn("userStats", this.get_userStats());
            fn("gameSessionStats", this.get_gameSessionStats());
            fn("potionInfo", this.get_potionInfo())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var game_type__count = 0;
            var reason__count = 0;
            var user_stats__count = 0;
            var game_session_stats__count = 0;
            var potion_info__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (game_type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_over.gameType cannot be set twice."))
                        }++game_type__count;
                        this.set_gameType(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (reason__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_over.reason cannot be set twice."))
                        }++reason__count;
                        this.set_reason(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 3:
                        if (this.get_userDataUpdates() == null) {
                            this.set_userDataUpdates([])
                        }
                        this.get_userDataUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    case 4:
                        if (user_stats__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_over.userStats cannot be set twice."))
                        }++user_stats__count;
                        this.set_userStats(new agario_proto_User_$stats());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userStats());
                        break;
                    case 5:
                        if (game_session_stats__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_over.gameSessionStats cannot be set twice."))
                        }++game_session_stats__count;
                        this.set_gameSessionStats(new agario_proto_Game_$session_$stats());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_gameSessionStats());
                        break;
                    case 6:
                        if (potion_info__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_over.potionInfo cannot be set twice."))
                        }++potion_info__count;
                        this.set_potionInfo(new agario_proto_Potion_$info());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_potionInfo());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Game_$over,
        __properties__: {
            set_potionInfo: "set_potionInfo",
            get_potionInfo: "get_potionInfo",
            set_gameSessionStats: "set_gameSessionStats",
            get_gameSessionStats: "get_gameSessionStats",
            set_userStats: "set_userStats",
            get_userStats: "get_userStats",
            set_userDataUpdates: "set_userDataUpdates",
            get_userDataUpdates: "get_userDataUpdates",
            set_reason: "set_reason",
            get_reason: "get_reason",
            set_gameType: "set_gameType",
            get_gameType: "get_gameType"
        }
    });
    var agario_proto_Game_$session_$stats = function() {
        protohx_Message.call(this);
        this.set_massConsumed(0);
        this.set_timeTotal(0);
        this.set_timeInLeaderboard(0);
        this.set_topPosition(0);
        this.set_finalPosition(0);
        this.set_longestTimeAlive(0);
        this.set_finalMass(0);
        this.set_highestMass(0);
        this.set_normalCellsEaten(0);
        this.set_foodEaten(0);
        this.set_virusesEaten(0)
    };
    $hxClasses["agario.proto.Game_session_stats"] = agario_proto_Game_$session_$stats;
    agario_proto_Game_$session_$stats.__name__ = ["agario", "proto", "Game_session_stats"];
    agario_proto_Game_$session_$stats.__super__ = protohx_Message;
    agario_proto_Game_$session_$stats.prototype = $extend(protohx_Message.prototype, {
        massConsumed: null,
        setMassConsumed: function(value) {
            this.set_massConsumed(value);
            return this
        },
        set_massConsumed: function(value) {
            return this.massConsumed = value
        },
        get_massConsumed: function() {
            return this.massConsumed
        },
        timeTotal: null,
        setTimeTotal: function(value) {
            this.set_timeTotal(value);
            return this
        },
        set_timeTotal: function(value) {
            return this.timeTotal = value
        },
        get_timeTotal: function() {
            return this.timeTotal
        },
        timeInLeaderboard: null,
        setTimeInLeaderboard: function(value) {
            this.set_timeInLeaderboard(value);
            return this
        },
        set_timeInLeaderboard: function(value) {
            return this.timeInLeaderboard = value
        },
        get_timeInLeaderboard: function() {
            return this.timeInLeaderboard
        },
        topPosition: null,
        setTopPosition: function(value) {
            this.set_topPosition(value);
            return this
        },
        set_topPosition: function(value) {
            return this.topPosition = value
        },
        get_topPosition: function() {
            return this.topPosition
        },
        finalPosition: null,
        setFinalPosition: function(value) {
            this.set_finalPosition(value);
            return this
        },
        set_finalPosition: function(value) {
            return this.finalPosition = value
        },
        get_finalPosition: function() {
            return this.finalPosition
        },
        longestTimeAlive: null,
        setLongestTimeAlive: function(value) {
            this.set_longestTimeAlive(value);
            return this
        },
        set_longestTimeAlive: function(value) {
            return this.longestTimeAlive = value
        },
        get_longestTimeAlive: function() {
            return this.longestTimeAlive
        },
        finalMass: null,
        setFinalMass: function(value) {
            this.set_finalMass(value);
            return this
        },
        set_finalMass: function(value) {
            return this.finalMass = value
        },
        get_finalMass: function() {
            return this.finalMass
        },
        highestMass: null,
        setHighestMass: function(value) {
            this.set_highestMass(value);
            return this
        },
        set_highestMass: function(value) {
            return this.highestMass = value
        },
        get_highestMass: function() {
            return this.highestMass
        },
        normalCellsEaten: null,
        setNormalCellsEaten: function(value) {
            this.set_normalCellsEaten(value);
            return this
        },
        set_normalCellsEaten: function(value) {
            return this.normalCellsEaten = value
        },
        get_normalCellsEaten: function() {
            return this.normalCellsEaten
        },
        foodEaten: null,
        setFoodEaten: function(value) {
            this.set_foodEaten(value);
            return this
        },
        set_foodEaten: function(value) {
            return this.foodEaten = value
        },
        get_foodEaten: function() {
            return this.foodEaten
        },
        virusesEaten: null,
        setVirusesEaten: function(value) {
            this.set_virusesEaten(value);
            return this
        },
        set_virusesEaten: function(value) {
            return this.virusesEaten = value
        },
        get_virusesEaten: function() {
            return this.virusesEaten
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_massConsumed());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_timeTotal());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_timeInLeaderboard());
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_topPosition());
            protohx_WriteUtils.writeTag(output, 0, 5);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_finalPosition());
            protohx_WriteUtils.writeTag(output, 0, 6);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_longestTimeAlive());
            protohx_WriteUtils.writeTag(output, 0, 7);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_finalMass());
            protohx_WriteUtils.writeTag(output, 0, 8);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_highestMass());
            protohx_WriteUtils.writeTag(output, 0, 9);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_normalCellsEaten());
            protohx_WriteUtils.writeTag(output, 0, 10);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_foodEaten());
            protohx_WriteUtils.writeTag(output, 0, 11);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_virusesEaten());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("massConsumed", this.get_massConsumed());
            fn("timeTotal", this.get_timeTotal());
            fn("timeInLeaderboard", this.get_timeInLeaderboard());
            fn("topPosition", this.get_topPosition());
            fn("finalPosition", this.get_finalPosition());
            fn("longestTimeAlive", this.get_longestTimeAlive());
            fn("finalMass", this.get_finalMass());
            fn("highestMass", this.get_highestMass());
            fn("normalCellsEaten", this.get_normalCellsEaten());
            fn("foodEaten", this.get_foodEaten());
            fn("virusesEaten", this.get_virusesEaten())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var mass_consumed__count = 0;
            var time_total__count = 0;
            var time_in_leaderboard__count = 0;
            var top_position__count = 0;
            var final_position__count = 0;
            var longest_time_alive__count = 0;
            var final_mass__count = 0;
            var highest_mass__count = 0;
            var normal_cells_eaten__count = 0;
            var food_eaten__count = 0;
            var viruses_eaten__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (mass_consumed__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.massConsumed cannot be set twice."))
                        }++mass_consumed__count;
                        this.set_massConsumed(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 2:
                        if (time_total__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.timeTotal cannot be set twice."))
                        }++time_total__count;
                        this.set_timeTotal(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 3:
                        if (time_in_leaderboard__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.timeInLeaderboard cannot be set twice."))
                        }++time_in_leaderboard__count;
                        this.set_timeInLeaderboard(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 4:
                        if (top_position__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.topPosition cannot be set twice."))
                        }++top_position__count;
                        this.set_topPosition(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 5:
                        if (final_position__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.finalPosition cannot be set twice."))
                        }++final_position__count;
                        this.set_finalPosition(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 6:
                        if (longest_time_alive__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.longestTimeAlive cannot be set twice."))
                        }++longest_time_alive__count;
                        this.set_longestTimeAlive(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 7:
                        if (final_mass__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.finalMass cannot be set twice."))
                        }++final_mass__count;
                        this.set_finalMass(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 8:
                        if (highest_mass__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.highestMass cannot be set twice."))
                        }++highest_mass__count;
                        this.set_highestMass(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 9:
                        if (normal_cells_eaten__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.normalCellsEaten cannot be set twice."))
                        }++normal_cells_eaten__count;
                        this.set_normalCellsEaten(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 10:
                        if (food_eaten__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.foodEaten cannot be set twice."))
                        }++food_eaten__count;
                        this.set_foodEaten(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 11:
                        if (viruses_eaten__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_session_stats.virusesEaten cannot be set twice."))
                        }++viruses_eaten__count;
                        this.set_virusesEaten(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Game_$session_$stats,
        __properties__: {
            set_virusesEaten: "set_virusesEaten",
            get_virusesEaten: "get_virusesEaten",
            set_foodEaten: "set_foodEaten",
            get_foodEaten: "get_foodEaten",
            set_normalCellsEaten: "set_normalCellsEaten",
            get_normalCellsEaten: "get_normalCellsEaten",
            set_highestMass: "set_highestMass",
            get_highestMass: "get_highestMass",
            set_finalMass: "set_finalMass",
            get_finalMass: "get_finalMass",
            set_longestTimeAlive: "set_longestTimeAlive",
            get_longestTimeAlive: "get_longestTimeAlive",
            set_finalPosition: "set_finalPosition",
            get_finalPosition: "get_finalPosition",
            set_topPosition: "set_topPosition",
            get_topPosition: "get_topPosition",
            set_timeInLeaderboard: "set_timeInLeaderboard",
            get_timeInLeaderboard: "get_timeInLeaderboard",
            set_timeTotal: "set_timeTotal",
            get_timeTotal: "get_timeTotal",
            set_massConsumed: "set_massConsumed",
            get_massConsumed: "get_massConsumed"
        }
    });
    var agario_proto_Google_$inapp_$purchase_$request = function() {
        protohx_Message.call(this);
        this.set_transactionId(this.defaultUInt64());
        this.set_receiptData("");
        this.set_signature("")
    };
    $hxClasses["agario.proto.Google_inapp_purchase_request"] = agario_proto_Google_$inapp_$purchase_$request;
    agario_proto_Google_$inapp_$purchase_$request.__name__ = ["agario", "proto", "Google_inapp_purchase_request"];
    agario_proto_Google_$inapp_$purchase_$request.__super__ = protohx_Message;
    agario_proto_Google_$inapp_$purchase_$request.prototype = $extend(protohx_Message.prototype, {
        transactionId: null,
        setTransactionId: function(value) {
            this.set_transactionId(value);
            return this
        },
        set_transactionId: function(value) {
            return this.transactionId = value
        },
        get_transactionId: function() {
            return this.transactionId
        },
        receiptData: null,
        setReceiptData: function(value) {
            this.set_receiptData(value);
            return this
        },
        set_receiptData: function(value) {
            return this.receiptData = value
        },
        get_receiptData: function() {
            return this.receiptData
        },
        signature: null,
        setSignature: function(value) {
            this.set_signature(value);
            return this
        },
        set_signature: function(value) {
            return this.signature = value
        },
        get_signature: function() {
            return this.signature
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT64(output, this.get_transactionId());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_receiptData());
            protohx_WriteUtils.writeTag(output, 2, 3);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_signature());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("transactionId", this.get_transactionId());
            fn("receiptData", this.get_receiptData());
            fn("signature", this.get_signature())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var transaction_id__count = 0;
            var receipt_data__count = 0;
            var signature__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (transaction_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Google_inapp_purchase_request.transactionId cannot be set twice."))
                        }++transaction_id__count;
                        this.set_transactionId(protohx_ReadUtils.read__TYPE_UINT64(input));
                        break;
                    case 2:
                        if (receipt_data__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Google_inapp_purchase_request.receiptData cannot be set twice."))
                        }++receipt_data__count;
                        this.set_receiptData(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (signature__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Google_inapp_purchase_request.signature cannot be set twice."))
                        }++signature__count;
                        this.set_signature(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Google_$inapp_$purchase_$request,
        __properties__: {
            set_signature: "set_signature",
            get_signature: "get_signature",
            set_receiptData: "set_receiptData",
            get_receiptData: "get_receiptData",
            set_transactionId: "set_transactionId",
            get_transactionId: "get_transactionId"
        }
    });
    var agario_proto_Inapp_$purchase_$response = function() {
        protohx_Message.call(this);
        this.set_result(0);
        this.set_transactionId(this.defaultUInt64());
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Inapp_purchase_response"] = agario_proto_Inapp_$purchase_$response;
    agario_proto_Inapp_$purchase_$response.__name__ = ["agario", "proto", "Inapp_purchase_response"];
    agario_proto_Inapp_$purchase_$response.__super__ = protohx_Message;
    agario_proto_Inapp_$purchase_$response.prototype = $extend(protohx_Message.prototype, {
        result: null,
        setResult: function(value) {
            this.set_result(value);
            return this
        },
        set_result: function(value) {
            return this.result = value
        },
        get_result: function() {
            return this.result
        },
        transactionId: null,
        setTransactionId: function(value) {
            this.set_transactionId(value);
            return this
        },
        set_transactionId: function(value) {
            return this.transactionId = value
        },
        get_transactionId: function() {
            return this.transactionId
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_result());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT64(output, this.get_transactionId());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("result", this.get_result());
            fn("transactionId", this.get_transactionId());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var result__count = 0;
            var transaction_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (result__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Inapp_purchase_response.result cannot be set twice."))
                        }++result__count;
                        this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (transaction_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Inapp_purchase_response.transactionId cannot be set twice."))
                        }++transaction_id__count;
                        this.set_transactionId(protohx_ReadUtils.read__TYPE_UINT64(input));
                        break;
                    case 3:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Inapp_$purchase_$response,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_transactionId: "set_transactionId",
            get_transactionId: "get_transactionId",
            set_result: "set_result",
            get_result: "get_result"
        }
    });
    var agario_proto_Leaderboard = function() {
        protohx_Message.call(this);
        this.set_names([]);
        this.set_playerPosition(0)
    };
    $hxClasses["agario.proto.Leaderboard"] = agario_proto_Leaderboard;
    agario_proto_Leaderboard.__name__ = ["agario", "proto", "Leaderboard"];
    agario_proto_Leaderboard.__super__ = protohx_Message;
    agario_proto_Leaderboard.prototype = $extend(protohx_Message.prototype, {
        names: null,
        setNames: function(value) {
            this.set_names(value);
            return this
        },
        set_names: function(value) {
            return this.names = value
        },
        get_names: function() {
            return this.names
        },
        addNames: function(value) {
            if (this.get_names() == null) {
                this.set_names([value])
            } else {
                this.get_names().push(value)
            }
        },
        playerPosition: null,
        setPlayerPosition: function(value) {
            this.set_playerPosition(value);
            return this
        },
        set_playerPosition: function(value) {
            return this.playerPosition = value
        },
        get_playerPosition: function() {
            return this.playerPosition
        },
        writeToBuffer: function(output) {
            if (this.get_names() != null) {
                var _g = 0;
                var _g1 = this.get_names();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_STRING(output, value)
                }
            }
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_playerPosition());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_names() != null && this.get_names().length > 0) {
                fn("names", this.get_names())
            }
            fn("playerPosition", this.get_playerPosition())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var player_position__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_names() == null) {
                            this.set_names([])
                        }
                        this.get_names().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (player_position__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Leaderboard.playerPosition cannot be set twice."))
                        }++player_position__count;
                        this.set_playerPosition(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Leaderboard,
        __properties__: {
            set_playerPosition: "set_playerPosition",
            get_playerPosition: "get_playerPosition",
            set_names: "set_names",
            get_names: "get_names"
        }
    });
    var agario_proto_Lobby_$queue_$progress = function() {
        protohx_Message.call(this);
        this.set_lobbyType(0);
        this.set_playersWaitingToBeMatched(0);
        this.set_matchingOccursInSeconds(0)
    };
    $hxClasses["agario.proto.Lobby_queue_progress"] = agario_proto_Lobby_$queue_$progress;
    agario_proto_Lobby_$queue_$progress.__name__ = ["agario", "proto", "Lobby_queue_progress"];
    agario_proto_Lobby_$queue_$progress.__super__ = protohx_Message;
    agario_proto_Lobby_$queue_$progress.prototype = $extend(protohx_Message.prototype, {
        lobbyType: null,
        setLobbyType: function(value) {
            this.set_lobbyType(value);
            return this
        },
        set_lobbyType: function(value) {
            return this.lobbyType = value
        },
        get_lobbyType: function() {
            return this.lobbyType
        },
        playersWaitingToBeMatched: null,
        setPlayersWaitingToBeMatched: function(value) {
            this.set_playersWaitingToBeMatched(value);
            return this
        },
        set_playersWaitingToBeMatched: function(value) {
            return this.playersWaitingToBeMatched = value
        },
        get_playersWaitingToBeMatched: function() {
            return this.playersWaitingToBeMatched
        },
        matchingOccursInSeconds: null,
        setMatchingOccursInSeconds: function(value) {
            this.set_matchingOccursInSeconds(value);
            return this
        },
        set_matchingOccursInSeconds: function(value) {
            return this.matchingOccursInSeconds = value
        },
        get_matchingOccursInSeconds: function() {
            return this.matchingOccursInSeconds
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_lobbyType());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_playersWaitingToBeMatched());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_matchingOccursInSeconds());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("lobbyType", this.get_lobbyType());
            fn("playersWaitingToBeMatched", this.get_playersWaitingToBeMatched());
            fn("matchingOccursInSeconds", this.get_matchingOccursInSeconds())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var lobby_type__count = 0;
            var players_waiting_to_be_matched__count = 0;
            var matching_occurs_in_seconds__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (lobby_type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Lobby_queue_progress.lobbyType cannot be set twice."))
                        }++lobby_type__count;
                        this.set_lobbyType(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (players_waiting_to_be_matched__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Lobby_queue_progress.playersWaitingToBeMatched cannot be set twice."))
                        }++players_waiting_to_be_matched__count;
                        this.set_playersWaitingToBeMatched(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 3:
                        if (matching_occurs_in_seconds__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Lobby_queue_progress.matchingOccursInSeconds cannot be set twice."))
                        }++matching_occurs_in_seconds__count;
                        this.set_matchingOccursInSeconds(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Lobby_$queue_$progress,
        __properties__: {
            set_matchingOccursInSeconds: "set_matchingOccursInSeconds",
            get_matchingOccursInSeconds: "get_matchingOccursInSeconds",
            set_playersWaitingToBeMatched: "set_playersWaitingToBeMatched",
            get_playersWaitingToBeMatched: "get_playersWaitingToBeMatched",
            set_lobbyType: "set_lobbyType",
            get_lobbyType: "get_lobbyType"
        }
    });
    var agario_proto_Login_$request = function() {
        protohx_Message.call(this);
        this.set_realm(0);
        this.set_device(new agario_proto_Device())
    };
    $hxClasses["agario.proto.Login_request"] = agario_proto_Login_$request;
    agario_proto_Login_$request.__name__ = ["agario", "proto", "Login_request"];
    agario_proto_Login_$request.__super__ = protohx_Message;
    agario_proto_Login_$request.prototype = $extend(protohx_Message.prototype, {
        realm: null,
        setRealm: function(value) {
            this.set_realm(value);
            return this
        },
        set_realm: function(value) {
            return this.realm = value
        },
        get_realm: function() {
            return this.realm
        },
        device: null,
        setDevice: function(value) {
            this.set_device(value);
            return this
        },
        set_device: function(value) {
            return this.device = value
        },
        get_device: function() {
            return this.device
        },
        authToken: null,
        setAuthToken: function(value) {
            this.set_authToken(value);
            return this
        },
        clearAuthToken: function() {
            this.set_authToken(null)
        },
        hasAuthToken: function() {
            return this.get_authToken() != null
        },
        set_authToken: function(value) {
            return this.authToken = value
        },
        get_authToken: function() {
            return this.authToken
        },
        altToken: null,
        setAltToken: function(value) {
            this.set_altToken(value);
            return this
        },
        clearAltToken: function() {
            this.set_altToken(null)
        },
        hasAltToken: function() {
            return this.get_altToken() != null
        },
        set_altToken: function(value) {
            return this.altToken = value
        },
        get_altToken: function() {
            return this.altToken
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_realm());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_device());
            if (this.get_authToken() != null) {
                protohx_WriteUtils.writeTag(output, 2, 3);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_authToken())
            }
            if (this.get_altToken() != null) {
                protohx_WriteUtils.writeTag(output, 2, 4);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_altToken())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("realm", this.get_realm());
            fn("device", this.get_device());
            if (this.get_authToken() != null) {
                fn("authToken", this.get_authToken())
            }
            if (this.get_altToken() != null) {
                fn("altToken", this.get_altToken())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var realm__count = 0;
            var device__count = 0;
            var auth_token__count = 0;
            var alt_token__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (realm__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_request.realm cannot be set twice."))
                        }++realm__count;
                        this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (device__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_request.device cannot be set twice."))
                        }++device__count;
                        this.set_device(new agario_proto_Device());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_device());
                        break;
                    case 3:
                        if (auth_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_request.authToken cannot be set twice."))
                        }++auth_token__count;
                        this.set_authToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 4:
                        if (alt_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_request.altToken cannot be set twice."))
                        }++alt_token__count;
                        this.set_altToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Login_$request,
        __properties__: {
            set_altToken: "set_altToken",
            get_altToken: "get_altToken",
            set_authToken: "set_authToken",
            get_authToken: "get_authToken",
            set_device: "set_device",
            get_device: "get_device",
            set_realm: "set_realm",
            get_realm: "get_realm"
        }
    });
    var agario_proto_Login_$response = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this);
        this.set_realm(0);
        this.set_currentGameState(0);
        this.set_latestConfiguration(0);
        this.set_serverInfo(new agario_proto_Server_$info());
        this.set_userInfo(new agario_proto_User_$info());
        this.set_userStats(new agario_proto_User_$stats());
        this.set_userWallet([]);
        this.set_userSettings([]);
        this.set_userBoosts([]);
        this.set_userTimedEvents([]);
        this.set_userGifts(new agario_proto_User_$gifts());
        this.set_sessionToken("");
        this.set_softUpgrade(new agario_proto_Soft_$upgrade());
        this.set_userAbTestGroups([]);
        this.set_userActiveQuests([]);
        this.set_userPotions([]);
        this.set_userSessionId("")
    };
    $hxClasses["agario.proto.Login_response"] = agario_proto_Login_$response;
    agario_proto_Login_$response.__name__ = ["agario", "proto", "Login_response"];
    agario_proto_Login_$response.__super__ = protohx_Message;
    agario_proto_Login_$response.prototype = $extend(protohx_Message.prototype, {
        realm: null,
        setRealm: function(value) {
            this.set_realm(value);
            return this
        },
        set_realm: function(value) {
            return this.realm = value
        },
        get_realm: function() {
            return this.realm
        },
        guestAuthToken: null,
        setGuestAuthToken: function(value) {
            this.set_guestAuthToken(value);
            return this
        },
        clearGuestAuthToken: function() {
            this.set_guestAuthToken(null)
        },
        hasGuestAuthToken: function() {
            return this.get_guestAuthToken() != null
        },
        set_guestAuthToken: function(value) {
            return this.guestAuthToken = value
        },
        get_guestAuthToken: function() {
            return this.guestAuthToken
        },
        altToken: null,
        setAltToken: function(value) {
            this.set_altToken(value);
            return this
        },
        clearAltToken: function() {
            this.set_altToken(null)
        },
        hasAltToken: function() {
            return this.get_altToken() != null
        },
        set_altToken: function(value) {
            return this.altToken = value
        },
        get_altToken: function() {
            return this.altToken
        },
        currentGameState: null,
        setCurrentGameState: function(value) {
            this.set_currentGameState(value);
            return this
        },
        set_currentGameState: function(value) {
            return this.currentGameState = value
        },
        get_currentGameState: function() {
            return this.currentGameState
        },
        currentGameType: null,
        setCurrentGameType: function(value) {
            this.set_currentGameType(value);
            return this
        },
        hasField__0: null,
        clearCurrentGameType: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_currentGameType(0)
        },
        hasCurrentGameType: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_currentGameType: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.currentGameType = value
        },
        get_currentGameType: function() {
            return this.currentGameType
        },
        latestConfiguration: null,
        setLatestConfiguration: function(value) {
            this.set_latestConfiguration(value);
            return this
        },
        set_latestConfiguration: function(value) {
            return this.latestConfiguration = value
        },
        get_latestConfiguration: function() {
            return this.latestConfiguration
        },
        serverInfo: null,
        setServerInfo: function(value) {
            this.set_serverInfo(value);
            return this
        },
        set_serverInfo: function(value) {
            return this.serverInfo = value
        },
        get_serverInfo: function() {
            return this.serverInfo
        },
        userInfo: null,
        setUserInfo: function(value) {
            this.set_userInfo(value);
            return this
        },
        set_userInfo: function(value) {
            return this.userInfo = value
        },
        get_userInfo: function() {
            return this.userInfo
        },
        userStats: null,
        setUserStats: function(value) {
            this.set_userStats(value);
            return this
        },
        set_userStats: function(value) {
            return this.userStats = value
        },
        get_userStats: function() {
            return this.userStats
        },
        userWallet: null,
        setUserWallet: function(value) {
            this.set_userWallet(value);
            return this
        },
        set_userWallet: function(value) {
            return this.userWallet = value
        },
        get_userWallet: function() {
            return this.userWallet
        },
        addUserWallet: function(value) {
            if (this.get_userWallet() == null) {
                this.set_userWallet([value])
            } else {
                this.get_userWallet().push(value)
            }
        },
        userSettings: null,
        setUserSettings: function(value) {
            this.set_userSettings(value);
            return this
        },
        set_userSettings: function(value) {
            return this.userSettings = value
        },
        get_userSettings: function() {
            return this.userSettings
        },
        addUserSettings: function(value) {
            if (this.get_userSettings() == null) {
                this.set_userSettings([value])
            } else {
                this.get_userSettings().push(value)
            }
        },
        userBoosts: null,
        setUserBoosts: function(value) {
            this.set_userBoosts(value);
            return this
        },
        set_userBoosts: function(value) {
            return this.userBoosts = value
        },
        get_userBoosts: function() {
            return this.userBoosts
        },
        addUserBoosts: function(value) {
            if (this.get_userBoosts() == null) {
                this.set_userBoosts([value])
            } else {
                this.get_userBoosts().push(value)
            }
        },
        userTimedEvents: null,
        setUserTimedEvents: function(value) {
            this.set_userTimedEvents(value);
            return this
        },
        set_userTimedEvents: function(value) {
            return this.userTimedEvents = value
        },
        get_userTimedEvents: function() {
            return this.userTimedEvents
        },
        addUserTimedEvents: function(value) {
            if (this.get_userTimedEvents() == null) {
                this.set_userTimedEvents([value])
            } else {
                this.get_userTimedEvents().push(value)
            }
        },
        userGifts: null,
        setUserGifts: function(value) {
            this.set_userGifts(value);
            return this
        },
        set_userGifts: function(value) {
            return this.userGifts = value
        },
        get_userGifts: function() {
            return this.userGifts
        },
        sessionToken: null,
        setSessionToken: function(value) {
            this.set_sessionToken(value);
            return this
        },
        set_sessionToken: function(value) {
            return this.sessionToken = value
        },
        get_sessionToken: function() {
            return this.sessionToken
        },
        softUpgrade: null,
        setSoftUpgrade: function(value) {
            this.set_softUpgrade(value);
            return this
        },
        set_softUpgrade: function(value) {
            return this.softUpgrade = value
        },
        get_softUpgrade: function() {
            return this.softUpgrade
        },
        userAbTestGroups: null,
        setUserAbTestGroups: function(value) {
            this.set_userAbTestGroups(value);
            return this
        },
        set_userAbTestGroups: function(value) {
            return this.userAbTestGroups = value
        },
        get_userAbTestGroups: function() {
            return this.userAbTestGroups
        },
        addUserAbTestGroups: function(value) {
            if (this.get_userAbTestGroups() == null) {
                this.set_userAbTestGroups([value])
            } else {
                this.get_userAbTestGroups().push(value)
            }
        },
        userActiveQuests: null,
        setUserActiveQuests: function(value) {
            this.set_userActiveQuests(value);
            return this
        },
        set_userActiveQuests: function(value) {
            return this.userActiveQuests = value
        },
        get_userActiveQuests: function() {
            return this.userActiveQuests
        },
        addUserActiveQuests: function(value) {
            if (this.get_userActiveQuests() == null) {
                this.set_userActiveQuests([value])
            } else {
                this.get_userActiveQuests().push(value)
            }
        },
        userPotions: null,
        setUserPotions: function(value) {
            this.set_userPotions(value);
            return this
        },
        set_userPotions: function(value) {
            return this.userPotions = value
        },
        get_userPotions: function() {
            return this.userPotions
        },
        addUserPotions: function(value) {
            if (this.get_userPotions() == null) {
                this.set_userPotions([value])
            } else {
                this.get_userPotions().push(value)
            }
        },
        userSessionId: null,
        setUserSessionId: function(value) {
            this.set_userSessionId(value);
            return this
        },
        set_userSessionId: function(value) {
            return this.userSessionId = value
        },
        get_userSessionId: function() {
            return this.userSessionId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_realm());
            if (this.get_guestAuthToken() != null) {
                protohx_WriteUtils.writeTag(output, 2, 2);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_guestAuthToken())
            }
            if (this.get_altToken() != null) {
                protohx_WriteUtils.writeTag(output, 2, 3);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_altToken())
            }
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_currentGameState());
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 5);
                protohx_WriteUtils.write__TYPE_ENUM(output, this.get_currentGameType())
            }
            protohx_WriteUtils.writeTag(output, 0, 6);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_latestConfiguration());
            protohx_WriteUtils.writeTag(output, 2, 7);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_serverInfo());
            protohx_WriteUtils.writeTag(output, 2, 8);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userInfo());
            protohx_WriteUtils.writeTag(output, 2, 9);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userStats());
            if (this.get_userWallet() != null) {
                var _g = 0;
                var _g1 = this.get_userWallet();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 10);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            if (this.get_userSettings() != null) {
                var _g2 = 0;
                var _g11 = this.get_userSettings();
                while (_g2 < _g11.length) {
                    var value1 = _g11[_g2];
                    ++_g2;
                    protohx_WriteUtils.writeTag(output, 2, 11);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value1)
                }
            }
            if (this.get_userBoosts() != null) {
                var _g3 = 0;
                var _g12 = this.get_userBoosts();
                while (_g3 < _g12.length) {
                    var value2 = _g12[_g3];
                    ++_g3;
                    protohx_WriteUtils.writeTag(output, 2, 12);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value2)
                }
            }
            if (this.get_userTimedEvents() != null) {
                var _g4 = 0;
                var _g13 = this.get_userTimedEvents();
                while (_g4 < _g13.length) {
                    var value3 = _g13[_g4];
                    ++_g4;
                    protohx_WriteUtils.writeTag(output, 2, 13);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value3)
                }
            }
            protohx_WriteUtils.writeTag(output, 2, 14);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userGifts());
            protohx_WriteUtils.writeTag(output, 2, 15);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_sessionToken());
            protohx_WriteUtils.writeTag(output, 2, 16);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_softUpgrade());
            if (this.get_userAbTestGroups() != null) {
                var _g5 = 0;
                var _g14 = this.get_userAbTestGroups();
                while (_g5 < _g14.length) {
                    var value4 = _g14[_g5];
                    ++_g5;
                    protohx_WriteUtils.writeTag(output, 2, 17);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value4)
                }
            }
            if (this.get_userActiveQuests() != null) {
                var _g6 = 0;
                var _g15 = this.get_userActiveQuests();
                while (_g6 < _g15.length) {
                    var value5 = _g15[_g6];
                    ++_g6;
                    protohx_WriteUtils.writeTag(output, 2, 18);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value5)
                }
            }
            if (this.get_userPotions() != null) {
                var _g7 = 0;
                var _g16 = this.get_userPotions();
                while (_g7 < _g16.length) {
                    var value6 = _g16[_g7];
                    ++_g7;
                    protohx_WriteUtils.writeTag(output, 2, 19);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value6)
                }
            }
            protohx_WriteUtils.writeTag(output, 2, 20);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_userSessionId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("realm", this.get_realm());
            if (this.get_guestAuthToken() != null) {
                fn("guestAuthToken", this.get_guestAuthToken())
            }
            if (this.get_altToken() != null) {
                fn("altToken", this.get_altToken())
            }
            fn("currentGameState", this.get_currentGameState());
            if ((this.hasField__0 & 1) != 0) {
                fn("currentGameType", this.get_currentGameType())
            }
            fn("latestConfiguration", this.get_latestConfiguration());
            fn("serverInfo", this.get_serverInfo());
            fn("userInfo", this.get_userInfo());
            fn("userStats", this.get_userStats());
            if (this.get_userWallet() != null && this.get_userWallet().length > 0) {
                fn("userWallet", this.get_userWallet())
            }
            if (this.get_userSettings() != null && this.get_userSettings().length > 0) {
                fn("userSettings", this.get_userSettings())
            }
            if (this.get_userBoosts() != null && this.get_userBoosts().length > 0) {
                fn("userBoosts", this.get_userBoosts())
            }
            if (this.get_userTimedEvents() != null && this.get_userTimedEvents().length > 0) {
                fn("userTimedEvents", this.get_userTimedEvents())
            }
            fn("userGifts", this.get_userGifts());
            fn("sessionToken", this.get_sessionToken());
            fn("softUpgrade", this.get_softUpgrade());
            if (this.get_userAbTestGroups() != null && this.get_userAbTestGroups().length > 0) {
                fn("userAbTestGroups", this.get_userAbTestGroups())
            }
            if (this.get_userActiveQuests() != null && this.get_userActiveQuests().length > 0) {
                fn("userActiveQuests", this.get_userActiveQuests())
            }
            if (this.get_userPotions() != null && this.get_userPotions().length > 0) {
                fn("userPotions", this.get_userPotions())
            }
            fn("userSessionId", this.get_userSessionId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var realm__count = 0;
            var guest_auth_token__count = 0;
            var alt_token__count = 0;
            var current_game_state__count = 0;
            var current_game_type__count = 0;
            var latest_configuration__count = 0;
            var server_info__count = 0;
            var user_info__count = 0;
            var user_stats__count = 0;
            var user_gifts__count = 0;
            var session_token__count = 0;
            var soft_upgrade__count = 0;
            var user_session_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (realm__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.realm cannot be set twice."))
                        }++realm__count;
                        this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (guest_auth_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.guestAuthToken cannot be set twice."))
                        }++guest_auth_token__count;
                        this.set_guestAuthToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (alt_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.altToken cannot be set twice."))
                        }++alt_token__count;
                        this.set_altToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 4:
                        if (current_game_state__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.currentGameState cannot be set twice."))
                        }++current_game_state__count;
                        this.set_currentGameState(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 5:
                        if (current_game_type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.currentGameType cannot be set twice."))
                        }++current_game_type__count;
                        this.set_currentGameType(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 6:
                        if (latest_configuration__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.latestConfiguration cannot be set twice."))
                        }++latest_configuration__count;
                        this.set_latestConfiguration(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 7:
                        if (server_info__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.serverInfo cannot be set twice."))
                        }++server_info__count;
                        this.set_serverInfo(new agario_proto_Server_$info());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_serverInfo());
                        break;
                    case 8:
                        if (user_info__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.userInfo cannot be set twice."))
                        }++user_info__count;
                        this.set_userInfo(new agario_proto_User_$info());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userInfo());
                        break;
                    case 9:
                        if (user_stats__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.userStats cannot be set twice."))
                        }++user_stats__count;
                        this.set_userStats(new agario_proto_User_$stats());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userStats());
                        break;
                    case 10:
                        if (this.get_userWallet() == null) {
                            this.set_userWallet([])
                        }
                        this.get_userWallet().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$wallet_$item()));
                        break;
                    case 11:
                        if (this.get_userSettings() == null) {
                            this.set_userSettings([])
                        }
                        this.get_userSettings().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$setting()));
                        break;
                    case 12:
                        if (this.get_userBoosts() == null) {
                            this.set_userBoosts([])
                        }
                        this.get_userBoosts().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$boost_$item()));
                        break;
                    case 13:
                        if (this.get_userTimedEvents() == null) {
                            this.set_userTimedEvents([])
                        }
                        this.get_userTimedEvents().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$timed_$event()));
                        break;
                    case 14:
                        if (user_gifts__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.userGifts cannot be set twice."))
                        }++user_gifts__count;
                        this.set_userGifts(new agario_proto_User_$gifts());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userGifts());
                        break;
                    case 15:
                        if (session_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.sessionToken cannot be set twice."))
                        }++session_token__count;
                        this.set_sessionToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 16:
                        if (soft_upgrade__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.softUpgrade cannot be set twice."))
                        }++soft_upgrade__count;
                        this.set_softUpgrade(new agario_proto_Soft_$upgrade());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_softUpgrade());
                        break;
                    case 17:
                        if (this.get_userAbTestGroups() == null) {
                            this.set_userAbTestGroups([])
                        }
                        this.get_userAbTestGroups().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$ab_$test_$group()));
                        break;
                    case 18:
                        if (this.get_userActiveQuests() == null) {
                            this.set_userActiveQuests([])
                        }
                        this.get_userActiveQuests().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$quest()));
                        break;
                    case 19:
                        if (this.get_userPotions() == null) {
                            this.set_userPotions([])
                        }
                        this.get_userPotions().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$potion()));
                        break;
                    case 20:
                        if (user_session_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.userSessionId cannot be set twice."))
                        }++user_session_id__count;
                        this.set_userSessionId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Login_$response,
        __properties__: {
            set_userSessionId: "set_userSessionId",
            get_userSessionId: "get_userSessionId",
            set_userPotions: "set_userPotions",
            get_userPotions: "get_userPotions",
            set_userActiveQuests: "set_userActiveQuests",
            get_userActiveQuests: "get_userActiveQuests",
            set_userAbTestGroups: "set_userAbTestGroups",
            get_userAbTestGroups: "get_userAbTestGroups",
            set_softUpgrade: "set_softUpgrade",
            get_softUpgrade: "get_softUpgrade",
            set_sessionToken: "set_sessionToken",
            get_sessionToken: "get_sessionToken",
            set_userGifts: "set_userGifts",
            get_userGifts: "get_userGifts",
            set_userTimedEvents: "set_userTimedEvents",
            get_userTimedEvents: "get_userTimedEvents",
            set_userBoosts: "set_userBoosts",
            get_userBoosts: "get_userBoosts",
            set_userSettings: "set_userSettings",
            get_userSettings: "get_userSettings",
            set_userWallet: "set_userWallet",
            get_userWallet: "get_userWallet",
            set_userStats: "set_userStats",
            get_userStats: "get_userStats",
            set_userInfo: "set_userInfo",
            get_userInfo: "get_userInfo",
            set_serverInfo: "set_serverInfo",
            get_serverInfo: "get_serverInfo",
            set_latestConfiguration: "set_latestConfiguration",
            get_latestConfiguration: "get_latestConfiguration",
            set_currentGameType: "set_currentGameType",
            get_currentGameType: "get_currentGameType",
            set_currentGameState: "set_currentGameState",
            get_currentGameState: "get_currentGameState",
            set_altToken: "set_altToken",
            get_altToken: "get_altToken",
            set_guestAuthToken: "set_guestAuthToken",
            get_guestAuthToken: "get_guestAuthToken",
            set_realm: "set_realm",
            get_realm: "get_realm"
        }
    });
    var agario_proto_Offer_$bundle_$request = function() {
        protohx_Message.call(this);
        this.set_bundleId("")
    };
    $hxClasses["agario.proto.Offer_bundle_request"] = agario_proto_Offer_$bundle_$request;
    agario_proto_Offer_$bundle_$request.__name__ = ["agario", "proto", "Offer_bundle_request"];
    agario_proto_Offer_$bundle_$request.__super__ = protohx_Message;
    agario_proto_Offer_$bundle_$request.prototype = $extend(protohx_Message.prototype, {
        bundleId: null,
        setBundleId: function(value) {
            this.set_bundleId(value);
            return this
        },
        set_bundleId: function(value) {
            return this.bundleId = value
        },
        get_bundleId: function() {
            return this.bundleId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_bundleId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("bundleId", this.get_bundleId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var bundle_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (bundle_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Offer_bundle_request.bundleId cannot be set twice."))
                        }++bundle_id__count;
                        this.set_bundleId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Offer_$bundle_$request,
        __properties__: {
            set_bundleId: "set_bundleId",
            get_bundleId: "get_bundleId"
        }
    });
    var agario_proto_Offer_$bundle_$response = function() {
        protohx_Message.call(this);
        this.set_result(0);
        this.set_bundleId("");
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Offer_bundle_response"] = agario_proto_Offer_$bundle_$response;
    agario_proto_Offer_$bundle_$response.__name__ = ["agario", "proto", "Offer_bundle_response"];
    agario_proto_Offer_$bundle_$response.__super__ = protohx_Message;
    agario_proto_Offer_$bundle_$response.prototype = $extend(protohx_Message.prototype, {
        result: null,
        setResult: function(value) {
            this.set_result(value);
            return this
        },
        set_result: function(value) {
            return this.result = value
        },
        get_result: function() {
            return this.result
        },
        bundleId: null,
        setBundleId: function(value) {
            this.set_bundleId(value);
            return this
        },
        set_bundleId: function(value) {
            return this.bundleId = value
        },
        get_bundleId: function() {
            return this.bundleId
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_result());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_bundleId());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("result", this.get_result());
            fn("bundleId", this.get_bundleId());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var result__count = 0;
            var bundle_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (result__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Offer_bundle_response.result cannot be set twice."))
                        }++result__count;
                        this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (bundle_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Offer_bundle_response.bundleId cannot be set twice."))
                        }++bundle_id__count;
                        this.set_bundleId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Offer_$bundle_$response,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_bundleId: "set_bundleId",
            get_bundleId: "get_bundleId",
            set_result: "set_result",
            get_result: "get_result"
        }
    });
    var agario_proto_Open_$potion_$for_$product_$request = function() {
        protohx_Message.call(this);
        this.set_productId("")
    };
    $hxClasses["agario.proto.Open_potion_for_product_request"] = agario_proto_Open_$potion_$for_$product_$request;
    agario_proto_Open_$potion_$for_$product_$request.__name__ = ["agario", "proto", "Open_potion_for_product_request"];
    agario_proto_Open_$potion_$for_$product_$request.__super__ = protohx_Message;
    agario_proto_Open_$potion_$for_$product_$request.prototype = $extend(protohx_Message.prototype, {
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("productId", this.get_productId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var product_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Open_potion_for_product_request.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Open_$potion_$for_$product_$request,
        __properties__: {
            set_productId: "set_productId",
            get_productId: "get_productId"
        }
    });
    var agario_proto_Open_$potion_$for_$product_$response = function() {
        protohx_Message.call(this);
        this.set_result(0);
        this.set_productId("");
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Open_potion_for_product_response"] = agario_proto_Open_$potion_$for_$product_$response;
    agario_proto_Open_$potion_$for_$product_$response.__name__ = ["agario", "proto", "Open_potion_for_product_response"];
    agario_proto_Open_$potion_$for_$product_$response.__super__ = protohx_Message;
    agario_proto_Open_$potion_$for_$product_$response.prototype = $extend(protohx_Message.prototype, {
        result: null,
        setResult: function(value) {
            this.set_result(value);
            return this
        },
        set_result: function(value) {
            return this.result = value
        },
        get_result: function() {
            return this.result
        },
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_result());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("result", this.get_result());
            fn("productId", this.get_productId());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var result__count = 0;
            var product_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (result__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Open_potion_for_product_response.result cannot be set twice."))
                        }++result__count;
                        this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Open_potion_for_product_response.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Open_$potion_$for_$product_$response,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_productId: "set_productId",
            get_productId: "get_productId",
            set_result: "set_result",
            get_result: "get_result"
        }
    });
    var agario_proto_Open_$potion_$for_$slot_$request = function() {
        protohx_Message.call(this);
        this.set_slot(0)
    };
    $hxClasses["agario.proto.Open_potion_for_slot_request"] = agario_proto_Open_$potion_$for_$slot_$request;
    agario_proto_Open_$potion_$for_$slot_$request.__name__ = ["agario", "proto", "Open_potion_for_slot_request"];
    agario_proto_Open_$potion_$for_$slot_$request.__super__ = protohx_Message;
    agario_proto_Open_$potion_$for_$slot_$request.prototype = $extend(protohx_Message.prototype, {
        slot: null,
        setSlot: function(value) {
            this.set_slot(value);
            return this
        },
        set_slot: function(value) {
            return this.slot = value
        },
        get_slot: function() {
            return this.slot
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_slot());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("slot", this.get_slot())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var slot__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (slot__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Open_potion_for_slot_request.slot cannot be set twice."))
                        }++slot__count;
                        this.set_slot(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Open_$potion_$for_$slot_$request,
        __properties__: {
            set_slot: "set_slot",
            get_slot: "get_slot"
        }
    });
    var agario_proto_Open_$potion_$for_$slot_$response = function() {
        protohx_Message.call(this);
        this.set_result(0);
        this.set_productUpdates([]);
        this.set_userPotions([])
    };
    $hxClasses["agario.proto.Open_potion_for_slot_response"] = agario_proto_Open_$potion_$for_$slot_$response;
    agario_proto_Open_$potion_$for_$slot_$response.__name__ = ["agario", "proto", "Open_potion_for_slot_response"];
    agario_proto_Open_$potion_$for_$slot_$response.__super__ = protohx_Message;
    agario_proto_Open_$potion_$for_$slot_$response.prototype = $extend(protohx_Message.prototype, {
        result: null,
        setResult: function(value) {
            this.set_result(value);
            return this
        },
        set_result: function(value) {
            return this.result = value
        },
        get_result: function() {
            return this.result
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        userPotions: null,
        setUserPotions: function(value) {
            this.set_userPotions(value);
            return this
        },
        set_userPotions: function(value) {
            return this.userPotions = value
        },
        get_userPotions: function() {
            return this.userPotions
        },
        addUserPotions: function(value) {
            if (this.get_userPotions() == null) {
                this.set_userPotions([value])
            } else {
                this.get_userPotions().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_result());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            if (this.get_userPotions() != null) {
                var _g2 = 0;
                var _g11 = this.get_userPotions();
                while (_g2 < _g11.length) {
                    var value1 = _g11[_g2];
                    ++_g2;
                    protohx_WriteUtils.writeTag(output, 2, 4);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value1)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("result", this.get_result());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
            if (this.get_userPotions() != null && this.get_userPotions().length > 0) {
                fn("userPotions", this.get_userPotions())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var result__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (result__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Open_potion_for_slot_response.result cannot be set twice."))
                        }++result__count;
                        this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 3:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    case 4:
                        if (this.get_userPotions() == null) {
                            this.set_userPotions([])
                        }
                        this.get_userPotions().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$potion()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Open_$potion_$for_$slot_$response,
        __properties__: {
            set_userPotions: "set_userPotions",
            get_userPotions: "get_userPotions",
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_result: "set_result",
            get_result: "get_result"
        }
    });
    var agario_proto_Ping = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this);
        this.set_id(0)
    };
    $hxClasses["agario.proto.Ping"] = agario_proto_Ping;
    agario_proto_Ping.__name__ = ["agario", "proto", "Ping"];
    agario_proto_Ping.__super__ = protohx_Message;
    agario_proto_Ping.prototype = $extend(protohx_Message.prototype, {
        id: null,
        setId: function(value) {
            this.set_id(value);
            return this
        },
        set_id: function(value) {
            return this.id = value
        },
        get_id: function() {
            return this.id
        },
        previousRoundtrip: null,
        setPreviousRoundtrip: function(value) {
            this.set_previousRoundtrip(value);
            return this
        },
        hasField__0: null,
        clearPreviousRoundtrip: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_previousRoundtrip(0)
        },
        hasPreviousRoundtrip: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_previousRoundtrip: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.previousRoundtrip = value
        },
        get_previousRoundtrip: function() {
            return this.previousRoundtrip
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_id());
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 2);
                protohx_WriteUtils.write__TYPE_UINT32(output, this.get_previousRoundtrip())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("id", this.get_id());
            if ((this.hasField__0 & 1) != 0) {
                fn("previousRoundtrip", this.get_previousRoundtrip())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var id__count = 0;
            var previous_roundtrip__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Ping.id cannot be set twice."))
                        }++id__count;
                        this.set_id(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 2:
                        if (previous_roundtrip__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Ping.previousRoundtrip cannot be set twice."))
                        }++previous_roundtrip__count;
                        this.set_previousRoundtrip(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Ping,
        __properties__: {
            set_previousRoundtrip: "set_previousRoundtrip",
            get_previousRoundtrip: "get_previousRoundtrip",
            set_id: "set_id",
            get_id: "get_id"
        }
    });
    var agario_proto_Pong = function() {
        protohx_Message.call(this);
        this.set_pingId(0)
    };
    $hxClasses["agario.proto.Pong"] = agario_proto_Pong;
    agario_proto_Pong.__name__ = ["agario", "proto", "Pong"];
    agario_proto_Pong.__super__ = protohx_Message;
    agario_proto_Pong.prototype = $extend(protohx_Message.prototype, {
        pingId: null,
        setPingId: function(value) {
            this.set_pingId(value);
            return this
        },
        set_pingId: function(value) {
            return this.pingId = value
        },
        get_pingId: function() {
            return this.pingId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_pingId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("pingId", this.get_pingId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var ping_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (ping_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Pong.pingId cannot be set twice."))
                        }++ping_id__count;
                        this.set_pingId(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Pong,
        __properties__: {
            set_pingId: "set_pingId",
            get_pingId: "get_pingId"
        }
    });
    var agario_proto_Potion_$info = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this)
    };
    $hxClasses["agario.proto.Potion_info"] = agario_proto_Potion_$info;
    agario_proto_Potion_$info.__name__ = ["agario", "proto", "Potion_info"];
    agario_proto_Potion_$info.__super__ = protohx_Message;
    agario_proto_Potion_$info.prototype = $extend(protohx_Message.prototype, {
        newUserPotion: null,
        setNewUserPotion: function(value) {
            this.set_newUserPotion(value);
            return this
        },
        clearNewUserPotion: function() {
            this.set_newUserPotion(null)
        },
        hasNewUserPotion: function() {
            return this.get_newUserPotion() != null
        },
        set_newUserPotion: function(value) {
            return this.newUserPotion = value
        },
        get_newUserPotion: function() {
            return this.newUserPotion
        },
        wouldHaveWonPotion: null,
        setWouldHaveWonPotion: function(value) {
            this.set_wouldHaveWonPotion(value);
            return this
        },
        hasField__0: null,
        clearWouldHaveWonPotion: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_wouldHaveWonPotion(false)
        },
        hasWouldHaveWonPotion: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_wouldHaveWonPotion: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.wouldHaveWonPotion = value
        },
        get_wouldHaveWonPotion: function() {
            return this.wouldHaveWonPotion
        },
        writeToBuffer: function(output) {
            if (this.get_newUserPotion() != null) {
                protohx_WriteUtils.writeTag(output, 2, 1);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_newUserPotion())
            }
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 2);
                protohx_WriteUtils.write__TYPE_BOOL(output, this.get_wouldHaveWonPotion())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_newUserPotion() != null) {
                fn("newUserPotion", this.get_newUserPotion())
            }
            if ((this.hasField__0 & 1) != 0) {
                fn("wouldHaveWonPotion", this.get_wouldHaveWonPotion())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var new_user_potion__count = 0;
            var would_have_won_potion__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (new_user_potion__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Potion_info.newUserPotion cannot be set twice."))
                        }++new_user_potion__count;
                        this.set_newUserPotion(new agario_proto_User_$potion());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_newUserPotion());
                        break;
                    case 2:
                        if (would_have_won_potion__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Potion_info.wouldHaveWonPotion cannot be set twice."))
                        }++would_have_won_potion__count;
                        this.set_wouldHaveWonPotion(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Potion_$info,
        __properties__: {
            set_wouldHaveWonPotion: "set_wouldHaveWonPotion",
            get_wouldHaveWonPotion: "get_wouldHaveWonPotion",
            set_newUserPotion: "set_newUserPotion",
            get_newUserPotion: "get_newUserPotion"
        }
    });
    var agario_proto_Product_$update = function() {
        protohx_Message.call(this);
        this.set_origin(0);
        this.set_productId("");
        this.set_finalAmount(0);
        this.set_deltaAmount(0);
        this.set_type(0)
    };
    $hxClasses["agario.proto.Product_update"] = agario_proto_Product_$update;
    agario_proto_Product_$update.__name__ = ["agario", "proto", "Product_update"];
    agario_proto_Product_$update.__super__ = protohx_Message;
    agario_proto_Product_$update.prototype = $extend(protohx_Message.prototype, {
        origin: null,
        setOrigin: function(value) {
            this.set_origin(value);
            return this
        },
        set_origin: function(value) {
            return this.origin = value
        },
        get_origin: function() {
            return this.origin
        },
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        finalAmount: null,
        setFinalAmount: function(value) {
            this.set_finalAmount(value);
            return this
        },
        set_finalAmount: function(value) {
            return this.finalAmount = value
        },
        get_finalAmount: function() {
            return this.finalAmount
        },
        deltaAmount: null,
        setDeltaAmount: function(value) {
            this.set_deltaAmount(value);
            return this
        },
        set_deltaAmount: function(value) {
            return this.deltaAmount = value
        },
        get_deltaAmount: function() {
            return this.deltaAmount
        },
        type: null,
        setType: function(value) {
            this.set_type(value);
            return this
        },
        set_type: function(value) {
            return this.type = value
        },
        get_type: function() {
            return this.type
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_origin());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_finalAmount());
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_INT32(output, this.get_deltaAmount());
            protohx_WriteUtils.writeTag(output, 0, 5);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_type());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("origin", this.get_origin());
            fn("productId", this.get_productId());
            fn("finalAmount", this.get_finalAmount());
            fn("deltaAmount", this.get_deltaAmount());
            fn("type", this.get_type())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var origin__count = 0;
            var product_id__count = 0;
            var final_amount__count = 0;
            var delta_amount__count = 0;
            var type__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (origin__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.origin cannot be set twice."))
                        }++origin__count;
                        this.set_origin(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (final_amount__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.finalAmount cannot be set twice."))
                        }++final_amount__count;
                        this.set_finalAmount(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 4:
                        if (delta_amount__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.deltaAmount cannot be set twice."))
                        }++delta_amount__count;
                        this.set_deltaAmount(protohx_ReadUtils.read__TYPE_INT32(input));
                        break;
                    case 5:
                        if (type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.type cannot be set twice."))
                        }++type__count;
                        this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Product_$update,
        __properties__: {
            set_type: "set_type",
            get_type: "get_type",
            set_deltaAmount: "set_deltaAmount",
            get_deltaAmount: "get_deltaAmount",
            set_finalAmount: "set_finalAmount",
            get_finalAmount: "get_finalAmount",
            set_productId: "set_productId",
            get_productId: "get_productId",
            set_origin: "set_origin",
            get_origin: "get_origin"
        }
    });
    var agario_proto_Purchase_$wallet_$updates = function() {
        protohx_Message.call(this);
        this.set_purchaseId("");
        this.set_walletUpdates(new agario_proto_Wallet_$updates())
    };
    $hxClasses["agario.proto.Purchase_wallet_updates"] = agario_proto_Purchase_$wallet_$updates;
    agario_proto_Purchase_$wallet_$updates.__name__ = ["agario", "proto", "Purchase_wallet_updates"];
    agario_proto_Purchase_$wallet_$updates.__super__ = protohx_Message;
    agario_proto_Purchase_$wallet_$updates.prototype = $extend(protohx_Message.prototype, {
        purchaseId: null,
        setPurchaseId: function(value) {
            this.set_purchaseId(value);
            return this
        },
        set_purchaseId: function(value) {
            return this.purchaseId = value
        },
        get_purchaseId: function() {
            return this.purchaseId
        },
        walletUpdates: null,
        setWalletUpdates: function(value) {
            this.set_walletUpdates(value);
            return this
        },
        set_walletUpdates: function(value) {
            return this.walletUpdates = value
        },
        get_walletUpdates: function() {
            return this.walletUpdates
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_purchaseId());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_walletUpdates());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("purchaseId", this.get_purchaseId());
            fn("walletUpdates", this.get_walletUpdates())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var purchase_id__count = 0;
            var wallet_updates__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (purchase_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Purchase_wallet_updates.purchaseId cannot be set twice."))
                        }++purchase_id__count;
                        this.set_purchaseId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (wallet_updates__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Purchase_wallet_updates.walletUpdates cannot be set twice."))
                        }++wallet_updates__count;
                        this.set_walletUpdates(new agario_proto_Wallet_$updates());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_walletUpdates());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Purchase_$wallet_$updates,
        __properties__: {
            set_walletUpdates: "set_walletUpdates",
            get_walletUpdates: "get_walletUpdates",
            set_purchaseId: "set_purchaseId",
            get_purchaseId: "get_purchaseId"
        }
    });
    var agario_proto_Realm_$upgrade_$request = function() {
        protohx_Message.call(this);
        this.set_realm(0);
        this.set_authToken("")
    };
    $hxClasses["agario.proto.Realm_upgrade_request"] = agario_proto_Realm_$upgrade_$request;
    agario_proto_Realm_$upgrade_$request.__name__ = ["agario", "proto", "Realm_upgrade_request"];
    agario_proto_Realm_$upgrade_$request.__super__ = protohx_Message;
    agario_proto_Realm_$upgrade_$request.prototype = $extend(protohx_Message.prototype, {
        realm: null,
        setRealm: function(value) {
            this.set_realm(value);
            return this
        },
        set_realm: function(value) {
            return this.realm = value
        },
        get_realm: function() {
            return this.realm
        },
        authToken: null,
        setAuthToken: function(value) {
            this.set_authToken(value);
            return this
        },
        set_authToken: function(value) {
            return this.authToken = value
        },
        get_authToken: function() {
            return this.authToken
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_realm());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_authToken());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("realm", this.get_realm());
            fn("authToken", this.get_authToken())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var realm__count = 0;
            var auth_token__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (realm__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_request.realm cannot be set twice."))
                        }++realm__count;
                        this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (auth_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_request.authToken cannot be set twice."))
                        }++auth_token__count;
                        this.set_authToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Realm_$upgrade_$request,
        __properties__: {
            set_authToken: "set_authToken",
            get_authToken: "get_authToken",
            set_realm: "set_realm",
            get_realm: "get_realm"
        }
    });
    var agario_proto_Realm_$upgrade_$response = function() {
        protohx_Message.call(this);
        this.set_realm(0);
        this.set_displayName("");
        this.set_rewardWasHandedOut(false);
        this.set_userWallet([])
    };
    $hxClasses["agario.proto.Realm_upgrade_response"] = agario_proto_Realm_$upgrade_$response;
    agario_proto_Realm_$upgrade_$response.__name__ = ["agario", "proto", "Realm_upgrade_response"];
    agario_proto_Realm_$upgrade_$response.__super__ = protohx_Message;
    agario_proto_Realm_$upgrade_$response.prototype = $extend(protohx_Message.prototype, {
        realm: null,
        setRealm: function(value) {
            this.set_realm(value);
            return this
        },
        set_realm: function(value) {
            return this.realm = value
        },
        get_realm: function() {
            return this.realm
        },
        displayName: null,
        setDisplayName: function(value) {
            this.set_displayName(value);
            return this
        },
        set_displayName: function(value) {
            return this.displayName = value
        },
        get_displayName: function() {
            return this.displayName
        },
        rewardWasHandedOut: null,
        setRewardWasHandedOut: function(value) {
            this.set_rewardWasHandedOut(value);
            return this
        },
        set_rewardWasHandedOut: function(value) {
            return this.rewardWasHandedOut = value
        },
        get_rewardWasHandedOut: function() {
            return this.rewardWasHandedOut
        },
        userWallet: null,
        setUserWallet: function(value) {
            this.set_userWallet(value);
            return this
        },
        set_userWallet: function(value) {
            return this.userWallet = value
        },
        get_userWallet: function() {
            return this.userWallet
        },
        addUserWallet: function(value) {
            if (this.get_userWallet() == null) {
                this.set_userWallet([value])
            } else {
                this.get_userWallet().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_realm());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_displayName());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_BOOL(output, this.get_rewardWasHandedOut());
            if (this.get_userWallet() != null) {
                var _g = 0;
                var _g1 = this.get_userWallet();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 4);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("realm", this.get_realm());
            fn("displayName", this.get_displayName());
            fn("rewardWasHandedOut", this.get_rewardWasHandedOut());
            if (this.get_userWallet() != null && this.get_userWallet().length > 0) {
                fn("userWallet", this.get_userWallet())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var realm__count = 0;
            var display_name__count = 0;
            var reward_was_handed_out__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (realm__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_response.realm cannot be set twice."))
                        }++realm__count;
                        this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (display_name__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_response.displayName cannot be set twice."))
                        }++display_name__count;
                        this.set_displayName(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (reward_was_handed_out__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_response.rewardWasHandedOut cannot be set twice."))
                        }++reward_was_handed_out__count;
                        this.set_rewardWasHandedOut(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    case 4:
                        if (this.get_userWallet() == null) {
                            this.set_userWallet([])
                        }
                        this.get_userWallet().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$wallet_$item()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Realm_$upgrade_$response,
        __properties__: {
            set_userWallet: "set_userWallet",
            get_userWallet: "get_userWallet",
            set_rewardWasHandedOut: "set_rewardWasHandedOut",
            get_rewardWasHandedOut: "get_rewardWasHandedOut",
            set_displayName: "set_displayName",
            get_displayName: "get_displayName",
            set_realm: "set_realm",
            get_realm: "get_realm"
        }
    });
    var agario_proto_Reconnect = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this);
        this.set_reconnectWith(0)
    };
    $hxClasses["agario.proto.Reconnect"] = agario_proto_Reconnect;
    agario_proto_Reconnect.__name__ = ["agario", "proto", "Reconnect"];
    agario_proto_Reconnect.__super__ = protohx_Message;
    agario_proto_Reconnect.prototype = $extend(protohx_Message.prototype, {
        host: null,
        setHost: function(value) {
            this.set_host(value);
            return this
        },
        clearHost: function() {
            this.set_host(null)
        },
        hasHost: function() {
            return this.get_host() != null
        },
        set_host: function(value) {
            return this.host = value
        },
        get_host: function() {
            return this.host
        },
        tcpPort: null,
        setTcpPort: function(value) {
            this.set_tcpPort(value);
            return this
        },
        hasField__0: null,
        clearTcpPort: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_tcpPort(0)
        },
        hasTcpPort: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_tcpPort: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.tcpPort = value
        },
        get_tcpPort: function() {
            return this.tcpPort
        },
        reconnectWith: null,
        setReconnectWith: function(value) {
            this.set_reconnectWith(value);
            return this
        },
        set_reconnectWith: function(value) {
            return this.reconnectWith = value
        },
        get_reconnectWith: function() {
            return this.reconnectWith
        },
        connectToken: null,
        setConnectToken: function(value) {
            this.set_connectToken(value);
            return this
        },
        clearConnectToken: function() {
            this.set_connectToken(null)
        },
        hasConnectToken: function() {
            return this.get_connectToken() != null
        },
        set_connectToken: function(value) {
            return this.connectToken = value
        },
        get_connectToken: function() {
            return this.connectToken
        },
        writeToBuffer: function(output) {
            if (this.get_host() != null) {
                protohx_WriteUtils.writeTag(output, 2, 1);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_host())
            }
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 2);
                protohx_WriteUtils.write__TYPE_UINT32(output, this.get_tcpPort())
            }
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_reconnectWith());
            if (this.get_connectToken() != null) {
                protohx_WriteUtils.writeTag(output, 2, 4);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_connectToken())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_host() != null) {
                fn("host", this.get_host())
            }
            if ((this.hasField__0 & 1) != 0) {
                fn("tcpPort", this.get_tcpPort())
            }
            fn("reconnectWith", this.get_reconnectWith());
            if (this.get_connectToken() != null) {
                fn("connectToken", this.get_connectToken())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var host__count = 0;
            var tcp_port__count = 0;
            var reconnect_with__count = 0;
            var connect_token__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (host__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Reconnect.host cannot be set twice."))
                        }++host__count;
                        this.set_host(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (tcp_port__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Reconnect.tcpPort cannot be set twice."))
                        }++tcp_port__count;
                        this.set_tcpPort(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 3:
                        if (reconnect_with__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Reconnect.reconnectWith cannot be set twice."))
                        }++reconnect_with__count;
                        this.set_reconnectWith(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 4:
                        if (connect_token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Reconnect.connectToken cannot be set twice."))
                        }++connect_token__count;
                        this.set_connectToken(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Reconnect,
        __properties__: {
            set_connectToken: "set_connectToken",
            get_connectToken: "get_connectToken",
            set_reconnectWith: "set_reconnectWith",
            get_reconnectWith: "get_reconnectWith",
            set_tcpPort: "set_tcpPort",
            get_tcpPort: "get_tcpPort",
            set_host: "set_host",
            get_host: "get_host"
        }
    });
    var agario_proto_Req = function() {
        protohx_Message.call(this);
        this.set_type(0)
    };
    $hxClasses["agario.proto.Req"] = agario_proto_Req;
    agario_proto_Req.__name__ = ["agario", "proto", "Req"];
    agario_proto_Req.__super__ = protohx_Message;
    agario_proto_Req.prototype = $extend(protohx_Message.prototype, {
        type: null,
        setType: function(value) {
            this.set_type(value);
            return this
        },
        set_type: function(value) {
            return this.type = value
        },
        get_type: function() {
            return this.type
        },
        loginRequestField: null,
        setLoginRequestField: function(value) {
            this.set_loginRequestField(value);
            return this
        },
        clearLoginRequestField: function() {
            this.set_loginRequestField(null)
        },
        hasLoginRequestField: function() {
            return this.get_loginRequestField() != null
        },
        set_loginRequestField: function(value) {
            return this.loginRequestField = value
        },
        get_loginRequestField: function() {
            return this.loginRequestField
        },
        loginResponseField: null,
        setLoginResponseField: function(value) {
            this.set_loginResponseField(value);
            return this
        },
        clearLoginResponseField: function() {
            this.set_loginResponseField(null)
        },
        hasLoginResponseField: function() {
            return this.get_loginResponseField() != null
        },
        set_loginResponseField: function(value) {
            return this.loginResponseField = value
        },
        get_loginResponseField: function() {
            return this.loginResponseField
        },
        realmUpgradeRequestField: null,
        setRealmUpgradeRequestField: function(value) {
            this.set_realmUpgradeRequestField(value);
            return this
        },
        clearRealmUpgradeRequestField: function() {
            this.set_realmUpgradeRequestField(null)
        },
        hasRealmUpgradeRequestField: function() {
            return this.get_realmUpgradeRequestField() != null
        },
        set_realmUpgradeRequestField: function(value) {
            return this.realmUpgradeRequestField = value
        },
        get_realmUpgradeRequestField: function() {
            return this.realmUpgradeRequestField
        },
        realmUpgradeResponseField: null,
        setRealmUpgradeResponseField: function(value) {
            this.set_realmUpgradeResponseField(value);
            return this
        },
        clearRealmUpgradeResponseField: function() {
            this.set_realmUpgradeResponseField(null)
        },
        hasRealmUpgradeResponseField: function() {
            return this.get_realmUpgradeResponseField() != null
        },
        set_realmUpgradeResponseField: function(value) {
            return this.realmUpgradeResponseField = value
        },
        get_realmUpgradeResponseField: function() {
            return this.realmUpgradeResponseField
        },
        connectRequestField: null,
        setConnectRequestField: function(value) {
            this.set_connectRequestField(value);
            return this
        },
        clearConnectRequestField: function() {
            this.set_connectRequestField(null)
        },
        hasConnectRequestField: function() {
            return this.get_connectRequestField() != null
        },
        set_connectRequestField: function(value) {
            return this.connectRequestField = value
        },
        get_connectRequestField: function() {
            return this.connectRequestField
        },
        connectResponseField: null,
        setConnectResponseField: function(value) {
            this.set_connectResponseField(value);
            return this
        },
        clearConnectResponseField: function() {
            this.set_connectResponseField(null)
        },
        hasConnectResponseField: function() {
            return this.get_connectResponseField() != null
        },
        set_connectResponseField: function(value) {
            return this.connectResponseField = value
        },
        get_connectResponseField: function() {
            return this.connectResponseField
        },
        disconnectField: null,
        setDisconnectField: function(value) {
            this.set_disconnectField(value);
            return this
        },
        clearDisconnectField: function() {
            this.set_disconnectField(null)
        },
        hasDisconnectField: function() {
            return this.get_disconnectField() != null
        },
        set_disconnectField: function(value) {
            return this.disconnectField = value
        },
        get_disconnectField: function() {
            return this.disconnectField
        },
        reconnectField: null,
        setReconnectField: function(value) {
            this.set_reconnectField(value);
            return this
        },
        clearReconnectField: function() {
            this.set_reconnectField(null)
        },
        hasReconnectField: function() {
            return this.get_reconnectField() != null
        },
        set_reconnectField: function(value) {
            return this.reconnectField = value
        },
        get_reconnectField: function() {
            return this.reconnectField
        },
        pingField: null,
        setPingField: function(value) {
            this.set_pingField(value);
            return this
        },
        clearPingField: function() {
            this.set_pingField(null)
        },
        hasPingField: function() {
            return this.get_pingField() != null
        },
        set_pingField: function(value) {
            return this.pingField = value
        },
        get_pingField: function() {
            return this.pingField
        },
        pongField: null,
        setPongField: function(value) {
            this.set_pongField(value);
            return this
        },
        clearPongField: function() {
            this.set_pongField(null)
        },
        hasPongField: function() {
            return this.get_pongField() != null
        },
        set_pongField: function(value) {
            return this.pongField = value
        },
        get_pongField: function() {
            return this.pongField
        },
        udpHandshakeField: null,
        setUdpHandshakeField: function(value) {
            this.set_udpHandshakeField(value);
            return this
        },
        clearUdpHandshakeField: function() {
            this.set_udpHandshakeField(null)
        },
        hasUdpHandshakeField: function() {
            return this.get_udpHandshakeField() != null
        },
        set_udpHandshakeField: function(value) {
            return this.udpHandshakeField = value
        },
        get_udpHandshakeField: function() {
            return this.udpHandshakeField
        },
        configurationChangeField: null,
        setConfigurationChangeField: function(value) {
            this.set_configurationChangeField(value);
            return this
        },
        clearConfigurationChangeField: function() {
            this.set_configurationChangeField(null)
        },
        hasConfigurationChangeField: function() {
            return this.get_configurationChangeField() != null
        },
        set_configurationChangeField: function(value) {
            return this.configurationChangeField = value
        },
        get_configurationChangeField: function() {
            return this.configurationChangeField
        },
        serverGoingOfflineField: null,
        setServerGoingOfflineField: function(value) {
            this.set_serverGoingOfflineField(value);
            return this
        },
        clearServerGoingOfflineField: function() {
            this.set_serverGoingOfflineField(null)
        },
        hasServerGoingOfflineField: function() {
            return this.get_serverGoingOfflineField() != null
        },
        set_serverGoingOfflineField: function(value) {
            return this.serverGoingOfflineField = value
        },
        get_serverGoingOfflineField: function() {
            return this.serverGoingOfflineField
        },
        enterGameField: null,
        setEnterGameField: function(value) {
            this.set_enterGameField(value);
            return this
        },
        clearEnterGameField: function() {
            this.set_enterGameField(null)
        },
        hasEnterGameField: function() {
            return this.get_enterGameField() != null
        },
        set_enterGameField: function(value) {
            return this.enterGameField = value
        },
        get_enterGameField: function() {
            return this.enterGameField
        },
        gameJoinedField: null,
        setGameJoinedField: function(value) {
            this.set_gameJoinedField(value);
            return this
        },
        clearGameJoinedField: function() {
            this.set_gameJoinedField(null)
        },
        hasGameJoinedField: function() {
            return this.get_gameJoinedField() != null
        },
        set_gameJoinedField: function(value) {
            return this.gameJoinedField = value
        },
        get_gameJoinedField: function() {
            return this.gameJoinedField
        },
        enterLobbyField: null,
        setEnterLobbyField: function(value) {
            this.set_enterLobbyField(value);
            return this
        },
        clearEnterLobbyField: function() {
            this.set_enterLobbyField(null)
        },
        hasEnterLobbyField: function() {
            return this.get_enterLobbyField() != null
        },
        set_enterLobbyField: function(value) {
            return this.enterLobbyField = value
        },
        get_enterLobbyField: function() {
            return this.enterLobbyField
        },
        lobbyQueueProgressField: null,
        setLobbyQueueProgressField: function(value) {
            this.set_lobbyQueueProgressField(value);
            return this
        },
        clearLobbyQueueProgressField: function() {
            this.set_lobbyQueueProgressField(null)
        },
        hasLobbyQueueProgressField: function() {
            return this.get_lobbyQueueProgressField() != null
        },
        set_lobbyQueueProgressField: function(value) {
            return this.lobbyQueueProgressField = value
        },
        get_lobbyQueueProgressField: function() {
            return this.lobbyQueueProgressField
        },
        directionVectorField: null,
        setDirectionVectorField: function(value) {
            this.set_directionVectorField(value);
            return this
        },
        clearDirectionVectorField: function() {
            this.set_directionVectorField(null)
        },
        hasDirectionVectorField: function() {
            return this.get_directionVectorField() != null
        },
        set_directionVectorField: function(value) {
            return this.directionVectorField = value
        },
        get_directionVectorField: function() {
            return this.directionVectorField
        },
        leaderboardField: null,
        setLeaderboardField: function(value) {
            this.set_leaderboardField(value);
            return this
        },
        clearLeaderboardField: function() {
            this.set_leaderboardField(null)
        },
        hasLeaderboardField: function() {
            return this.get_leaderboardField() != null
        },
        set_leaderboardField: function(value) {
            return this.leaderboardField = value
        },
        get_leaderboardField: function() {
            return this.leaderboardField
        },
        arenaStateField: null,
        setArenaStateField: function(value) {
            this.set_arenaStateField(value);
            return this
        },
        clearArenaStateField: function() {
            this.set_arenaStateField(null)
        },
        hasArenaStateField: function() {
            return this.get_arenaStateField() != null
        },
        set_arenaStateField: function(value) {
            return this.arenaStateField = value
        },
        get_arenaStateField: function() {
            return this.arenaStateField
        },
        gameOverField: null,
        setGameOverField: function(value) {
            this.set_gameOverField(value);
            return this
        },
        clearGameOverField: function() {
            this.set_gameOverField(null)
        },
        hasGameOverField: function() {
            return this.get_gameOverField() != null
        },
        set_gameOverField: function(value) {
            return this.gameOverField = value
        },
        get_gameOverField: function() {
            return this.gameOverField
        },
        softPurchaseRequestField: null,
        setSoftPurchaseRequestField: function(value) {
            this.set_softPurchaseRequestField(value);
            return this
        },
        clearSoftPurchaseRequestField: function() {
            this.set_softPurchaseRequestField(null)
        },
        hasSoftPurchaseRequestField: function() {
            return this.get_softPurchaseRequestField() != null
        },
        set_softPurchaseRequestField: function(value) {
            return this.softPurchaseRequestField = value
        },
        get_softPurchaseRequestField: function() {
            return this.softPurchaseRequestField
        },
        softPurchaseResponseField: null,
        setSoftPurchaseResponseField: function(value) {
            this.set_softPurchaseResponseField(value);
            return this
        },
        clearSoftPurchaseResponseField: function() {
            this.set_softPurchaseResponseField(null)
        },
        hasSoftPurchaseResponseField: function() {
            return this.get_softPurchaseResponseField() != null
        },
        set_softPurchaseResponseField: function(value) {
            return this.softPurchaseResponseField = value
        },
        get_softPurchaseResponseField: function() {
            return this.softPurchaseResponseField
        },
        appleInappPurchaseRequestField: null,
        setAppleInappPurchaseRequestField: function(value) {
            this.set_appleInappPurchaseRequestField(value);
            return this
        },
        clearAppleInappPurchaseRequestField: function() {
            this.set_appleInappPurchaseRequestField(null)
        },
        hasAppleInappPurchaseRequestField: function() {
            return this.get_appleInappPurchaseRequestField() != null
        },
        set_appleInappPurchaseRequestField: function(value) {
            return this.appleInappPurchaseRequestField = value
        },
        get_appleInappPurchaseRequestField: function() {
            return this.appleInappPurchaseRequestField
        },
        googleInappPurchaseRequestField: null,
        setGoogleInappPurchaseRequestField: function(value) {
            this.set_googleInappPurchaseRequestField(value);
            return this
        },
        clearGoogleInappPurchaseRequestField: function() {
            this.set_googleInappPurchaseRequestField(null)
        },
        hasGoogleInappPurchaseRequestField: function() {
            return this.get_googleInappPurchaseRequestField() != null
        },
        set_googleInappPurchaseRequestField: function(value) {
            return this.googleInappPurchaseRequestField = value
        },
        get_googleInappPurchaseRequestField: function() {
            return this.googleInappPurchaseRequestField
        },
        inappPurchaseResponseField: null,
        setInappPurchaseResponseField: function(value) {
            this.set_inappPurchaseResponseField(value);
            return this
        },
        clearInappPurchaseResponseField: function() {
            this.set_inappPurchaseResponseField(null)
        },
        hasInappPurchaseResponseField: function() {
            return this.get_inappPurchaseResponseField() != null
        },
        set_inappPurchaseResponseField: function(value) {
            return this.inappPurchaseResponseField = value
        },
        get_inappPurchaseResponseField: function() {
            return this.inappPurchaseResponseField
        },
        walletUpdatesField: null,
        setWalletUpdatesField: function(value) {
            this.set_walletUpdatesField(value);
            return this
        },
        clearWalletUpdatesField: function() {
            this.set_walletUpdatesField(null)
        },
        hasWalletUpdatesField: function() {
            return this.get_walletUpdatesField() != null
        },
        set_walletUpdatesField: function(value) {
            return this.walletUpdatesField = value
        },
        get_walletUpdatesField: function() {
            return this.walletUpdatesField
        },
        purchaseWalletUpdatesField: null,
        setPurchaseWalletUpdatesField: function(value) {
            this.set_purchaseWalletUpdatesField(value);
            return this
        },
        clearPurchaseWalletUpdatesField: function() {
            this.set_purchaseWalletUpdatesField(null)
        },
        hasPurchaseWalletUpdatesField: function() {
            return this.get_purchaseWalletUpdatesField() != null
        },
        set_purchaseWalletUpdatesField: function(value) {
            return this.purchaseWalletUpdatesField = value
        },
        get_purchaseWalletUpdatesField: function() {
            return this.purchaseWalletUpdatesField
        },
        offerBundleRequestField: null,
        setOfferBundleRequestField: function(value) {
            this.set_offerBundleRequestField(value);
            return this
        },
        clearOfferBundleRequestField: function() {
            this.set_offerBundleRequestField(null)
        },
        hasOfferBundleRequestField: function() {
            return this.get_offerBundleRequestField() != null
        },
        set_offerBundleRequestField: function(value) {
            return this.offerBundleRequestField = value
        },
        get_offerBundleRequestField: function() {
            return this.offerBundleRequestField
        },
        offerBundleResponseField: null,
        setOfferBundleResponseField: function(value) {
            this.set_offerBundleResponseField(value);
            return this
        },
        clearOfferBundleResponseField: function() {
            this.set_offerBundleResponseField(null)
        },
        hasOfferBundleResponseField: function() {
            return this.get_offerBundleResponseField() != null
        },
        set_offerBundleResponseField: function(value) {
            return this.offerBundleResponseField = value
        },
        get_offerBundleResponseField: function() {
            return this.offerBundleResponseField
        },
        updateUserSettingsRequestField: null,
        setUpdateUserSettingsRequestField: function(value) {
            this.set_updateUserSettingsRequestField(value);
            return this
        },
        clearUpdateUserSettingsRequestField: function() {
            this.set_updateUserSettingsRequestField(null)
        },
        hasUpdateUserSettingsRequestField: function() {
            return this.get_updateUserSettingsRequestField() != null
        },
        set_updateUserSettingsRequestField: function(value) {
            return this.updateUserSettingsRequestField = value
        },
        get_updateUserSettingsRequestField: function() {
            return this.updateUserSettingsRequestField
        },
        updateUserSettingsResponseField: null,
        setUpdateUserSettingsResponseField: function(value) {
            this.set_updateUserSettingsResponseField(value);
            return this
        },
        clearUpdateUserSettingsResponseField: function() {
            this.set_updateUserSettingsResponseField(null)
        },
        hasUpdateUserSettingsResponseField: function() {
            return this.get_updateUserSettingsResponseField() != null
        },
        set_updateUserSettingsResponseField: function(value) {
            return this.updateUserSettingsResponseField = value
        },
        get_updateUserSettingsResponseField: function() {
            return this.updateUserSettingsResponseField
        },
        serverToServerGameOverWrapperField: null,
        setServerToServerGameOverWrapperField: function(value) {
            this.set_serverToServerGameOverWrapperField(value);
            return this
        },
        clearServerToServerGameOverWrapperField: function() {
            this.set_serverToServerGameOverWrapperField(null)
        },
        hasServerToServerGameOverWrapperField: function() {
            return this.get_serverToServerGameOverWrapperField() != null
        },
        set_serverToServerGameOverWrapperField: function(value) {
            return this.serverToServerGameOverWrapperField = value
        },
        get_serverToServerGameOverWrapperField: function() {
            return this.serverToServerGameOverWrapperField
        },
        claimGiftsRequestField: null,
        setClaimGiftsRequestField: function(value) {
            this.set_claimGiftsRequestField(value);
            return this
        },
        clearClaimGiftsRequestField: function() {
            this.set_claimGiftsRequestField(null)
        },
        hasClaimGiftsRequestField: function() {
            return this.get_claimGiftsRequestField() != null
        },
        set_claimGiftsRequestField: function(value) {
            return this.claimGiftsRequestField = value
        },
        get_claimGiftsRequestField: function() {
            return this.claimGiftsRequestField
        },
        claimGiftsResponseField: null,
        setClaimGiftsResponseField: function(value) {
            this.set_claimGiftsResponseField(value);
            return this
        },
        clearClaimGiftsResponseField: function() {
            this.set_claimGiftsResponseField(null)
        },
        hasClaimGiftsResponseField: function() {
            return this.get_claimGiftsResponseField() != null
        },
        set_claimGiftsResponseField: function(value) {
            return this.claimGiftsResponseField = value
        },
        get_claimGiftsResponseField: function() {
            return this.claimGiftsResponseField
        },
        sendGiftsField: null,
        setSendGiftsField: function(value) {
            this.set_sendGiftsField(value);
            return this
        },
        clearSendGiftsField: function() {
            this.set_sendGiftsField(null)
        },
        hasSendGiftsField: function() {
            return this.get_sendGiftsField() != null
        },
        set_sendGiftsField: function(value) {
            return this.sendGiftsField = value
        },
        get_sendGiftsField: function() {
            return this.sendGiftsField
        },
        consumeRequestsField: null,
        setConsumeRequestsField: function(value) {
            this.set_consumeRequestsField(value);
            return this
        },
        clearConsumeRequestsField: function() {
            this.set_consumeRequestsField(null)
        },
        hasConsumeRequestsField: function() {
            return this.get_consumeRequestsField() != null
        },
        set_consumeRequestsField: function(value) {
            return this.consumeRequestsField = value
        },
        get_consumeRequestsField: function() {
            return this.consumeRequestsField
        },
        requestGiftsField: null,
        setRequestGiftsField: function(value) {
            this.set_requestGiftsField(value);
            return this
        },
        clearRequestGiftsField: function() {
            this.set_requestGiftsField(null)
        },
        hasRequestGiftsField: function() {
            return this.get_requestGiftsField() != null
        },
        set_requestGiftsField: function(value) {
            return this.requestGiftsField = value
        },
        get_requestGiftsField: function() {
            return this.requestGiftsField
        },
        activateTimedEventRequestField: null,
        setActivateTimedEventRequestField: function(value) {
            this.set_activateTimedEventRequestField(value);
            return this
        },
        clearActivateTimedEventRequestField: function() {
            this.set_activateTimedEventRequestField(null)
        },
        hasActivateTimedEventRequestField: function() {
            return this.get_activateTimedEventRequestField() != null
        },
        set_activateTimedEventRequestField: function(value) {
            return this.activateTimedEventRequestField = value
        },
        get_activateTimedEventRequestField: function() {
            return this.activateTimedEventRequestField
        },
        activateTimedEventResponseField: null,
        setActivateTimedEventResponseField: function(value) {
            this.set_activateTimedEventResponseField(value);
            return this
        },
        clearActivateTimedEventResponseField: function() {
            this.set_activateTimedEventResponseField(null)
        },
        hasActivateTimedEventResponseField: function() {
            return this.get_activateTimedEventResponseField() != null
        },
        set_activateTimedEventResponseField: function(value) {
            return this.activateTimedEventResponseField = value
        },
        get_activateTimedEventResponseField: function() {
            return this.activateTimedEventResponseField
        },
        activateBoostRequestField: null,
        setActivateBoostRequestField: function(value) {
            this.set_activateBoostRequestField(value);
            return this
        },
        clearActivateBoostRequestField: function() {
            this.set_activateBoostRequestField(null)
        },
        hasActivateBoostRequestField: function() {
            return this.get_activateBoostRequestField() != null
        },
        set_activateBoostRequestField: function(value) {
            return this.activateBoostRequestField = value
        },
        get_activateBoostRequestField: function() {
            return this.activateBoostRequestField
        },
        activateBoostResponseField: null,
        setActivateBoostResponseField: function(value) {
            this.set_activateBoostResponseField(value);
            return this
        },
        clearActivateBoostResponseField: function() {
            this.set_activateBoostResponseField(null)
        },
        hasActivateBoostResponseField: function() {
            return this.get_activateBoostResponseField() != null
        },
        set_activateBoostResponseField: function(value) {
            return this.activateBoostResponseField = value
        },
        get_activateBoostResponseField: function() {
            return this.activateBoostResponseField
        },
        activateQuestRequestField: null,
        setActivateQuestRequestField: function(value) {
            this.set_activateQuestRequestField(value);
            return this
        },
        clearActivateQuestRequestField: function() {
            this.set_activateQuestRequestField(null)
        },
        hasActivateQuestRequestField: function() {
            return this.get_activateQuestRequestField() != null
        },
        set_activateQuestRequestField: function(value) {
            return this.activateQuestRequestField = value
        },
        get_activateQuestRequestField: function() {
            return this.activateQuestRequestField
        },
        activateQuestResponseField: null,
        setActivateQuestResponseField: function(value) {
            this.set_activateQuestResponseField(value);
            return this
        },
        clearActivateQuestResponseField: function() {
            this.set_activateQuestResponseField(null)
        },
        hasActivateQuestResponseField: function() {
            return this.get_activateQuestResponseField() != null
        },
        set_activateQuestResponseField: function(value) {
            return this.activateQuestResponseField = value
        },
        get_activateQuestResponseField: function() {
            return this.activateQuestResponseField
        },
        userTimedEventUpdatesField: null,
        setUserTimedEventUpdatesField: function(value) {
            this.set_userTimedEventUpdatesField(value);
            return this
        },
        clearUserTimedEventUpdatesField: function() {
            this.set_userTimedEventUpdatesField(null)
        },
        hasUserTimedEventUpdatesField: function() {
            return this.get_userTimedEventUpdatesField() != null
        },
        set_userTimedEventUpdatesField: function(value) {
            return this.userTimedEventUpdatesField = value
        },
        get_userTimedEventUpdatesField: function() {
            return this.userTimedEventUpdatesField
        },
        openPotionForProductRequestField: null,
        setOpenPotionForProductRequestField: function(value) {
            this.set_openPotionForProductRequestField(value);
            return this
        },
        clearOpenPotionForProductRequestField: function() {
            this.set_openPotionForProductRequestField(null)
        },
        hasOpenPotionForProductRequestField: function() {
            return this.get_openPotionForProductRequestField() != null
        },
        set_openPotionForProductRequestField: function(value) {
            return this.openPotionForProductRequestField = value
        },
        get_openPotionForProductRequestField: function() {
            return this.openPotionForProductRequestField
        },
        openPotionForProductResponseField: null,
        setOpenPotionForProductResponseField: function(value) {
            this.set_openPotionForProductResponseField(value);
            return this
        },
        clearOpenPotionForProductResponseField: function() {
            this.set_openPotionForProductResponseField(null)
        },
        hasOpenPotionForProductResponseField: function() {
            return this.get_openPotionForProductResponseField() != null
        },
        set_openPotionForProductResponseField: function(value) {
            return this.openPotionForProductResponseField = value
        },
        get_openPotionForProductResponseField: function() {
            return this.openPotionForProductResponseField
        },
        brewPotionForSlotRequestField: null,
        setBrewPotionForSlotRequestField: function(value) {
            this.set_brewPotionForSlotRequestField(value);
            return this
        },
        clearBrewPotionForSlotRequestField: function() {
            this.set_brewPotionForSlotRequestField(null)
        },
        hasBrewPotionForSlotRequestField: function() {
            return this.get_brewPotionForSlotRequestField() != null
        },
        set_brewPotionForSlotRequestField: function(value) {
            return this.brewPotionForSlotRequestField = value
        },
        get_brewPotionForSlotRequestField: function() {
            return this.brewPotionForSlotRequestField
        },
        brewPotionForSlotResponseField: null,
        setBrewPotionForSlotResponseField: function(value) {
            this.set_brewPotionForSlotResponseField(value);
            return this
        },
        clearBrewPotionForSlotResponseField: function() {
            this.set_brewPotionForSlotResponseField(null)
        },
        hasBrewPotionForSlotResponseField: function() {
            return this.get_brewPotionForSlotResponseField() != null
        },
        set_brewPotionForSlotResponseField: function(value) {
            return this.brewPotionForSlotResponseField = value
        },
        get_brewPotionForSlotResponseField: function() {
            return this.brewPotionForSlotResponseField
        },
        openPotionForSlotRequestField: null,
        setOpenPotionForSlotRequestField: function(value) {
            this.set_openPotionForSlotRequestField(value);
            return this
        },
        clearOpenPotionForSlotRequestField: function() {
            this.set_openPotionForSlotRequestField(null)
        },
        hasOpenPotionForSlotRequestField: function() {
            return this.get_openPotionForSlotRequestField() != null
        },
        set_openPotionForSlotRequestField: function(value) {
            return this.openPotionForSlotRequestField = value
        },
        get_openPotionForSlotRequestField: function() {
            return this.openPotionForSlotRequestField
        },
        openPotionForSlotResponseField: null,
        setOpenPotionForSlotResponseField: function(value) {
            this.set_openPotionForSlotResponseField(value);
            return this
        },
        clearOpenPotionForSlotResponseField: function() {
            this.set_openPotionForSlotResponseField(null)
        },
        hasOpenPotionForSlotResponseField: function() {
            return this.get_openPotionForSlotResponseField() != null
        },
        set_openPotionForSlotResponseField: function(value) {
            return this.openPotionForSlotResponseField = value
        },
        get_openPotionForSlotResponseField: function() {
            return this.openPotionForSlotResponseField
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_type());
            if (this.get_loginRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 10);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_loginRequestField())
            }
            if (this.get_loginResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 11);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_loginResponseField())
            }
            if (this.get_realmUpgradeRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 12);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_realmUpgradeRequestField())
            }
            if (this.get_realmUpgradeResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 13);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_realmUpgradeResponseField())
            }
            if (this.get_connectRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 14);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_connectRequestField())
            }
            if (this.get_connectResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 15);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_connectResponseField())
            }
            if (this.get_disconnectField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 20);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_disconnectField())
            }
            if (this.get_reconnectField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 21);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_reconnectField())
            }
            if (this.get_pingField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 30);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_pingField())
            }
            if (this.get_pongField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 31);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_pongField())
            }
            if (this.get_udpHandshakeField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 32);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_udpHandshakeField())
            }
            if (this.get_configurationChangeField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 33);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_configurationChangeField())
            }
            if (this.get_serverGoingOfflineField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 34);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_serverGoingOfflineField())
            }
            if (this.get_enterGameField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 40);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_enterGameField())
            }
            if (this.get_gameJoinedField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 41);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_gameJoinedField())
            }
            if (this.get_enterLobbyField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 43);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_enterLobbyField())
            }
            if (this.get_lobbyQueueProgressField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 45);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_lobbyQueueProgressField())
            }
            if (this.get_directionVectorField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 50);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_directionVectorField())
            }
            if (this.get_leaderboardField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 60);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_leaderboardField())
            }
            if (this.get_arenaStateField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 61);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_arenaStateField())
            }
            if (this.get_gameOverField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 62);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_gameOverField())
            }
            if (this.get_softPurchaseRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 70);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_softPurchaseRequestField())
            }
            if (this.get_softPurchaseResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 71);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_softPurchaseResponseField())
            }
            if (this.get_appleInappPurchaseRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 72);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_appleInappPurchaseRequestField())
            }
            if (this.get_googleInappPurchaseRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 73);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_googleInappPurchaseRequestField())
            }
            if (this.get_inappPurchaseResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 74);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_inappPurchaseResponseField())
            }
            if (this.get_walletUpdatesField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 75);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_walletUpdatesField())
            }
            if (this.get_purchaseWalletUpdatesField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 76);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_purchaseWalletUpdatesField())
            }
            if (this.get_offerBundleRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 77);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_offerBundleRequestField())
            }
            if (this.get_offerBundleResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 78);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_offerBundleResponseField())
            }
            if (this.get_updateUserSettingsRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 80);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_updateUserSettingsRequestField())
            }
            if (this.get_updateUserSettingsResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 81);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_updateUserSettingsResponseField())
            }
            if (this.get_serverToServerGameOverWrapperField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 90);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_serverToServerGameOverWrapperField())
            }
            if (this.get_claimGiftsRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 100);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_claimGiftsRequestField())
            }
            if (this.get_claimGiftsResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 101);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_claimGiftsResponseField())
            }
            if (this.get_sendGiftsField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 102);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_sendGiftsField())
            }
            if (this.get_consumeRequestsField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 103);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_consumeRequestsField())
            }
            if (this.get_requestGiftsField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 104);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_requestGiftsField())
            }
            if (this.get_activateTimedEventRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 110);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_activateTimedEventRequestField())
            }
            if (this.get_activateTimedEventResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 111);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_activateTimedEventResponseField())
            }
            if (this.get_activateBoostRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 112);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_activateBoostRequestField())
            }
            if (this.get_activateBoostResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 113);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_activateBoostResponseField())
            }
            if (this.get_activateQuestRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 114);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_activateQuestRequestField())
            }
            if (this.get_activateQuestResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 115);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_activateQuestResponseField())
            }
            if (this.get_userTimedEventUpdatesField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 116);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_userTimedEventUpdatesField())
            }
            if (this.get_openPotionForProductRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 120);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_openPotionForProductRequestField())
            }
            if (this.get_openPotionForProductResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 121);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_openPotionForProductResponseField())
            }
            if (this.get_brewPotionForSlotRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 122);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_brewPotionForSlotRequestField())
            }
            if (this.get_brewPotionForSlotResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 123);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_brewPotionForSlotResponseField())
            }
            if (this.get_openPotionForSlotRequestField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 124);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_openPotionForSlotRequestField())
            }
            if (this.get_openPotionForSlotResponseField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 125);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_openPotionForSlotResponseField())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("type", this.get_type());
            if (this.get_loginRequestField() != null) {
                fn("loginRequestField", this.get_loginRequestField())
            }
            if (this.get_loginResponseField() != null) {
                fn("loginResponseField", this.get_loginResponseField())
            }
            if (this.get_realmUpgradeRequestField() != null) {
                fn("realmUpgradeRequestField", this.get_realmUpgradeRequestField())
            }
            if (this.get_realmUpgradeResponseField() != null) {
                fn("realmUpgradeResponseField", this.get_realmUpgradeResponseField())
            }
            if (this.get_connectRequestField() != null) {
                fn("connectRequestField", this.get_connectRequestField())
            }
            if (this.get_connectResponseField() != null) {
                fn("connectResponseField", this.get_connectResponseField())
            }
            if (this.get_disconnectField() != null) {
                fn("disconnectField", this.get_disconnectField())
            }
            if (this.get_reconnectField() != null) {
                fn("reconnectField", this.get_reconnectField())
            }
            if (this.get_pingField() != null) {
                fn("pingField", this.get_pingField())
            }
            if (this.get_pongField() != null) {
                fn("pongField", this.get_pongField())
            }
            if (this.get_udpHandshakeField() != null) {
                fn("udpHandshakeField", this.get_udpHandshakeField())
            }
            if (this.get_configurationChangeField() != null) {
                fn("configurationChangeField", this.get_configurationChangeField())
            }
            if (this.get_serverGoingOfflineField() != null) {
                fn("serverGoingOfflineField", this.get_serverGoingOfflineField())
            }
            if (this.get_enterGameField() != null) {
                fn("enterGameField", this.get_enterGameField())
            }
            if (this.get_gameJoinedField() != null) {
                fn("gameJoinedField", this.get_gameJoinedField())
            }
            if (this.get_enterLobbyField() != null) {
                fn("enterLobbyField", this.get_enterLobbyField())
            }
            if (this.get_lobbyQueueProgressField() != null) {
                fn("lobbyQueueProgressField", this.get_lobbyQueueProgressField())
            }
            if (this.get_directionVectorField() != null) {
                fn("directionVectorField", this.get_directionVectorField())
            }
            if (this.get_leaderboardField() != null) {
                fn("leaderboardField", this.get_leaderboardField())
            }
            if (this.get_arenaStateField() != null) {
                fn("arenaStateField", this.get_arenaStateField())
            }
            if (this.get_gameOverField() != null) {
                fn("gameOverField", this.get_gameOverField())
            }
            if (this.get_softPurchaseRequestField() != null) {
                fn("softPurchaseRequestField", this.get_softPurchaseRequestField())
            }
            if (this.get_softPurchaseResponseField() != null) {
                fn("softPurchaseResponseField", this.get_softPurchaseResponseField())
            }
            if (this.get_appleInappPurchaseRequestField() != null) {
                fn("appleInappPurchaseRequestField", this.get_appleInappPurchaseRequestField())
            }
            if (this.get_googleInappPurchaseRequestField() != null) {
                fn("googleInappPurchaseRequestField", this.get_googleInappPurchaseRequestField())
            }
            if (this.get_inappPurchaseResponseField() != null) {
                fn("inappPurchaseResponseField", this.get_inappPurchaseResponseField())
            }
            if (this.get_walletUpdatesField() != null) {
                fn("walletUpdatesField", this.get_walletUpdatesField())
            }
            if (this.get_purchaseWalletUpdatesField() != null) {
                fn("purchaseWalletUpdatesField", this.get_purchaseWalletUpdatesField())
            }
            if (this.get_offerBundleRequestField() != null) {
                fn("offerBundleRequestField", this.get_offerBundleRequestField())
            }
            if (this.get_offerBundleResponseField() != null) {
                fn("offerBundleResponseField", this.get_offerBundleResponseField())
            }
            if (this.get_updateUserSettingsRequestField() != null) {
                fn("updateUserSettingsRequestField", this.get_updateUserSettingsRequestField())
            }
            if (this.get_updateUserSettingsResponseField() != null) {
                fn("updateUserSettingsResponseField", this.get_updateUserSettingsResponseField())
            }
            if (this.get_serverToServerGameOverWrapperField() != null) {
                fn("serverToServerGameOverWrapperField", this.get_serverToServerGameOverWrapperField())
            }
            if (this.get_claimGiftsRequestField() != null) {
                fn("claimGiftsRequestField", this.get_claimGiftsRequestField())
            }
            if (this.get_claimGiftsResponseField() != null) {
                fn("claimGiftsResponseField", this.get_claimGiftsResponseField())
            }
            if (this.get_sendGiftsField() != null) {
                fn("sendGiftsField", this.get_sendGiftsField())
            }
            if (this.get_consumeRequestsField() != null) {
                fn("consumeRequestsField", this.get_consumeRequestsField())
            }
            if (this.get_requestGiftsField() != null) {
                fn("requestGiftsField", this.get_requestGiftsField())
            }
            if (this.get_activateTimedEventRequestField() != null) {
                fn("activateTimedEventRequestField", this.get_activateTimedEventRequestField())
            }
            if (this.get_activateTimedEventResponseField() != null) {
                fn("activateTimedEventResponseField", this.get_activateTimedEventResponseField())
            }
            if (this.get_activateBoostRequestField() != null) {
                fn("activateBoostRequestField", this.get_activateBoostRequestField())
            }
            if (this.get_activateBoostResponseField() != null) {
                fn("activateBoostResponseField", this.get_activateBoostResponseField())
            }
            if (this.get_activateQuestRequestField() != null) {
                fn("activateQuestRequestField", this.get_activateQuestRequestField())
            }
            if (this.get_activateQuestResponseField() != null) {
                fn("activateQuestResponseField", this.get_activateQuestResponseField())
            }
            if (this.get_userTimedEventUpdatesField() != null) {
                fn("userTimedEventUpdatesField", this.get_userTimedEventUpdatesField())
            }
            if (this.get_openPotionForProductRequestField() != null) {
                fn("openPotionForProductRequestField", this.get_openPotionForProductRequestField())
            }
            if (this.get_openPotionForProductResponseField() != null) {
                fn("openPotionForProductResponseField", this.get_openPotionForProductResponseField())
            }
            if (this.get_brewPotionForSlotRequestField() != null) {
                fn("brewPotionForSlotRequestField", this.get_brewPotionForSlotRequestField())
            }
            if (this.get_brewPotionForSlotResponseField() != null) {
                fn("brewPotionForSlotResponseField", this.get_brewPotionForSlotResponseField())
            }
            if (this.get_openPotionForSlotRequestField() != null) {
                fn("openPotionForSlotRequestField", this.get_openPotionForSlotRequestField())
            }
            if (this.get_openPotionForSlotResponseField() != null) {
                fn("openPotionForSlotResponseField", this.get_openPotionForSlotResponseField())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var type__count = 0;
            var login_request_field__count = 0;
            var login_response_field__count = 0;
            var realm_upgrade_request_field__count = 0;
            var realm_upgrade_response_field__count = 0;
            var connect_request_field__count = 0;
            var connect_response_field__count = 0;
            var disconnect_field__count = 0;
            var reconnect_field__count = 0;
            var ping_field__count = 0;
            var pong_field__count = 0;
            var udp_handshake_field__count = 0;
            var configuration_change_field__count = 0;
            var server_going_offline_field__count = 0;
            var enter_game_field__count = 0;
            var game_joined_field__count = 0;
            var enter_lobby_field__count = 0;
            var lobby_queue_progress_field__count = 0;
            var direction_vector_field__count = 0;
            var leaderboard_field__count = 0;
            var arena_state_field__count = 0;
            var game_over_field__count = 0;
            var soft_purchase_request_field__count = 0;
            var soft_purchase_response_field__count = 0;
            var apple_inapp_purchase_request_field__count = 0;
            var google_inapp_purchase_request_field__count = 0;
            var inapp_purchase_response_field__count = 0;
            var wallet_updates_field__count = 0;
            var purchase_wallet_updates_field__count = 0;
            var offer_bundle_request_field__count = 0;
            var offer_bundle_response_field__count = 0;
            var update_user_settings_request_field__count = 0;
            var update_user_settings_response_field__count = 0;
            var server_to_server_game_over_wrapper_field__count = 0;
            var claim_gifts_request_field__count = 0;
            var claim_gifts_response_field__count = 0;
            var send_gifts_field__count = 0;
            var consume_requests_field__count = 0;
            var request_gifts_field__count = 0;
            var activate_timed_event_request_field__count = 0;
            var activate_timed_event_response_field__count = 0;
            var activate_boost_request_field__count = 0;
            var activate_boost_response_field__count = 0;
            var activate_quest_request_field__count = 0;
            var activate_quest_response_field__count = 0;
            var user_timed_event_updates_field__count = 0;
            var open_potion_for_product_request_field__count = 0;
            var open_potion_for_product_response_field__count = 0;
            var brew_potion_for_slot_request_field__count = 0;
            var brew_potion_for_slot_response_field__count = 0;
            var open_potion_for_slot_request_field__count = 0;
            var open_potion_for_slot_response_field__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.type cannot be set twice."))
                        }++type__count;
                        this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 10:
                        if (login_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.loginRequestField cannot be set twice."))
                        }++login_request_field__count;
                        this.set_loginRequestField(new agario_proto_Login_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_loginRequestField());
                        break;
                    case 11:
                        if (login_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.loginResponseField cannot be set twice."))
                        }++login_response_field__count;
                        this.set_loginResponseField(new agario_proto_Login_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_loginResponseField());
                        break;
                    case 12:
                        if (realm_upgrade_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.realmUpgradeRequestField cannot be set twice."))
                        }++realm_upgrade_request_field__count;
                        this.set_realmUpgradeRequestField(new agario_proto_Realm_$upgrade_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_realmUpgradeRequestField());
                        break;
                    case 13:
                        if (realm_upgrade_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.realmUpgradeResponseField cannot be set twice."))
                        }++realm_upgrade_response_field__count;
                        this.set_realmUpgradeResponseField(new agario_proto_Realm_$upgrade_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_realmUpgradeResponseField());
                        break;
                    case 14:
                        if (connect_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.connectRequestField cannot be set twice."))
                        }++connect_request_field__count;
                        this.set_connectRequestField(new agario_proto_Connect_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_connectRequestField());
                        break;
                    case 15:
                        if (connect_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.connectResponseField cannot be set twice."))
                        }++connect_response_field__count;
                        this.set_connectResponseField(new agario_proto_Connect_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_connectResponseField());
                        break;
                    case 20:
                        if (disconnect_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.disconnectField cannot be set twice."))
                        }++disconnect_field__count;
                        this.set_disconnectField(new agario_proto_Disconnect());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_disconnectField());
                        break;
                    case 21:
                        if (reconnect_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.reconnectField cannot be set twice."))
                        }++reconnect_field__count;
                        this.set_reconnectField(new agario_proto_Reconnect());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_reconnectField());
                        break;
                    case 30:
                        if (ping_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.pingField cannot be set twice."))
                        }++ping_field__count;
                        this.set_pingField(new agario_proto_Ping());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_pingField());
                        break;
                    case 31:
                        if (pong_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.pongField cannot be set twice."))
                        }++pong_field__count;
                        this.set_pongField(new agario_proto_Pong());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_pongField());
                        break;
                    case 32:
                        if (udp_handshake_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.udpHandshakeField cannot be set twice."))
                        }++udp_handshake_field__count;
                        this.set_udpHandshakeField(new agario_proto_Udp_$handshake());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_udpHandshakeField());
                        break;
                    case 33:
                        if (configuration_change_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.configurationChangeField cannot be set twice."))
                        }++configuration_change_field__count;
                        this.set_configurationChangeField(new agario_proto_Configuration_$change());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_configurationChangeField());
                        break;
                    case 34:
                        if (server_going_offline_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.serverGoingOfflineField cannot be set twice."))
                        }++server_going_offline_field__count;
                        this.set_serverGoingOfflineField(new agario_proto_Server_$going_$offline());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_serverGoingOfflineField());
                        break;
                    case 40:
                        if (enter_game_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.enterGameField cannot be set twice."))
                        }++enter_game_field__count;
                        this.set_enterGameField(new agario_proto_Enter_$game());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_enterGameField());
                        break;
                    case 41:
                        if (game_joined_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.gameJoinedField cannot be set twice."))
                        }++game_joined_field__count;
                        this.set_gameJoinedField(new agario_proto_Game_$joined());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_gameJoinedField());
                        break;
                    case 43:
                        if (enter_lobby_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.enterLobbyField cannot be set twice."))
                        }++enter_lobby_field__count;
                        this.set_enterLobbyField(new agario_proto_Enter_$lobby());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_enterLobbyField());
                        break;
                    case 45:
                        if (lobby_queue_progress_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.lobbyQueueProgressField cannot be set twice."))
                        }++lobby_queue_progress_field__count;
                        this.set_lobbyQueueProgressField(new agario_proto_Lobby_$queue_$progress());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_lobbyQueueProgressField());
                        break;
                    case 50:
                        if (direction_vector_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.directionVectorField cannot be set twice."))
                        }++direction_vector_field__count;
                        this.set_directionVectorField(new agario_proto_Direction_$vector());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_directionVectorField());
                        break;
                    case 60:
                        if (leaderboard_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.leaderboardField cannot be set twice."))
                        }++leaderboard_field__count;
                        this.set_leaderboardField(new agario_proto_Leaderboard());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_leaderboardField());
                        break;
                    case 61:
                        if (arena_state_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.arenaStateField cannot be set twice."))
                        }++arena_state_field__count;
                        this.set_arenaStateField(new agario_proto_Arena_$state());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_arenaStateField());
                        break;
                    case 62:
                        if (game_over_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.gameOverField cannot be set twice."))
                        }++game_over_field__count;
                        this.set_gameOverField(new agario_proto_Game_$over());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_gameOverField());
                        break;
                    case 70:
                        if (soft_purchase_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.softPurchaseRequestField cannot be set twice."))
                        }++soft_purchase_request_field__count;
                        this.set_softPurchaseRequestField(new agario_proto_Soft_$purchase_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_softPurchaseRequestField());
                        break;
                    case 71:
                        if (soft_purchase_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.softPurchaseResponseField cannot be set twice."))
                        }++soft_purchase_response_field__count;
                        this.set_softPurchaseResponseField(new agario_proto_Soft_$purchase_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_softPurchaseResponseField());
                        break;
                    case 72:
                        if (apple_inapp_purchase_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.appleInappPurchaseRequestField cannot be set twice."))
                        }++apple_inapp_purchase_request_field__count;
                        this.set_appleInappPurchaseRequestField(new agario_proto_Apple_$inapp_$purchase_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_appleInappPurchaseRequestField());
                        break;
                    case 73:
                        if (google_inapp_purchase_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.googleInappPurchaseRequestField cannot be set twice."))
                        }++google_inapp_purchase_request_field__count;
                        this.set_googleInappPurchaseRequestField(new agario_proto_Google_$inapp_$purchase_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_googleInappPurchaseRequestField());
                        break;
                    case 74:
                        if (inapp_purchase_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.inappPurchaseResponseField cannot be set twice."))
                        }++inapp_purchase_response_field__count;
                        this.set_inappPurchaseResponseField(new agario_proto_Inapp_$purchase_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_inappPurchaseResponseField());
                        break;
                    case 75:
                        if (wallet_updates_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.walletUpdatesField cannot be set twice."))
                        }++wallet_updates_field__count;
                        this.set_walletUpdatesField(new agario_proto_Wallet_$updates());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_walletUpdatesField());
                        break;
                    case 76:
                        if (purchase_wallet_updates_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.purchaseWalletUpdatesField cannot be set twice."))
                        }++purchase_wallet_updates_field__count;
                        this.set_purchaseWalletUpdatesField(new agario_proto_Purchase_$wallet_$updates());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_purchaseWalletUpdatesField());
                        break;
                    case 77:
                        if (offer_bundle_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.offerBundleRequestField cannot be set twice."))
                        }++offer_bundle_request_field__count;
                        this.set_offerBundleRequestField(new agario_proto_Offer_$bundle_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_offerBundleRequestField());
                        break;
                    case 78:
                        if (offer_bundle_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.offerBundleResponseField cannot be set twice."))
                        }++offer_bundle_response_field__count;
                        this.set_offerBundleResponseField(new agario_proto_Offer_$bundle_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_offerBundleResponseField());
                        break;
                    case 80:
                        if (update_user_settings_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.updateUserSettingsRequestField cannot be set twice."))
                        }++update_user_settings_request_field__count;
                        this.set_updateUserSettingsRequestField(new agario_proto_Update_$user_$settings_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_updateUserSettingsRequestField());
                        break;
                    case 81:
                        if (update_user_settings_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.updateUserSettingsResponseField cannot be set twice."))
                        }++update_user_settings_response_field__count;
                        this.set_updateUserSettingsResponseField(new agario_proto_Update_$user_$settings_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_updateUserSettingsResponseField());
                        break;
                    case 90:
                        if (server_to_server_game_over_wrapper_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.serverToServerGameOverWrapperField cannot be set twice."))
                        }++server_to_server_game_over_wrapper_field__count;
                        this.set_serverToServerGameOverWrapperField(new agario_proto_Server_$to_$server_$game_$over_$wrapper());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_serverToServerGameOverWrapperField());
                        break;
                    case 100:
                        if (claim_gifts_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.claimGiftsRequestField cannot be set twice."))
                        }++claim_gifts_request_field__count;
                        this.set_claimGiftsRequestField(new agario_proto_Claim_$gifts_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_claimGiftsRequestField());
                        break;
                    case 101:
                        if (claim_gifts_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.claimGiftsResponseField cannot be set twice."))
                        }++claim_gifts_response_field__count;
                        this.set_claimGiftsResponseField(new agario_proto_Claim_$gifts_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_claimGiftsResponseField());
                        break;
                    case 102:
                        if (send_gifts_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.sendGiftsField cannot be set twice."))
                        }++send_gifts_field__count;
                        this.set_sendGiftsField(new agario_proto_Send_$gifts());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_sendGiftsField());
                        break;
                    case 103:
                        if (consume_requests_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.consumeRequestsField cannot be set twice."))
                        }++consume_requests_field__count;
                        this.set_consumeRequestsField(new agario_proto_Consume_$requests());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_consumeRequestsField());
                        break;
                    case 104:
                        if (request_gifts_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.requestGiftsField cannot be set twice."))
                        }++request_gifts_field__count;
                        this.set_requestGiftsField(new agario_proto_Request_$gifts());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_requestGiftsField());
                        break;
                    case 110:
                        if (activate_timed_event_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateTimedEventRequestField cannot be set twice."))
                        }++activate_timed_event_request_field__count;
                        this.set_activateTimedEventRequestField(new agario_proto_Activate_$timed_$event_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_activateTimedEventRequestField());
                        break;
                    case 111:
                        if (activate_timed_event_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateTimedEventResponseField cannot be set twice."))
                        }++activate_timed_event_response_field__count;
                        this.set_activateTimedEventResponseField(new agario_proto_Activate_$timed_$event_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_activateTimedEventResponseField());
                        break;
                    case 112:
                        if (activate_boost_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateBoostRequestField cannot be set twice."))
                        }++activate_boost_request_field__count;
                        this.set_activateBoostRequestField(new agario_proto_Activate_$boost_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_activateBoostRequestField());
                        break;
                    case 113:
                        if (activate_boost_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateBoostResponseField cannot be set twice."))
                        }++activate_boost_response_field__count;
                        this.set_activateBoostResponseField(new agario_proto_Activate_$boost_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_activateBoostResponseField());
                        break;
                    case 114:
                        if (activate_quest_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateQuestRequestField cannot be set twice."))
                        }++activate_quest_request_field__count;
                        this.set_activateQuestRequestField(new agario_proto_Activate_$quest_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_activateQuestRequestField());
                        break;
                    case 115:
                        if (activate_quest_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateQuestResponseField cannot be set twice."))
                        }++activate_quest_response_field__count;
                        this.set_activateQuestResponseField(new agario_proto_Activate_$quest_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_activateQuestResponseField());
                        break;
                    case 116:
                        if (user_timed_event_updates_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.userTimedEventUpdatesField cannot be set twice."))
                        }++user_timed_event_updates_field__count;
                        this.set_userTimedEventUpdatesField(new agario_proto_User_$timed_$event_$updates());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_userTimedEventUpdatesField());
                        break;
                    case 120:
                        if (open_potion_for_product_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.openPotionForProductRequestField cannot be set twice."))
                        }++open_potion_for_product_request_field__count;
                        this.set_openPotionForProductRequestField(new agario_proto_Open_$potion_$for_$product_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_openPotionForProductRequestField());
                        break;
                    case 121:
                        if (open_potion_for_product_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.openPotionForProductResponseField cannot be set twice."))
                        }++open_potion_for_product_response_field__count;
                        this.set_openPotionForProductResponseField(new agario_proto_Open_$potion_$for_$product_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_openPotionForProductResponseField());
                        break;
                    case 122:
                        if (brew_potion_for_slot_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.brewPotionForSlotRequestField cannot be set twice."))
                        }++brew_potion_for_slot_request_field__count;
                        this.set_brewPotionForSlotRequestField(new agario_proto_Brew_$potion_$for_$slot_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_brewPotionForSlotRequestField());
                        break;
                    case 123:
                        if (brew_potion_for_slot_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.brewPotionForSlotResponseField cannot be set twice."))
                        }++brew_potion_for_slot_response_field__count;
                        this.set_brewPotionForSlotResponseField(new agario_proto_Brew_$potion_$for_$slot_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_brewPotionForSlotResponseField());
                        break;
                    case 124:
                        if (open_potion_for_slot_request_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.openPotionForSlotRequestField cannot be set twice."))
                        }++open_potion_for_slot_request_field__count;
                        this.set_openPotionForSlotRequestField(new agario_proto_Open_$potion_$for_$slot_$request());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_openPotionForSlotRequestField());
                        break;
                    case 125:
                        if (open_potion_for_slot_response_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.openPotionForSlotResponseField cannot be set twice."))
                        }++open_potion_for_slot_response_field__count;
                        this.set_openPotionForSlotResponseField(new agario_proto_Open_$potion_$for_$slot_$response());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_openPotionForSlotResponseField());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Req,
        __properties__: {
            set_openPotionForSlotResponseField: "set_openPotionForSlotResponseField",
            get_openPotionForSlotResponseField: "get_openPotionForSlotResponseField",
            set_openPotionForSlotRequestField: "set_openPotionForSlotRequestField",
            get_openPotionForSlotRequestField: "get_openPotionForSlotRequestField",
            set_brewPotionForSlotResponseField: "set_brewPotionForSlotResponseField",
            get_brewPotionForSlotResponseField: "get_brewPotionForSlotResponseField",
            set_brewPotionForSlotRequestField: "set_brewPotionForSlotRequestField",
            get_brewPotionForSlotRequestField: "get_brewPotionForSlotRequestField",
            set_openPotionForProductResponseField: "set_openPotionForProductResponseField",
            get_openPotionForProductResponseField: "get_openPotionForProductResponseField",
            set_openPotionForProductRequestField: "set_openPotionForProductRequestField",
            get_openPotionForProductRequestField: "get_openPotionForProductRequestField",
            set_userTimedEventUpdatesField: "set_userTimedEventUpdatesField",
            get_userTimedEventUpdatesField: "get_userTimedEventUpdatesField",
            set_activateQuestResponseField: "set_activateQuestResponseField",
            get_activateQuestResponseField: "get_activateQuestResponseField",
            set_activateQuestRequestField: "set_activateQuestRequestField",
            get_activateQuestRequestField: "get_activateQuestRequestField",
            set_activateBoostResponseField: "set_activateBoostResponseField",
            get_activateBoostResponseField: "get_activateBoostResponseField",
            set_activateBoostRequestField: "set_activateBoostRequestField",
            get_activateBoostRequestField: "get_activateBoostRequestField",
            set_activateTimedEventResponseField: "set_activateTimedEventResponseField",
            get_activateTimedEventResponseField: "get_activateTimedEventResponseField",
            set_activateTimedEventRequestField: "set_activateTimedEventRequestField",
            get_activateTimedEventRequestField: "get_activateTimedEventRequestField",
            set_requestGiftsField: "set_requestGiftsField",
            get_requestGiftsField: "get_requestGiftsField",
            set_consumeRequestsField: "set_consumeRequestsField",
            get_consumeRequestsField: "get_consumeRequestsField",
            set_sendGiftsField: "set_sendGiftsField",
            get_sendGiftsField: "get_sendGiftsField",
            set_claimGiftsResponseField: "set_claimGiftsResponseField",
            get_claimGiftsResponseField: "get_claimGiftsResponseField",
            set_claimGiftsRequestField: "set_claimGiftsRequestField",
            get_claimGiftsRequestField: "get_claimGiftsRequestField",
            set_serverToServerGameOverWrapperField: "set_serverToServerGameOverWrapperField",
            get_serverToServerGameOverWrapperField: "get_serverToServerGameOverWrapperField",
            set_updateUserSettingsResponseField: "set_updateUserSettingsResponseField",
            get_updateUserSettingsResponseField: "get_updateUserSettingsResponseField",
            set_updateUserSettingsRequestField: "set_updateUserSettingsRequestField",
            get_updateUserSettingsRequestField: "get_updateUserSettingsRequestField",
            set_offerBundleResponseField: "set_offerBundleResponseField",
            get_offerBundleResponseField: "get_offerBundleResponseField",
            set_offerBundleRequestField: "set_offerBundleRequestField",
            get_offerBundleRequestField: "get_offerBundleRequestField",
            set_purchaseWalletUpdatesField: "set_purchaseWalletUpdatesField",
            get_purchaseWalletUpdatesField: "get_purchaseWalletUpdatesField",
            set_walletUpdatesField: "set_walletUpdatesField",
            get_walletUpdatesField: "get_walletUpdatesField",
            set_inappPurchaseResponseField: "set_inappPurchaseResponseField",
            get_inappPurchaseResponseField: "get_inappPurchaseResponseField",
            set_googleInappPurchaseRequestField: "set_googleInappPurchaseRequestField",
            get_googleInappPurchaseRequestField: "get_googleInappPurchaseRequestField",
            set_appleInappPurchaseRequestField: "set_appleInappPurchaseRequestField",
            get_appleInappPurchaseRequestField: "get_appleInappPurchaseRequestField",
            set_softPurchaseResponseField: "set_softPurchaseResponseField",
            get_softPurchaseResponseField: "get_softPurchaseResponseField",
            set_softPurchaseRequestField: "set_softPurchaseRequestField",
            get_softPurchaseRequestField: "get_softPurchaseRequestField",
            set_gameOverField: "set_gameOverField",
            get_gameOverField: "get_gameOverField",
            set_arenaStateField: "set_arenaStateField",
            get_arenaStateField: "get_arenaStateField",
            set_leaderboardField: "set_leaderboardField",
            get_leaderboardField: "get_leaderboardField",
            set_directionVectorField: "set_directionVectorField",
            get_directionVectorField: "get_directionVectorField",
            set_lobbyQueueProgressField: "set_lobbyQueueProgressField",
            get_lobbyQueueProgressField: "get_lobbyQueueProgressField",
            set_enterLobbyField: "set_enterLobbyField",
            get_enterLobbyField: "get_enterLobbyField",
            set_gameJoinedField: "set_gameJoinedField",
            get_gameJoinedField: "get_gameJoinedField",
            set_enterGameField: "set_enterGameField",
            get_enterGameField: "get_enterGameField",
            set_serverGoingOfflineField: "set_serverGoingOfflineField",
            get_serverGoingOfflineField: "get_serverGoingOfflineField",
            set_configurationChangeField: "set_configurationChangeField",
            get_configurationChangeField: "get_configurationChangeField",
            set_udpHandshakeField: "set_udpHandshakeField",
            get_udpHandshakeField: "get_udpHandshakeField",
            set_pongField: "set_pongField",
            get_pongField: "get_pongField",
            set_pingField: "set_pingField",
            get_pingField: "get_pingField",
            set_reconnectField: "set_reconnectField",
            get_reconnectField: "get_reconnectField",
            set_disconnectField: "set_disconnectField",
            get_disconnectField: "get_disconnectField",
            set_connectResponseField: "set_connectResponseField",
            get_connectResponseField: "get_connectResponseField",
            set_connectRequestField: "set_connectRequestField",
            get_connectRequestField: "get_connectRequestField",
            set_realmUpgradeResponseField: "set_realmUpgradeResponseField",
            get_realmUpgradeResponseField: "get_realmUpgradeResponseField",
            set_realmUpgradeRequestField: "set_realmUpgradeRequestField",
            get_realmUpgradeRequestField: "get_realmUpgradeRequestField",
            set_loginResponseField: "set_loginResponseField",
            get_loginResponseField: "get_loginResponseField",
            set_loginRequestField: "set_loginRequestField",
            get_loginRequestField: "get_loginRequestField",
            set_type: "set_type",
            get_type: "get_type"
        }
    });
    var agario_proto_Request_$gifts = function() {
        protohx_Message.call(this);
        this.set_giftIds([])
    };
    $hxClasses["agario.proto.Request_gifts"] = agario_proto_Request_$gifts;
    agario_proto_Request_$gifts.__name__ = ["agario", "proto", "Request_gifts"];
    agario_proto_Request_$gifts.__super__ = protohx_Message;
    agario_proto_Request_$gifts.prototype = $extend(protohx_Message.prototype, {
        giftIds: null,
        setGiftIds: function(value) {
            this.set_giftIds(value);
            return this
        },
        set_giftIds: function(value) {
            return this.giftIds = value
        },
        get_giftIds: function() {
            return this.giftIds
        },
        addGiftIds: function(value) {
            if (this.get_giftIds() == null) {
                this.set_giftIds([value])
            } else {
                this.get_giftIds().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_giftIds() != null) {
                var _g = 0;
                var _g1 = this.get_giftIds();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_STRING(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_giftIds() != null && this.get_giftIds().length > 0) {
                fn("giftIds", this.get_giftIds())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_giftIds() == null) {
                            this.set_giftIds([])
                        }
                        this.get_giftIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Request_$gifts,
        __properties__: {
            set_giftIds: "set_giftIds",
            get_giftIds: "get_giftIds"
        }
    });
    var agario_proto_Send_$gifts = function() {
        protohx_Message.call(this);
        this.set_giftIds([])
    };
    $hxClasses["agario.proto.Send_gifts"] = agario_proto_Send_$gifts;
    agario_proto_Send_$gifts.__name__ = ["agario", "proto", "Send_gifts"];
    agario_proto_Send_$gifts.__super__ = protohx_Message;
    agario_proto_Send_$gifts.prototype = $extend(protohx_Message.prototype, {
        giftIds: null,
        setGiftIds: function(value) {
            this.set_giftIds(value);
            return this
        },
        set_giftIds: function(value) {
            return this.giftIds = value
        },
        get_giftIds: function() {
            return this.giftIds
        },
        addGiftIds: function(value) {
            if (this.get_giftIds() == null) {
                this.set_giftIds([value])
            } else {
                this.get_giftIds().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_giftIds() != null) {
                var _g = 0;
                var _g1 = this.get_giftIds();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_STRING(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_giftIds() != null && this.get_giftIds().length > 0) {
                fn("giftIds", this.get_giftIds())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_giftIds() == null) {
                            this.set_giftIds([])
                        }
                        this.get_giftIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Send_$gifts,
        __properties__: {
            set_giftIds: "set_giftIds",
            get_giftIds: "get_giftIds"
        }
    });
    var agario_proto_Server_$going_$offline = function() {
        protohx_Message.call(this);
        this.set_secondsRemaining(0)
    };
    $hxClasses["agario.proto.Server_going_offline"] = agario_proto_Server_$going_$offline;
    agario_proto_Server_$going_$offline.__name__ = ["agario", "proto", "Server_going_offline"];
    agario_proto_Server_$going_$offline.__super__ = protohx_Message;
    agario_proto_Server_$going_$offline.prototype = $extend(protohx_Message.prototype, {
        secondsRemaining: null,
        setSecondsRemaining: function(value) {
            this.set_secondsRemaining(value);
            return this
        },
        set_secondsRemaining: function(value) {
            return this.secondsRemaining = value
        },
        get_secondsRemaining: function() {
            return this.secondsRemaining
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_secondsRemaining());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("secondsRemaining", this.get_secondsRemaining())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var seconds_remaining__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (seconds_remaining__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_going_offline.secondsRemaining cannot be set twice."))
                        }++seconds_remaining__count;
                        this.set_secondsRemaining(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Server_$going_$offline,
        __properties__: {
            set_secondsRemaining: "set_secondsRemaining",
            get_secondsRemaining: "get_secondsRemaining"
        }
    });
    var agario_proto_Server_$info = function() {
        protohx_Message.call(this);
        this.set_host("");
        this.set_tcpPort(0);
        this.set_udpPort(0)
    };
    $hxClasses["agario.proto.Server_info"] = agario_proto_Server_$info;
    agario_proto_Server_$info.__name__ = ["agario", "proto", "Server_info"];
    agario_proto_Server_$info.__super__ = protohx_Message;
    agario_proto_Server_$info.prototype = $extend(protohx_Message.prototype, {
        host: null,
        setHost: function(value) {
            this.set_host(value);
            return this
        },
        set_host: function(value) {
            return this.host = value
        },
        get_host: function() {
            return this.host
        },
        tcpPort: null,
        setTcpPort: function(value) {
            this.set_tcpPort(value);
            return this
        },
        set_tcpPort: function(value) {
            return this.tcpPort = value
        },
        get_tcpPort: function() {
            return this.tcpPort
        },
        udpPort: null,
        setUdpPort: function(value) {
            this.set_udpPort(value);
            return this
        },
        set_udpPort: function(value) {
            return this.udpPort = value
        },
        get_udpPort: function() {
            return this.udpPort
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_host());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_tcpPort());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_udpPort());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("host", this.get_host());
            fn("tcpPort", this.get_tcpPort());
            fn("udpPort", this.get_udpPort())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var host__count = 0;
            var tcp_port__count = 0;
            var udp_port__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (host__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_info.host cannot be set twice."))
                        }++host__count;
                        this.set_host(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (tcp_port__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_info.tcpPort cannot be set twice."))
                        }++tcp_port__count;
                        this.set_tcpPort(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 3:
                        if (udp_port__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_info.udpPort cannot be set twice."))
                        }++udp_port__count;
                        this.set_udpPort(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Server_$info,
        __properties__: {
            set_udpPort: "set_udpPort",
            get_udpPort: "get_udpPort",
            set_tcpPort: "set_tcpPort",
            get_tcpPort: "get_tcpPort",
            set_host: "set_host",
            get_host: "get_host"
        }
    });
    var agario_proto_Server_$to_$server_$game_$over_$wrapper = function() {
        protohx_Message.call(this);
        this.set_hashVerifier("");
        this.set_serverToServerGameOver(this.defaultBytes())
    };
    $hxClasses["agario.proto.Server_to_server_game_over_wrapper"] = agario_proto_Server_$to_$server_$game_$over_$wrapper;
    agario_proto_Server_$to_$server_$game_$over_$wrapper.__name__ = ["agario", "proto", "Server_to_server_game_over_wrapper"];
    agario_proto_Server_$to_$server_$game_$over_$wrapper.__super__ = protohx_Message;
    agario_proto_Server_$to_$server_$game_$over_$wrapper.prototype = $extend(protohx_Message.prototype, {
        hashVerifier: null,
        setHashVerifier: function(value) {
            this.set_hashVerifier(value);
            return this
        },
        set_hashVerifier: function(value) {
            return this.hashVerifier = value
        },
        get_hashVerifier: function() {
            return this.hashVerifier
        },
        serverToServerGameOver: null,
        setServerToServerGameOver: function(value) {
            this.set_serverToServerGameOver(value);
            return this
        },
        set_serverToServerGameOver: function(value) {
            return this.serverToServerGameOver = value
        },
        get_serverToServerGameOver: function() {
            return this.serverToServerGameOver
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_hashVerifier());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_BYTES(output, this.get_serverToServerGameOver());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("hashVerifier", this.get_hashVerifier());
            fn("serverToServerGameOver", this.get_serverToServerGameOver())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var hash_verifier__count = 0;
            var server_to_server_game_over__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (hash_verifier__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_to_server_game_over_wrapper.hashVerifier cannot be set twice."))
                        }++hash_verifier__count;
                        this.set_hashVerifier(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (server_to_server_game_over__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_to_server_game_over_wrapper.serverToServerGameOver cannot be set twice."))
                        }++server_to_server_game_over__count;
                        this.set_serverToServerGameOver(protohx_ReadUtils.read__TYPE_BYTES(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Server_$to_$server_$game_$over_$wrapper,
        __properties__: {
            set_serverToServerGameOver: "set_serverToServerGameOver",
            get_serverToServerGameOver: "get_serverToServerGameOver",
            set_hashVerifier: "set_hashVerifier",
            get_hashVerifier: "get_hashVerifier"
        }
    });
    var agario_proto_Soft_$purchase_$request = function() {
        protohx_Message.call(this);
        this.set_purchaseId("")
    };
    $hxClasses["agario.proto.Soft_purchase_request"] = agario_proto_Soft_$purchase_$request;
    agario_proto_Soft_$purchase_$request.__name__ = ["agario", "proto", "Soft_purchase_request"];
    agario_proto_Soft_$purchase_$request.__super__ = protohx_Message;
    agario_proto_Soft_$purchase_$request.prototype = $extend(protohx_Message.prototype, {
        purchaseId: null,
        setPurchaseId: function(value) {
            this.set_purchaseId(value);
            return this
        },
        set_purchaseId: function(value) {
            return this.purchaseId = value
        },
        get_purchaseId: function() {
            return this.purchaseId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_purchaseId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("purchaseId", this.get_purchaseId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var purchase_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (purchase_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_purchase_request.purchaseId cannot be set twice."))
                        }++purchase_id__count;
                        this.set_purchaseId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Soft_$purchase_$request,
        __properties__: {
            set_purchaseId: "set_purchaseId",
            get_purchaseId: "get_purchaseId"
        }
    });
    var agario_proto_Soft_$purchase_$response = function() {
        protohx_Message.call(this);
        this.set_result(0);
        this.set_purchaseId("");
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Soft_purchase_response"] = agario_proto_Soft_$purchase_$response;
    agario_proto_Soft_$purchase_$response.__name__ = ["agario", "proto", "Soft_purchase_response"];
    agario_proto_Soft_$purchase_$response.__super__ = protohx_Message;
    agario_proto_Soft_$purchase_$response.prototype = $extend(protohx_Message.prototype, {
        result: null,
        setResult: function(value) {
            this.set_result(value);
            return this
        },
        set_result: function(value) {
            return this.result = value
        },
        get_result: function() {
            return this.result
        },
        purchaseId: null,
        setPurchaseId: function(value) {
            this.set_purchaseId(value);
            return this
        },
        set_purchaseId: function(value) {
            return this.purchaseId = value
        },
        get_purchaseId: function() {
            return this.purchaseId
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_result());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_purchaseId());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("result", this.get_result());
            fn("purchaseId", this.get_purchaseId());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var result__count = 0;
            var purchase_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (result__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_purchase_response.result cannot be set twice."))
                        }++result__count;
                        this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (purchase_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_purchase_response.purchaseId cannot be set twice."))
                        }++purchase_id__count;
                        this.set_purchaseId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Soft_$purchase_$response,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_purchaseId: "set_purchaseId",
            get_purchaseId: "get_purchaseId",
            set_result: "set_result",
            get_result: "get_result"
        }
    });
    var agario_proto_Soft_$upgrade = function() {
        protohx_Message.call(this);
        this.set_isAvailable(false);
        this.set_rewardWasHandedOut(false)
    };
    $hxClasses["agario.proto.Soft_upgrade"] = agario_proto_Soft_$upgrade;
    agario_proto_Soft_$upgrade.__name__ = ["agario", "proto", "Soft_upgrade"];
    agario_proto_Soft_$upgrade.__super__ = protohx_Message;
    agario_proto_Soft_$upgrade.prototype = $extend(protohx_Message.prototype, {
        isAvailable: null,
        setIsAvailable: function(value) {
            this.set_isAvailable(value);
            return this
        },
        set_isAvailable: function(value) {
            return this.isAvailable = value
        },
        get_isAvailable: function() {
            return this.isAvailable
        },
        rewardWasHandedOut: null,
        setRewardWasHandedOut: function(value) {
            this.set_rewardWasHandedOut(value);
            return this
        },
        set_rewardWasHandedOut: function(value) {
            return this.rewardWasHandedOut = value
        },
        get_rewardWasHandedOut: function() {
            return this.rewardWasHandedOut
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_BOOL(output, this.get_isAvailable());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_BOOL(output, this.get_rewardWasHandedOut());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("isAvailable", this.get_isAvailable());
            fn("rewardWasHandedOut", this.get_rewardWasHandedOut())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var is_available__count = 0;
            var reward_was_handed_out__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (is_available__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_upgrade.isAvailable cannot be set twice."))
                        }++is_available__count;
                        this.set_isAvailable(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    case 2:
                        if (reward_was_handed_out__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_upgrade.rewardWasHandedOut cannot be set twice."))
                        }++reward_was_handed_out__count;
                        this.set_rewardWasHandedOut(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Soft_$upgrade,
        __properties__: {
            set_rewardWasHandedOut: "set_rewardWasHandedOut",
            get_rewardWasHandedOut: "get_rewardWasHandedOut",
            set_isAvailable: "set_isAvailable",
            get_isAvailable: "get_isAvailable"
        }
    });
    var agario_proto_Udp_$handshake = function() {
        protohx_Message.call(this);
        this.set_token("")
    };
    $hxClasses["agario.proto.Udp_handshake"] = agario_proto_Udp_$handshake;
    agario_proto_Udp_$handshake.__name__ = ["agario", "proto", "Udp_handshake"];
    agario_proto_Udp_$handshake.__super__ = protohx_Message;
    agario_proto_Udp_$handshake.prototype = $extend(protohx_Message.prototype, {
        token: null,
        setToken: function(value) {
            this.set_token(value);
            return this
        },
        set_token: function(value) {
            return this.token = value
        },
        get_token: function() {
            return this.token
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_token());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("token", this.get_token())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var token__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (token__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Udp_handshake.token cannot be set twice."))
                        }++token__count;
                        this.set_token(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Udp_$handshake,
        __properties__: {
            set_token: "set_token",
            get_token: "get_token"
        }
    });
    var agario_proto_Update_$user_$settings_$request = function() {
        protohx_Message.call(this);
        this.set_userSettingsUpdates([])
    };
    $hxClasses["agario.proto.Update_user_settings_request"] = agario_proto_Update_$user_$settings_$request;
    agario_proto_Update_$user_$settings_$request.__name__ = ["agario", "proto", "Update_user_settings_request"];
    agario_proto_Update_$user_$settings_$request.__super__ = protohx_Message;
    agario_proto_Update_$user_$settings_$request.prototype = $extend(protohx_Message.prototype, {
        userSettingsUpdates: null,
        setUserSettingsUpdates: function(value) {
            this.set_userSettingsUpdates(value);
            return this
        },
        set_userSettingsUpdates: function(value) {
            return this.userSettingsUpdates = value
        },
        get_userSettingsUpdates: function() {
            return this.userSettingsUpdates
        },
        addUserSettingsUpdates: function(value) {
            if (this.get_userSettingsUpdates() == null) {
                this.set_userSettingsUpdates([value])
            } else {
                this.get_userSettingsUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_userSettingsUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_userSettingsUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_userSettingsUpdates() != null && this.get_userSettingsUpdates().length > 0) {
                fn("userSettingsUpdates", this.get_userSettingsUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_userSettingsUpdates() == null) {
                            this.set_userSettingsUpdates([])
                        }
                        this.get_userSettingsUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$setting()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Update_$user_$settings_$request,
        __properties__: {
            set_userSettingsUpdates: "set_userSettingsUpdates",
            get_userSettingsUpdates: "get_userSettingsUpdates"
        }
    });
    var agario_proto_Update_$user_$settings_$response = function() {
        protohx_Message.call(this);
        this.set_updatedUserSettings([])
    };
    $hxClasses["agario.proto.Update_user_settings_response"] = agario_proto_Update_$user_$settings_$response;
    agario_proto_Update_$user_$settings_$response.__name__ = ["agario", "proto", "Update_user_settings_response"];
    agario_proto_Update_$user_$settings_$response.__super__ = protohx_Message;
    agario_proto_Update_$user_$settings_$response.prototype = $extend(protohx_Message.prototype, {
        updatedUserSettings: null,
        setUpdatedUserSettings: function(value) {
            this.set_updatedUserSettings(value);
            return this
        },
        set_updatedUserSettings: function(value) {
            return this.updatedUserSettings = value
        },
        get_updatedUserSettings: function() {
            return this.updatedUserSettings
        },
        addUpdatedUserSettings: function(value) {
            if (this.get_updatedUserSettings() == null) {
                this.set_updatedUserSettings([value])
            } else {
                this.get_updatedUserSettings().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_updatedUserSettings() != null) {
                var _g = 0;
                var _g1 = this.get_updatedUserSettings();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_updatedUserSettings() != null && this.get_updatedUserSettings().length > 0) {
                fn("updatedUserSettings", this.get_updatedUserSettings())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_updatedUserSettings() == null) {
                            this.set_updatedUserSettings([])
                        }
                        this.get_updatedUserSettings().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$setting()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Update_$user_$settings_$response,
        __properties__: {
            set_updatedUserSettings: "set_updatedUserSettings",
            get_updatedUserSettings: "get_updatedUserSettings"
        }
    });
    var agario_proto_User_$ab_$test_$group = function() {
        protohx_Message.call(this);
        this.set_testId("");
        this.set_testGroup("")
    };
    $hxClasses["agario.proto.User_ab_test_group"] = agario_proto_User_$ab_$test_$group;
    agario_proto_User_$ab_$test_$group.__name__ = ["agario", "proto", "User_ab_test_group"];
    agario_proto_User_$ab_$test_$group.__super__ = protohx_Message;
    agario_proto_User_$ab_$test_$group.prototype = $extend(protohx_Message.prototype, {
        testId: null,
        setTestId: function(value) {
            this.set_testId(value);
            return this
        },
        set_testId: function(value) {
            return this.testId = value
        },
        get_testId: function() {
            return this.testId
        },
        testGroup: null,
        setTestGroup: function(value) {
            this.set_testGroup(value);
            return this
        },
        set_testGroup: function(value) {
            return this.testGroup = value
        },
        get_testGroup: function() {
            return this.testGroup
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_testId());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_testGroup());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("testId", this.get_testId());
            fn("testGroup", this.get_testGroup())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var test_id__count = 0;
            var test_group__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (test_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_ab_test_group.testId cannot be set twice."))
                        }++test_id__count;
                        this.set_testId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (test_group__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_ab_test_group.testGroup cannot be set twice."))
                        }++test_group__count;
                        this.set_testGroup(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$ab_$test_$group,
        __properties__: {
            set_testGroup: "set_testGroup",
            get_testGroup: "get_testGroup",
            set_testId: "set_testId",
            get_testId: "get_testId"
        }
    });
    var agario_proto_User_$boost_$item = function() {
        protohx_Message.call(this);
        this.set_productId("");
        this.set_expiresInSeconds(0)
    };
    $hxClasses["agario.proto.User_boost_item"] = agario_proto_User_$boost_$item;
    agario_proto_User_$boost_$item.__name__ = ["agario", "proto", "User_boost_item"];
    agario_proto_User_$boost_$item.__super__ = protohx_Message;
    agario_proto_User_$boost_$item.prototype = $extend(protohx_Message.prototype, {
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        expiresInSeconds: null,
        setExpiresInSeconds: function(value) {
            this.set_expiresInSeconds(value);
            return this
        },
        set_expiresInSeconds: function(value) {
            return this.expiresInSeconds = value
        },
        get_expiresInSeconds: function() {
            return this.expiresInSeconds
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_expiresInSeconds());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("productId", this.get_productId());
            fn("expiresInSeconds", this.get_expiresInSeconds())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var product_id__count = 0;
            var expires_in_seconds__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_boost_item.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (expires_in_seconds__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_boost_item.expiresInSeconds cannot be set twice."))
                        }++expires_in_seconds__count;
                        this.set_expiresInSeconds(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$boost_$item,
        __properties__: {
            set_expiresInSeconds: "set_expiresInSeconds",
            get_expiresInSeconds: "get_expiresInSeconds",
            set_productId: "set_productId",
            get_productId: "get_productId"
        }
    });
    var agario_proto_User_$data_$update = function() {
        protohx_Message.call(this);
        this.set_type(0)
    };
    $hxClasses["agario.proto.User_data_update"] = agario_proto_User_$data_$update;
    agario_proto_User_$data_$update.__name__ = ["agario", "proto", "User_data_update"];
    agario_proto_User_$data_$update.__super__ = protohx_Message;
    agario_proto_User_$data_$update.prototype = $extend(protohx_Message.prototype, {
        type: null,
        setType: function(value) {
            this.set_type(value);
            return this
        },
        set_type: function(value) {
            return this.type = value
        },
        get_type: function() {
            return this.type
        },
        xpLevelField: null,
        setXpLevelField: function(value) {
            this.set_xpLevelField(value);
            return this
        },
        clearXpLevelField: function() {
            this.set_xpLevelField(null)
        },
        hasXpLevelField: function() {
            return this.get_xpLevelField() != null
        },
        set_xpLevelField: function(value) {
            return this.xpLevelField = value
        },
        get_xpLevelField: function() {
            return this.xpLevelField
        },
        productField: null,
        setProductField: function(value) {
            this.set_productField(value);
            return this
        },
        clearProductField: function() {
            this.set_productField(null)
        },
        hasProductField: function() {
            return this.get_productField() != null
        },
        set_productField: function(value) {
            return this.productField = value
        },
        get_productField: function() {
            return this.productField
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_type());
            if (this.get_xpLevelField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 10);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_xpLevelField())
            }
            if (this.get_productField() != null) {
                protohx_WriteUtils.writeTag(output, 2, 20);
                protohx_WriteUtils.write__TYPE_MESSAGE(output, this.get_productField())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("type", this.get_type());
            if (this.get_xpLevelField() != null) {
                fn("xpLevelField", this.get_xpLevelField())
            }
            if (this.get_productField() != null) {
                fn("productField", this.get_productField())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var type__count = 0;
            var xp_level_field__count = 0;
            var product_field__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_data_update.type cannot be set twice."))
                        }++type__count;
                        this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 10:
                        if (xp_level_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_data_update.xpLevelField cannot be set twice."))
                        }++xp_level_field__count;
                        this.set_xpLevelField(new agario_proto_Xp_$level_$update());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_xpLevelField());
                        break;
                    case 20:
                        if (product_field__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_data_update.productField cannot be set twice."))
                        }++product_field__count;
                        this.set_productField(new agario_proto_Product_$update());
                        protohx_ReadUtils.read__TYPE_MESSAGE(input, this.get_productField());
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$data_$update,
        __properties__: {
            set_productField: "set_productField",
            get_productField: "get_productField",
            set_xpLevelField: "set_xpLevelField",
            get_xpLevelField: "get_xpLevelField",
            set_type: "set_type",
            get_type: "get_type"
        }
    });
    var agario_proto_User_$gift = function() {
        protohx_Message.call(this);
        this.set_facebookIdFrom("");
        this.set_productId("");
        this.set_amount(0)
    };
    $hxClasses["agario.proto.User_gift"] = agario_proto_User_$gift;
    agario_proto_User_$gift.__name__ = ["agario", "proto", "User_gift"];
    agario_proto_User_$gift.__super__ = protohx_Message;
    agario_proto_User_$gift.prototype = $extend(protohx_Message.prototype, {
        facebookIdFrom: null,
        setFacebookIdFrom: function(value) {
            this.set_facebookIdFrom(value);
            return this
        },
        set_facebookIdFrom: function(value) {
            return this.facebookIdFrom = value
        },
        get_facebookIdFrom: function() {
            return this.facebookIdFrom
        },
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        amount: null,
        setAmount: function(value) {
            this.set_amount(value);
            return this
        },
        set_amount: function(value) {
            return this.amount = value
        },
        get_amount: function() {
            return this.amount
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_facebookIdFrom());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_amount());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("facebookIdFrom", this.get_facebookIdFrom());
            fn("productId", this.get_productId());
            fn("amount", this.get_amount())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var facebook_id_from__count = 0;
            var product_id__count = 0;
            var amount__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (facebook_id_from__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_gift.facebookIdFrom cannot be set twice."))
                        }++facebook_id_from__count;
                        this.set_facebookIdFrom(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_gift.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (amount__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_gift.amount cannot be set twice."))
                        }++amount__count;
                        this.set_amount(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$gift,
        __properties__: {
            set_amount: "set_amount",
            get_amount: "get_amount",
            set_productId: "set_productId",
            get_productId: "get_productId",
            set_facebookIdFrom: "set_facebookIdFrom",
            get_facebookIdFrom: "get_facebookIdFrom"
        }
    });
    var agario_proto_User_$gifts = function() {
        protohx_Message.call(this);
        this.set_claimable([]);
        this.set_claimedFrom([]);
        this.set_sentTo([]);
        this.set_requestedTo([]);
        this.set_requestedFrom([])
    };
    $hxClasses["agario.proto.User_gifts"] = agario_proto_User_$gifts;
    agario_proto_User_$gifts.__name__ = ["agario", "proto", "User_gifts"];
    agario_proto_User_$gifts.__super__ = protohx_Message;
    agario_proto_User_$gifts.prototype = $extend(protohx_Message.prototype, {
        claimable: null,
        setClaimable: function(value) {
            this.set_claimable(value);
            return this
        },
        set_claimable: function(value) {
            return this.claimable = value
        },
        get_claimable: function() {
            return this.claimable
        },
        addClaimable: function(value) {
            if (this.get_claimable() == null) {
                this.set_claimable([value])
            } else {
                this.get_claimable().push(value)
            }
        },
        claimedFrom: null,
        setClaimedFrom: function(value) {
            this.set_claimedFrom(value);
            return this
        },
        set_claimedFrom: function(value) {
            return this.claimedFrom = value
        },
        get_claimedFrom: function() {
            return this.claimedFrom
        },
        addClaimedFrom: function(value) {
            if (this.get_claimedFrom() == null) {
                this.set_claimedFrom([value])
            } else {
                this.get_claimedFrom().push(value)
            }
        },
        sentTo: null,
        setSentTo: function(value) {
            this.set_sentTo(value);
            return this
        },
        set_sentTo: function(value) {
            return this.sentTo = value
        },
        get_sentTo: function() {
            return this.sentTo
        },
        addSentTo: function(value) {
            if (this.get_sentTo() == null) {
                this.set_sentTo([value])
            } else {
                this.get_sentTo().push(value)
            }
        },
        requestedTo: null,
        setRequestedTo: function(value) {
            this.set_requestedTo(value);
            return this
        },
        set_requestedTo: function(value) {
            return this.requestedTo = value
        },
        get_requestedTo: function() {
            return this.requestedTo
        },
        addRequestedTo: function(value) {
            if (this.get_requestedTo() == null) {
                this.set_requestedTo([value])
            } else {
                this.get_requestedTo().push(value)
            }
        },
        requestedFrom: null,
        setRequestedFrom: function(value) {
            this.set_requestedFrom(value);
            return this
        },
        set_requestedFrom: function(value) {
            return this.requestedFrom = value
        },
        get_requestedFrom: function() {
            return this.requestedFrom
        },
        addRequestedFrom: function(value) {
            if (this.get_requestedFrom() == null) {
                this.set_requestedFrom([value])
            } else {
                this.get_requestedFrom().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_claimable() != null) {
                var _g = 0;
                var _g1 = this.get_claimable();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            if (this.get_claimedFrom() != null) {
                var _g2 = 0;
                var _g11 = this.get_claimedFrom();
                while (_g2 < _g11.length) {
                    var value1 = _g11[_g2];
                    ++_g2;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_STRING(output, value1)
                }
            }
            if (this.get_sentTo() != null) {
                var _g3 = 0;
                var _g12 = this.get_sentTo();
                while (_g3 < _g12.length) {
                    var value2 = _g12[_g3];
                    ++_g3;
                    protohx_WriteUtils.writeTag(output, 2, 3);
                    protohx_WriteUtils.write__TYPE_STRING(output, value2)
                }
            }
            if (this.get_requestedTo() != null) {
                var _g4 = 0;
                var _g13 = this.get_requestedTo();
                while (_g4 < _g13.length) {
                    var value3 = _g13[_g4];
                    ++_g4;
                    protohx_WriteUtils.writeTag(output, 2, 4);
                    protohx_WriteUtils.write__TYPE_STRING(output, value3)
                }
            }
            if (this.get_requestedFrom() != null) {
                var _g5 = 0;
                var _g14 = this.get_requestedFrom();
                while (_g5 < _g14.length) {
                    var value4 = _g14[_g5];
                    ++_g5;
                    protohx_WriteUtils.writeTag(output, 2, 5);
                    protohx_WriteUtils.write__TYPE_STRING(output, value4)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_claimable() != null && this.get_claimable().length > 0) {
                fn("claimable", this.get_claimable())
            }
            if (this.get_claimedFrom() != null && this.get_claimedFrom().length > 0) {
                fn("claimedFrom", this.get_claimedFrom())
            }
            if (this.get_sentTo() != null && this.get_sentTo().length > 0) {
                fn("sentTo", this.get_sentTo())
            }
            if (this.get_requestedTo() != null && this.get_requestedTo().length > 0) {
                fn("requestedTo", this.get_requestedTo())
            }
            if (this.get_requestedFrom() != null && this.get_requestedFrom().length > 0) {
                fn("requestedFrom", this.get_requestedFrom())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_claimable() == null) {
                            this.set_claimable([])
                        }
                        this.get_claimable().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$gift()));
                        break;
                    case 2:
                        if (this.get_claimedFrom() == null) {
                            this.set_claimedFrom([])
                        }
                        this.get_claimedFrom().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (this.get_sentTo() == null) {
                            this.set_sentTo([])
                        }
                        this.get_sentTo().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 4:
                        if (this.get_requestedTo() == null) {
                            this.set_requestedTo([])
                        }
                        this.get_requestedTo().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 5:
                        if (this.get_requestedFrom() == null) {
                            this.set_requestedFrom([])
                        }
                        this.get_requestedFrom().push(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$gifts,
        __properties__: {
            set_requestedFrom: "set_requestedFrom",
            get_requestedFrom: "get_requestedFrom",
            set_requestedTo: "set_requestedTo",
            get_requestedTo: "get_requestedTo",
            set_sentTo: "set_sentTo",
            get_sentTo: "get_sentTo",
            set_claimedFrom: "set_claimedFrom",
            get_claimedFrom: "get_claimedFrom",
            set_claimable: "set_claimable",
            get_claimable: "get_claimable"
        }
    });
    var agario_proto_User_$info = function() {
        protohx_Message.call(this);
        this.set_id("");
        this.set_displayName("");
        this.set_xp(0);
        this.set_level(0);
        this.set_isPayingUser(false);
        this.set_hasLoggedIntoMobile(false);
        this.set_isNewUser(false);
        this.set_questsCompleted(0);
        this.set_potionsObtained(0);
        this.set_realmId("")
    };
    $hxClasses["agario.proto.User_info"] = agario_proto_User_$info;
    agario_proto_User_$info.__name__ = ["agario", "proto", "User_info"];
    agario_proto_User_$info.__super__ = protohx_Message;
    agario_proto_User_$info.prototype = $extend(protohx_Message.prototype, {
        id: null,
        setId: function(value) {
            this.set_id(value);
            return this
        },
        set_id: function(value) {
            return this.id = value
        },
        get_id: function() {
            return this.id
        },
        displayName: null,
        setDisplayName: function(value) {
            this.set_displayName(value);
            return this
        },
        set_displayName: function(value) {
            return this.displayName = value
        },
        get_displayName: function() {
            return this.displayName
        },
        xp: null,
        setXp: function(value) {
            this.set_xp(value);
            return this
        },
        set_xp: function(value) {
            return this.xp = value
        },
        get_xp: function() {
            return this.xp
        },
        level: null,
        setLevel: function(value) {
            this.set_level(value);
            return this
        },
        set_level: function(value) {
            return this.level = value
        },
        get_level: function() {
            return this.level
        },
        isPayingUser: null,
        setIsPayingUser: function(value) {
            this.set_isPayingUser(value);
            return this
        },
        set_isPayingUser: function(value) {
            return this.isPayingUser = value
        },
        get_isPayingUser: function() {
            return this.isPayingUser
        },
        hasLoggedIntoMobile: null,
        setHasLoggedIntoMobile: function(value) {
            this.set_hasLoggedIntoMobile(value);
            return this
        },
        set_hasLoggedIntoMobile: function(value) {
            return this.hasLoggedIntoMobile = value
        },
        get_hasLoggedIntoMobile: function() {
            return this.hasLoggedIntoMobile
        },
        isNewUser: null,
        setIsNewUser: function(value) {
            this.set_isNewUser(value);
            return this
        },
        set_isNewUser: function(value) {
            return this.isNewUser = value
        },
        get_isNewUser: function() {
            return this.isNewUser
        },
        questsCompleted: null,
        setQuestsCompleted: function(value) {
            this.set_questsCompleted(value);
            return this
        },
        set_questsCompleted: function(value) {
            return this.questsCompleted = value
        },
        get_questsCompleted: function() {
            return this.questsCompleted
        },
        potionsObtained: null,
        setPotionsObtained: function(value) {
            this.set_potionsObtained(value);
            return this
        },
        set_potionsObtained: function(value) {
            return this.potionsObtained = value
        },
        get_potionsObtained: function() {
            return this.potionsObtained
        },
        realmId: null,
        setRealmId: function(value) {
            this.set_realmId(value);
            return this
        },
        set_realmId: function(value) {
            return this.realmId = value
        },
        get_realmId: function() {
            return this.realmId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_id());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_displayName());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_xp());
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_level());
            protohx_WriteUtils.writeTag(output, 0, 5);
            protohx_WriteUtils.write__TYPE_BOOL(output, this.get_isPayingUser());
            protohx_WriteUtils.writeTag(output, 0, 6);
            protohx_WriteUtils.write__TYPE_BOOL(output, this.get_hasLoggedIntoMobile());
            protohx_WriteUtils.writeTag(output, 0, 7);
            protohx_WriteUtils.write__TYPE_BOOL(output, this.get_isNewUser());
            protohx_WriteUtils.writeTag(output, 0, 8);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_questsCompleted());
            protohx_WriteUtils.writeTag(output, 0, 9);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_potionsObtained());
            protohx_WriteUtils.writeTag(output, 2, 10);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_realmId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("id", this.get_id());
            fn("displayName", this.get_displayName());
            fn("xp", this.get_xp());
            fn("level", this.get_level());
            fn("isPayingUser", this.get_isPayingUser());
            fn("hasLoggedIntoMobile", this.get_hasLoggedIntoMobile());
            fn("isNewUser", this.get_isNewUser());
            fn("questsCompleted", this.get_questsCompleted());
            fn("potionsObtained", this.get_potionsObtained());
            fn("realmId", this.get_realmId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var id__count = 0;
            var display_name__count = 0;
            var xp__count = 0;
            var level__count = 0;
            var is_paying_user__count = 0;
            var has_logged_into_mobile__count = 0;
            var is_new_user__count = 0;
            var quests_completed__count = 0;
            var potions_obtained__count = 0;
            var realm_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.id cannot be set twice."))
                        }++id__count;
                        this.set_id(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (display_name__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.displayName cannot be set twice."))
                        }++display_name__count;
                        this.set_displayName(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (xp__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.xp cannot be set twice."))
                        }++xp__count;
                        this.set_xp(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 4:
                        if (level__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.level cannot be set twice."))
                        }++level__count;
                        this.set_level(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 5:
                        if (is_paying_user__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.isPayingUser cannot be set twice."))
                        }++is_paying_user__count;
                        this.set_isPayingUser(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    case 6:
                        if (has_logged_into_mobile__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.hasLoggedIntoMobile cannot be set twice."))
                        }++has_logged_into_mobile__count;
                        this.set_hasLoggedIntoMobile(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    case 7:
                        if (is_new_user__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.isNewUser cannot be set twice."))
                        }++is_new_user__count;
                        this.set_isNewUser(protohx_ReadUtils.read__TYPE_BOOL(input));
                        break;
                    case 8:
                        if (quests_completed__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.questsCompleted cannot be set twice."))
                        }++quests_completed__count;
                        this.set_questsCompleted(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 9:
                        if (potions_obtained__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.potionsObtained cannot be set twice."))
                        }++potions_obtained__count;
                        this.set_potionsObtained(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 10:
                        if (realm_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.realmId cannot be set twice."))
                        }++realm_id__count;
                        this.set_realmId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$info,
        __properties__: {
            set_realmId: "set_realmId",
            get_realmId: "get_realmId",
            set_potionsObtained: "set_potionsObtained",
            get_potionsObtained: "get_potionsObtained",
            set_questsCompleted: "set_questsCompleted",
            get_questsCompleted: "get_questsCompleted",
            set_isNewUser: "set_isNewUser",
            get_isNewUser: "get_isNewUser",
            set_hasLoggedIntoMobile: "set_hasLoggedIntoMobile",
            get_hasLoggedIntoMobile: "get_hasLoggedIntoMobile",
            set_isPayingUser: "set_isPayingUser",
            get_isPayingUser: "get_isPayingUser",
            set_level: "set_level",
            get_level: "get_level",
            set_xp: "set_xp",
            get_xp: "get_xp",
            set_displayName: "set_displayName",
            get_displayName: "get_displayName",
            set_id: "set_id",
            get_id: "get_id"
        }
    });
    var agario_proto_User_$potion = function() {
        protohx_Message.call(this);
        this.set_slot(0);
        this.set_status(0);
        this.set_secondsRemaining(0);
        this.set_productId("")
    };
    $hxClasses["agario.proto.User_potion"] = agario_proto_User_$potion;
    agario_proto_User_$potion.__name__ = ["agario", "proto", "User_potion"];
    agario_proto_User_$potion.__super__ = protohx_Message;
    agario_proto_User_$potion.prototype = $extend(protohx_Message.prototype, {
        slot: null,
        setSlot: function(value) {
            this.set_slot(value);
            return this
        },
        set_slot: function(value) {
            return this.slot = value
        },
        get_slot: function() {
            return this.slot
        },
        status: null,
        setStatus: function(value) {
            this.set_status(value);
            return this
        },
        set_status: function(value) {
            return this.status = value
        },
        get_status: function() {
            return this.status
        },
        secondsRemaining: null,
        setSecondsRemaining: function(value) {
            this.set_secondsRemaining(value);
            return this
        },
        set_secondsRemaining: function(value) {
            return this.secondsRemaining = value
        },
        get_secondsRemaining: function() {
            return this.secondsRemaining
        },
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_slot());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_status());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_secondsRemaining());
            protohx_WriteUtils.writeTag(output, 2, 4);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("slot", this.get_slot());
            fn("status", this.get_status());
            fn("secondsRemaining", this.get_secondsRemaining());
            fn("productId", this.get_productId())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var slot__count = 0;
            var status__count = 0;
            var seconds_remaining__count = 0;
            var product_id__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (slot__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_potion.slot cannot be set twice."))
                        }++slot__count;
                        this.set_slot(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (status__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_potion.status cannot be set twice."))
                        }++status__count;
                        this.set_status(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 3:
                        if (seconds_remaining__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_potion.secondsRemaining cannot be set twice."))
                        }++seconds_remaining__count;
                        this.set_secondsRemaining(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 4:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_potion.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$potion,
        __properties__: {
            set_productId: "set_productId",
            get_productId: "get_productId",
            set_secondsRemaining: "set_secondsRemaining",
            get_secondsRemaining: "get_secondsRemaining",
            set_status: "set_status",
            get_status: "get_status",
            set_slot: "set_slot",
            get_slot: "get_slot"
        }
    });
    var agario_proto_User_$quest = function() {
        protohx_Message.call(this);
        this.set_gameType(0);
        this.set_productId("");
        this.set_type("");
        this.set_goal(0);
        this.set_expiresInSeconds(0)
    };
    $hxClasses["agario.proto.User_quest"] = agario_proto_User_$quest;
    agario_proto_User_$quest.__name__ = ["agario", "proto", "User_quest"];
    agario_proto_User_$quest.__super__ = protohx_Message;
    agario_proto_User_$quest.prototype = $extend(protohx_Message.prototype, {
        gameType: null,
        setGameType: function(value) {
            this.set_gameType(value);
            return this
        },
        set_gameType: function(value) {
            return this.gameType = value
        },
        get_gameType: function() {
            return this.gameType
        },
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        type: null,
        setType: function(value) {
            this.set_type(value);
            return this
        },
        set_type: function(value) {
            return this.type = value
        },
        get_type: function() {
            return this.type
        },
        goal: null,
        setGoal: function(value) {
            this.set_goal(value);
            return this
        },
        set_goal: function(value) {
            return this.goal = value
        },
        get_goal: function() {
            return this.goal
        },
        expiresInSeconds: null,
        setExpiresInSeconds: function(value) {
            this.set_expiresInSeconds(value);
            return this
        },
        set_expiresInSeconds: function(value) {
            return this.expiresInSeconds = value
        },
        get_expiresInSeconds: function() {
            return this.expiresInSeconds
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_gameType());
            protohx_WriteUtils.writeTag(output, 2, 2);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_WriteUtils.writeTag(output, 2, 3);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_type());
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_goal());
            protohx_WriteUtils.writeTag(output, 0, 5);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_expiresInSeconds());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("gameType", this.get_gameType());
            fn("productId", this.get_productId());
            fn("type", this.get_type());
            fn("goal", this.get_goal());
            fn("expiresInSeconds", this.get_expiresInSeconds())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var game_type__count = 0;
            var product_id__count = 0;
            var type__count = 0;
            var goal__count = 0;
            var expires_in_seconds__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (game_type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_quest.gameType cannot be set twice."))
                        }++game_type__count;
                        this.set_gameType(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_quest.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 3:
                        if (type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_quest.type cannot be set twice."))
                        }++type__count;
                        this.set_type(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 4:
                        if (goal__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_quest.goal cannot be set twice."))
                        }++goal__count;
                        this.set_goal(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 5:
                        if (expires_in_seconds__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_quest.expiresInSeconds cannot be set twice."))
                        }++expires_in_seconds__count;
                        this.set_expiresInSeconds(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$quest,
        __properties__: {
            set_expiresInSeconds: "set_expiresInSeconds",
            get_expiresInSeconds: "get_expiresInSeconds",
            set_goal: "set_goal",
            get_goal: "get_goal",
            set_type: "set_type",
            get_type: "get_type",
            set_productId: "set_productId",
            get_productId: "get_productId",
            set_gameType: "set_gameType",
            get_gameType: "get_gameType"
        }
    });
    var agario_proto_User_$setting = function() {
        this.hasField__0 = 0;
        protohx_Message.call(this);
        this.set_type(0);
        this.set_key(0)
    };
    $hxClasses["agario.proto.User_setting"] = agario_proto_User_$setting;
    agario_proto_User_$setting.__name__ = ["agario", "proto", "User_setting"];
    agario_proto_User_$setting.__super__ = protohx_Message;
    agario_proto_User_$setting.prototype = $extend(protohx_Message.prototype, {
        type: null,
        setType: function(value) {
            this.set_type(value);
            return this
        },
        set_type: function(value) {
            return this.type = value
        },
        get_type: function() {
            return this.type
        },
        key: null,
        setKey: function(value) {
            this.set_key(value);
            return this
        },
        set_key: function(value) {
            return this.key = value
        },
        get_key: function() {
            return this.key
        },
        valueString: null,
        setValueString: function(value) {
            this.set_valueString(value);
            return this
        },
        clearValueString: function() {
            this.set_valueString(null)
        },
        hasValueString: function() {
            return this.get_valueString() != null
        },
        set_valueString: function(value) {
            return this.valueString = value
        },
        get_valueString: function() {
            return this.valueString
        },
        valueInt32: null,
        setValueInt32: function(value) {
            this.set_valueInt32(value);
            return this
        },
        hasField__0: null,
        clearValueInt32: function() {
            this.hasField__0 = this.hasField__0 & -2;
            this.set_valueInt32(0)
        },
        hasValueInt32: function() {
            return (this.hasField__0 & 1) != 0
        },
        set_valueInt32: function(value) {
            this.hasField__0 = this.hasField__0 | 1;
            return this.valueInt32 = value
        },
        get_valueInt32: function() {
            return this.valueInt32
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_type());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_ENUM(output, this.get_key());
            if (this.get_valueString() != null) {
                protohx_WriteUtils.writeTag(output, 2, 3);
                protohx_WriteUtils.write__TYPE_STRING(output, this.get_valueString())
            }
            if ((this.hasField__0 & 1) != 0) {
                protohx_WriteUtils.writeTag(output, 0, 4);
                protohx_WriteUtils.write__TYPE_INT32(output, this.get_valueInt32())
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("type", this.get_type());
            fn("key", this.get_key());
            if (this.get_valueString() != null) {
                fn("valueString", this.get_valueString())
            }
            if ((this.hasField__0 & 1) != 0) {
                fn("valueInt32", this.get_valueInt32())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var type__count = 0;
            var key__count = 0;
            var value_string__count = 0;
            var value_int32__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (type__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.type cannot be set twice."))
                        }++type__count;
                        this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 2:
                        if (key__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.key cannot be set twice."))
                        }++key__count;
                        this.set_key(protohx_ReadUtils.read__TYPE_ENUM(input));
                        break;
                    case 3:
                        if (value_string__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.valueString cannot be set twice."))
                        }++value_string__count;
                        this.set_valueString(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 4:
                        if (value_int32__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.valueInt32 cannot be set twice."))
                        }++value_int32__count;
                        this.set_valueInt32(protohx_ReadUtils.read__TYPE_INT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$setting,
        __properties__: {
            set_valueInt32: "set_valueInt32",
            get_valueInt32: "get_valueInt32",
            set_valueString: "set_valueString",
            get_valueString: "get_valueString",
            set_key: "set_key",
            get_key: "get_key",
            set_type: "set_type",
            get_type: "get_type"
        }
    });
    var agario_proto_User_$stats = function() {
        protohx_Message.call(this);
        this.set_gamesPlayed(0);
        this.set_massConsumed(0);
        this.set_allTimeScore(0);
        this.set_highestMass(0);
        this.set_longestTimeAlive(0);
        this.set_mostCellsEaten(0)
    };
    $hxClasses["agario.proto.User_stats"] = agario_proto_User_$stats;
    agario_proto_User_$stats.__name__ = ["agario", "proto", "User_stats"];
    agario_proto_User_$stats.__super__ = protohx_Message;
    agario_proto_User_$stats.prototype = $extend(protohx_Message.prototype, {
        gamesPlayed: null,
        setGamesPlayed: function(value) {
            this.set_gamesPlayed(value);
            return this
        },
        set_gamesPlayed: function(value) {
            return this.gamesPlayed = value
        },
        get_gamesPlayed: function() {
            return this.gamesPlayed
        },
        massConsumed: null,
        setMassConsumed: function(value) {
            this.set_massConsumed(value);
            return this
        },
        set_massConsumed: function(value) {
            return this.massConsumed = value
        },
        get_massConsumed: function() {
            return this.massConsumed
        },
        allTimeScore: null,
        setAllTimeScore: function(value) {
            this.set_allTimeScore(value);
            return this
        },
        set_allTimeScore: function(value) {
            return this.allTimeScore = value
        },
        get_allTimeScore: function() {
            return this.allTimeScore
        },
        highestMass: null,
        setHighestMass: function(value) {
            this.set_highestMass(value);
            return this
        },
        set_highestMass: function(value) {
            return this.highestMass = value
        },
        get_highestMass: function() {
            return this.highestMass
        },
        longestTimeAlive: null,
        setLongestTimeAlive: function(value) {
            this.set_longestTimeAlive(value);
            return this
        },
        set_longestTimeAlive: function(value) {
            return this.longestTimeAlive = value
        },
        get_longestTimeAlive: function() {
            return this.longestTimeAlive
        },
        mostCellsEaten: null,
        setMostCellsEaten: function(value) {
            this.set_mostCellsEaten(value);
            return this
        },
        set_mostCellsEaten: function(value) {
            return this.mostCellsEaten = value
        },
        get_mostCellsEaten: function() {
            return this.mostCellsEaten
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_gamesPlayed());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_massConsumed());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_allTimeScore());
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_highestMass());
            protohx_WriteUtils.writeTag(output, 0, 5);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_longestTimeAlive());
            protohx_WriteUtils.writeTag(output, 0, 6);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_mostCellsEaten());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("gamesPlayed", this.get_gamesPlayed());
            fn("massConsumed", this.get_massConsumed());
            fn("allTimeScore", this.get_allTimeScore());
            fn("highestMass", this.get_highestMass());
            fn("longestTimeAlive", this.get_longestTimeAlive());
            fn("mostCellsEaten", this.get_mostCellsEaten())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var games_played__count = 0;
            var mass_consumed__count = 0;
            var all_time_score__count = 0;
            var highest_mass__count = 0;
            var longest_time_alive__count = 0;
            var most_cells_eaten__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (games_played__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.gamesPlayed cannot be set twice."))
                        }++games_played__count;
                        this.set_gamesPlayed(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 2:
                        if (mass_consumed__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.massConsumed cannot be set twice."))
                        }++mass_consumed__count;
                        this.set_massConsumed(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 3:
                        if (all_time_score__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.allTimeScore cannot be set twice."))
                        }++all_time_score__count;
                        this.set_allTimeScore(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 4:
                        if (highest_mass__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.highestMass cannot be set twice."))
                        }++highest_mass__count;
                        this.set_highestMass(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 5:
                        if (longest_time_alive__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.longestTimeAlive cannot be set twice."))
                        }++longest_time_alive__count;
                        this.set_longestTimeAlive(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 6:
                        if (most_cells_eaten__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.mostCellsEaten cannot be set twice."))
                        }++most_cells_eaten__count;
                        this.set_mostCellsEaten(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$stats,
        __properties__: {
            set_mostCellsEaten: "set_mostCellsEaten",
            get_mostCellsEaten: "get_mostCellsEaten",
            set_longestTimeAlive: "set_longestTimeAlive",
            get_longestTimeAlive: "get_longestTimeAlive",
            set_highestMass: "set_highestMass",
            get_highestMass: "get_highestMass",
            set_allTimeScore: "set_allTimeScore",
            get_allTimeScore: "get_allTimeScore",
            set_massConsumed: "set_massConsumed",
            get_massConsumed: "get_massConsumed",
            set_gamesPlayed: "set_gamesPlayed",
            get_gamesPlayed: "get_gamesPlayed"
        }
    });
    var agario_proto_User_$timed_$event = function() {
        protohx_Message.call(this);
        this.set_eventId("");
        this.set_nextAvailableInSeconds(0)
    };
    $hxClasses["agario.proto.User_timed_event"] = agario_proto_User_$timed_$event;
    agario_proto_User_$timed_$event.__name__ = ["agario", "proto", "User_timed_event"];
    agario_proto_User_$timed_$event.__super__ = protohx_Message;
    agario_proto_User_$timed_$event.prototype = $extend(protohx_Message.prototype, {
        eventId: null,
        setEventId: function(value) {
            this.set_eventId(value);
            return this
        },
        set_eventId: function(value) {
            return this.eventId = value
        },
        get_eventId: function() {
            return this.eventId
        },
        nextAvailableInSeconds: null,
        setNextAvailableInSeconds: function(value) {
            this.set_nextAvailableInSeconds(value);
            return this
        },
        set_nextAvailableInSeconds: function(value) {
            return this.nextAvailableInSeconds = value
        },
        get_nextAvailableInSeconds: function() {
            return this.nextAvailableInSeconds
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_eventId());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_nextAvailableInSeconds());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("eventId", this.get_eventId());
            fn("nextAvailableInSeconds", this.get_nextAvailableInSeconds())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var event_id__count = 0;
            var next_available_in_seconds__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (event_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_timed_event.eventId cannot be set twice."))
                        }++event_id__count;
                        this.set_eventId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (next_available_in_seconds__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_timed_event.nextAvailableInSeconds cannot be set twice."))
                        }++next_available_in_seconds__count;
                        this.set_nextAvailableInSeconds(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$timed_$event,
        __properties__: {
            set_nextAvailableInSeconds: "set_nextAvailableInSeconds",
            get_nextAvailableInSeconds: "get_nextAvailableInSeconds",
            set_eventId: "set_eventId",
            get_eventId: "get_eventId"
        }
    });
    var agario_proto_User_$timed_$event_$updates = function() {
        protohx_Message.call(this);
        this.set_userTimedEvents([])
    };
    $hxClasses["agario.proto.User_timed_event_updates"] = agario_proto_User_$timed_$event_$updates;
    agario_proto_User_$timed_$event_$updates.__name__ = ["agario", "proto", "User_timed_event_updates"];
    agario_proto_User_$timed_$event_$updates.__super__ = protohx_Message;
    agario_proto_User_$timed_$event_$updates.prototype = $extend(protohx_Message.prototype, {
        userTimedEvents: null,
        setUserTimedEvents: function(value) {
            this.set_userTimedEvents(value);
            return this
        },
        set_userTimedEvents: function(value) {
            return this.userTimedEvents = value
        },
        get_userTimedEvents: function() {
            return this.userTimedEvents
        },
        addUserTimedEvents: function(value) {
            if (this.get_userTimedEvents() == null) {
                this.set_userTimedEvents([value])
            } else {
                this.get_userTimedEvents().push(value)
            }
        },
        writeToBuffer: function(output) {
            if (this.get_userTimedEvents() != null) {
                var _g = 0;
                var _g1 = this.get_userTimedEvents();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 1);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            if (this.get_userTimedEvents() != null && this.get_userTimedEvents().length > 0) {
                fn("userTimedEvents", this.get_userTimedEvents())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (this.get_userTimedEvents() == null) {
                            this.set_userTimedEvents([])
                        }
                        this.get_userTimedEvents().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$timed_$event()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$timed_$event_$updates,
        __properties__: {
            set_userTimedEvents: "set_userTimedEvents",
            get_userTimedEvents: "get_userTimedEvents"
        }
    });
    var agario_proto_User_$wallet_$item = function() {
        protohx_Message.call(this);
        this.set_productId("");
        this.set_quantity(0)
    };
    $hxClasses["agario.proto.User_wallet_item"] = agario_proto_User_$wallet_$item;
    agario_proto_User_$wallet_$item.__name__ = ["agario", "proto", "User_wallet_item"];
    agario_proto_User_$wallet_$item.__super__ = protohx_Message;
    agario_proto_User_$wallet_$item.prototype = $extend(protohx_Message.prototype, {
        productId: null,
        setProductId: function(value) {
            this.set_productId(value);
            return this
        },
        set_productId: function(value) {
            return this.productId = value
        },
        get_productId: function() {
            return this.productId
        },
        quantity: null,
        setQuantity: function(value) {
            this.set_quantity(value);
            return this
        },
        set_quantity: function(value) {
            return this.quantity = value
        },
        get_quantity: function() {
            return this.quantity
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_productId());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_quantity());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("productId", this.get_productId());
            fn("quantity", this.get_quantity())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var product_id__count = 0;
            var quantity__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (product_id__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_wallet_item.productId cannot be set twice."))
                        }++product_id__count;
                        this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (quantity__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_wallet_item.quantity cannot be set twice."))
                        }++quantity__count;
                        this.set_quantity(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_User_$wallet_$item,
        __properties__: {
            set_quantity: "set_quantity",
            get_quantity: "get_quantity",
            set_productId: "set_productId",
            get_productId: "get_productId"
        }
    });
    var agario_proto_Wallet_$updates = function() {
        protohx_Message.call(this);
        this.set_originPlatform("");
        this.set_productUpdates([])
    };
    $hxClasses["agario.proto.Wallet_updates"] = agario_proto_Wallet_$updates;
    agario_proto_Wallet_$updates.__name__ = ["agario", "proto", "Wallet_updates"];
    agario_proto_Wallet_$updates.__super__ = protohx_Message;
    agario_proto_Wallet_$updates.prototype = $extend(protohx_Message.prototype, {
        originPlatform: null,
        setOriginPlatform: function(value) {
            this.set_originPlatform(value);
            return this
        },
        set_originPlatform: function(value) {
            return this.originPlatform = value
        },
        get_originPlatform: function() {
            return this.originPlatform
        },
        productUpdates: null,
        setProductUpdates: function(value) {
            this.set_productUpdates(value);
            return this
        },
        set_productUpdates: function(value) {
            return this.productUpdates = value
        },
        get_productUpdates: function() {
            return this.productUpdates
        },
        addProductUpdates: function(value) {
            if (this.get_productUpdates() == null) {
                this.set_productUpdates([value])
            } else {
                this.get_productUpdates().push(value)
            }
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 2, 1);
            protohx_WriteUtils.write__TYPE_STRING(output, this.get_originPlatform());
            if (this.get_productUpdates() != null) {
                var _g = 0;
                var _g1 = this.get_productUpdates();
                while (_g < _g1.length) {
                    var value = _g1[_g];
                    ++_g;
                    protohx_WriteUtils.writeTag(output, 2, 2);
                    protohx_WriteUtils.write__TYPE_MESSAGE(output, value)
                }
            }
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("originPlatform", this.get_originPlatform());
            if (this.get_productUpdates() != null && this.get_productUpdates().length > 0) {
                fn("productUpdates", this.get_productUpdates())
            }
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var origin_platform__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (origin_platform__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Wallet_updates.originPlatform cannot be set twice."))
                        }++origin_platform__count;
                        this.set_originPlatform(protohx_ReadUtils.read__TYPE_STRING(input));
                        break;
                    case 2:
                        if (this.get_productUpdates() == null) {
                            this.set_productUpdates([])
                        }
                        this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input, new agario_proto_User_$data_$update()));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Wallet_$updates,
        __properties__: {
            set_productUpdates: "set_productUpdates",
            get_productUpdates: "get_productUpdates",
            set_originPlatform: "set_originPlatform",
            get_originPlatform: "get_originPlatform"
        }
    });
    var agario_proto_Xp_$level_$update = function() {
        protohx_Message.call(this);
        this.set_finalXpForLevel(0);
        this.set_deltaXp(0);
        this.set_finalLevel(0);
        this.set_deltaLevel(0)
    };
    $hxClasses["agario.proto.Xp_level_update"] = agario_proto_Xp_$level_$update;
    agario_proto_Xp_$level_$update.__name__ = ["agario", "proto", "Xp_level_update"];
    agario_proto_Xp_$level_$update.__super__ = protohx_Message;
    agario_proto_Xp_$level_$update.prototype = $extend(protohx_Message.prototype, {
        finalXpForLevel: null,
        setFinalXpForLevel: function(value) {
            this.set_finalXpForLevel(value);
            return this
        },
        set_finalXpForLevel: function(value) {
            return this.finalXpForLevel = value
        },
        get_finalXpForLevel: function() {
            return this.finalXpForLevel
        },
        deltaXp: null,
        setDeltaXp: function(value) {
            this.set_deltaXp(value);
            return this
        },
        set_deltaXp: function(value) {
            return this.deltaXp = value
        },
        get_deltaXp: function() {
            return this.deltaXp
        },
        finalLevel: null,
        setFinalLevel: function(value) {
            this.set_finalLevel(value);
            return this
        },
        set_finalLevel: function(value) {
            return this.finalLevel = value
        },
        get_finalLevel: function() {
            return this.finalLevel
        },
        deltaLevel: null,
        setDeltaLevel: function(value) {
            this.set_deltaLevel(value);
            return this
        },
        set_deltaLevel: function(value) {
            return this.deltaLevel = value
        },
        get_deltaLevel: function() {
            return this.deltaLevel
        },
        writeToBuffer: function(output) {
            protohx_WriteUtils.writeTag(output, 0, 1);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_finalXpForLevel());
            protohx_WriteUtils.writeTag(output, 0, 2);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_deltaXp());
            protohx_WriteUtils.writeTag(output, 0, 3);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_finalLevel());
            protohx_WriteUtils.writeTag(output, 0, 4);
            protohx_WriteUtils.write__TYPE_UINT32(output, this.get_deltaLevel());
            protohx_Message.prototype.writeExtensionOrUnknownFields.call(this, output)
        },
        forEachFields: function(fn) {
            fn("finalXpForLevel", this.get_finalXpForLevel());
            fn("deltaXp", this.get_deltaXp());
            fn("finalLevel", this.get_finalLevel());
            fn("deltaLevel", this.get_deltaLevel())
        },
        readFromSlice: function(input, bytesAfterSlice) {
            var final_xp_for_level__count = 0;
            var delta_xp__count = 0;
            var final_level__count = 0;
            var delta_level__count = 0;
            while (input.buf.totlen - input.buf.pos > bytesAfterSlice) {
                var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
                var _g = tag >> 3;
                switch (_g) {
                    case 1:
                        if (final_xp_for_level__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.finalXpForLevel cannot be set twice."))
                        }++final_xp_for_level__count;
                        this.set_finalXpForLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 2:
                        if (delta_xp__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.deltaXp cannot be set twice."))
                        }++delta_xp__count;
                        this.set_deltaXp(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 3:
                        if (final_level__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.finalLevel cannot be set twice."))
                        }++final_level__count;
                        this.set_finalLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    case 4:
                        if (delta_level__count != 0) {
                            throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.deltaLevel cannot be set twice."))
                        }++delta_level__count;
                        this.set_deltaLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
                        break;
                    default:
                        protohx_Message.prototype.readUnknown.call(this, input, tag)
                }
            }
        },
        __class__: agario_proto_Xp_$level_$update,
        __properties__: {
            set_deltaLevel: "set_deltaLevel",
            get_deltaLevel: "get_deltaLevel",
            set_finalLevel: "set_finalLevel",
            get_finalLevel: "get_finalLevel",
            set_deltaXp: "set_deltaXp",
            get_deltaXp: "get_deltaXp",
            set_finalXpForLevel: "set_finalXpForLevel",
            get_finalXpForLevel: "get_finalXpForLevel"
        }
    });
    var agario_proto_brew_$potion_$for_$slot_$response_Result_$enum = function() {};
    $hxClasses["agario.proto.brew_potion_for_slot_response.Result_enum"] = agario_proto_brew_$potion_$for_$slot_$response_Result_$enum;
    agario_proto_brew_$potion_$for_$slot_$response_Result_$enum.__name__ = ["agario", "proto", "brew_potion_for_slot_response", "Result_enum"];
    var agario_proto_cell_$state_Cell_$type_$enum = function() {};
    $hxClasses["agario.proto.cell_state.Cell_type_enum"] = agario_proto_cell_$state_Cell_$type_$enum;
    agario_proto_cell_$state_Cell_$type_$enum.__name__ = ["agario", "proto", "cell_state", "Cell_type_enum"];
    var agario_proto_device_Platform_$enum = function() {};
    $hxClasses["agario.proto.device.Platform_enum"] = agario_proto_device_Platform_$enum;
    agario_proto_device_Platform_$enum.__name__ = ["agario", "proto", "device", "Platform_enum"];
    var agario_proto_disconnect_Reason_$enum = function() {};
    $hxClasses["agario.proto.disconnect.Reason_enum"] = agario_proto_disconnect_Reason_$enum;
    agario_proto_disconnect_Reason_$enum.__name__ = ["agario", "proto", "disconnect", "Reason_enum"];
    var agario_proto_envelope_Content_$type_$enum = function() {};
    $hxClasses["agario.proto.envelope.Content_type_enum"] = agario_proto_envelope_Content_$type_$enum;
    agario_proto_envelope_Content_$type_$enum.__name__ = ["agario", "proto", "envelope", "Content_type_enum"];
    var agario_proto_game_$over_$reason_$enum_Enum = function() {};
    $hxClasses["agario.proto.game_over_reason_enum.Enum"] = agario_proto_game_$over_$reason_$enum_Enum;
    agario_proto_game_$over_$reason_$enum_Enum.__name__ = ["agario", "proto", "game_over_reason_enum", "Enum"];
    var agario_proto_game_$type_$enum_Enum = function() {};
    $hxClasses["agario.proto.game_type_enum.Enum"] = agario_proto_game_$type_$enum_Enum;
    agario_proto_game_$type_$enum_Enum.__name__ = ["agario", "proto", "game_type_enum", "Enum"];
    var agario_proto_inapp_$purchase_$response_Result_$enum = function() {};
    $hxClasses["agario.proto.inapp_purchase_response.Result_enum"] = agario_proto_inapp_$purchase_$response_Result_$enum;
    agario_proto_inapp_$purchase_$response_Result_$enum.__name__ = ["agario", "proto", "inapp_purchase_response", "Result_enum"];
    var agario_proto_lobby_$type_$enum_Enum = function() {};
    $hxClasses["agario.proto.lobby_type_enum.Enum"] = agario_proto_lobby_$type_$enum_Enum;
    agario_proto_lobby_$type_$enum_Enum.__name__ = ["agario", "proto", "lobby_type_enum", "Enum"];
    var agario_proto_login_$realm_$enum_Enum = function() {};
    $hxClasses["agario.proto.login_realm_enum.Enum"] = agario_proto_login_$realm_$enum_Enum;
    agario_proto_login_$realm_$enum_Enum.__name__ = ["agario", "proto", "login_realm_enum", "Enum"];
    var agario_proto_login_$response_Current_$game_$state_$enum = function() {};
    $hxClasses["agario.proto.login_response.Current_game_state_enum"] = agario_proto_login_$response_Current_$game_$state_$enum;
    agario_proto_login_$response_Current_$game_$state_$enum.__name__ = ["agario", "proto", "login_response", "Current_game_state_enum"];
    var agario_proto_offer_$bundle_$response_Result_$enum = function() {};
    $hxClasses["agario.proto.offer_bundle_response.Result_enum"] = agario_proto_offer_$bundle_$response_Result_$enum;
    agario_proto_offer_$bundle_$response_Result_$enum.__name__ = ["agario", "proto", "offer_bundle_response", "Result_enum"];
    var agario_proto_open_$potion_$for_$product_$response_Result_$enum = function() {};
    $hxClasses["agario.proto.open_potion_for_product_response.Result_enum"] = agario_proto_open_$potion_$for_$product_$response_Result_$enum;
    agario_proto_open_$potion_$for_$product_$response_Result_$enum.__name__ = ["agario", "proto", "open_potion_for_product_response", "Result_enum"];
    var agario_proto_open_$potion_$for_$slot_$response_Result_$enum = function() {};
    $hxClasses["agario.proto.open_potion_for_slot_response.Result_enum"] = agario_proto_open_$potion_$for_$slot_$response_Result_$enum;
    agario_proto_open_$potion_$for_$slot_$response_Result_$enum.__name__ = ["agario", "proto", "open_potion_for_slot_response", "Result_enum"];
    var agario_proto_product_$update_Origin_$enum = function() {};
    $hxClasses["agario.proto.product_update.Origin_enum"] = agario_proto_product_$update_Origin_$enum;
    agario_proto_product_$update_Origin_$enum.__name__ = ["agario", "proto", "product_update", "Origin_enum"];
    var agario_proto_product_$update_Type_$enum = function() {};
    $hxClasses["agario.proto.product_update.Type_enum"] = agario_proto_product_$update_Type_$enum;
    agario_proto_product_$update_Type_$enum.__name__ = ["agario", "proto", "product_update", "Type_enum"];
    var agario_proto_reconnect_Reconnect_$with_$enum = function() {};
    $hxClasses["agario.proto.reconnect.Reconnect_with_enum"] = agario_proto_reconnect_Reconnect_$with_$enum;
    agario_proto_reconnect_Reconnect_$with_$enum.__name__ = ["agario", "proto", "reconnect", "Reconnect_with_enum"];
    var agario_proto_req_Type_$enum = function() {};
    $hxClasses["agario.proto.req.Type_enum"] = agario_proto_req_Type_$enum;
    agario_proto_req_Type_$enum.__name__ = ["agario", "proto", "req", "Type_enum"];
    var agario_proto_soft_$purchase_$response_Result_$enum = function() {};
    $hxClasses["agario.proto.soft_purchase_response.Result_enum"] = agario_proto_soft_$purchase_$response_Result_$enum;
    agario_proto_soft_$purchase_$response_Result_$enum.__name__ = ["agario", "proto", "soft_purchase_response", "Result_enum"];
    var agario_proto_upgrade_$realm_$enum_Enum = function() {};
    $hxClasses["agario.proto.upgrade_realm_enum.Enum"] = agario_proto_upgrade_$realm_$enum_Enum;
    agario_proto_upgrade_$realm_$enum_Enum.__name__ = ["agario", "proto", "upgrade_realm_enum", "Enum"];
    var agario_proto_user_$data_$update_Type_$enum = function() {};
    $hxClasses["agario.proto.user_data_update.Type_enum"] = agario_proto_user_$data_$update_Type_$enum;
    agario_proto_user_$data_$update_Type_$enum.__name__ = ["agario", "proto", "user_data_update", "Type_enum"];
    var agario_proto_user_$potion_Status_$enum = function() {};
    $hxClasses["agario.proto.user_potion.Status_enum"] = agario_proto_user_$potion_Status_$enum;
    agario_proto_user_$potion_Status_$enum.__name__ = ["agario", "proto", "user_potion", "Status_enum"];
    var agario_proto_user_$potion_$slot_$enum_Enum = function() {};
    $hxClasses["agario.proto.user_potion_slot_enum.Enum"] = agario_proto_user_$potion_$slot_$enum_Enum;
    agario_proto_user_$potion_$slot_$enum_Enum.__name__ = ["agario", "proto", "user_potion_slot_enum", "Enum"];
    var agario_proto_user_$setting_Key_$enum = function() {};
    $hxClasses["agario.proto.user_setting.Key_enum"] = agario_proto_user_$setting_Key_$enum;
    agario_proto_user_$setting_Key_$enum.__name__ = ["agario", "proto", "user_setting", "Key_enum"];
    var agario_proto_user_$setting_Type_$enum = function() {};
    $hxClasses["agario.proto.user_setting.Type_enum"] = agario_proto_user_$setting_Type_$enum;
    agario_proto_user_$setting_Type_$enum.__name__ = ["agario", "proto", "user_setting", "Type_enum"];
    var oaktree_ext_security_IAuthenticationService = function() {};
    $hxClasses["oaktree.ext.security.IAuthenticationService"] = oaktree_ext_security_IAuthenticationService;
    oaktree_ext_security_IAuthenticationService.__name__ = ["oaktree", "ext", "security", "IAuthenticationService"];
    oaktree_ext_security_IAuthenticationService.__interfaces__ = [openfl_events_IEventDispatcher, oaktree_ext_services_IService];
    oaktree_ext_security_IAuthenticationService.prototype = {
        get_available: null,
        get_loggedIn: null,
        get_user: null,
        get_authToken: null,
        set_authToken: null,
        login: null,
        logout: null,
        __class__: oaktree_ext_security_IAuthenticationService,
        __properties__: {
            set_authToken: "set_authToken",
            get_authToken: "get_authToken",
            get_user: "get_user",
            get_loggedIn: "get_loggedIn",
            get_available: "get_available"
        }
    };
    var agario_security_AuthenticationService = function() {
        this._usedCache = false;
        this._loggedIn = false;
        openfl_events_EventDispatcher.call(this)
    };
    $hxClasses["agario.security.AuthenticationService"] = agario_security_AuthenticationService;
    agario_security_AuthenticationService.__name__ = ["agario", "security", "AuthenticationService"];
    agario_security_AuthenticationService.__interfaces__ = [oaktree_ext_security_IAuthenticationService];
    agario_security_AuthenticationService.__super__ = openfl_events_EventDispatcher;
    agario_security_AuthenticationService.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        get_available: function() {
            return true
        },
        _loggedIn: null,
        get_loggedIn: function() {
            if (this._serverModel != null && this._serverModel.status == oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED) {
                return false
            }
            return this._loggedIn
        },
        _user: null,
        get_user: function() {
            return this._user
        },
        _authToken: null,
        get_authToken: function() {
            return this._authToken
        },
        set_authToken: function(value) {
            this._authToken = value;
            return this._authToken
        },
        _usedCache: null,
        _serverModel: null,
        create: function() {},
        initialize: function() {
            this._serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
            this._serverModel.register(11, $bind(this, this.onServerMessage));
            this._serverModel.register(20, $bind(this, this.onServerDisconnect));
            this._serverModel.onConnect.add($bind(this, this.sendLoginMessage))
        },
        onServerDisconnect: function(type, userData) {
            this._loggedIn = false
        },
        onUpdate: function(type, userData) {
            this.onServerMessage(type, userData)
        },
        onServerMessage: function(type, msg) {
            switch (type) {
                case 11:
                    var loginMsg;
                    loginMsg = js_Boot.__cast(msg, agario_proto_Login_$response);
                    this._loggedIn = true;
                    Core.user.handleUserData(loginMsg);
                    Core.get_events().dispatchEventWith("UserEvent::USER_LOGGED");
                    break;
                default:
                    null
            }
        },
        login: function() {
            this.sendLoginMessage()
        },
        logout: function() {
            Core.user.setGuest();
            this._authToken = null;
            this._loggedIn = false;
            this._serverModel.disconnect();
            Core.services.gameui.closeShop();
            Core.services.shop.isShopAvailable = false;
            Core.get_events().dispatchEventWith("userLoggedOut")
        },
        sendLoginMessage: function() {
            if (this._authToken == null || this._authToken == "" || this._authToken == "undefined") {
                return
            }
            if (this._authToken == undefined) {
                return
            }
            var loginMessage = new agario_proto_Login_$request();
            loginMessage.set_authToken(this._authToken);
            loginMessage.set_device(new agario_proto_Device());
            if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) {
                loginMessage.set_realm(3)
            } else {
                loginMessage.set_realm(2)
            }
            var _g = Core.environment.platform;
            switch (_g[1]) {
                case 0:
                    loginMessage.get_device().set_platform(3);
                    break;
                case 1:
                    loginMessage.get_device().set_platform(4);
                    break;
                default:
                    loginMessage.get_device().set_platform(5)
            }
            loginMessage.get_device().set_version(agario_models_VersionModel.VERSION);
            loginMessage.get_device().set_width(0);
            loginMessage.get_device().set_height(0);
            this._serverModel.sendMessage(10, loginMessage);
            null
        },
        __class__: agario_security_AuthenticationService,
        __properties__: {
            set_authToken: "set_authToken",
            get_authToken: "get_authToken",
            get_user: "get_user",
            get_loggedIn: "get_loggedIn",
            get_available: "get_available"
        }
    });
    var agario_services_ConfigTags = function() {};
    $hxClasses["agario.services.ConfigTags"] = agario_services_ConfigTags;
    agario_services_ConfigTags.__name__ = ["agario", "services", "ConfigTags"];
    var agario_services_ConfigurationService = function() {
        this._configToDownload = "";
        this._assetsManifest = new haxe_ds_StringMap();
        this._loadedConfig = "";
        this.hasConfigToDownload = false;
        this.isInitialized = false
    };
    $hxClasses["agario.services.ConfigurationService"] = agario_services_ConfigurationService;
    agario_services_ConfigurationService.__name__ = ["agario", "services", "ConfigurationService"];
    agario_services_ConfigurationService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_ConfigurationService.setConfigID = function(pConfigID) {
        if (pConfigID != agario_services_ConfigurationService.configID) {
            agario_services_ConfigurationService.configID = pConfigID;
            Core.get_events().fire("config.id_updated", pConfigID)
        }
    };
    agario_services_ConfigurationService.prototype = {
        isInitialized: null,
        currentConfig: null,
        hasConfigToDownload: null,
        _config: null,
        _loadedConfig: null,
        _assetsManifest: null,
        _configToDownload: null,
        create: function() {},
        initialize: function() {
            oaktree_core_io_IO.addMapping("plist", oaktree_core_FileType.TEXT);
            Core.get_events().listen("config.id_updated", $bind(this, this.handleConfigurationIdUpdate));
            var server = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
            server.register(33, $bind(this, this.onConfigurationChange))
        },
        getLocalizationFile: function(pLangCode) {
            return this.getConfigUrl("" + pLangCode + "_text.json")
        },
        getConfigUrl: function(AssetId, ConfigurationId) {
            var localLocalConfig = agario_config_Configs.getProperty("load_local_configuration") == "true";
            var cid = agario_services_ConfigurationService.configID;
            if (ConfigurationId != null) {
                cid = ConfigurationId
            }
            if (localLocalConfig) {
                return this.getRootUrl("config/" + cid + "/" + AssetId)
            }
            var configParam = Core.getQueryString("conf");
            if (configParam != null) {
                agario_config_Configs.setProperty("config_url", configParam)
            }
            var assetUrl = this.getAssetFromManifest(AssetId);
            if (assetUrl == null) {
                return agario_config_Configs.getProperty("config_url") + ("/" + cid + "/" + AssetId)
            } else {
                return agario_config_Configs.getProperty("config_url") + ("/" + assetUrl)
            }
        },
        getRootUrl: function(id) {
            if (Core.environment.get_isLocal()) {
                var prefix = window.ASSETS_ROOT;
                if (prefix == undefined) {
                    prefix = ""
                }
                return "" + prefix + "mc/" + id
            }
            return agario_config_Configs.getProperty("root_url") + ("mc/" + id)
        },
        getAssetFromManifest: function(assetId) {
            if (this._assetsManifest.exists(assetId)) {
                return this._assetsManifest.get(assetId).base + "/" + this._assetsManifest.get(assetId).id
            }
            return null
        },
        reset: function() {
            var promoSystem = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
            promoSystem.saveState();
            promoSystem.resetSystems()
        },
        loadConfigurationOnHold: function() {
            if (this.hasConfigToDownload) {
                this.reset();
                agario_services_ConfigurationService.setConfigID(this._configToDownload);
                this._configToDownload = "";
                this.hasConfigToDownload = false
            }
        },
        handleConfigurationIdUpdate: function(event) {
            var configToLoad = event.data;
            if (this._loadedConfig == configToLoad) {
                haxe_Log.trace("Not updating the configuration since they have the sameID", {
                    fileName: "ConfigurationService.hx",
                    lineNumber: 169,
                    className: "agario.services.ConfigurationService",
                    methodName: "handleConfigurationIdUpdate"
                });
                return
            }
            this.loadConfig(configToLoad)
        },
        loadConfig: function(ConfigurationID) {
            var _g = this;
            Core.writeToConsole("%cLoading configuration...", "background: green; color: white;");
            var gotConfiguration = this.loadGameConfiguration(ConfigurationID).then($bind(this, this.parseConfiguration)).pipe($bind(this, this.loadLocalizations)).then($bind(this, this.parseLocalization)).pipe($bind(this, this.loadAssetsManifest)).then($bind(this, this.parseManifest)).then($bind(this, this.registerSkinsInCore)).then($bind(this, this.loadPromotionSystem)).then(function(_) {
                _g._loadedConfig = ConfigurationID;
                Core.get_events().fire("shop_event::newConfigLoaded");
                Core.writeToConsole("%cConfiguration loaded!", "background: green; color: white;");
                return
            }).catchError($bind(this, this.handleError))
        },
        handleError: function(data) {
            haxe_Log.trace("Failed to load Configuration", {
                fileName: "ConfigurationService.hx",
                lineNumber: 200,
                className: "agario.services.ConfigurationService",
                methodName: "handleError"
            });
            null
        },
        loadGameConfiguration: function(ConfigurationID) {
            var defer = new promhx_deferred_DeferredPromise();
            var config_url = this.getConfigUrl("GameConfiguration.json", ConfigurationID);
            if (Core.environment.get_isLocal()) {}
            var configurationLoader = new assets_manager_loaders_TextLoader(config_url);
            configurationLoader.addEventListener("complete", function(e) {
                defer.resolve(configurationLoader.data)
            });
            configurationLoader.start();
            return defer.boundPromise
        },
        parseConfiguration: function(data) {
            var configurationModel;
            try {
                configurationModel = new agario_module_shop_models_ShopModel(new haxe_format_JsonParser(data).parseRec().gameConfig);
                this._config = configurationModel
            } catch (msg) {
                haxe_CallStack.lastException = msg;
                if (msg instanceof js__$Boot_HaxeError) {
                    msg = msg.val
                }
                if (js_Boot.__instanceof(msg, String)) {
                    haxe_Log.trace("Error parsing the configuration!", {
                        fileName: "ConfigurationService.hx",
                        lineNumber: 236,
                        className: "agario.services.ConfigurationService",
                        methodName: "parseConfiguration"
                    });
                    return false
                } else {
                    throw (msg)
                }
            }
            this.isInitialized = true;
            Core.get_events().dispatchEventWith("ShopEvent::CONFIGURATION_LOADED", this._config);
            return true
        },
        loadLocalizations: function(_) {
            var defer = new promhx_deferred_DeferredPromise();
            var localization_url = this.getLocalizationFile(Core.user.selectedLanguage);
            if (Core.environment.get_isLocal()) {}
            var i18nloader = new assets_manager_loaders_TextLoader(localization_url);
            i18nloader.addEventListener("complete", function(e) {
                defer.resolve(i18nloader.data)
            });
            i18nloader.start();
            return defer.boundPromise
        },
        parseLocalization: function(text) {
            oaktree_ext_localization_I18n.init(new haxe_format_JsonParser(text).parseRec().texts);
            return true
        },
        loadAssetsManifest: function(_) {
            var defer = new promhx_deferred_DeferredPromise();
            var config_url = this.getConfigUrl("checksums/_manifestBase.json");
            var manifestData;
            if (Core.environment.get_isLocal()) {}
            var manifestLoader = new assets_manager_loaders_TextLoader(config_url);
            manifestLoader.addEventListener("complete", function(e) {
                if (manifestLoader.error == null) {
                    defer.resolve(haxe_Json.parse(manifestLoader.data))
                } else {
                    null
                }
            });
            manifestLoader.start();
            return defer.boundPromise
        },
        parseManifest: function(data) {
            var manifest = new oaktree_objects_ManifestVO(data);
            var _g = 0;
            var _g1 = manifest.assets;
            while (_g < _g1.length) {
                var asset = _g1[_g];
                ++_g;
                this._assetsManifest.set(asset.id, asset);
                var _g2 = asset.type;
                switch (_g2) {
                    case "atlas":
                        var value = new oaktree_objects_AssetVO({
                            id: asset.texture,
                            base: asset.base
                        });
                        this._assetsManifest.set(asset.texture, value);
                        var value1 = new oaktree_objects_AssetVO({
                            id: asset.metafile,
                            base: asset.base
                        });
                        this._assetsManifest.set(asset.metafile, value1);
                        var atlasImage = this.getConfigUrl(asset.texture);
                        var atlasInfo = this.getConfigUrl(asset.metafile);
                        Core.get_assets().registerExternalAtlas(asset.id, atlasImage, atlasInfo);
                        null;
                        break;
                    case "framedsprite":
                        Core.get_assets().registerAsset(asset.id, this.getConfigUrl(asset.id), oaktree_display_CoreAssetType.FRAMED_SPRITE);
                        break;
                    case "image":
                        Core.get_assets().registerAsset(asset.id, this.getConfigUrl(asset.id), oaktree_display_CoreAssetType.SPRITE);
                        break;
                    case "font":
                        Core.get_assets().registerAsset(asset.id, this.getConfigUrl(asset.id), oaktree_display_CoreAssetType.FONT);
                        break;
                    default:
                        Core.get_assets().registerAsset(asset.id, this.getConfigUrl(asset.id))
                }
            }
            return true
        },
        registerSkinsInCore: function(result) {
            Core.models.registerSkinsInGameCore();
            return true
        },
        loadPromotionSystem: function(_) {
            var hasLoginIntent = Core.ui.state.get_hasLoginIntent();
            var delay = 0;
            if (hasLoginIntent) {
                delay = 5000
            }
            oaktree_OakTree.engine.scheduleTask(delay, function() {
                var promoSystem = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
                promoSystem.loadConfiguration()
            });
            return true
        },
        onConfigurationChange: function(type, message) {
            if (message == null) {
                return
            }
            var m = message;
            if (agario_services_ConfigurationService.configID != "" + (function($this) {
                    var $r;
                    var this1 = m.get_latest();
                    $r = Std.string(_$UInt_UInt_$Impl_$.toFloat(this1));
                    return $r
                }(this))) {
                this._configToDownload = "" + (function($this) {
                    var $r;
                    var this2 = m.get_latest();
                    $r = Std.string(_$UInt_UInt_$Impl_$.toFloat(this2));
                    return $r
                }(this));
                this.hasConfigToDownload = true
            }
        },
        get_currentConfig: function() {
            return this._config
        },
        __class__: agario_services_ConfigurationService,
        __properties__: {
            get_currentConfig: "get_currentConfig"
        }
    };
    var agario_services_EnvironmentService = function() {};
    $hxClasses["agario.services.EnvironmentService"] = agario_services_EnvironmentService;
    agario_services_EnvironmentService.__name__ = ["agario", "services", "EnvironmentService"];
    agario_services_EnvironmentService.prototype = {
        platform: null,
        authenticationProvider: null,
        webEnv: null,
        initialize: function() {
            this.webEnv = new agario_services_web_WebEnvironment();
            this.checkWebPlatform()
        },
        checkWebPlatform: function() {
            if (this.webEnv.hasParameter("fb")) {
                this.platform = agario_services_WebPlatform.Facebook
            } else {
                if (this.webEnv.hasParameter("miniclip")) {
                    this.platform = agario_services_WebPlatform.Miniclip
                } else {
                    this.platform = agario_services_WebPlatform.Web
                }
            }
        },
        environment: null,
        get_environment: function() {
            if (agario_config_Configs.getProperty("env_local") != agario_config_Configs.NOT_FOUND) {
                return agario_services_DeployEnv.Local
            }
            if (agario_config_Configs.getProperty("env_development") != agario_config_Configs.NOT_FOUND) {
                return agario_services_DeployEnv.Development
            }
            if (agario_config_Configs.getProperty("env_staging") != agario_config_Configs.NOT_FOUND) {
                return agario_services_DeployEnv.Staging
            }
            if (agario_config_Configs.getProperty("env_production") != agario_config_Configs.NOT_FOUND) {
                return agario_services_DeployEnv.Live
            }
            return agario_services_DeployEnv.Local
        },
        isLocal: null,
        get_isLocal: function() {
            return this.get_environment() == agario_services_DeployEnv.Local
        },
        isInFacebook: null,
        get_isInFacebook: function() {
            return this.platform == agario_services_WebPlatform.Facebook
        },
        __class__: agario_services_EnvironmentService,
        __properties__: {
            get_isInFacebook: "get_isInFacebook",
            get_isLocal: "get_isLocal",
            get_environment: "get_environment"
        }
    };
    var agario_services_WebPlatform = $hxClasses["agario.services.WebPlatform"] = {
        __ename__: ["agario", "services", "WebPlatform"],
        __constructs__: ["Facebook", "Miniclip", "Web", "NonWeb"]
    };
    agario_services_WebPlatform.Facebook = ["Facebook", 0];
    agario_services_WebPlatform.Facebook.toString = $estr;
    agario_services_WebPlatform.Facebook.__enum__ = agario_services_WebPlatform;
    agario_services_WebPlatform.Miniclip = ["Miniclip", 1];
    agario_services_WebPlatform.Miniclip.toString = $estr;
    agario_services_WebPlatform.Miniclip.__enum__ = agario_services_WebPlatform;
    agario_services_WebPlatform.Web = ["Web", 2];
    agario_services_WebPlatform.Web.toString = $estr;
    agario_services_WebPlatform.Web.__enum__ = agario_services_WebPlatform;
    agario_services_WebPlatform.NonWeb = ["NonWeb", 3];
    agario_services_WebPlatform.NonWeb.toString = $estr;
    agario_services_WebPlatform.NonWeb.__enum__ = agario_services_WebPlatform;
    var agario_services_WebAuthProvider = $hxClasses["agario.services.WebAuthProvider"] = {
        __ename__: ["agario", "services", "WebAuthProvider"],
        __constructs__: ["Facebook", "Google", "Guest"]
    };
    agario_services_WebAuthProvider.Facebook = ["Facebook", 0];
    agario_services_WebAuthProvider.Facebook.toString = $estr;
    agario_services_WebAuthProvider.Facebook.__enum__ = agario_services_WebAuthProvider;
    agario_services_WebAuthProvider.Google = ["Google", 1];
    agario_services_WebAuthProvider.Google.toString = $estr;
    agario_services_WebAuthProvider.Google.__enum__ = agario_services_WebAuthProvider;
    agario_services_WebAuthProvider.Guest = ["Guest", 2];
    agario_services_WebAuthProvider.Guest.toString = $estr;
    agario_services_WebAuthProvider.Guest.__enum__ = agario_services_WebAuthProvider;
    var agario_services_DeployEnv = $hxClasses["agario.services.DeployEnv"] = {
        __ename__: ["agario", "services", "DeployEnv"],
        __constructs__: ["Local", "Development", "Staging", "Live"]
    };
    agario_services_DeployEnv.Local = ["Local", 0];
    agario_services_DeployEnv.Local.toString = $estr;
    agario_services_DeployEnv.Local.__enum__ = agario_services_DeployEnv;
    agario_services_DeployEnv.Development = ["Development", 1];
    agario_services_DeployEnv.Development.toString = $estr;
    agario_services_DeployEnv.Development.__enum__ = agario_services_DeployEnv;
    agario_services_DeployEnv.Staging = ["Staging", 2];
    agario_services_DeployEnv.Staging.toString = $estr;
    agario_services_DeployEnv.Staging.__enum__ = agario_services_DeployEnv;
    agario_services_DeployEnv.Live = ["Live", 3];
    agario_services_DeployEnv.Live.toString = $estr;
    agario_services_DeployEnv.Live.__enum__ = agario_services_DeployEnv;
    var oaktree_ext_services_IConfigurable = function() {};
    $hxClasses["oaktree.ext.services.IConfigurable"] = oaktree_ext_services_IConfigurable;
    oaktree_ext_services_IConfigurable.__name__ = ["oaktree", "ext", "services", "IConfigurable"];
    oaktree_ext_services_IConfigurable.prototype = {
        configure: null,
        __class__: oaktree_ext_services_IConfigurable
    };
    var agario_services_IPayment = function() {};
    $hxClasses["agario.services.IPayment"] = agario_services_IPayment;
    agario_services_IPayment.__name__ = ["agario", "services", "IPayment"];
    agario_services_IPayment.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_IPayment.prototype = {
        buyProduct: null,
        getCurrencyCode: null,
        overrideCurrencyCode: null,
        __class__: agario_services_IPayment
    };
    var agario_services_FBPaymentService = function() {
        this.loginComplete = false;
        this.configurationLoaded = false;
        this.currency_code = "USD"
    };
    $hxClasses["agario.services.FBPaymentService"] = agario_services_FBPaymentService;
    agario_services_FBPaymentService.__name__ = ["agario", "services", "FBPaymentService"];
    agario_services_FBPaymentService.__interfaces__ = [oaktree_ext_services_IConfigurable, agario_services_IPayment];
    agario_services_FBPaymentService.prototype = {
        payment_endpoint: null,
        exchange_rate: null,
        original_currency_code: null,
        currency_code: null,
        _models: null,
        _authModel: null,
        configurationLoaded: null,
        loginComplete: null,
        create: function() {},
        initialize: function() {
            this._models = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
            this._models.onConfigurationLoaded.add($bind(this, this.onConfigurationLoaded));
            this._authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
            Core.get_events().addEventListener("UserEvent::USER_LOGGED", $bind(this, this.onLoginSuccess))
        },
        configure: function(config) {
            this.payment_endpoint = config.endpoint
        },
        onConfigurationLoaded: function() {
            this.configurationLoaded = true;
            this.fetchExchangeRate()
        },
        onLoginSuccess: function(e) {
            this.loginComplete = true;
            this.fetchExchangeRate()
        },
        getCurrencyCode: function() {
            return this.currency_code
        },
        overrideCurrencyCode: function(code) {
            this.currency_code = code;
            return code
        },
        buyProduct: function(userId, productId, currency_code) {
            var buyOptions = {
                method: "pay",
                action: "purchaseitem",
                product: "" + this.payment_endpoint + "?purchase_id=" + productId,
                quantity: 1
            };
            FB.ui(buyOptions, $bind(this, this.handleBuyProduct));
            Core.get_states().enable("state_xsolla_iframe")
        },
        handleBuyProduct: function(response) {
            Core.get_states().disable("state_xsolla_iframe")
        },
        fetchExchangeRate: function() {
            if (!this.configurationLoaded || !this.loginComplete) {
                return
            }
            var callbackMethod = $bind(this, this.handleExchangeResponse);
            FB.api("/me/?fields=currency", callbackMethod)
        },
        handleExchangeResponse: function(response) {
            if (response != null && response.currency != null) {
                var exchange = new agario_module_shop_models_vo_ExchangeRateVO(response.currency);
                this.currency_code = this.original_currency_code = exchange.user_currency;
                this.exchange_rate = exchange;
                this._models.refreshShopItems()
            } else {
                null
            }
            Core.get_events().dispatchEventWith("payment_event::got_currency_code")
        },
        __class__: agario_services_FBPaymentService
    };
    var oaktree_ext_networking_IServer = function() {};
    $hxClasses["oaktree.ext.networking.IServer"] = oaktree_ext_networking_IServer;
    oaktree_ext_networking_IServer.__name__ = ["oaktree", "ext", "networking", "IServer"];
    oaktree_ext_networking_IServer.__interfaces__ = [oaktree_ext_services_IService];
    oaktree_ext_networking_IServer.prototype = {
        status: null,
        onConnect: null,
        onDisconnect: null,
        connect: null,
        disconnect: null,
        sendMessage: null,
        register: null,
        unregister: null,
        isConnected: null,
        __class__: oaktree_ext_networking_IServer
    };
    var agario_services_GameServerService = function() {
        this.disconnectedByRequest = false
    };
    $hxClasses["agario.services.GameServerService"] = agario_services_GameServerService;
    agario_services_GameServerService.__name__ = ["agario", "services", "GameServerService"];
    agario_services_GameServerService.__interfaces__ = [oaktree_ext_services_IConfigurable, oaktree_ext_networking_IServer];
    agario_services_GameServerService.encapsulateMessage = function(messageType, data) {
        var request = new agario_proto_Req();
        request.set_type(messageType);
        var _g = request.get_type();
        switch (_g) {
            case 70:
                request.set_softPurchaseRequestField(js_Boot.__cast(data, agario_proto_Soft_$purchase_$request));
                null;
                break;
            case 20:
                request.set_disconnectField(js_Boot.__cast(data, agario_proto_Disconnect));
                null;
                break;
            case 10:
                request.set_loginRequestField(js_Boot.__cast(data, agario_proto_Login_$request));
                break;
            case 80:
                request.set_updateUserSettingsRequestField(js_Boot.__cast(data, agario_proto_Update_$user_$settings_$request));
                break;
            case 112:
                request.set_activateBoostRequestField(js_Boot.__cast(data, agario_proto_Activate_$boost_$request));
                break;
            case 62:
                request.set_gameOverField(js_Boot.__cast(data, agario_proto_Game_$over));
                break;
            case 110:
                request.set_activateTimedEventRequestField(js_Boot.__cast(data, agario_proto_Activate_$timed_$event_$request));
                break;
            case 33:
                request.set_configurationChangeField(data);
                break;
            case 102:
                request.set_sendGiftsField(js_Boot.__cast(data, agario_proto_Send_$gifts));
                break;
            case 104:
                request.set_requestGiftsField(js_Boot.__cast(data, agario_proto_Request_$gifts));
                break;
            case 100:
                request.set_claimGiftsRequestField(js_Boot.__cast(data, agario_proto_Claim_$gifts_$request));
                break;
            case 103:
                request.set_consumeRequestsField(js_Boot.__cast(data, agario_proto_Consume_$requests));
                break;
            case 114:
                request.set_activateQuestRequestField(js_Boot.__cast(data, agario_proto_Activate_$quest_$request));
                break;
            case 77:
                request.set_offerBundleRequestField(js_Boot.__cast(data, agario_proto_Offer_$bundle_$request));
                break;
            default:
                null
        }
        return request
    };
    agario_services_GameServerService.addEnvelope = function(req) {
        return agario_services_GameServerService.packageMessage(req)
    };
    agario_services_GameServerService.packageMessage = function(request) {
        var e = new agario_proto_Envelope();
        e.set_contentType(1);
        e.set_uncompressedData(request);
        return e
    };
    agario_services_GameServerService.prototype = {
        status: null,
        onConnect: null,
        onDisconnect: null,
        uri: null,
        messageMapping: null,
        disconnectedByRequest: null,
        create: function() {
            this.onConnect = new msignal_Signal0();
            this.onDisconnect = new msignal_Signal1();
            this.messageMapping = new haxe_ds_IntMap()
        },
        initialize: function() {
            this.status = oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED;
            this.onConnect.add($bind(this, this.handleConnect));
            this.onDisconnect.add($bind(this, this.handleDisconnect));
            var dataManager = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
            dataManager.onConfigurationLoaded.add($bind(this, this.onConfigurationLoaded))
        },
        configure: function(config) {},
        onConfigurationLoaded: function() {
            var commSettings = Core.models.defaultCommunicationSettings
        },
        handleDisconnect: function(pByRequest) {
            this.status = oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED;
            this.disconnectedByRequest = false;
            Core.get_events().dispatchEventWith("ShopEvent::connectionLost")
        },
        handleConnect: function() {
            this.status = oaktree_ext_networking_ServerConnectionStatus.CONNECTED
        },
        connect: function(host, force) {
            if (force == null) {
                force = false
            }
        },
        disconnect: function() {
            if (this.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTED || this.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTING) {
                this.disconnectedByRequest = true;
                this.status = oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED
            }
        },
        sendMessage: function(messageType, data) {
            var message = agario_services_GameServerService.addEnvelope(agario_services_GameServerService.encapsulateMessage(messageType, data));
            var bytes = new haxe_io_BytesOutput();
            message.writeTo(bytes);
            var dataInByteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes.getBytes());
            var dataInArrayBuffer = dataInByteArray;
            var byteData = dataInArrayBuffer.b;
            if (window.core) {
                window.core.proxyMobileData(byteData)
            }
        },
        register: function(messageType, handler) {
            var callbacks;
            if (this.messageMapping.h.hasOwnProperty(messageType)) {
                callbacks = this.messageMapping.h[messageType]
            } else {
                callbacks = [];
                this.messageMapping.h[messageType] = callbacks
            }
            var _g = 0;
            while (_g < callbacks.length) {
                var temporaryHandler = callbacks[_g];
                ++_g;
                if (temporaryHandler == handler) {
                    return false
                }
            }
            callbacks.push(handler);
            return true
        },
        unregister: function(messageType, handler) {
            if (this.messageMapping.h.hasOwnProperty(messageType)) {
                var _this = this.messageMapping.h[messageType];
                return HxOverrides.remove(_this, handler)
            }
            return false
        },
        injectPacket: function(msg) {
            this.deliverRequest(this.parseInboxPacket(msg), true)
        },
        injectReq: function(req) {
            this.deliverRequest(req, true)
        },
        handleSocketData: function(t) {
            this.deliverRequest(this.parseInboxPacket(t), false)
        },
        parseInboxPacket: function(t) {
            var bytesReceived = t;
            var req = null;
            try {
                var env = new agario_proto_Envelope();
                env.mergeFrom(t);
                if (env.get_contentType() == 1) {
                    req = env.get_uncompressedData()
                } else {
                    req = new agario_proto_Req();
                    var bytes = haxe_zip_Uncompress.run(env.get_compressedData());
                    req.mergeFrom(bytes)
                }
            } catch (e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) {
                    e = e.val
                }
                haxe_Log.trace("Got invalid message from server", {
                    fileName: "GameServerService.hx",
                    lineNumber: 288,
                    className: "agario.services.GameServerService",
                    methodName: "parseInboxPacket"
                });
                null
            }
            if (req == null) {
                null
            }
            return req
        },
        deliverRequest: function(pRequest, injected) {
            if (injected == null) {
                injected = false
            }
            if (pRequest == null) {
                return
            }
            if (!injected) {
                null
            }
            if ((function($this) {
                    var $r;
                    var key = pRequest.get_type();
                    $r = $this.messageMapping.h.hasOwnProperty(key);
                    return $r
                }(this))) {
                var m = this.unpackageMessage(pRequest);
                var _g = 0;
                var _g1;
                var key1 = pRequest.get_type();
                _g1 = this.messageMapping.h[key1];
                while (_g < _g1.length) {
                    var callback = _g1[_g];
                    ++_g;
                    callback(pRequest.get_type(), m)
                }
            } else {
                null
            }
        },
        unpackageMessage: function(r) {
            var returnMessage = new protohx_Message();
            var _g = r.get_type();
            switch (_g) {
                case 71:
                    returnMessage = r.get_softPurchaseResponseField();
                    break;
                case 74:
                    returnMessage = r.get_inappPurchaseResponseField();
                    break;
                case 20:
                    returnMessage = r.get_disconnectField();
                    break;
                case 113:
                    returnMessage = r.get_activateBoostResponseField();
                    break;
                case 11:
                    returnMessage = r.get_loginResponseField();
                    break;
                case 10:
                    returnMessage = r.get_loginRequestField();
                    break;
                case 81:
                    returnMessage = r.get_updateUserSettingsResponseField();
                    break;
                case 111:
                    returnMessage = r.get_activateTimedEventResponseField();
                    break;
                case 76:
                    returnMessage = r.get_purchaseWalletUpdatesField();
                    break;
                case 62:
                    returnMessage = r.get_gameOverField();
                    break;
                case 75:
                    returnMessage = r.get_walletUpdatesField();
                    break;
                case 116:
                    returnMessage = r.get_userTimedEventUpdatesField();
                    break;
                case 33:
                    returnMessage = r.get_configurationChangeField();
                    break;
                case 101:
                    returnMessage = r.get_claimGiftsResponseField();
                    break;
                case 115:
                    returnMessage = r.get_activateQuestResponseField();
                    break;
                case 78:
                    returnMessage = r.get_offerBundleResponseField();
                    break;
                default:
                    null
            }
            return returnMessage
        },
        isConnected: function() {
            return this.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTED
        },
        __class__: agario_services_GameServerService
    };
    var agario_services_GamepadControllerService = function() {};
    $hxClasses["agario.services.GamepadControllerService"] = agario_services_GamepadControllerService;
    agario_services_GamepadControllerService.__name__ = ["agario", "services", "GamepadControllerService"];
    agario_services_GamepadControllerService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_GamepadControllerService.prototype = {
        gamepadAxisUpdate: null,
        sendMitosisCallback: null,
        ejectMassCallback: null,
        create: function() {},
        initialize: function() {
            lime_ui_Gamepad.onConnect.add($bind(this, this.onConnect))
        },
        onConnect: function(gamepad) {
            haxe_Log.trace("new gamepad connected: " + gamepad.id, {
                fileName: "GamepadControllerService.hx",
                lineNumber: 36,
                className: "agario.services.GamepadControllerService",
                methodName: "onConnect"
            });
            Core.services.gameui.showGamepadConnected();
            gamepad.onDisconnect.add($bind(this, this.onDisconnect));
            gamepad.onButtonDown.add($bind(this, this.onButtonDown));
            gamepad.onButtonUp.add($bind(this, this.onButtonUp));
            gamepad.onAxisMove.add($bind(this, this.onAxisMove))
        },
        onAxisMove: function(axis, value) {
            if (this.gamepadAxisUpdate != null) {
                this.gamepadAxisUpdate(axis, value)
            }
        },
        onButtonDown: function(button) {
            if (button == 0 && this.sendMitosisCallback != null) {
                this.sendMitosisCallback()
            }
            if (button == 1 && this.ejectMassCallback != null) {
                this.ejectMassCallback()
            }
        },
        onButtonUp: function(button) {
            haxe_Log.trace("button released:" + (function($this) {
                var $r;
                switch (button) {
                    case 0:
                        $r = "A";
                        break;
                    case 1:
                        $r = "B";
                        break;
                    case 2:
                        $r = "X";
                        break;
                    case 3:
                        $r = "Y";
                        break;
                    case 4:
                        $r = "BACK";
                        break;
                    case 5:
                        $r = "GUIDE";
                        break;
                    case 6:
                        $r = "START";
                        break;
                    case 7:
                        $r = "LEFT_STICK";
                        break;
                    case 8:
                        $r = "RIGHT_STICK";
                        break;
                    case 9:
                        $r = "LEFT_SHOULDER";
                        break;
                    case 10:
                        $r = "RIGHT_SHOULDER";
                        break;
                    case 11:
                        $r = "DPAD_UP";
                        break;
                    case 12:
                        $r = "DPAD_DOWN";
                        break;
                    case 13:
                        $r = "DPAD_LEFT";
                        break;
                    case 14:
                        $r = "DPAD_RIGHT";
                        break;
                    default:
                        $r = "UNKNOWN (" + button + ")"
                }
                return $r
            }(this)), {
                fileName: "GamepadControllerService.hx",
                lineNumber: 68,
                className: "agario.services.GamepadControllerService",
                methodName: "onButtonUp"
            })
        },
        onDisconnect: function() {
            Core.services.gameui.showGamepadDisconnected();
            haxe_Log.trace("gamepad disconnected", {
                fileName: "GamepadControllerService.hx",
                lineNumber: 75,
                className: "agario.services.GamepadControllerService",
                methodName: "onDisconnect"
            })
        },
        __class__: agario_services_GamepadControllerService
    };
    var agario_services_PaymentEvent = function() {};
    $hxClasses["agario.services.PaymentEvent"] = agario_services_PaymentEvent;
    agario_services_PaymentEvent.__name__ = ["agario", "services", "PaymentEvent"];
    var agario_services_ServicesManager = function() {
        this.initialize()
    };
    $hxClasses["agario.services.ServicesManager"] = agario_services_ServicesManager;
    agario_services_ServicesManager.__name__ = ["agario", "services", "ServicesManager"];
    agario_services_ServicesManager.prototype = {
        shop: null,
        gameui: null,
        config: null,
        view: null,
        promo: null,
        initialize: function() {
            this.gameui = new agario_services_gameui_backend_js_GameUIService();
            this.shop = oaktree_ext_services_ServiceManager.getService(agario_services_ShopService);
            this.config = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService);
            this.view = oaktree_ext_services_ServiceManager.getService(agario_services_ViewService);
            this.promo = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService)
        },
        __class__: agario_services_ServicesManager
    };
    var agario_services_ShopService = function() {
        this.isOpen = false;
        this.isShopAvailable = false;
        this.shouldShowUseInfo = true
    };
    $hxClasses["agario.services.ShopService"] = agario_services_ShopService;
    agario_services_ShopService.__name__ = ["agario", "services", "ShopService"];
    agario_services_ShopService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_ShopService.prototype = {
        _gameServer: null,
        _payModel: null,
        shouldShowUseInfo: null,
        onSoftPurchaseResponse: null,
        onOfferBundleResponse: null,
        onUseResponse: null,
        S_notEnoughCoins: null,
        playerInfoData: null,
        isShopAvailable: null,
        isOpen: null,
        create: function() {
            this.onSoftPurchaseResponse = new msignal_Signal1();
            this.onOfferBundleResponse = new msignal_Signal1();
            this.onUseResponse = new msignal_Signal1();
            this.S_notEnoughCoins = new msignal_Signal0();
            Core.get_events().addEventListener("ShopEvent::BUY", $bind(this, this.handlePurchaseEvent));
            Core.get_events().addEventListener("ShopEvent::USE", $bind(this, this.useItem));
            Core.get_events().addEventListener("ShopEvent::UNEQUIP", $bind(this, this.unequipSkin))
        },
        initialize: function() {
            this._payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment);
            this._gameServer = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
            this._gameServer.register(71, $bind(this, this.handleMessage));
            this._gameServer.register(113, $bind(this, this.handleMessage));
            this._gameServer.register(78, $bind(this, this.handleMessage));
            this._gameServer.register(76, $bind(this, this.handleMessage));
            this._gameServer.register(75, $bind(this, this.handleMessage));
            this._gameServer.onConnect.add($bind(this, this.handleConnectionOpen));
            this._gameServer.onDisconnect.add($bind(this, this.handleConnectionClosed));
            Core.get_events().listen("UserEvent::USER_LOGGED", $bind(this, this.onUserLogin));
            Core.get_events().listen("ShopEvent::CONFIGURATION_LOADED", $bind(this, this.onConfigurationLoaded));
            Core.get_events().listen("shop_event::configComplete", $bind(this, this.onConfigComplete))
        },
        onConfigComplete: function(e) {
            Core.get_events().unlisten("shop_event::configComplete", $bind(this, this.onConfigComplete))
        },
        onUserLogin: function() {
            Core.views.closeAllViews();
            Core.user.set_isLoggingIn(false);
            if (!Core.user.loggedIn) {
                return
            }
            this.isShopAvailable = true;
            var skinType = "";
            if (Core.models != null && Core.models.shopSkinsModel != null && Core.ui.settings != null) {
                var skin = Core.models.shopSkinsModel.getItemById(Core.ui.settings.get_skinId());
                if (skin != null) {
                    skinType = skin.skinType
                }
            }
            if (Core.user.userSettings == null || Core.user.userSettings.length == 0 || skinType == "MYSTERY") {
                this.setDefaultSkin()
            }
            Core.services.gameui.setUserCoins(Core.user.get_coins());
            Core.services.gameui.setMobileUser(Core.user.userInfo.hasLoggedIntoMobile)
        },
        onConfigurationLoaded: function(e) {
            Core.get_events().unlisten("ShopEvent::CONFIGURATION_LOADED", $bind(this, this.onConfigurationLoaded));
            this.checkIfShopCanBeShown()
        },
        checkIfShopCanBeShown: function() {
            var isConfigInitialized = Core.services.config.isInitialized;
            var isConnectionInitialized = this._gameServer.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTED;
            var hasLoginIntent = Core.services.gameui.hasLoginIntent();
            if (!isConfigInitialized || !isConnectionInitialized) {
                return
            }
            if (!hasLoginIntent) {
                Core.services.gameui.enableShop()
            }
        },
        handleConnectionOpen: function() {
            this.checkIfShopCanBeShown()
        },
        handleConnectionClosed: function(byRequest) {
            this.isShopAvailable = false;
            Core.services.gameui.disableShop();
            if (this.isOpen) {
                Core.get_events().dispatchEventWith("ShopEvent::connectionLost")
            }
        },
        handleMessage: function(t, m) {
            switch (t) {
                case 71:
                    this.shouldShowUseInfo = false;
                    this.handleSoftPurchaseResponse(js_Boot.__cast(m, agario_proto_Soft_$purchase_$response));
                    break;
                case 113:
                    this.handleUserBoostUpdate(js_Boot.__cast(m, agario_proto_Activate_$boost_$response));
                    break;
                case 78:
                    this.handleOfferBundleResponse(js_Boot.__cast(m, agario_proto_Offer_$bundle_$response));
                    break;
                case 76:
                    this.handlePurchaseWalletUpdates(js_Boot.__cast(m, agario_proto_Purchase_$wallet_$updates));
                    break;
                case 75:
                    this.handleWalletUpdate(js_Boot.__cast(m, agario_proto_Wallet_$updates));
                    break;
                default:
                    null
            }
        },
        handleWalletUpdate: function(updates) {
            Core.user.handleUserUpdates(updates.get_productUpdates())
        },
        makeInAppPurchase: function(purchaseId) {
            this._payModel.buyProduct(Core.user.id, purchaseId, this._payModel.getCurrencyCode())
        },
        activateTimedEvent: function(eventId) {
            var req = new agario_proto_Activate_$timed_$event_$request();
            req.set_eventId(eventId);
            this._gameServer.sendMessage(110, req)
        },
        makeSoftPurchase: function(purchaseId) {
            if (Core.models.shopPurchasesModel.getSoftPurchaseByPurchaseId(purchaseId).currencyAmount > Core.user.get_coins()) {
                this.S_notEnoughCoins.dispatch();
                return false
            } else {
                var purchaseRequest = new agario_proto_Soft_$purchase_$request();
                purchaseRequest.set_purchaseId(purchaseId);
                this._gameServer.sendMessage(70, purchaseRequest);
                return true
            }
        },
        handlePurchaseEvent: function(e) {
            if (e.data == null) {
                return
            }
            var productId = e.data;
            this.makePurchase(productId)
        },
        makePurchase: function(productId) {
            if (Core.user.isGuest) {
                Core.get_events().fire("ShopEvent::show_guest_conversion");
                return false
            }
            var walletItem = Core.models.shopPurchasesModel.getPurchaseByPurchaseId(productId);
            if (walletItem.type == "INAPP") {
                this.makeInAppPurchase(productId);
                return true
            } else {
                if (walletItem.type == "SOFT") {
                    var purchaseConfirmationDlg = new agario_module_shop_view_PurchaseCompleteDialog();
                    var purchaseResult = this.makeSoftPurchase(productId);
                    if (purchaseResult == false) {
                        purchaseConfirmationDlg.dispose();
                        return purchaseResult
                    }
                    Core.views.openView(purchaseConfirmationDlg, {
                        priority: 2,
                        animate: true,
                        allowClickClose: false,
                        callerView: MiniclipAPI.instance.shopDialog
                    });
                    Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
                    return true
                } else {
                    if (walletItem.type == "OFFER") {
                        var purchaseRequest = new agario_proto_Offer_$bundle_$request();
                        purchaseRequest.set_bundleId(productId);
                        this._gameServer.sendMessage(77, purchaseRequest)
                    }
                }
            }
            return false
        },
        useItem: function(e) {
            var item = e.data;
            if (js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopSkinItemVO)) {
                this.setSkin((js_Boot.__cast(item, agario_module_shop_models_vo_ShopSkinItemVO)).productIdToQuantify);
                var _g = 0;
                var _g1 = Core.models.shopSkinsModel.skinList;
                while (_g < _g1.length) {
                    var skin = _g1[_g];
                    ++_g;
                    skin.set_inUse(false)
                }
                item.set_inUse(true);
                this.shouldShowUseInfo = false
            } else {
                if (js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopBoostItemVO)) {
                    var req = new agario_proto_Activate_$boost_$request();
                    req.set_productId((js_Boot.__cast(item, agario_module_shop_models_vo_ShopBoostItemVO)).gameplayInfo.productId);
                    this._gameServer.sendMessage(112, req);
                    this.shouldShowUseInfo = false
                }
            }
            if (this.shouldShowUseInfo) {
                var dialog = new agario_module_shop_view_ProductUseDialog("0");
                Core.views.openView(dialog, {
                    priority: 2,
                    animate: true,
                    allowClickClose: false,
                    callerView: MiniclipAPI.instance.shopDialog
                });
                Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP")
            }
            this.shouldShowUseInfo = true
        },
        unequipSkin: function(e) {
            this.setDefaultSkin()
        },
        setDefaultSkin: function() {
            if (Core.models.defaultSettings != null && Core.user.defaultSkin == "") {
                Core.user.defaultSkin = Core.models.defaultSettings.getSettingByKey("skinUnequippedTag")
            }
            this.setSkin(Core.user.defaultSkin)
        },
        setSkin: function(skinId) {
            Core.ui.settings.set_skinId(skinId);
            Core.ui.settings.save();
            Core.models.shopItems.setSkinUse(skinId);
            var selectedSkin = Core.models.shopSkinsModel.getItemById(skinId);
            if (skinId != Core.user.defaultSkin && selectedSkin != null) {
                var skinLocation = selectedSkin.gamePlayInfo.get_shopImage();
                Core.services.gameui.setUserSkin(skinLocation, selectedSkin.gamePlayInfo.get_cellColor(), selectedSkin.skinType);
                if (window.core) {
                    window.core.loadSkin(selectedSkin.gamePlayInfo.get_skinName())
                }
            } else {
                Core.services.gameui.setUserSkin(Core.user.defaultSkin)
            }
            Core.views.updateViews()
        },
        handleUserBoostUpdate: function(response) {
            var isCategoryInUse = false;
            Core.user.evaluateWallet();
            var expires = response.get_userBoostItem().get_expiresInSeconds();
            if (response.get_userBoostItem().get_productId() == null || expires <= 0) {
                Core.get_events().dispatchEventWith("ShopEvent::useProductFailed");
                return
            }
            var activeBoost = new agario_proto_User_$boost_$item();
            activeBoost.set_productId(response.get_userBoostItem().get_productId());
            activeBoost.set_expiresInSeconds(response.get_userBoostItem().get_expiresInSeconds());
            var boostItem = Core.models.shopBoostItems.getItemByProductId(activeBoost.get_productId());
            var count = Core.user.userBoosts.length;
            var _g = 0;
            while (_g < count) {
                var i = _g++;
                var index = count - i - 1;
                var temp = Core.models.shopBoostItems.getItemByProductId(Core.user.userBoosts[index].get_productId());
                if (temp.categoryShopId == boostItem.categoryShopId) {
                    isCategoryInUse = true;
                    HxOverrides.remove(Core.user.userBoosts, Core.user.userBoosts[index])
                }
            }
            Core.user.userBoosts.push(activeBoost);
            Core.user.evaluateWallet();
            Core.user.handleUserUpdates((js_Boot.__cast(response, agario_proto_Activate_$boost_$response)).get_productUpdates());
            if (!isCategoryInUse) {
                if (this.shouldShowUseInfo) {
                    this.onUseResponse.dispatch(Core.models.shopBoostItems.getItemByProductId(activeBoost.get_productId()));
                    this.shouldShowUseInfo = true
                }
            }
            Core.views.updateViews();
            Core.services.promo.postEvent("PROMO_ACTIVATE_BOOST");
            Core.services.promo.postEvent(oaktree_utils_StringUtility.withFormat("PROMO_ACTIVATE_BOOST_%@", [activeBoost.get_productId()]))
        },
        handleSoftPurchaseResponse: function(pSoftPurchase) {
            this.onSoftPurchaseResponse.dispatch(pSoftPurchase);
            if (pSoftPurchase.get_result() == 1) {
                Core.services.promo.postEvent("PROMO_SOFT_PURCHASE");
                Core.services.promo.postEvent(oaktree_utils_StringUtility.withFormat("PROMO_SOFT_PURCHASE_%@", [pSoftPurchase.get_purchaseId()]))
            }
        },
        handleOfferBundleResponse: function(pOfferBundle) {
            this.onOfferBundleResponse.dispatch(pOfferBundle)
        },
        handleIAPComplete: function(purchaseId) {
            agario_views_ShopDialog.displayProductPurchaseScreen(purchaseId)
        },
        handlePurchaseWalletUpdates: function(purchaseWalletUpdates) {
            var purchaseId = purchaseWalletUpdates.get_purchaseId();
            var walletUpdates = purchaseWalletUpdates.get_walletUpdates();
            var productUpdates = walletUpdates.get_productUpdates();
            if (productUpdates.length <= 0) {
                return
            }
            this.handleIAPComplete(purchaseId);
            Core.user.handleUserUpdates(productUpdates);
            Core.services.promo.postEvent("PROMO_IN_APP");
            Core.services.promo.postEvent("PROMO_IS_PAYING_USER");
            Core.services.promo.postEvent(oaktree_utils_StringUtility.withFormat("PROMO_IN_APP_%@", [purchaseId]));
            var delayedActionCallback = Core.services.promo.fetchPurchaseActions(purchaseId);
            if (delayedActionCallback != null) {
                delayedActionCallback(true)
            }
        },
        __class__: agario_services_ShopService
    };
    var agario_services_ViewService = function() {};
    $hxClasses["agario.services.ViewService"] = agario_services_ViewService;
    agario_services_ViewService.__name__ = ["agario", "services", "ViewService"];
    agario_services_ViewService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_ViewService.prototype = {
        create: function() {
            Core.get_events().addEventListener("ShopEvent::show_guest_conversion", $bind(this, this.showGuest))
        },
        initialize: function() {},
        showGuest: function(e) {
            if (Core.get_states().isEnabled("state_guest_login_dialog")) {
                return
            }
            Core.services.gameui.showContainer();
            var guestDialog;
            if (e.data != null) {
                guestDialog = new agario_views_GuestLoginDialog(e.data.google, e.data.save)
            } else {
                guestDialog = new agario_views_GuestLoginDialog()
            }
            Core.views.openView(guestDialog, {
                priority: 2,
                animate: true,
                allowClickClose: true
            });
            guestDialog.addEventListener("close", $bind(this, this.onGuestClose));
            Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
            Core.get_events().dispatchEventWith("shop_event::allow_disable_close", false)
        },
        onGuestClose: function(e) {},
        __class__: agario_services_ViewService
    };
    var agario_services_XsollaPaymentService = function() {
        this.currencyCode = "USD"
    };
    $hxClasses["agario.services.XsollaPaymentService"] = agario_services_XsollaPaymentService;
    agario_services_XsollaPaymentService.__name__ = ["agario", "services", "XsollaPaymentService"];
    agario_services_XsollaPaymentService.__interfaces__ = [oaktree_ext_services_IConfigurable, agario_services_IPayment];
    agario_services_XsollaPaymentService.prototype = {
        payment_endpoint: null,
        currencyCode: null,
        _models: null,
        create: function() {},
        initialize: function() {
            this._models = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
            this._models.onConfigurationLoaded.add($bind(this, this.fetchStoreItems))
        },
        configure: function(config) {
            this.payment_endpoint = config.endpoint
        },
        buyProduct: function(userId, productId, currencyCode) {
            this.doShowPaymentModal("" + this.payment_endpoint + "/pay/" + userId + "/" + productId + "/" + currencyCode)
        },
        doShowPaymentModal: function(iframe_url) {
            var _g = this;
            $.get(iframe_url, function(data) {
                $("#modal-payment-link").attr("href", data.iframe_url);
                jQuery(".xsolla_container").magnificPopup({
                    type: "iframe",
                    mainClass: "mfp-fade",
                    preloader: true,
                    fixedContentPos: false,
                    callbacks: {
                        close: function() {
                            _g.onIframeClose()
                        }
                    }
                });
                $("#modal-payment-link").click()
            });
            Core.get_states().enable("state_xsolla_iframe")
        },
        onIframeClose: function() {
            Core.get_states().disable("state_xsolla_iframe")
        },
        handleBuyProduct: function(response) {
            null
        },
        getCurrencyCode: function() {
            return this.currencyCode
        },
        overrideCurrencyCode: function(code) {
            this.currencyCode = code;
            return code
        },
        fetchStoreItems: function() {
            var request = new haxe_Http("" + this.payment_endpoint + "/shop-items");
            request.onData = $bind(this, this.handleFetchStore);
            request.onError = function(msg) {
                null
            };
            request.request()
        },
        handleFetchStore: function(data) {
            var storeItems = new agario_module_shop_models_vo_XsollaShopItemsVO(new haxe_format_JsonParser(data).parseRec());
            if (storeItems == null) {
                return
            }
            this.currencyCode = storeItems.currency_code;
            var bundle = "com.miniclip.agario.";
            var _g = 0;
            var _g1 = storeItems.items;
            while (_g < _g1.length) {
                var item = _g1[_g];
                ++_g;
                var shopItem = this._models.shopItems.getItemByPurchaseId("" + item.sku);
                if (shopItem != null) {
                    shopItem.price = item.price
                }
            }
            Core.get_events().dispatchEventWith("payment_event::got_currency_code")
        },
        __class__: agario_services_XsollaPaymentService
    };
    var agario_services_gameui_BaseGameUIService = function() {};
    $hxClasses["agario.services.gameui.BaseGameUIService"] = agario_services_gameui_BaseGameUIService;
    agario_services_gameui_BaseGameUIService.__name__ = ["agario", "services", "gameui", "BaseGameUIService"];
    agario_services_gameui_BaseGameUIService.prototype = {
        enableShop: function() {
            null
        },
        setUserSkin: function(targetSkin, borderColor, tab) {
            if (tab == null) {
                tab = ""
            }
            if (borderColor == null) {
                borderColor = ""
            }
            null
        },
        setUserXPBoost: function(balance) {
            null
        },
        setUserMassBoost: function(balance) {
            null
        },
        setGiftInboxCounter: function(total) {
            null
        },
        setQuestsWarning: function(show, animate, time) {
            if (time == null) {
                time = 0
            }
            null
        },
        setBoostPlus: function(type) {
            null
        },
        setBubbleQuantity: function(type, balance) {
            null
        },
        showRetryOption: function() {
            null
        },
        setTimerForBoost: function(type, time, callback, productId) {
            null
        },
        setTimerForQuest: function(type, time, callback, productId) {
            null
        },
        closeShop: function() {
            null
        },
        setIcon: function(type, path) {
            null
        },
        setUserCoins: function(coinAmount) {
            null
        },
        setUserName: function(name) {},
        setUserAvatar: function(url) {},
        getUserSocialId: function(callback) {
            callback("100000415416793")
        },
        disableShop: function() {
            null
        },
        setVersionTag: function(tag) {
            null
        },
        setUserIdTag: function(tag) {
            null
        },
        doLogout: function() {
            null
        },
        setMobileUser: function(hasLoggedIntoMobile) {
            null
        },
        showGamepadConnected: function() {
            null
        },
        showGamepadDisconnected: function() {
            null
        },
        setAccountData: function(data, shouldAnimate) {},
        setGuestInfo: function() {},
        clearTimers: function() {},
        showContainer: function() {},
        hideContainer: function() {},
        lockContainer: function() {},
        unlockContainer: function() {},
        openOfferWall: function() {},
        closeOfferWall: function() {},
        openVideoAd: function() {},
        closeVideoAd: function() {},
        openTapResearchOfferWall: function() {},
        closeTapResearchOfferWall: function() {},
        getUserEngagement: function() {
            return false
        },
        hasLoginIntent: function() {
            return false
        },
        __class__: agario_services_gameui_BaseGameUIService
    };
    var agario_services_gameui_backend_js_GameUIService = function() {
        this.isContainerVisible = true;
        this.runningTimers = [];
        agario_services_gameui_BaseGameUIService.call(this);
        Core.get_events().addEventListener("UserEvent::USER_LOGGED", $bind(this, this.onUserLogged))
    };
    $hxClasses["agario.services.gameui.backend.js.GameUIService"] = agario_services_gameui_backend_js_GameUIService;
    agario_services_gameui_backend_js_GameUIService.__name__ = ["agario", "services", "gameui", "backend", "js", "GameUIService"];
    agario_services_gameui_backend_js_GameUIService.__super__ = agario_services_gameui_BaseGameUIService;
    agario_services_gameui_backend_js_GameUIService.prototype = $extend(agario_services_gameui_BaseGameUIService.prototype, {
        runningTimers: null,
        isContainerVisible: null,
        onUserLogged: function(e) {
            this.setUserIdTag("User id: " + Core.user.userInfo.displayName);
            Core.user.userInfo.xpNeeded = Core.models.xpModel.getMaxXpForLevel(Core.user.userInfo.level);
            agarApp.core.trigger("user_login", [Core.user]);
            if (Core.user.userInfo.level >= Core.models.xpModel.xpList.length) {
                Core.user.userInfo.xp = Core.user.userInfo.xpNeeded
            }
            agarApp.account.setUserData(Core.user.userInfo)
        },
        setUserSkin: function(targetSkin, borderColor, tab) {
            if (tab == null) {
                tab = ""
            }
            if (borderColor == null) {
                borderColor = ""
            }
            var skinTarget = $("#skinButton img");
            skinTarget.addClass("circle bordered");
            skinTarget.height("90px");
            if (targetSkin == Core.user.defaultSkin || targetSkin == "") {
                var skinLabel = $("#skinLabel");
                skinLabel.fadeIn(100);
                skinTarget.fadeOut(100);
                skinTarget.attr("src", "");
                $("#skinButton").addClass("circle bordered");
                $("#skinButton").height("90px")
            } else {
                var skinLabel1 = $("#skinLabel");
                skinTarget.attr("src", targetSkin);
                skinTarget.css("border", "3px solid " + StringTools.replace(borderColor, "0x", "#"));
                skinLabel1.fadeOut(100);
                skinTarget.fadeIn(100);
                $("#skinButton").removeClass("circle bordered")
            }
            tab = "OWNED";
            $("#skinButton").attr("data-type", tab)
        },
        setMobileUser: function(hasLoggedIntoMobile) {
            if (hasLoggedIntoMobile == false) {
                $(".agario-promo").hide();
                $("#agario-web-incentive").fadeIn(500)
            }
        },
        setUserXPBoost: function(balance) {
            var targetElement = this.getTargetHTML(agario_module_shop_models_types_BoostType.XP_BOOST);
            var boostButton = $(targetElement + " div");
            boostButton.attr("class", "circle small red");
            if (balance == "0" || balance == "+") {
                balance = "+";
                this.setBoostPlus(agario_module_shop_models_types_BoostType.XP_BOOST)
            } else {
                this.setBubbleQuantity(agario_module_shop_models_types_BoostType.XP_BOOST, balance)
            }
        },
        setUserMassBoost: function(balance) {
            var targetElement = this.getTargetHTML(agario_module_shop_models_types_BoostType.MASS_BOOST);
            var boostButton = $(targetElement + " div");
            boostButton.attr("class", "circle small red");
            if (balance == "0" || balance == "+") {
                balance = "+";
                this.setBoostPlus(agario_module_shop_models_types_BoostType.MASS_BOOST)
            } else {
                this.setBubbleQuantity(agario_module_shop_models_types_BoostType.MASS_BOOST, balance)
            }
        },
        setGiftInboxCounter: function(total) {
            var targetElement = this.getTargetHTML("giftButton");
            var giftButton = $(targetElement + " div");
            giftButton.attr("class", "circle small red gifts");
            var nr = Std.parseInt(total);
            if (nr == 0 || total == "") {
                giftButton.hide()
            } else {
                giftButton.show();
                this.setBubbleQuantity("giftButton", total)
            }
        },
        setQuestsWarning: function(show, animate, time) {
            if (time == null) {
                time = 0
            }
            var targetElement = this.getTargetHTML("dailyQuestsButton");
            var questsButton = $(targetElement + " div");
            questsButton.attr("class", "circle small red quests");
            this.setBubbleQuantity("dailyQuestsButton", "!");
            if (show) {
                questsButton.show();
                if (animate) {
                    questsButton.addClass("animated pulse")
                } else {
                    questsButton.removeClass("animated pulse")
                }
            } else {
                questsButton.hide()
            }
            this.setTimerForQuest("dailyQuestsButton", time, $bind(this, this.onQuestTimeComplete), "quest")
        },
        onQuestTimeComplete: function() {},
        setBoostPlus: function(type) {
            var targetElement = this.getTargetHTML(type);
            var boostButton = $(targetElement + " div");
            boostButton.attr("class", "circle small green");
            this.setBubbleQuantity(type, "+")
        },
        setBubbleQuantity: function(type, balance) {
            if (Std.parseInt(balance) >= 100) {
                balance = "99+"
            }
            var targetElement = this.getTargetHTML(type);
            var boostButton = $(targetElement + " div");
            boostButton.children("span").text(balance);
            $(targetElement + " .outlined-text").removeClass("plus-text");
            if (balance == "+") {
                $(targetElement + " .outlined-text").addClass("plus-text")
            }
        },
        enableShop: function() {
            $("#openShopBtn").removeAttr("disabled");
            $(".shop-left-container").show();
            $(".shop-right-container").show();
            $(".vertical-line").show();
            $(".agario-shop-panel .text-muted").html("");
            $(".agario-shop-panel").fadeIn(200);
            $("#retryBtn").hide();
            $(".shop-blocker").fadeOut(100);
            $(".play-blocker").fadeOut(100);
            Core.ui.mainUI.showShop()
        },
        disableShop: function() {
            $("#openShopBtn").attr("disabled", "");
            $(".shop-blocker").fadeIn(100);
            this.setUserXPBoost("0");
            this.setUserMassBoost("0");
            this.setUserSkin("");
            this.setGiftInboxCounter("0")
        },
        showRetryOption: function() {
            $(".shop-left-container").hide();
            $(".shop-right-container").hide();
            $(".vertical-line").hide();
            $(".shop-blocker").fadeOut(100);
            $("#retryBtn").show();
            $(".agario-shop-panel .text-muted").html("");
            $(".agario-shop-panel .text-muted").html(oaktree_ext_localization_I18n.text("shop_unavailable_message"))
        },
        setTimerForBoost: function(type, time, callback, productId) {
            var targetElement = this.getTargetHTML(type);
            var timerLabel = $(targetElement + " .timer");
            $(targetElement + " div").attr("class", "circle small gray");
            timerLabel.show();
            this.setTimer(targetElement, time, callback, productId)
        },
        setTimerForQuest: function(type, time, callback, productId) {
            if (time > 0) {
                var targetElement = this.getTargetHTML(type);
                var timerLabel = $(targetElement + " .timer");
                timerLabel.show();
                this.setTimer(targetElement, time, callback, productId)
            } else {
                this.hideTimerForQuest(type, productId)
            }
        },
        hideTimerForQuest: function(type, productId) {
            var targetElement = this.getTargetHTML(type);
            var timerLabel = $(targetElement + " .timer");
            timerLabel.hide();
            this.removeTimer(productId)
        },
        setIcon: function(type, path) {
            $(this.getTargetHTML(type) + " img").attr("src", openfl_Lib.application.config.rootPath + path)
        },
        getTargetHTML: function(type) {
            var targetElement = "";
            switch (type) {
                case "xp_boost":
                    targetElement = "#boostButton";
                    break;
                case "mass_boost":
                    targetElement = "#massButton";
                    break;
                case "giftButton":
                    targetElement = "#giftButton";
                    break;
                case "dailyQuestsButton":
                    targetElement = "#dailyQuestsButton";
                    break
            }
            return targetElement
        },
        closeShop: function() {
            var timerLen = this.runningTimers.length;
            var _g = 0;
            while (_g < timerLen) {
                var i = _g++;
                if (this.runningTimers[i] == null) {
                    continue
                }
                this.runningTimers[i].stop();
                $(Std.string(this.runningTimers[i].data.container) + " .timer").text("");
                HxOverrides.remove(this.runningTimers, this.runningTimers[i])
            }
            this.setUserSkin("")
        },
        setUserCoins: function(coinAmount) {
            var prefix = "";
            if (coinAmount >= 10000000) {
                coinAmount = coinAmount / 1000000 | 0;
                prefix = " M"
            }
            var coinAmountString = oaktree_utils_StringUtility.formatNumber(coinAmount, "n", " ") + prefix;
            $(".agario-wallet-label").text(coinAmountString == null ? "null" : "" + coinAmountString)
        },
        setUserName: function(name) {
            $(".agario-profile-name").text(name)
        },
        setUserAvatar: function(url) {
            $(".agario-profile-picture").attr("src", url)
        },
        setVersionTag: function(tag) {
            $("#version-tag").text(tag)
        },
        setUserIdTag: function(tag) {
            $("#user-id-tag").text(tag)
        },
        hasLoginIntent: function() {
            return window.storageInfo.loginIntent == "1"
        },
        getUserSocialId: function(callback) {
            FB.api("/me", function(response) {
                if (response && !response.error) {
                    callback(response.id)
                }
            })
        },
        doLogout: function() {
            window.logout()
        },
        showGamepadConnected: function() {
            if ("gamepad" in queryString) {
                $("#controller_alert_connected").fadeIn(500).delay(3000).fadeOut(500)
            }
        },
        showGamepadDisconnected: function() {
            if ("gamepad" in queryString) {
                $("#controller_alert_disconnected").fadeIn(500).delay(3000).fadeOut(500)
            }
        },
        setAccountData: function(data, shouldAnimate) {
            agarApp.account.setAccountData(data, shouldAnimate)
        },
        setGuestInfo: function() {
            this.setAccountData({
                level: 1,
                xp: 0,
                xpNeeded: 50
            }, false);
            this.setUserCoins(100);
            this.setUserName("Guest");
            this.setUserAvatar(Core.services.config.getRootUrl("img/profilepic_guest.png"));
            this.setUserXPBoost("0");
            this.setUserMassBoost("0");
            this.setGiftInboxCounter("0");
            $("#agario-web-incentive").fadeOut(100);
            $(".agario-promo").delay(200).fadeIn(400)
        },
        setTimer: function(container, time, callback, productId) {
            var alreadyRunning = false;
            var _g1 = 0;
            var _g = this.runningTimers.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.runningTimers[i].data.productId == productId) {
                    alreadyRunning = true
                }
            }
            if (!alreadyRunning) {
                var timer = new oaktree_utils_DataTimer(1000);
                timer.data.targetDate = new Date().getTime() + time * 1000;
                timer.data.container = container;
                timer.data.productId = productId;
                timer.addEventListener("timer", $bind(this, this.onTimerTick));
                timer.data.callBack = callback;
                timer.start();
                this.runningTimers.push(timer)
            }
        },
        onTimerTick: function(t) {
            var timer;
            timer = js_Boot.__cast(t.currentTarget, oaktree_utils_DataTimer);
            var timerData = timer.data;
            var remainTime = timerData.targetDate - new Date().getTime();
            var strFinal = agario_utils_TimeUtils.getStringFromTimestamp(remainTime, 2);
            if (remainTime <= 0) {
                this.removeTimer(timerData.productId);
                remainTime = 0;
                strFinal = "";
                Reflect.callMethod({}, timerData.callBack, [timerData.productId])
            }
            var timerLabel = $(Std.string(timerData.container) + " .timer");
            timerLabel.text(strFinal)
        },
        removeTimer: function(productId) {
            var timer = this.runningTimers.filter(function(item) {
                return item.data.productId == productId
            })[0];
            if (timer != null) {
                HxOverrides.remove(this.runningTimers, timer);
                timer.stop()
            }
        },
        clearTimers: function() {
            var _g1 = 0;
            var _g = this.runningTimers.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.runningTimers[i] != null && this.runningTimers[i].running) {
                    this.runningTimers[i].stop()
                }
                this.runningTimers = []
            }
        },
        openOfferWall: function() {
            window.openOfferwall();
            Core.get_states().enable("state_offerwall_window")
        },
        openVideoAd: function() {
            window.openVideoAd();
            Core.get_states().enable("state_video_window")
        },
        closeVideoAd: function() {
            window.closeVideoAd()
        },
        openTapResearchOfferWall: function() {
            window.TRModule.openOfferWall();
            Core.get_states().enable("state_offerwall_window")
        },
        closeTapResearchOfferWall: function() {
            window.TRModule.closeOfferWall()
        },
        getUserEngagement: function() {
            return window.hasEngagement
        },
        showContainer: function() {
            var target = MiniclipAPI.instance.container;
            var overlay = MiniclipAPI.instance.overlay;
            if (overlay != "") {
                $("#" + overlay).fadeIn()
            }
            $("#" + target).fadeIn();
            this.isContainerVisible = true
        },
        hideContainer: function() {
            if (!this.isContainerVisible) {
                return
            }
            var target = MiniclipAPI.instance.container;
            var overlay = MiniclipAPI.instance.overlay;
            if (overlay != "") {
                $("#" + overlay).fadeOut()
            }
            $("#" + target).fadeOut();
            openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
            this.isContainerVisible = false
        },
        lockContainer: function() {
            $("#openfl-overlay-top").fadeIn();
            this.isContainerVisible = true
        },
        unlockContainer: function() {
            $("#openfl-overlay-top").fadeOut()
        },
        __class__: agario_services_gameui_backend_js_GameUIService
    });
    var miniclip_promotionsystem_core_interfaces_IPromotionPersistanceDelegate = function() {};
    $hxClasses["miniclip.promotionsystem.core.interfaces.IPromotionPersistanceDelegate"] = miniclip_promotionsystem_core_interfaces_IPromotionPersistanceDelegate;
    miniclip_promotionsystem_core_interfaces_IPromotionPersistanceDelegate.__name__ = ["miniclip", "promotionsystem", "core", "interfaces", "IPromotionPersistanceDelegate"];
    miniclip_promotionsystem_core_interfaces_IPromotionPersistanceDelegate.prototype = {
        saveData: null,
        loadData: null,
        __class__: miniclip_promotionsystem_core_interfaces_IPromotionPersistanceDelegate
    };
    var agario_services_promo_AgarioPersistanceDelegate = function(id) {
        this._id = id;
        this.reset()
    };
    $hxClasses["agario.services.promo.AgarioPersistanceDelegate"] = agario_services_promo_AgarioPersistanceDelegate;
    agario_services_promo_AgarioPersistanceDelegate.__name__ = ["agario", "services", "promo", "AgarioPersistanceDelegate"];
    agario_services_promo_AgarioPersistanceDelegate.__interfaces__ = [miniclip_promotionsystem_core_interfaces_IPromotionPersistanceDelegate];
    agario_services_promo_AgarioPersistanceDelegate.prototype = {
        _id: null,
        _slotId: null,
        _saveSlot: null,
        _lastUserId: null,
        getSaveSlot: function() {
            return this._saveSlot
        },
        reset: function() {
            var userId;
            if (Core.user.loggedIn) {
                userId = "" + Core.user.name
            } else {
                userId = "guest"
            }
            this._slotId = "agario_" + this._id + "_" + userId;
            this._saveSlot = new oaktree_core_io_SaveSlot(this._slotId)
        },
        saveData: function(data) {
            var slot = this.getSaveSlot();
            var compressed = data;
            try {
                compressed = LZString.compress(compressed)
            } catch (e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) {
                    e = e.val
                }
                compressed = data
            }
            this._saveSlot.data = compressed;
            this._saveSlot.save()
        },
        loadData: function() {
            var slot = this.getSaveSlot();
            try {
                var uncompressed = slot.load();
                uncompressed = LZString.decompress(uncompressed);
                Core.user.dispatchPromoEvents();
                return uncompressed
            } catch (e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) {
                    e = e.val
                }
                null
            }
            return null
        },
        __class__: agario_services_promo_AgarioPersistanceDelegate
    };
    var miniclip_promotionsystem_client_interfaces_IPromotionSystemClientDelegate = function() {};
    $hxClasses["miniclip.promotionsystem.client.interfaces.IPromotionSystemClientDelegate"] = miniclip_promotionsystem_client_interfaces_IPromotionSystemClientDelegate;
    miniclip_promotionsystem_client_interfaces_IPromotionSystemClientDelegate.__name__ = ["miniclip", "promotionsystem", "client", "interfaces", "IPromotionSystemClientDelegate"];
    miniclip_promotionsystem_client_interfaces_IPromotionSystemClientDelegate.prototype = {
        redirectToTarget: null,
        makePurchase: null,
        getReferencePriceForTransaction: null,
        getPromotionalPriceForTransaction: null,
        getDescriptionForTransaction: null,
        getDescriptionForProduct: null,
        getReferenceSumAmountForProduct: null,
        getReferenceAmountForProduct: null,
        getPromotionalSumAmountForProduct: null,
        getPromotionalAmountForProduct: null,
        canShowOffer: null,
        canShowOfferPopup: null,
        canShowOfferBadge: null,
        openStoreWithAppId: null,
        openBrowserWithURL: null,
        promoActionTriggered: null,
        badgeButtonPressed: null,
        promoCloseTriggeredForSystem: null,
        getLocalizedResourceForResource: null,
        getLocalizedTextForTag: null,
        getFormatedStringForTimeStamp: null,
        getDefaultBadgeCycleCooldownForSystem: null,
        hideCurrentBadgeForSystem: null,
        showBadge: null,
        getValueForJSONQuery: null,
        getCurrentUserId: null,
        userOwnsProductsInList: null,
        userHasAppsInstalled: null,
        getPopupForOffer: null,
        getPromoButtonForOffer: null,
        __class__: miniclip_promotionsystem_client_interfaces_IPromotionSystemClientDelegate
    };
    var agario_services_promo_AgarioPromoClientDelegate = function() {
        this.requestByBadge = false;
        this._ps = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService)
    };
    $hxClasses["agario.services.promo.AgarioPromoClientDelegate"] = agario_services_promo_AgarioPromoClientDelegate;
    agario_services_promo_AgarioPromoClientDelegate.__name__ = ["agario", "services", "promo", "AgarioPromoClientDelegate"];
    agario_services_promo_AgarioPromoClientDelegate.__interfaces__ = [miniclip_promotionsystem_client_interfaces_IPromotionSystemClientDelegate];
    agario_services_promo_AgarioPromoClientDelegate.prototype = {
        _ps: null,
        requestByBadge: null,
        canShowBadgesOnMainMenuHud: function() {
            if (!Core.ui.state.inGame) {
                return true
            }
            return false
        },
        redirectToTarget: function(target, customParams, system) {
            return this.handleRedirectTarget(target, customParams, system)
        },
        handleRedirectTarget: function(target, customParams, system) {
            var mc = MiniclipAPI.instance;
            switch (target) {
                case "promoTargetCoinShop":
                    this.internalOpenShop("shopCurrency");
                    break;
                case "promoTargetMassBoostShop":
                    this.internalOpenShop("shopMass");
                    break;
                case "promoTargetXpBoostShop":
                    this.internalOpenShop("shopBoost");
                    break;
                case "promoTargetShop":
                    this.internalOpenShop("shopMain");
                    break;
                case "promoTargetProfile":
                    if (mc != null) {
                        mc.showProfile()
                    }
                    break;
                case "promoTargetSkinShop":
                    this.internalOpenShop("shopSkins", {
                        tab: Reflect.getProperty(customParams, "promoParamSkinShopTabName")
                    });
                    break;
                default:
                    return miniclip_promotionsystem_core_interfaces_PromotionActionDelegateReturnType.PROMOTION_ACTION_RETURN_TYPE_FAILURE
            }
            return miniclip_promotionsystem_core_interfaces_PromotionActionDelegateReturnType.PROMOTION_ACTION_RETURN_TYPE_SUCCESS
        },
        internalOpenShop: function(pCategory, params) {
            if (MiniclipAPI.instance != null) {
                oaktree_OakTree.engine.scheduleTask(0, function() {
                    MiniclipAPI.instance.openShop(pCategory, params)
                })
            }
        },
        makePurchase: function(transactionId, offerId, successEvents, successOnFirstEvent, failureEvents, failureOnFirstEvent, system) {
            var _g = this;
            var shopService = oaktree_ext_services_ServiceManager.getService(agario_services_ShopService);
            if (this.isVirtualCurrencyTransaction(transactionId)) {
                if (shopService.makePurchase(transactionId)) {
                    Core.sendGoogleAnalyticsEvent("PromoBundle", "Purchase", transactionId);
                    return miniclip_promotionsystem_core_interfaces_PromotionActionDelegateReturnType.PROMOTION_ACTION_RETURN_TYPE_SUCCESS
                }
            } else {
                if (shopService.makePurchase(transactionId)) {
                    Core.sendGoogleAnalyticsEvent("PromoBundle", "Purchase", transactionId);
                    Core.services.promo.registerPurchaseAction(transactionId, function(success) {
                        _g.onMakePurchaseComplete(success, transactionId, offerId, successEvents, successOnFirstEvent, failureEvents, failureOnFirstEvent, system)
                    });
                    return miniclip_promotionsystem_core_interfaces_PromotionActionDelegateReturnType.PROMOTION_ACTION_RETURN_TYPE_DELAYED_RESPONSE
                }
            }
            return miniclip_promotionsystem_core_interfaces_PromotionActionDelegateReturnType.PROMOTION_ACTION_RETURN_TYPE_FAILURE
        },
        onMakePurchaseComplete: function(success, transactionId, offerId, successEvents, successOnFirstEvent, failureEvents, failureOnFirstEvent, system) {
            if (success) {
                var _g = 0;
                while (_g < successEvents.length) {
                    var event = successEvents[_g];
                    ++_g;
                    var eventName = event.join("_");
                    Core.services.promo.postEvent(eventName)
                }
                Core.sendGoogleAnalyticsEvent("PromoBundle", "PurchaseSuccess", transactionId)
            } else {
                var _g1 = 0;
                while (_g1 < failureEvents.length) {
                    var event1 = failureEvents[_g1];
                    ++_g1;
                    var eventName1 = event1.join("_");
                    Core.services.promo.postEvent(eventName1)
                }
                Core.sendGoogleAnalyticsEvent("PromoBundle", "PurchaseFail", transactionId)
            }
        },
        getReferencePriceForTransaction: function(transactionId, priceMayBeOutdated, system) {
            return null
        },
        getPromotionalPriceForTransaction: function(transactionId, priceMayBeOutdated, system) {
            var _payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment);
            if (this.isVirtualCurrencyTransaction(transactionId)) {
                var purchase = Core.models.shopPurchasesModel.getSoftPurchaseByPurchaseId(transactionId);
                return agario_views_promoclient_PromoClientUtils.getFormattedAmountString(purchase.currencyAmount)
            } else {
                if (this.isInAppCurrencyTransaction(transactionId)) {
                    var purchase1 = Core.models.shopPurchasesModel.getInappPurchaseByPurchaseId(transactionId);
                    var payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment);
                    var price = Core.models.priceMatrixModel.getPriceForTier(purchase1.priceTier, payModel.getCurrencyCode());
                    oaktree_utils_Accounting.settings.currency.symbol = oaktree_utils_Accounting.getSymbol(payModel.getCurrencyCode(), payModel.getCurrencyCode() + " ");
                    return oaktree_utils_Accounting.formatMoney(price)
                }
            }
            return null
        },
        isVirtualCurrencyTransaction: function(transactionId) {
            return Core.models.shopPurchasesModel.getSoftPurchaseByPurchaseId(transactionId) != null
        },
        isInAppCurrencyTransaction: function(transactionId) {
            return Core.models.shopPurchasesModel.getInappPurchaseByPurchaseId(transactionId) != null
        },
        getDescriptionForTransaction: function(transactionId, system) {
            return null
        },
        getDescriptionForProduct: function(productId, transactionId, system) {
            return null
        },
        getReferenceSumAmountForProduct: function(productId, transactionId, system) {
            return null
        },
        getReferenceAmountForProduct: function(productId, transactionId, system) {
            return null
        },
        getPromotionalSumAmountForProduct: function(productId, transactionId, system) {
            var bundle = this.fetchBundleProductsByPurchaseId(transactionId);
            if (bundle == null || bundle.length == 0) {
                return null
            }
            var sum = 0;
            var _g_head = bundle.h;
            var _g_val = null;
            while (_g_head != null) {
                var product;
                product = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                if (product.productId == productId) {
                    sum += product.quantity
                }
            }
            return "" + sum
        },
        getPromotionalAmountForProduct: function(productId, transactionId, system) {
            var bundle = this.fetchBundleProductsByPurchaseId(transactionId);
            if (bundle == null || bundle.length == 0) {
                return [0]
            }
            var amounts = [];
            var _g_head = bundle.h;
            var _g_val = null;
            while (_g_head != null) {
                var product;
                product = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                if (product.productId == productId) {
                    amounts.push(product.quantity)
                }
            }
            return amounts
        },
        canShowOffer: function(offerId, system) {
            if (offerId == null || offerId == "" || system == null) {
                return false
            }
            if (!system.isOfferActive(offerId)) {
                return false
            }
            var customData = system.getPopUpInfoForOffer(offerId).customData;
            if (customData == null) {
                return false
            }
            return true
        },
        canShowOfferPopup: function(offerId, system, isAuto) {
            if (!this.canShowOffer(offerId, system)) {
                return false
            }
            var _server = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
            var isConnected = _server != null && _server.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTED;
            if (system.get_promoSystemId() == "promotionSystem" || system.get_promoSystemId() == "promotionSystem") {
                if (Core.get_states().isActive("state_main_screen") && !Core.ui.state.inGame && Core.ui.state.windowHasFocus && isConnected && (this.requestByBadge || Core.user.isGuest && Core.user.gamesPlayed >= 2 || !Core.user.isGuest && Core.user.gamesPlayed >= 1)) {
                    this.requestByBadge = false;
                    return true
                }
            }
            return false
        },
        canShowOfferBadge: function(offerId, system) {
            if (!this.canShowOffer(offerId, system)) {
                return false
            }
            if (system.get_promoSystemId() == "promotionSystem" || system.get_promoSystemId() == "promotionSystem") {
                return true
            }
            return false
        },
        openStoreWithAppId: function(appId, system) {
            return null
        },
        openBrowserWithURL: function(url, system) {
            try {
                openfl_Lib.getURL(new openfl_net_URLRequest(url));
                return miniclip_promotionsystem_core_interfaces_PromotionActionDelegateReturnType.PROMOTION_ACTION_RETURN_TYPE_SUCCESS
            } catch (e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) {
                    e = e.val
                }
                if (js_Boot.__instanceof(e, openfl_errors_Error)) {
                    return miniclip_promotionsystem_core_interfaces_PromotionActionDelegateReturnType.PROMOTION_ACTION_RETURN_TYPE_FAILURE
                } else {
                    throw (e)
                }
            }
            return null
        },
        promoActionTriggered: function(actionKey, offerId, system) {},
        badgeButtonPressed: function(offerId, system) {
            this.requestByBadge = true;
            this._ps.showPromotionOffer(offerId, system)
        },
        promoCloseTriggeredForSystem: function(system) {
            if (system.get_promoSystemId() == "promotionSystem" || system.get_promoSystemId() == "featuresSystem") {
                this._ps.popupOfferWasClosed()
            }
        },
        getLocalizedResourceForResource: function(resource, system) {
            var ext = HxOverrides.substr(resource, resource.length - 3, 3);
            if (ext == "ttf") {
                return StringTools.replace(resource, ".ttf", "")
            } else {
                if (ext == "fnt") {
                    haxe_Log.trace("TODO: Bitmap font needs to be handled. Use BitmapFont class! " + resource, {
                        fileName: "AgarioPromoClientDelegate.hx",
                        lineNumber: 385,
                        className: "agario.services.promo.AgarioPromoClientDelegate",
                        methodName: "getLocalizedResourceForResource"
                    })
                }
            }
            return resource
        },
        getLocalizedTextForTag: function(tag, system) {
            return oaktree_ext_localization_I18n.text(tag)
        },
        definedStrikeThrough: function() {
            return true
        },
        nodeStrikeThrough: function(node, isDiagonal, system) {},
        getFormatedStringForTimeStamp: function(timestamp, system) {
            return agario_utils_TimeUtils.getStringFromTimestamp(timestamp)
        },
        getDefaultFrameSizeForSystem: function(system) {
            return new openfl_geom_Rectangle(0, 0, 950, 612)
        },
        getDefaultFrameMarginForSystem: function(system) {
            return 12
        },
        getDefaultTTFontForSystem: function(system) {
            return null
        },
        getCurrencyIconForTransaction: function(transactionId, system) {
            return null
        },
        getDefaultBadgeCycleCooldownForSystem: function(system) {
            var defaultBadgeCycleCooldown = 30000;
            if (system.get_promoSystemId() == "promotionSystem") {
                return agario_views_promoclient_PromoClientUtils.asFloat(Std.parseFloat(Core.models.defaultPromoSettings.getSettingByKey("promoButtonMinCycleDuration")), null) * 1000
            } else {
                if (system.get_promoSystemId() == "featuresSystem") {
                    return agario_views_promoclient_PromoClientUtils.asFloat(Std.parseFloat(Core.models.defaultPromoSettings.getSettingByKey("crossPromoBadgeMinCycleDuration")), null) * 1000
                }
            }
            return defaultBadgeCycleCooldown
        },
        hideCurrentBadgeForSystem: function(system) {
            Core.ui.mainUI.hidePromotionBadge()
        },
        showBadge: function(badge, system) {
            Core.ui.mainUI.showPromoBadge(badge)
        },
        getValueForJSONQuery: function(jsonQuery, system) {
            return null
        },
        shouldApplyHourRandomToNotificationDateForSystem: function(system) {
            return false
        },
        getFinalDateToShowLocalNotificationForDate: function(date, system) {
            return null
        },
        processLocalNotificationUserInfo: function(userInfo, system) {},
        canShowOfferNotification: function(offerId, system) {
            return false
        },
        getCurrentUserId: function() {
            if (Core.user.loggedIn) {
                return "" + Core.user.name
            } else {
                return "guest"
            }
        },
        userOwnsProductsInList: function(productList, needAllProducts, system) {
            if (Core.user.wallet == null || productList == null) {
                return false
            }
            var count = 0;
            var _g1 = 0;
            var _g = productList.length;
            while (_g1 < _g) {
                var i = [_g1++];
                var walletMatch = Core.user.wallet.filter((function(i) {
                    return function(item) {
                        return item.productId == productList[i[0]]
                    }
                })(i));
                if (walletMatch.length > 0) {
                    count++
                }
            }
            if (count > 0) {
                if (needAllProducts && count != productList.length) {
                    return false
                }
                return true
            }
            return false
        },
        userHasAppsInstalled: function(appList, needAllProducts, system) {
            return false
        },
        closePromoDebugScreen: function() {},
        getPopupForOffer: function(offerId, client, promoSystem) {
            return agario_views_promoclient_PromotionNode.createPromoNode(offerId, client, this, promoSystem)
        },
        getPromoButtonForOffer: function(offer, badgeInfo, pCallback, promoSystem) {
            return new agario_services_promo_BasePromotionButton(offer.offerName, badgeInfo, pCallback, promoSystem)
        },
        getEntryForPurchaseId: function(transactionId) {
            if (transactionId == null || transactionId == "") {
                return null
            }
            return Core.models.shopPurchasesModel.getPurchaseByPurchaseId(transactionId)
        },
        fetchBundleProductsByPurchaseId: function(purchaseId) {
            if (purchaseId == null || purchaseId == "") {
                return null
            }
            var transactionEntry = Core.models.shopPurchasesModel.getPurchaseByPurchaseId(purchaseId);
            if (transactionEntry == null) {
                return null
            }
            return Core.models.walletProductBundlesModel.getProductsByBundleId(transactionEntry.bundleId)
        },
        __class__: agario_services_promo_AgarioPromoClientDelegate
    };
    var miniclip_promotionsystem_core_interfaces_IPromotionDataAccessProtocol = function() {};
    $hxClasses["miniclip.promotionsystem.core.interfaces.IPromotionDataAccessProtocol"] = miniclip_promotionsystem_core_interfaces_IPromotionDataAccessProtocol;
    miniclip_promotionsystem_core_interfaces_IPromotionDataAccessProtocol.__name__ = ["miniclip", "promotionsystem", "core", "interfaces", "IPromotionDataAccessProtocol"];
    miniclip_promotionsystem_core_interfaces_IPromotionDataAccessProtocol.prototype = {
        getGroupForTest: null,
        getClientLanguage: null,
        currentPlatformType: null,
        getPropertyType: null,
        getNumberPropertyType: null,
        __class__: miniclip_promotionsystem_core_interfaces_IPromotionDataAccessProtocol
    };
    var agario_services_promo_AgarioPromotionDataAccessProtocol = function() {};
    $hxClasses["agario.services.promo.AgarioPromotionDataAccessProtocol"] = agario_services_promo_AgarioPromotionDataAccessProtocol;
    agario_services_promo_AgarioPromotionDataAccessProtocol.__name__ = ["agario", "services", "promo", "AgarioPromotionDataAccessProtocol"];
    agario_services_promo_AgarioPromotionDataAccessProtocol.__interfaces__ = [miniclip_promotionsystem_core_interfaces_IPromotionDataAccessProtocol];
    agario_services_promo_AgarioPromotionDataAccessProtocol.prototype = {
        getGroupForTest: function(testId) {
            var group = Core.getTestGroup(testId);
            if (group == null) {
                return "web"
            } else {
                return group
            }
        },
        getClientLanguage: function() {
            return "web"
        },
        currentPlatformType: function() {
            return "web"
        },
        getPropertyType: function(propertyType, propertyInfo) {
            switch (propertyType) {
                case "Localization":
                    return this.getClientLanguage();
                case "ABtest":
                    if (propertyInfo != null) {
                        return this.getGroupForTest(js_Boot.__cast(__map_reserved.testId != null ? propertyInfo.getReserved("testId") : propertyInfo.h.testId, String))
                    }
                    break;
                case "VIPGroup":
                    break;
                case "LoginType":
                    if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Facebook) {
                        return "USER_LOGGED_IN_FACEBOOK"
                    }
                    if (Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) {
                        return "USER_LOGGED_IN_GOOGLEPLUS"
                    }
                    break;
                case "PayingUserStatus":
                    if (Core.user.isGuest || Core.user.userInfo != null && !Core.user.userInfo.isPayingUser) {
                        return "PROMO_IS_NONPAYING_USER"
                    } else {
                        return "PROMO_IS_PAYING_USER"
                    }
                    break;
                case "userId":
                    return Core.user.userInfo.id;
                case "promoRewardToken":
                    break;
                case "Platform":
                    break
            }
            return "web"
        },
        getNumberPropertyType: function(propertyType) {
            switch (propertyType) {
                case "UserLevel":
                    if (Core.user.userInfo != null) {
                        return Core.user.userInfo.level
                    } else {
                        return 0
                    }
                    break;
                case "CoinBalance":
                    return Core.user.get_coins()
            }
            return 0
        },
        __class__: agario_services_promo_AgarioPromotionDataAccessProtocol
    };
    var miniclip_promotionsystem_client_interfaces_IPromotionButton = function() {};
    $hxClasses["miniclip.promotionsystem.client.interfaces.IPromotionButton"] = miniclip_promotionsystem_client_interfaces_IPromotionButton;
    miniclip_promotionsystem_client_interfaces_IPromotionButton.__name__ = ["miniclip", "promotionsystem", "client", "interfaces", "IPromotionButton"];
    miniclip_promotionsystem_client_interfaces_IPromotionButton.prototype = {
        get_offerId: null,
        __class__: miniclip_promotionsystem_client_interfaces_IPromotionButton
    };
    var agario_services_promo_BasePromotionButton = function(pOfferId, pBadgeConfig, pCallback, pSystem) {
        this._offerId = pOfferId;
        this._badgeConfig = pBadgeConfig;
        this._callback = pCallback;
        this.system = pSystem
    };
    $hxClasses["agario.services.promo.BasePromotionButton"] = agario_services_promo_BasePromotionButton;
    agario_services_promo_BasePromotionButton.__name__ = ["agario", "services", "promo", "BasePromotionButton"];
    agario_services_promo_BasePromotionButton.__interfaces__ = [miniclip_promotionsystem_client_interfaces_IPromotionButton];
    agario_services_promo_BasePromotionButton.prototype = {
        _offerId: null,
        _badgeConfig: null,
        _callback: null,
        system: null,
        get_offerId: function() {
            return this._offerId
        },
        getBadgeConfiguration: function() {
            return this._badgeConfig
        },
        executeCallback: function() {
            if (this._callback != null) {
                this._callback()
            }
        },
        __class__: agario_services_promo_BasePromotionButton
    };
    var agario_services_promo_PromoDataActionTags = function() {};
    $hxClasses["agario.services.promo.PromoDataActionTags"] = agario_services_promo_PromoDataActionTags;
    agario_services_promo_PromoDataActionTags.__name__ = ["agario", "services", "promo", "PromoDataActionTags"];
    var agario_services_promo_PromoService = function() {
        this.UPDATE_TIMESTAMP_DELAY = 1000;
        this.CONFIG_SHEET_DEFAULT_PROMOS = 5;
        this.CONFIG_TAG_PROMO_POPUP_COOLDOWN_PERIOD = 5;
        this.CRYPTO_PASSWORD = "8ballpool";
        this.ACTIONS_CONFIG_FILE = "ActionsConfiguration.plist";
        this.COMMON_CONFIG_FILE = "commonConfig.json";
        this.INTERSTITIAL_SYSTEM_FILE = "InterstitialSystemConfiguration.plist";
        this.INDIRECT_SYSTEM_FILE = "PromotionIndirectConfiguration.plist";
        this.PROMOTION_SYSTEM_FILE = "PromotionSystemConfiguration.plist";
        this._initialized = false;
        this.isReadyDefer = new promhx_deferred_DeferredPromise();
        this.isReady = this.isReadyDefer.boundPromise;
        this.updateSignal = new msignal_Signal0();
        this.onPromotionPopupTrigger = new msignal_Signal1();
        this._queuedEvents = new List();
        this._delayedPurchaseActions = new haxe_ds_StringMap()
    };
    $hxClasses["agario.services.promo.PromoService"] = agario_services_promo_PromoService;
    agario_services_promo_PromoService.__name__ = ["agario", "services", "promo", "PromoService"];
    agario_services_promo_PromoService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_promo_PromoService.prototype = {
        isReadyDefer: null,
        isReady: null,
        _initialized: null,
        updateSignal: null,
        onPromotionPopupTrigger: null,
        PROMOTION_SYSTEM_FILE: null,
        INDIRECT_SYSTEM_FILE: null,
        INTERSTITIAL_SYSTEM_FILE: null,
        COMMON_CONFIG_FILE: null,
        ACTIONS_CONFIG_FILE: null,
        CRYPTO_PASSWORD: null,
        CONFIG_TAG_PROMO_POPUP_COOLDOWN_PERIOD: null,
        CONFIG_SHEET_DEFAULT_PROMOS: null,
        UPDATE_TIMESTAMP_DELAY: null,
        _configurationId: null,
        _persistance: null,
        _promoManager: null,
        promoManager: null,
        _clientDelegate: null,
        clientDelegate: null,
        _persistanceClients: null,
        _closePopupTriggered: null,
        _isBadgeCyclingActive: null,
        _lastPopupShownTimestamp: null,
        _storedOfferId: null,
        _updateLoopTimer: null,
        _lastLoadedUser: null,
        _logoutCheckTimer: null,
        _queuedEvents: null,
        _delayedPurchaseActions: null,
        create: function() {},
        initialize: function() {
            this._clientDelegate = new agario_services_promo_AgarioPromoClientDelegate();
            this._promoManager = new miniclip_promotionsystem_client_PromotionManager();
            this._promoManager.initWithPromotionClientDelegate(this._clientDelegate, null);
            this._promoManager.setPromotionDataAccessProtocol(new agario_services_promo_AgarioPromotionDataAccessProtocol());
            this._persistanceClients = new haxe_ds_StringMap();
            this.initEvents()
        },
        loadConfiguration: function() {
            var _g = this;
            var gotPromoSystemFile = this.getResource(this.PROMOTION_SYSTEM_FILE).load();
            var gotInterstitialFile = this.getResource(this.INTERSTITIAL_SYSTEM_FILE).load();
            var gotIndirectFile = this.getResource(this.INDIRECT_SYSTEM_FILE).load();
            if (this.isReady == null || this.isReady._resolved) {
                this.isReadyDefer = new promhx_deferred_DeferredPromise();
                this.isReady = this.isReadyDefer.boundPromise
            }((function($this) {
                var $r;
                var varargf = function(f) {
                    var ret = new promhx_Promise();
                    var arr = [gotPromoSystemFile, gotInterstitialFile, gotIndirectFile];
                    var p = promhx_Promise.whenAll(arr);
                    p._update.push({
                        async: ret,
                        linkf: function(x) {
                            ret.handleResolve(f(arr[0]._val, arr[1]._val, arr[2]._val))
                        }
                    });
                    return ret
                };
                $r = {
                    then: varargf
                };
                return $r
            }(this))).then(function(promoSystem, intersitialFile, indirectFile) {
                var _indirectData = null;
                if (indirectFile.loaded) {
                    _g._promoManager.setIndirectDataAccess(com_plist_Reader.read(indirectFile.get_data()))
                }
                if (promoSystem.loaded) {
                    try {
                        _g.initPromoClientWitConfig("promotionSystem", com_plist_Reader.read(promoSystem.get_data()))
                    } catch (e) {
                        haxe_CallStack.lastException = e;
                        if (e instanceof js__$Boot_HaxeError) {
                            e = e.val
                        }
                        haxe_Log.trace("  / promoservice / " + ("loadConfiguration: failed to load promosystem data:" + Std.string(e)), {
                            fileName: "PromoService.hx",
                            lineNumber: 141,
                            className: "agario.services.promo.PromoService",
                            methodName: "loadConfiguration"
                        })
                    }
                }
                _g._promoManager.encryptPassword = _g.CRYPTO_PASSWORD;
                _g._closePopupTriggered = false;
                _g._lastPopupShownTimestamp = -1;
                _g._promoManager.setCurrentTimestamp(_g.get_currentLocalTimestamp());
                _g.startUpdateLoop();
                _g.isReadyDefer.resolve(true);
                _g._initialized = true;
                _g.consumeEvents()
            }).catchError(function(error) {
                haxe_Log.trace("  / promoservice / " + ("PromoService: Failed to initialize : " + error), {
                    fileName: "PromoService.hx",
                    lineNumber: 162,
                    className: "agario.services.promo.PromoService",
                    methodName: "loadConfiguration"
                })
            })
        },
        startUpdateLoop: function() {
            if (this._updateLoopTimer != null) {
                this._updateLoopTimer.stop();
                this._updateLoopTimer.run = null
            }
            this._updateLoopTimer = new haxe_Timer(this.UPDATE_TIMESTAMP_DELAY);
            this._updateLoopTimer.run = $bind(this, this.updateCurrentTimeStamp)
        },
        initPromoClientWitConfig: function(pId, pConfig) {
            var persistanceDelegate = new agario_services_promo_AgarioPersistanceDelegate(pId);
            this._persistanceClients.set(pId, persistanceDelegate);
            var persistance_id = pId;
            var successOnInit = this._promoManager.setupPromotionClientWithConfigObject(pConfig, pId, persistanceDelegate);
            if (successOnInit) {
                var promoSystem = this.getPromoSystemWithSystemId(pId)
            }
        },
        getResource: function(resourceName) {
            var configService = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService);
            return Core.get_assets().getAsset(resourceName)
        },
        getActivePromotionSystem: function() {
            return this.getPromoSystemWithSystemId("promotionSystem")
        },
        getActivePromotionClient: function() {
            return this.getPromoClientWithSystemId("promotionSystem")
        },
        getNextShowableAutomaticPromotionPopup: function() {
            var popup = this._promoManager.getNextShowablePopupForSystem("promotionSystem");
            return popup
        },
        canShowPromotionPopup: function() {
            var cooldownCondition = false;
            if (this._lastPopupShownTimestamp == -1) {
                cooldownCondition = true
            } else {
                var popupCooldown = agario_views_promoclient_PromoClientUtils.asFloat(Std.parseFloat(Core.models.defaultPromoSettings.getSettingByKey("promoPopupCooldownPeriod")), null) * 1000;
                var elapsedTimeSinceLastPopup = this.get_currentLocalTimestamp() - this._lastPopupShownTimestamp;
                cooldownCondition = elapsedTimeSinceLastPopup >= popupCooldown
            }
            var promoPopupState = Core.get_states().getState("promoDialog", true);
            var clearToShowPopup = !promoPopupState.enabled && Core.get_states().isTopState("state_main_screen") && Core.ui.state.windowHasFocus && !Core.ui.state.inGame;
            return cooldownCondition && clearToShowPopup
        },
        activateBadgeCycling: function() {
            this._isBadgeCyclingActive = true;
            var promoClient = this._promoManager.getClientForSystem("promotionSystem");
            if (promoClient != null) {
                promoClient.activateBadgeCycling()
            }
        },
        deactivateBadgeCycling: function() {
            this._isBadgeCyclingActive = false;
            var promoClient = this._promoManager.getClientForSystem("promotionSystem");
            if (promoClient != null) {
                promoClient.deactivateBadgeCycling()
            }
        },
        getPromoClientWithSystemId: function(systemId) {
            return this._promoManager.getClientForSystem(systemId)
        },
        getPromoSystemWithSystemId: function(systemId) {
            var client = this._promoManager.getClientForSystem(systemId);
            if (client != null) {
                return client.get_promoSystem()
            }
            return null
        },
        showPromotionOffer: function(pOfferId, pSystem) {
            var offer = pSystem.getOfferFromId(pOfferId);
            if (offer == null) {
                return
            }
            var client = this.getPromoClientWithSystemId(pSystem.get_promoSystemId());
            var popup = client.getPopupForOffer(pOfferId, false);
            if (popup != null) {
                this.showPromotionPopup(popup)
            }
        },
        popupOfferWasClosed: function() {
            this._lastPopupShownTimestamp = oaktree_OakTree.engine.get_time()
        },
        resetSystems: function() {
            this.deactivateBadgeCycling();
            this._lastPopupShownTimestamp = -1;
            this._promoManager.resetSystems();
            this._promoManager.reloadSystems();
            this._delayedPurchaseActions = new haxe_ds_StringMap();
            this.resetPersistanceClient()
        },
        resetPersistanceClient: function() {
            var persistance = this._persistanceClients.get("promotionSystem");
            if (persistance != null) {
                persistance.reset()
            }
        },
        loadState: function() {
            var psystem = this._promoManager.getClientForSystem("promotionSystem");
            if (psystem != null) {
                psystem.get_promoSystem().loadData()
            }
        },
        saveState: function() {
            var psystem = this._promoManager.getClientForSystem("promotionSystem");
            if (psystem != null) {
                psystem.get_promoSystem().saveData()
            }
        },
        isStateOnTop: function(state) {
            return Core.get_states().isTopState(state)
        },
        currentLocalTimestamp: null,
        get_currentLocalTimestamp: function() {
            return oaktree_OakTree.engine.get_time()
        },
        updateCurrentTimeStamp: function() {
            if (Core.ui.state.inGame) {
                if (this._isBadgeCyclingActive) {
                    this.deactivateBadgeCycling()
                }
                return
            }
            this._promoManager.setCurrentTimestamp(this.get_currentLocalTimestamp());
            if (this._clientDelegate.canShowBadgesOnMainMenuHud()) {
                if (!this._isBadgeCyclingActive) {
                    this.activateBadgeCycling()
                }
                if (this.canShowPromotionPopup()) {
                    var popup = this.getNextShowableAutomaticPromotionPopup();
                    if (popup != null) {
                        this.onPromotionPopupTrigger.dispatch(popup)
                    }
                }
            } else {
                this.deactivateBadgeCycling()
            }
            this.updateSignal.dispatch()
        },
        get_promoManager: function() {
            return this._promoManager
        },
        get_clientDelegate: function() {
            return this._clientDelegate
        },
        showPromotionPopup: function(popup) {
            if (!js_Boot.__instanceof(popup, agario_views_promoclient_PromotionNode)) {
                return
            }
            var promotionNode = popup;
            var promoDialog = new agario_views_promoclient_PromotionDialog(promotionNode);
            Core.views.openView(promoDialog, {
                priority: 1,
                animate: true,
                allowClickClose: true
            });
            promoDialog.open(true);
            if (MiniclipAPI.instance != null) {
                Core.services.gameui.showContainer()
            }
        },
        handlePromotionTrigger: function(popup) {
            this.showPromotionPopup(popup)
        },
        initEvents: function() {
            this.onPromotionPopupTrigger.add($bind(this, this.handlePromotionTrigger));
            Core.get_events().addEventListener("UserEvent::USER_LOGGED", $bind(this, this.onUserLogin));
            Core.get_events().addEventListener("userLoggedOut", $bind(this, this.onUserLogout))
        },
        postEvent: function(eventName, data) {
            if (!this._initialized) {
                this.queueEvent(eventName, data);
                return
            }
            if (this.getActivePromotionSystem() != null) {
                this.getActivePromotionSystem().postEvent(eventName, data)
            }
        },
        queueEvent: function(eventName, data) {
            this._queuedEvents.add({
                event: eventName,
                data: data
            })
        },
        consumeEvents: function() {
            var _g_head = this._queuedEvents.h;
            var _g_val = null;
            while (_g_head != null) {
                var event;
                event = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                this.postEvent(event.event, event.data)
            }
            this._queuedEvents.clear()
        },
        registerPurchaseAction: function(productId, callback) {
            this._delayedPurchaseActions.set(productId, callback)
        },
        fetchPurchaseActions: function(productId) {
            return this._delayedPurchaseActions.get(productId)
        },
        onUserLogin: function(e) {
            var _g = this;
            if (this._logoutCheckTimer != null) {
                this._logoutCheckTimer.stop();
                this._logoutCheckTimer = null
            }
            var userId = this._clientDelegate.getCurrentUserId();
            var isNewUser = Core.user.userInfo.xp == 0 && Core.user.userInfo.level == 1;
            if (userId != this._lastLoadedUser && Core.user.loggedIn && !isNewUser) {
                this.saveState();
                this.resetSystems();
                this._promoManager.reloadSystems()
            } else {
                this.resetPersistanceClient()
            }
            this._lastLoadedUser = userId;
            this.loadState();
            this._logoutCheckTimer = new haxe_Timer(2000);
            this._logoutCheckTimer.run = function() {
                if (Core.user.loggedIn) {
                    _g._logoutCheckTimer.stop();
                    _g._logoutCheckTimer = null
                }
            }
        },
        onUserLogout: function(e) {
            var _g = this;
            if (this._logoutCheckTimer != null) {
                this._logoutCheckTimer.stop()
            }
            this._logoutCheckTimer = new haxe_Timer(2000);
            this._logoutCheckTimer.run = function() {
                if (!Core.user.loggedIn) {
                    _g.saveState();
                    _g.resetSystems();
                    _g._promoManager.reloadSystems();
                    _g._logoutCheckTimer.stop();
                    _g._logoutCheckTimer = null;
                    Core.user.dispatchPromoEvents()
                }
            }
        },
        __class__: agario_services_promo_PromoService,
        __properties__: {
            get_currentLocalTimestamp: "get_currentLocalTimestamp",
            get_clientDelegate: "get_clientDelegate",
            get_promoManager: "get_promoManager"
        }
    };
    var agario_services_promo_PromoSystemEvents = function() {};
    $hxClasses["agario.services.promo.PromoSystemEvents"] = agario_services_promo_PromoSystemEvents;
    agario_services_promo_PromoSystemEvents.__name__ = ["agario", "services", "promo", "PromoSystemEvents"];
    var agario_services_promo_PromoUtils = function() {};
    $hxClasses["agario.services.promo.PromoUtils"] = agario_services_promo_PromoUtils;
    agario_services_promo_PromoUtils.__name__ = ["agario", "services", "promo", "PromoUtils"];
    agario_services_promo_PromoUtils.getConfigEntryPair = function(pProductId, isReplacement) {
        if (pProductId == null || pProductId == "") {
            return ""
        }
        var promoService = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
        var returnProductId;
        if (isReplacement) {
            returnProductId = promoService.get_promoManager().getProductReplacement(pProductId)
        } else {
            returnProductId = promoService.get_promoManager().getReplacedProduct(pProductId)
        }
        if (returnProductId == null || returnProductId == "") {
            return ""
        }
        return returnProductId
    };
    agario_services_promo_PromoUtils.getConfigIdReplacement = function(pProductId) {
        return agario_services_promo_PromoUtils.getConfigEntryPair(pProductId, true)
    };
    agario_services_promo_PromoUtils.getConfigIdReplaced = function(pProductId) {
        return agario_services_promo_PromoUtils.getConfigEntryPair(pProductId, false)
    };
    agario_services_promo_PromoUtils.shouldSkipConfigEntry = function(pProductId, pVisibility) {
        if (pProductId == null || pProductId == "" || (pVisibility == null || pVisibility == "")) {
            return false
        }
        var isPromotionItem = pVisibility == "promotional";
        var promoService = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
        if (isPromotionItem && !promoService.get_promoManager().isProductActivated(pProductId)) {
            return true
        }
        if (!isPromotionItem && promoService.get_promoManager().isProductDeactivated(pProductId)) {
            return true
        }
        return false
    };
    var agario_services_social_FBSocialService = function() {};
    $hxClasses["agario.services.social.FBSocialService"] = agario_services_social_FBSocialService;
    agario_services_social_FBSocialService.__name__ = ["agario", "services", "social", "FBSocialService"];
    agario_services_social_FBSocialService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_social_FBSocialService.prototype = {
        create: function() {},
        initialize: function() {},
        share: function(name, caption, description, link, picture, action_name, action_link, callback) {
            link += "?title=" + encodeURIComponent(name) + "&description=" + encodeURIComponent(description) + "&image=" + encodeURIComponent(picture);
            var fbCallbackShare = callback;
            var shareOptions = {
                method: "feed",
                display: "iframe",
                caption: caption,
                link: link
            };
            FB.ui(shareOptions, fbCallbackShare)
        },
        __class__: agario_services_social_FBSocialService
    };
    var agario_services_social_GoogleSocialService = function() {};
    $hxClasses["agario.services.social.GoogleSocialService"] = agario_services_social_GoogleSocialService;
    agario_services_social_GoogleSocialService.__name__ = ["agario", "services", "social", "GoogleSocialService"];
    agario_services_social_GoogleSocialService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_social_GoogleSocialService.prototype = {
        create: function() {},
        initialize: function() {},
        share: function(text) {
            js.JQuery("#externalGShare").trigger("click")
        },
        setShareText: function(text) {
            window.fillSocialValues(text, "externalGShare")
        },
        __class__: agario_services_social_GoogleSocialService
    };
    var agario_services_social_SocialService = function() {};
    $hxClasses["agario.services.social.SocialService"] = agario_services_social_SocialService;
    agario_services_social_SocialService.__name__ = ["agario", "services", "social", "SocialService"];
    agario_services_social_SocialService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_social_SocialService.prototype = {
        fbSocial: null,
        twitterSocial: null,
        googleSocial: null,
        storyList: null,
        create: function() {},
        initialize: function() {
            this.fbSocial = oaktree_ext_services_ServiceManager.getService(agario_services_social_FBSocialService);
            this.twitterSocial = oaktree_ext_services_ServiceManager.getService(agario_services_social_TwitterSocialService);
            this.googleSocial = oaktree_ext_services_ServiceManager.getService(agario_services_social_GoogleSocialService)
        },
        getStoryById: function(id) {
            this.storyList = Core.services.config.get_currentConfig().externalSocialStories;
            return this.storyList.filter(function(item) {
                return item.id == id
            })[0]
        },
        shareFB: function(storyId, params, overrideImage) {
            var story = this.getStoryById(storyId);
            var title = oaktree_ext_localization_I18n.text(story.titleTag, params);
            var img = story.iconURL;
            if (overrideImage != null) {
                img = overrideImage
            }
            this.fbSocial.share(title, oaktree_ext_localization_I18n.text(story.subtitleTag, params), oaktree_ext_localization_I18n.text(story.descriptionTag, params), "https://r.agar.io", img, oaktree_ext_localization_I18n.text("menu_play"), "https://r.agar.io", $bind(this, this.onShare))
        },
        directShareFB: function(storyId, title, subtitle, description, overrideImage) {
            var story = this.getStoryById(storyId);
            var img = story.iconURL;
            if (overrideImage != null) {
                img = overrideImage
            }
            this.fbSocial.share(title, subtitle, description, "https://r.agar.io", img, oaktree_ext_localization_I18n.text("menu_play"), "https://r.agar.io", $bind(this, this.onShare))
        },
        shareTwitter: function(storyId, params) {
            var story = this.getStoryById(storyId);
            var title = StringTools.urlEncode(oaktree_ext_localization_I18n.text(story.twitterTag, params));
            this.twitterSocial.share(title)
        },
        shareGoogle: function(storyId, params) {
            var story = this.getStoryById(storyId);
            this.googleSocial.share(oaktree_ext_localization_I18n.text(story.googleTag, params))
        },
        prepareGoogleShare: function(storyId, params) {
            var story = this.getStoryById(storyId);
            this.googleSocial.setShareText(oaktree_ext_localization_I18n.text(story.googleTag, params))
        },
        onShare: function() {
            null
        },
        __class__: agario_services_social_SocialService
    };
    var agario_services_social_TwitterSocialService = function() {};
    $hxClasses["agario.services.social.TwitterSocialService"] = agario_services_social_TwitterSocialService;
    agario_services_social_TwitterSocialService.__name__ = ["agario", "services", "social", "TwitterSocialService"];
    agario_services_social_TwitterSocialService.__interfaces__ = [oaktree_ext_services_IService];
    agario_services_social_TwitterSocialService.prototype = {
        create: function() {},
        initialize: function() {},
        share: function(description) {
            var params = "text=" + description;
            var targetUrl = "https://twitter.com/intent/tweet?" + params;
            var width = 660;
            var height = 310;
            var windowOptions = "width=" + width + ",height=" + height + ",menubar=no,toolbar=no,resizable=yes,scrollbars=no";
            window.open(targetUrl, "Agar.io", windowOptions + ",left=" + (window.screenX + window.innerWidth / 2 - width / 2) + ",top=" + ((window.innerHeight - height) / 2 | 0))
        },
        __class__: agario_services_social_TwitterSocialService
    };
    var agario_services_web_WebEnvironment = function() {
        this._queryParameters = this.getQueryString()
    };
    $hxClasses["agario.services.web.WebEnvironment"] = agario_services_web_WebEnvironment;
    agario_services_web_WebEnvironment.__name__ = ["agario", "services", "web", "WebEnvironment"];
    agario_services_web_WebEnvironment.prototype = {
        _queryParameters: null,
        getQueryString: function() {
            var tmp = window.location.search;
            if (tmp.charAt(0) == "?") {
                tmp = HxOverrides.substr(tmp, 1, null)
            }
            var arr = tmp.split("&");
            var result = new haxe_ds_StringMap();
            var _g = 0;
            while (_g < arr.length) {
                var item = arr[_g];
                ++_g;
                var kv = item.split("=");
                result.set(kv[0], kv[1])
            }
            return result
        },
        hasParameter: function(pKey) {
            return this._queryParameters.exists(pKey)
        },
        getParameter: function(pKey) {
            return this._queryParameters.get(pKey)
        },
        __class__: agario_services_web_WebEnvironment
    };
    var agario_sounds_GameSounds = function() {};
    $hxClasses["agario.sounds.GameSounds"] = agario_sounds_GameSounds;
    agario_sounds_GameSounds.__name__ = ["agario", "sounds", "GameSounds"];
    agario_sounds_GameSounds.play = function(key, maxTimeout) {
        if (agario_sounds_GameSounds.isIngameSound(key)) {
            if (!Core.ui.settings.get_playArenaSounds()) {
                return
            }
        } else {
            if (!Core.ui.settings.get_playMenuSounds()) {
                return
            }
        }
        var arr = Core.models.shopData.defaultSoundSettings.filter(function(item) {
            return item.key == key
        });
        if (arr.length > 0) {
            var newKey = arr[0].value;
            assets_manager_SoundManager.play("sfx/" + newKey, maxTimeout)
        }
    };
    agario_sounds_GameSounds.isIngameSound = function(key) {
        switch (key) {
            case "sfxSplitBecauseVirus":
                return true;
            case "sfxEatCell":
                return true;
            case "sfxGameOver":
                return true;
            case "sfxSplit":
                return true;
            case "sfxShoot":
                return true;
            case "sfxRushModeTimeUp":
                return true;
            case "sfxRushModeResultsScreen":
                return true;
            case "sfxEatOwnCell":
                return true;
            case "sfxRushModeLoopLastSeconds":
                return true;
            case "sfxCompleteQuestIngame":
                return true
        }
        return false
    };
    var agario_utils_AssetsUtils = function() {};
    $hxClasses["agario.utils.AssetsUtils"] = agario_utils_AssetsUtils;
    agario_utils_AssetsUtils.__name__ = ["agario", "utils", "AssetsUtils"];
    agario_utils_AssetsUtils.getBitmap = function(source, image) {
        var defer = new promhx_deferred_DeferredPromise();
        if (source == null && image.source != null) {
            source = image.source
        }
        if (source != null) {
            Core.get_assets().getAsset(source).load().then(function(a) {
                var image1 = new openfl_display_Bitmap(a.get_data());
                defer.resolve(image1)
            })
        } else {
            var texture = Core.get_assets().getTexture(image.frameName, image.spriteFilename);
            defer.resolve(texture.asBitmap())
        }
        return defer.boundPromise
    };
    agario_utils_AssetsUtils.existAsset = function(source, image) {
        if (source == null && image.source != null) {
            source = image.source
        }
        if (source != null) {
            return openfl_utils_Assets.exists(source, "IMAGE")
        } else {
            return openfl_utils_Assets.exists(image.id, "IMAGE")
        }
    };
    agario_utils_AssetsUtils.getBitmapData = function(source, image) {
        var defer = new promhx_deferred_DeferredPromise();
        if (source == null && image.source != null) {
            source = image.source
        }
        if (source != null) {
            defer.resolve(openfl_utils_Assets.getBitmapData(source))
        } else {
            var texture = Core.get_assets().getTexture(image.frameName, image.spriteFilename);
            defer.resolve(texture.asBitmap().bitmapData)
        }
        return defer.boundPromise
    };
    agario_utils_AssetsUtils.existRemoteAsset = function(source, image) {
        if (source == null && image.source != null) {
            source = image.source
        }
        if (source != null) {
            return Core.remoteAssets.exists(source, "IMAGE")
        } else {
            return Core.remoteAssets.exists(image.id, "IMAGE")
        }
    };
    agario_utils_AssetsUtils.getRemoteBitmapData = function(source, image) {
        var defer = new promhx_deferred_DeferredPromise();
        if (source == null && image.source != null) {
            source = image.source
        }
        if (source != null) {
            return Core.remoteAssets.getBitmapData(source)
        } else {
            var texture = Core.get_assets().getTexture(image.frameName, image.spriteFilename);
            defer.resolve(texture.asBitmap().bitmapData)
        }
        return defer.boundPromise
    };
    agario_utils_AssetsUtils.loadRemoteBitmap = function(id, source, image) {
        if (source == null && image.source != null) {
            source = image.source
        }
        if (source != null) {
            return Core.remoteAssets.loadBitmap(id, source)
        } else {
            var defer = new promhx_deferred_DeferredPromise();
            var atlas = Core.get_assets().getAtlas(image.id);
            atlas.load().then(function(texture) {
                var t = texture.getTexture(image.textureName);
                if (t != null) {
                    defer.resolve(t.asBitmap().bitmapData)
                } else {
                    defer.handleError("Cannot find texture '${info.textureName}' in '${info.metaFile}'!")
                }
            });
            return defer.boundPromise
        }
    };
    agario_utils_AssetsUtils.getImageUrl = function(source) {
        var configService = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService);
        var idx = source.lastIndexOf(".png");
        if (idx != -1) {
            source = HxOverrides.substr(source, 0, idx)
        }
        return configService.getConfigUrl("" + source + ".png")
    };
    var agario_utils_CurrencyTools = function() {};
    $hxClasses["agario.utils.CurrencyTools"] = agario_utils_CurrencyTools;
    agario_utils_CurrencyTools.__name__ = ["agario", "utils", "CurrencyTools"];
    agario_utils_CurrencyTools.getFormatedCurrencyPrice = function(paymentService, value) {
        oaktree_utils_Accounting.settings.currency.symbol = oaktree_utils_Accounting.getSymbol(paymentService.getCurrencyCode(), paymentService.getCurrencyCode() + " ");
        return oaktree_utils_Accounting.formatMoney(value)
    };
    var agario_utils_TimeUtils = function() {};
    $hxClasses["agario.utils.TimeUtils"] = agario_utils_TimeUtils;
    agario_utils_TimeUtils.__name__ = ["agario", "utils", "TimeUtils"];
    agario_utils_TimeUtils.getStringFromTimestamp = function(timestamp, maxComponents) {
        if (maxComponents == null) {
            maxComponents = 3
        }
        if (timestamp <= 0) {
            return "00s"
        }
        var miliseconds = Math.floor(timestamp % 1000);
        timestamp /= 1000;
        timestamp = Math.floor(timestamp);
        var seconds = Math.floor(timestamp % 60);
        timestamp /= 60;
        timestamp = Math.floor(timestamp);
        var minutes;
        if (timestamp < 1) {
            minutes = 0
        } else {
            minutes = Math.floor(timestamp % 60);
            timestamp /= 60;
            timestamp = Math.floor(timestamp)
        }
        var hours;
        if (timestamp < 1) {
            hours = 0
        } else {
            hours = Math.floor(timestamp % 24);
            timestamp /= 24;
            timestamp = Math.floor(timestamp)
        }
        var days;
        if (timestamp < 1) {
            days = 0
        } else {
            days = Math.floor(timestamp % 7);
            timestamp /= 7;
            timestamp = Math.floor(timestamp)
        }
        var weeks;
        if (timestamp < 1) {
            weeks = 0
        } else {
            weeks = timestamp
        }
        var components = [];
        if (weeks > 0) {
            components.push("" + weeks + "w")
        }
        var hasDays = days > 0;
        var convertDaysIntoHours = hasDays && days < 3;
        if (!convertDaysIntoHours) {
            if (days > 0 || weeks > 0) {
                components.push("" + days + "d")
            }
        } else {
            hours += days * 24
        }
        var hoursStr;
        if (hours < 10) {
            hoursStr = "0" + hours + "h"
        } else {
            hoursStr = "" + hours + "h"
        }
        if (hours > 0) {
            components.push(hours > 0 ? "" + hoursStr : "")
        }
        if (components.length < maxComponents) {
            var minsStr;
            if (minutes < 10) {
                minsStr = "0" + minutes + "m"
            } else {
                minsStr = "" + minutes + "m"
            }
            components.push(minsStr)
        }
        if (components.length < maxComponents) {
            var secondsStr;
            if (seconds < 10) {
                secondsStr = "0" + seconds + "s"
            } else {
                secondsStr = "" + seconds + "s"
            }
            components.push(secondsStr)
        }
        var finalString = "";
        var _g = 0;
        while (_g < components.length) {
            var component = components[_g];
            ++_g;
            if (finalString != "") {
                finalString += " "
            }
            finalString += component
        }
        return finalString
    };
    var agario_views_DebugPromoView = function() {
        oaktree_ext_ui_views_GenericDialog.call(this, "debugPromoView");
        this.maxWidth = 600;
        this.maxHeight = 450
    };
    $hxClasses["agario.views.DebugPromoView"] = agario_views_DebugPromoView;
    agario_views_DebugPromoView.__name__ = ["agario", "views", "DebugPromoView"];
    agario_views_DebugPromoView.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_DebugPromoView.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            var activePromosLabel = new oaktree_ext_ui_Label({
                multiline: true,
                color: 0,
                width: 200,
                height: 300
            });
            var psystem = Core.services.promo.getActivePromotionSystem();
            var activePromos = [];
            if (psystem == null) {
                activePromos.push("Promotion system is null")
            } else {
                var offers = psystem.getActiveOffers();
                var _g = 0;
                while (_g < offers.length) {
                    var offer = offers[_g];
                    ++_g;
                    activePromos.push(offer.offerName)
                }
            }
            activePromosLabel.set_text(activePromos.join("\n"));
            this.addChild(activePromosLabel)
        },
        __class__: agario_views_DebugPromoView
    });
    var agario_views_DebugView = function() {
        oaktree_ext_ui_views_GenericDialog.call(this, "debugView");
        this.maxWidth = 600;
        this.maxHeight = 450
    };
    $hxClasses["agario.views.DebugView"] = agario_views_DebugView;
    agario_views_DebugView.__name__ = ["agario", "views", "DebugView"];
    agario_views_DebugView.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_DebugView.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        offerButtons: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            var assetsList = [];
            assetsList.push(Core.get_assets().getAtlas("menusCommonUI").load());
            var gotAssets = promhx_Promise.whenAll(assetsList);
            var _ps = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
            var psystem = _ps.getPromoSystemWithSystemId("promotionSystem");
            if (psystem == null) {
                this.close();
                return
            }
            var offers = psystem.getOffers();
            var resources = [];
            var _g = 0;
            while (_g < offers.length) {
                var offer = offers[_g];
                ++_g;
                if (offer.badgeConfiguration != null) {
                    offer.badgeConfiguration.resolve(true);
                    offer.badgeConfiguration.getResourceList(resources)
                }
            }
            var promoAssets = [];
            var _g1 = 0;
            while (_g1 < resources.length) {
                var resource = resources[_g1];
                ++_g1;
                var tempAsset;
                if (!resource.isAtlas && resource.spriteName != null) {
                    tempAsset = Core.get_assets().getAsset(resource.spriteName);
                    promoAssets.push(tempAsset.load())
                }
                if (resource.atlasName != null) {
                    tempAsset = Core.get_assets().getAsset(agario_views_promoclient_PromoClientUtils.removeExtension(resource.atlasName));
                    promoAssets.push(tempAsset.load())
                }
            }
            var gotPromoAssets = promhx_Promise.whenAll(promoAssets);
            ((function($this) {
                var $r;
                var varargf = function(f) {
                    var ret = new promhx_Promise();
                    var arr = [gotAssets, gotPromoAssets];
                    var p = promhx_Promise.whenAll(arr);
                    p._update.push({
                        async: ret,
                        linkf: function(x) {
                            ret.handleResolve(f(arr[0]._val, arr[1]._val))
                        }
                    });
                    return ret
                };
                $r = {
                    then: varargf
                };
                return $r
            }(this))).then($bind(this, this.buildUI));
            this.showLoading()
        },
        buildUI: function(atlas, promoAssets) {
            this.hideLoading();
            var tmpImage = new openfl_display_Sprite();
            this.addChild(tmpImage);
            tmpImage.addChild(Core.get_assets().getAtlas("menusCommonUI").get("tapjoy_icon").asBitmap());
            var promoButton = new agario_views_controls_FlatButton({
                labelUp: {
                    text: "Promotions"
                },
                width: 130,
                height: 35
            });
            this.addChild(promoButton);
            promoButton.addEventListener("click", function(_) {
                var scene = new agario_views_DebugPromoView();
                oaktree_OakTree.get_scenes().add(scene);
                scene.open(true);
                scene.onClose.addOnce(function() {
                    oaktree_OakTree.get_scenes().remove(scene)
                })
            });
            var _ps = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
            var promoClient = _ps.getPromoClientWithSystemId("promotionSystem");
            var psystem = promoClient.get_promoSystem();
            var offers = psystem.getOffers();
            this.offerButtons = [];
            var counter = 0;
            var _x = 0;
            var _y = 0;
            var _g = 0;
            while (_g < offers.length) {
                var offer = offers[_g];
                ++_g;
                if (offer.badgeConfiguration == null) {
                    continue
                }
                var btn = agario_views_promoclient_PromoButton.getButtonForOffer(offer.offerName, offer.badgeConfiguration, $bind(this, this.handlePromoOfferClick), promoClient.get_gameDelegate(), psystem);
                if (btn == null) {
                    continue
                }
                counter++;
                _x = counter % 5;
                _y = Math.floor(counter / 5);
                btn.set_x(_x * 150);
                btn.set_y(_y * 75);
                this.addChild(btn);
                this.offerButtons.push(btn)
            }
            var shadowConfig = new oaktree_objects_FramedSpriteVO();
            shadowConfig.leftX = 24;
            shadowConfig.rightX = 26;
            shadowConfig.imageFrameName = "stretch_shadow";
            shadowConfig.texture = "menusMainUI";
            var frameAsset = Core.get_assets().getTexture(shadowConfig.imageFrameName, shadowConfig.texture).get_bitmapData();
            var shadow1 = oaktree_utils_Slice9Bitmap.fromFrameSpriteVO(frameAsset, shadowConfig);
            shadow1.isHorizontal = true;
            shadow1.setSize(106, 26);
            this.addChild(shadow1);
            shadow1.set_x(400);
            shadow1.set_y(100);
            var shadowConfig2 = new oaktree_objects_FramedSpriteVO();
            shadowConfig2.leftX = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(24, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
            shadowConfig2.rightX = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(26, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
            shadowConfig2.imageFrameName = "stretch_shadow";
            shadowConfig2.texture = "menusMainUI";
            var shadow2 = oaktree_utils_Slice9Bitmap.fromFrameSpriteVO(frameAsset, shadowConfig2);
            shadow2.isHorizontal = true;
            shadow2.setSize(106, 26);
            this.addChild(shadow2);
            shadow2.set_x(400);
            shadow2.set_y(170);
            var btnConfig = new oaktree_objects_FramedSpriteVO();
            btnConfig.bottomY = 9;
            btnConfig.imageFrameName = "promo_red_button_frame";
            btnConfig.leftX = 9;
            btnConfig.rightX = 10;
            btnConfig.texture = "PromoGeneric_Items";
            btnConfig.topY = 10
        },
        dispose: function() {
            if (this.offerButtons != null) {
                var _g = 0;
                var _g1 = this.offerButtons;
                while (_g < _g1.length) {
                    var btn = _g1[_g];
                    ++_g;
                    btn.dispose()
                }
                this.offerButtons = null
            }
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this)
        },
        handlePromoOfferClick: function(offerId, action) {
            haxe_Log.trace("clicked on promo " + offerId, {
                fileName: "DebugView.hx",
                lineNumber: 215,
                className: "agario.views.DebugView",
                methodName: "handlePromoOfferClick"
            });
            var _ps = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService);
            var promoClient = _ps.getPromoClientWithSystemId("promotionSystem");
            var psystem = promoClient.get_promoSystem();
            var offer = psystem.getOfferFromId(offerId);
            offer.setOfferState(miniclip_promotionsystem_core_model_vo_StateOffer.ACTIVE);
            var promotionNode = agario_views_promoclient_PromotionNode.createPromoNode(offerId, promoClient, promoClient.get_gameDelegate(), psystem);
            promotionNode.debugMode = true;
            var promoDialog = new agario_views_promoclient_PromotionDialog(promotionNode);
            promoDialog.addEventListener("addedToStage", $bind(this, this.onAddedToStage_Dialog));
            promoDialog.debugMode = true;
            oaktree_OakTree.get_scenes().add(promoDialog, 1);
            promoDialog.open(true);
            promoDialog.onClose.addOnce(function() {
                oaktree_OakTree.get_scenes().remove(promoDialog)
            })
        },
        onAddedToStage_Dialog: function(e) {
            var promoDialog;
            promoDialog = js_Boot.__cast(e.target, agario_views_promoclient_PromotionDialog);
            promoDialog.removeEventListener("addedToStage", $bind(this, this.onAddedToStage_Dialog));
            var onClickStage = function(evt) {
                if (js_Boot.__instanceof(evt.target, openfl_display_Stage)) {
                    promoDialog.close()
                }
            };
            promoDialog.stage.addEventListener("click", onClickStage, false, 0, true)
        },
        __class__: agario_views_DebugView
    });
    var agario_views_DisconnectedDialog = function() {
        this.state = "disconnected_dialog";
        oaktree_ext_ui_views_GenericDialog.call(this, this.state);
        this.maxWidth = 420;
        this.maxHeight = 400
    };
    $hxClasses["agario.views.DisconnectedDialog"] = agario_views_DisconnectedDialog;
    agario_views_DisconnectedDialog.__name__ = ["agario", "views", "DisconnectedDialog"];
    agario_views_DisconnectedDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_DisconnectedDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        okButton: null,
        icon: null,
        footerText: null,
        state: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.closeButton.set_visible(false);
            this.footerText = "web_disconnect_body";
            this.buildUI()
        },
        buildUI: function() {
            this.container.get_graphics().beginFill(16119285, 1);
            this.container.get_graphics().drawRect(25, 80, this.maxWidth - 50, this.maxHeight - 160);
            this.container.get_graphics().endFill();
            var titleLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("web_disconnect_title"),
                fontSize: 30,
                color: 3421236,
                width: this.maxWidth - 20,
                autoSize: 1,
                align: 0
            });
            titleLabel.set_height(titleLabel.get_textHeight());
            titleLabel.set_x((this.maxWidth - titleLabel.get_width()) * 0.5);
            titleLabel.set_y(20);
            titleLabel.set_selectable(false);
            this.container.addChild(titleLabel);
            var textLabel = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text(this.footerText),
                fontSize: 17,
                color: 3421236,
                width: this.maxWidth - 100,
                autoSize: 0,
                align: 0,
                multiline: true
            });
            textLabel.set_height(textLabel.get_textHeight() + 5);
            textLabel.set_x((this.maxWidth - textLabel.get_width()) * 0.5);
            textLabel.set_y(250);
            textLabel.set_selectable(false);
            this.container.addChild(textLabel);
            this.okButton = new agario_views_controls_FlatButton({
                labelUp: {
                    text: oaktree_ext_localization_I18n.text("menu_login_elsewhere_button"),
                    color: 16777215,
                    fontSize: 15
                },
                width: 130,
                height: 35,
                colorUp: 5880408,
                colorOver: 4496708
            });
            this.okButton.set_x((this.maxWidth - this.okButton.get_width()) * 0.5);
            this.okButton.set_y(this.maxHeight - 20 - this.okButton.get_height());
            this.okButton.set_visible(false);
            this.okButton.addEventListener("click", $bind(this, this.onCloseButtonClick));
            this.container.addChild(this.okButton);
            this.icon = new openfl_display_Bitmap(Core.get_assets().getTexture("alert_icon", "main_shop").get_bitmapData());
            this.icon.set_x((this.maxWidth - this.icon.get_width()) * 0.5);
            this.icon.set_y(110);
            this.container.addChild(this.icon);
            Core.get_events().addEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().addEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog))
        },
        enableDialog: function(e) {
            this.enable()
        },
        enable: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
            this.allowDisableClose = true;
            this.okButton.set_visible(true);
            this.closeButton.set_enabled(true)
        },
        disableDialog: function(e) {
            this.allowDisableClose = false;
            this.okButton.set_visible(false);
            this.closeButton.set_enabled(false);
            this.disable()
        },
        dispose: function() {
            Core.get_events().removeEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().removeEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog));
            if (this.okButton != null) {
                this.okButton.removeEventListener("click", $bind(this, this.onCloseButtonClick))
            }
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this)
        },
        __class__: agario_views_DisconnectedDialog
    });
    var agario_views_FreeCoinsDialog = function(isSurveyButtonOn) {
        this.hasEngagement = false;
        this.padding = 20;
        oaktree_ext_ui_views_GenericDialog.call(this, "state_free_coins_dialog");
        this.closeOnEscape = true;
        this.isSurveyButtonOn = isSurveyButtonOn;
        if (isSurveyButtonOn) {
            this.maxWidth = 650
        } else {
            this.maxWidth = 500
        }
        this.maxHeight = 160;
        Core.get_events().addEventListener("ShopEvent::checkVideos", $bind(this, this.checkEngagement));
        Core.get_events().addEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost))
    };
    $hxClasses["agario.views.FreeCoinsDialog"] = agario_views_FreeCoinsDialog;
    agario_views_FreeCoinsDialog.__name__ = ["agario", "views", "FreeCoinsDialog"];
    agario_views_FreeCoinsDialog.onFreeCoinsResponse = function() {
        if (agario_views_FreeCoinsDialog.freeCoinsBtn != null) {
            agario_views_FreeCoinsDialog.freeCoinsBtn.setTimeLeft(Core.user.freeCoinTimeLeft())
        }
    };
    agario_views_FreeCoinsDialog.triggerFreeCoins = function() {
        var freeCoinTime = Core.user.freeCoinTimeLeft();
        var te = Core.user.userInfo.getTimedEvent("hourlyBonus");
        var _serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
        _serverModel.unregister(111, agario_views_FreeCoinsDialog.onTimedEventResponse);
        _serverModel.register(111, agario_views_FreeCoinsDialog.onTimedEventResponse);
        if (te == null || freeCoinTime > 0) {
            return
        }
        Core.services.shop.activateTimedEvent(te.eventId)
    };
    agario_views_FreeCoinsDialog.onTimedEventResponse = function(type, msg) {
        if (type != 111) {
            return
        }
        var message = msg;
        if (message.get_productUpdates().length == 0) {
            Core.user.userInfo.setTimedEvent(new agario_module_shop_models_vo_TimedEventVO(message.get_userTimedEvent()))
        }
        Core.get_events().dispatchEventWith("ShopEvent::freeCoinsResponse");
        Core.user.handleUserUpdates(message.get_productUpdates());
        Core.user.userInfo.setTimedEvent(new agario_module_shop_models_vo_TimedEventVO(message.get_userTimedEvent()));
        agario_views_FreeCoinsDialog.onFreeCoinsResponse();
        var _serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
        _serverModel.unregister(111, agario_views_FreeCoinsDialog.onTimedEventResponse)
    };
    agario_views_FreeCoinsDialog.openCollectDialog = function(waitForData, closeHandler, showVideoOfferBtn, instance) {
        if (showVideoOfferBtn == null) {
            showVideoOfferBtn = true
        }
        if (Core.get_states().isEnabled("stateFreeCoinsCollect")) {
            return false
        }
        var fcd = new agario_module_user_view_FreeCoinsCollectDialog(showVideoOfferBtn, waitForData);
        if (closeHandler != null) {
            fcd.onClose.addOnce(closeHandler)
        }
        Core.views.openView(fcd, {
            priority: 2,
            animate: true,
            allowClickClose: true,
            callerView: instance
        });
        return true
    };
    agario_views_FreeCoinsDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_FreeCoinsDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        titleLabel: null,
        padding: null,
        hasEngagement: null,
        videoBtn: null,
        offerBtn: null,
        surveyBtn: null,
        btnContainer: null,
        redLbl: null,
        _serverModel: null,
        isSurveyButtonOn: null,
        disconnectDialog: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.hasEngagement = Core.services.gameui.getUserEngagement();
            this.drawTitle();
            this.drawButtons();
            this.startCountingTimers();
            this.doLayout();
            this.allowDisableClose = true
        },
        onConnectionLost: function(e) {
            Core.views.closeAllViews(agario_views_FreeCoinsDialog);
            this.disable();
            this.disconnectDialog = new agario_module_shop_view_ConnectionLostDialog();
            Core.views.openView(this.disconnectDialog, {
                priority: 5,
                animate: true,
                allowClickClose: true,
                callerView: this
            });
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            this.disconnectDialog.addEventListener("close", $bind(this, this.closeDisconnect))
        },
        closeDisconnect: function(e) {
            Core.views.closeTopView()
        },
        doLayout: function() {
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_textWidth()) * 0.5);
            this.titleLabel.set_y(this.padding);
            this.videoBtn.set_x(150);
            this.offerBtn.set_x(300);
            if (this.isSurveyButtonOn) {
                this.surveyBtn.set_x(300);
                this.offerBtn.set_x(450)
            }
            this.btnContainer.set_y(80);
            this.btnContainer.set_x((this.maxWidth - this.btnContainer.get_width()) / 2);
            if (this.redLbl != null) {
                this.redLbl.set_x(this.videoBtn.get_x());
                this.redLbl.set_y(this.videoBtn.get_y() + this.videoBtn.get_height() + 5)
            }
        },
        drawTitle: function() {
            var format = new openfl_text_TextFormat("Arial", 30, 0, true);
            format.align = 3;
            this.titleLabel = new openfl_text_TextField();
            this.titleLabel.set_defaultTextFormat(format);
            this.titleLabel.set_text(oaktree_ext_localization_I18n.text("menu_main_free_coins"));
            this.titleLabel.set_width(this.maxWidth - this.padding);
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 5);
            this.titleLabel.set_autoSize(1);
            this.titleLabel.set_selectable(false);
            this.titleLabel.set_embedFonts(false);
            this.titleLabel.set_textColor(5329233);
            this.addChild(this.titleLabel)
        },
        drawButtons: function() {
            this.btnContainer = new openfl_display_Sprite();
            agario_views_FreeCoinsDialog.freeCoinsBtn = new agario_views_controls_FreeCoinsButton();
            agario_views_FreeCoinsDialog.freeCoinsBtn.addEventListener("click", $bind(this, this.onFreeCoinsClick));
            agario_views_FreeCoinsDialog.freeCoinsBtn.addEventListener("complete", $bind(this, this.onFreeCoinsComplete));
            this.btnContainer.addChild(agario_views_FreeCoinsDialog.freeCoinsBtn);
            var videoIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("freecoins_video", "main_shop").get_bitmapData());
            this.videoBtn = new agario_views_controls_ColorButton(null, {
                color: 6343424,
                overColor: 5748225,
                text: oaktree_ext_localization_I18n.text("menu_main_free_coins_video"),
                textColorOver: 16777215,
                textColor: 16777215,
                icon: videoIcon,
                iconPadding: 6,
                w: 140,
                h: 50,
                fontSize: 14,
                bold: true
            });
            this.btnContainer.addChild(this.videoBtn);
            this.videoBtn.addEventListener("click", $bind(this, this.onVideoClick));
            if (this.isSurveyButtonOn) {
                var surveyIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("survey_icon", "main_shop").get_bitmapData());
                this.surveyBtn = new agario_views_controls_ColorButton(null, {
                    color: 6343424,
                    overColor: 5748225,
                    text: oaktree_ext_localization_I18n.text("menu_main_free_coins_survey"),
                    textColorOver: 16777215,
                    textColor: 16777215,
                    icon: surveyIcon,
                    iconPadding: 6,
                    w: 140,
                    h: 50,
                    fontSize: 14,
                    bold: true
                });
                this.btnContainer.addChild(this.surveyBtn);
                this.surveyBtn.addEventListener("click", $bind(this, this.onSurveyClick))
            }
            this.offerBtn = new agario_views_controls_ColorButton(null, {
                color: 110829,
                overColor: 621990,
                text: oaktree_ext_localization_I18n.text("free_coins_offers"),
                textColorOver: 16777215,
                textColor: 16777215,
                w: 140,
                h: 50,
                fontSize: 14,
                bold: true
            });
            this.btnContainer.addChild(this.offerBtn);
            this.offerBtn.addEventListener("click", $bind(this, this.onOfferWallClick));
            this.addChild(this.btnContainer);
            this.checkVideoAvailable()
        },
        checkVideoAvailable: function() {
            if (!this.hasEngagement) {
                if (this.redLbl == null) {
                    this.redLbl = new oaktree_ext_ui_Label({
                        text: oaktree_ext_localization_I18n.text("free_coins_unavailable"),
                        fontSize: 12,
                        color: 16711680,
                        bold: false
                    });
                    this.addChild(this.redLbl);
                    this.btnContainer.addChild(this.redLbl)
                }
                this.videoBtn.set_alpha(0.6);
                this.videoBtn.set_enabled(false);
                this.redLbl.set_x(this.videoBtn.get_x() + (this.videoBtn.get_width() - this.redLbl.get_textWidth()) / 2);
                this.redLbl.set_y(this.videoBtn.get_y() + this.videoBtn.get_height() + 5)
            }
        },
        onFreeCoinsComplete: function(e) {
            agario_views_FreeCoinsDialog.freeCoinsBtn.setTimeLeft(0)
        },
        onVideoClick: function(e) {
            if (!this.hasEngagement) {
                return
            }
            this.disable();
            Core.services.gameui.openVideoAd();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onOfferWallClick: function(e) {
            Core.services.gameui.openOfferWall();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        onSurveyClick: function(e) {
            Core.services.gameui.openTapResearchOfferWall();
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        startCountingTimers: function() {
            var timeLeft = Core.user.freeCoinTimeLeft();
            agario_views_FreeCoinsDialog.freeCoinsBtn.setTimeLeft(timeLeft)
        },
        onFreeCoinsClick: function(e) {
            var freeCoinTime = Core.user.freeCoinTimeLeft();
            var didOpen = false;
            if (freeCoinTime == 0) {
                didOpen = agario_views_FreeCoinsDialog.openCollectDialog(true, $bind(this, this.onCloseHandler), true, this)
            } else {
                didOpen = agario_views_FreeCoinsDialog.openCollectDialog(false, $bind(this, this.onCloseHandler), true, this)
            }
            if (didOpen) {
                this.disable();
                agario_views_FreeCoinsDialog.triggerFreeCoins();
                /*agario_sounds_GameSounds.play("sfxClick")*/
            }
        },
        onCloseHandler: function() {
            this.enable();
            Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP")
        },
        checkEngagement: function(e) {
            this.hasEngagement = Core.services.gameui.getUserEngagement();
            this.checkVideoAvailable()
        },
        deinitialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.deinitialize.call(this);
            this.dispose()
        },
        dispose: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this);
            if (this.isSurveyButtonOn && this.surveyBtn != null) {
                this.surveyBtn.removeEventListener("click", $bind(this, this.onSurveyClick))
            }
            this.offerBtn.removeEventListener("click", $bind(this, this.onOfferWallClick));
            this.videoBtn.removeEventListener("click", $bind(this, this.onVideoClick));
            agario_views_FreeCoinsDialog.freeCoinsBtn.removeEventListener("click", $bind(this, this.onFreeCoinsClick));
            agario_views_FreeCoinsDialog.freeCoinsBtn.removeEventListener("complete", $bind(this, this.onFreeCoinsComplete));
            Core.get_events().removeEventListener("ShopEvent::checkVideos", $bind(this, this.checkEngagement));
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost))
        },
        __class__: agario_views_FreeCoinsDialog
    });
    var agario_views_GuestLoginDialog = function(_showGPlusButton, _showSaveYourProgress) {
        if (_showSaveYourProgress == null) {
            _showSaveYourProgress = false
        }
        if (_showGPlusButton == null) {
            _showGPlusButton = true
        }
        oaktree_ext_ui_views_GenericDialog.call(this, "state_guest_login_dialog");
        this.closeOnEscape = true;
        this.showGPlusButton = _showGPlusButton;
        this.showSaveYourProgress = _showSaveYourProgress;
        this.maxWidth = 590;
        if (this.showGPlusButton) {
            this.maxHeight = 650
        } else {
            this.maxHeight = 600
        }
    };
    $hxClasses["agario.views.GuestLoginDialog"] = agario_views_GuestLoginDialog;
    agario_views_GuestLoginDialog.__name__ = ["agario", "views", "GuestLoginDialog"];
    agario_views_GuestLoginDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_GuestLoginDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        leftSide: null,
        rightSide: null,
        title: null,
        fbLoginBtn: null,
        googleBtn: null,
        subTitle: null,
        showGPlusButton: null,
        showSaveYourProgress: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            Core.get_events().addEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().addEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog));
            if (this.showSaveYourProgress) {
                this.title = new oaktree_ext_ui_Label({
                    text: oaktree_ext_localization_I18n.text("menu_upgrade_incentive_syp_title"),
                    bold: true,
                    color: 0,
                    fontSize: 36,
                    width: this.maxWidth - 50,
                    align: 0
                });
                var subTitleText;
                if (this.showGPlusButton) {
                    subTitleText = oaktree_ext_localization_I18n.text("menu_upgrade_incentive_syp_subtitle_google")
                } else {
                    subTitleText = oaktree_ext_localization_I18n.text("menu_upgrade_incentive_syp_subtitle_fb")
                }
                this.subTitle = new oaktree_ext_ui_Label({
                    text: subTitleText,
                    bold: true,
                    color: 4225790,
                    fontSize: 28,
                    width: this.maxWidth - 70,
                    align: 0
                })
            } else {
                this.title = new oaktree_ext_ui_Label({
                    text: oaktree_ext_localization_I18n.text("menu_not_avail_title"),
                    bold: true,
                    color: 0,
                    fontSize: 36,
                    width: this.maxWidth - 50,
                    align: 0
                });
                var subTitleText1;
                if (this.showGPlusButton) {
                    subTitleText1 = oaktree_ext_localization_I18n.text("menu_upgrade_incentive_fna_subtitle_google")
                } else {
                    subTitleText1 = oaktree_ext_localization_I18n.text("menu_upgrade_incentive_fna_subtitle_fb")
                }
                this.subTitle = new oaktree_ext_ui_Label({
                    text: subTitleText1,
                    bold: true,
                    color: 4225790,
                    fontSize: 28,
                    width: this.maxWidth - 70,
                    align: 0
                })
            }
            this.addChild(this.title);
            this.addChild(this.subTitle);
            var badge = new openfl_display_Sprite();
            var badgeImg = new openfl_display_Bitmap(Core.get_assets().getTexture("sticker_green", "main_shop").get_bitmapData(), 1, true);
            badgeImg.set_scaleX(badgeImg.set_scaleY(1.1));
            var badgeTxt = new oaktree_ext_ui_Label({
                text: oaktree_ext_localization_I18n.text("menu_upgrade_incentive_upgrade_for_free"),
                multiline: true,
                color: 16777215,
                fontSize: 14,
                width: badgeImg.get_width() * 0.85,
                leading: 8,
                align: 0
            });
            var tf = badgeTxt.get_defaultTextFormat();
            tf.leading = 0;
            badgeTxt.setTextFormat(tf);
            badgeTxt.set_x(10);
            badgeTxt.set_y(30);
            badge.addChild(badgeImg);
            badge.addChild(badgeTxt);
            badge.set_rotation(-15);
            badge.set_x(-30);
            badge.set_y(-10);
            this.addChild(badge);
            this.leftSide = new openfl_display_Sprite();
            var grayArea = new openfl_display_Sprite();
            grayArea.get_graphics().beginFill(16119285);
            grayArea.get_graphics().drawRect(0, 0, 360, 355);
            grayArea.get_graphics().endFill();
            this.leftSide.addChild(grayArea);
            var imgGuests = new openfl_display_Bitmap(Core.get_assets().getTexture("not_for_guests", "main_shop").get_bitmapData(), 1, true);
            imgGuests.set_x(10);
            imgGuests.set_y(20);
            this.leftSide.addChild(imgGuests);
            var descText = oaktree_ext_localization_I18n.text("menu_upgrade_incentive_first_bullet") + "\n" + oaktree_ext_localization_I18n.text("menu_upgrade_incentive_second_bullet") + "\n" + oaktree_ext_localization_I18n.text("menu_upgrade_incentive_third_bullet") + "\n" + oaktree_ext_localization_I18n.text("menu_upgrade_incentive_fourth_bullet") + "\n" + oaktree_ext_localization_I18n.text("menu_upgrade_incentive_fifth_bullet");
            var txtDescription = new oaktree_ext_ui_Label({
                text: descText,
                color: 0,
                fontSize: 18,
                width: grayArea.get_width() - 40,
                leading: 8,
                align: 3
            });
            txtDescription.set_x(40);
            txtDescription.set_y(imgGuests.get_height() + 30);
            this.leftSide.addChild(txtDescription);
            this.addChild(this.leftSide);
            this.rightSide = new openfl_display_Sprite();
            grayArea = new openfl_display_Sprite();
            grayArea.get_graphics().beginFill(16119285);
            grayArea.get_graphics().drawRect(0, 0, 160, 355);
            grayArea.get_graphics().endFill();
            this.rightSide.addChild(grayArea);
            var txtFree = new oaktree_ext_ui_Label({
                text: "FREE Prizes",
                color: 0,
                fontSize: 18,
                width: grayArea.get_width(),
                leading: 8,
                align: 0
            });
            txtFree.set_y(15);
            this.rightSide.addChild(txtFree);
            var imgCoins = new openfl_display_Bitmap(Core.get_assets().getTexture("Coins_L", "main_shop").get_bitmapData(), 1, true);
            imgCoins.set_scaleX(imgCoins.set_scaleY(0.4));
            imgCoins.set_x(this.rightSide.get_width() * 0.5 - imgCoins.get_width() * 0.5);
            imgCoins.set_y(txtFree.get_y() + txtFree.get_height());
            this.rightSide.addChild(imgCoins);
            var txtCoinsValue = new oaktree_ext_ui_Label({
                text: "200\n+",
                color: 0,
                fontSize: 16,
                width: grayArea.get_width(),
                leading: 8,
                align: 0
            });
            txtCoinsValue.set_y(imgCoins.get_y() + imgCoins.get_height());
            this.rightSide.addChild(txtCoinsValue);
            var imgBoost = new openfl_display_Bitmap(Core.get_assets().getTexture("massboost_3x_shop", "main_shop").get_bitmapData(), 1, true);
            imgBoost.set_scaleX(imgBoost.set_scaleY(0.4));
            imgBoost.set_x(this.rightSide.get_width() * 0.5 - imgBoost.get_width() * 0.5);
            imgBoost.set_y(txtCoinsValue.get_y() + txtCoinsValue.get_height());
            this.rightSide.addChild(imgBoost);
            var txtBoostValue = new oaktree_ext_ui_Label({
                text: "1h Boost\n+",
                color: 0,
                fontSize: 16,
                width: grayArea.get_width(),
                leading: 8,
                align: 0
            });
            txtBoostValue.set_y(imgBoost.get_y() + imgBoost.get_height() + 5);
            this.rightSide.addChild(txtBoostValue);
            var imgGifts = new openfl_display_Bitmap(Core.get_assets().getTexture("gifts_icon", "main_shop").get_bitmapData(), 1, true);
            imgGifts.set_scaleX(imgGifts.set_scaleY(0.4));
            imgGifts.set_x(this.rightSide.get_width() * 0.5 - imgGifts.get_width() * 0.5);
            imgGifts.set_y(txtBoostValue.get_y() + txtBoostValue.get_height());
            this.rightSide.addChild(imgGifts);
            var txtGiftValue = new oaktree_ext_ui_Label({
                text: "Friend Gifts",
                color: 0,
                fontSize: 16,
                width: grayArea.get_width(),
                leading: 8,
                align: 0
            });
            txtGiftValue.set_y(imgGifts.get_y() + imgGifts.get_height() + 5);
            this.rightSide.addChild(txtGiftValue);
            this.addChild(this.rightSide);
            this.createFbLogin();
            this.createGoogleLogin();
            this.doLayout()
        },
        createGoogleLogin: function() {
            var googleIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gplus_icon").get_bitmapData());
            this.googleBtn = new agario_views_controls_ColorButton(null, {
                color: 14699578,
                overColor: 14699578,
                text: "Sign in with Google",
                textColorOver: 16777215,
                textColor: 16777215,
                icon: googleIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 320,
                h: 35,
                fontSize: 18,
                bold: true
            });
            if (!this.showGPlusButton) {
                return
            }
            this.addChild(this.googleBtn);
            this.googleBtn.addEventListener("click", $bind(this, this.onGoogleBtn_Click))
        },
        onGoogleBtn_Click: function(e) {
            Core.disableHUD();
            $("#gplusLogin").trigger("click");
            Core.get_events().dispatchEventWith("deactivate");
            Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
            this.close()
        },
        createFbLogin: function() {
            var fbIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("fb_icon").get_bitmapData());
            this.fbLoginBtn = new agario_views_controls_ColorButton(null, {
                color: 3625371,
                overColor: 3625371,
                text: "Sign in with Facebook",
                textColorOver: 16777215,
                textColor: 16777215,
                icon: fbIcon,
                iconPosition: "left",
                iconPadding: 25,
                w: 320,
                h: 35,
                fontSize: 18,
                bold: true
            });
            this.addChild(this.fbLoginBtn);
            this.fbLoginBtn.addEventListener("click", $bind(this, this.fbLoginBtn_Click))
        },
        fbLoginBtn_Click: function(e) {
            Core.facebookLogin($bind(this, this.onFbLoginComplete))
        },
        onFbLoginComplete: function(success) {
            if (success) {
                this.close()
            }
        },
        dispose: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this);
            Core.get_events().dispatchEventWith("deactivate");
            Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
            Core.get_events().removeEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().removeEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog));
            if (this.showGPlusButton) {
                this.googleBtn.removeEventListener("click", $bind(this, this.onGoogleBtn_Click))
            }
            this.fbLoginBtn.removeEventListener("click", $bind(this, this.fbLoginBtn_Click))
        },
        enableDialog: function(e) {
            this.enable()
        },
        enable: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
            this.closeButton.set_enabled(true)
        },
        disableDialog: function(e) {
            this.closeButton.set_enabled(false);
            this.disable()
        },
        doLayout: function() {
            this.title.set_x(20);
            this.title.set_y(30);
            this.subTitle.set_x(20);
            this.subTitle.set_y(this.title.get_y() + this.title.get_height() + 10);
            this.leftSide.set_x(25);
            this.leftSide.set_y(this.subTitle.get_y() + this.subTitle.get_height() + 10);
            this.rightSide.set_x(this.leftSide.get_x() + this.leftSide.get_width() + 15);
            this.rightSide.set_y(this.leftSide.get_y());
            this.fbLoginBtn.set_x(this.googleBtn.set_x((this.maxWidth - this.fbLoginBtn.get_width()) / 2));
            this.fbLoginBtn.set_y(this.leftSide.get_y() + this.leftSide.get_height() + 20);
            this.googleBtn.set_y(this.fbLoginBtn.get_y() + this.fbLoginBtn.get_height() + 10)
        },
        __class__: agario_views_GuestLoginDialog
    });
    var agario_views_PartyCodeIsMobileDialog = function() {
        oaktree_ext_ui_views_GenericDialog.call(this, "party_code_is_mobile_dialog");
        this.maxWidth = 300;
        this.maxHeight = 280
    };
    $hxClasses["agario.views.PartyCodeIsMobileDialog"] = agario_views_PartyCodeIsMobileDialog;
    agario_views_PartyCodeIsMobileDialog.__name__ = ["agario", "views", "PartyCodeIsMobileDialog"];
    agario_views_PartyCodeIsMobileDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_PartyCodeIsMobileDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.buildUI()
        },
        buildUI: function() {
            var padding = 30;
            var titleLabel = new oaktree_ext_ui_Label({
                text: "Invalid Party Code",
                fontSize: 24,
                bold: false,
                color: 0,
                width: this.maxWidth,
                autoSize: 1,
                align: 0
            });
            titleLabel.set_x(0);
            titleLabel.set_y(20);
            this.addChild(titleLabel);
            var titleIcon = new agario_views_components_ImageWrap({
                url: "img/partymode-menu-icon.png",
                getFromConfiguration: false
            });
            titleIcon.set_x(15);
            titleIcon.set_y(25);
            this.addChild(titleIcon);
            var subTitleLabel = new oaktree_ext_ui_Label({
                text: "This party code is only valid on Mobile devices.",
                fontSize: 18,
                bold: false,
                color: 0,
                width: this.maxWidth - padding * 2,
                autoSize: 1,
                align: 0
            });
            subTitleLabel.set_x(padding);
            subTitleLabel.set_y(60);
            this.addChild(subTitleLabel);
            var grayArea = new openfl_display_Sprite();
            grayArea.get_graphics().beginFill(16119285);
            grayArea.get_graphics().drawRoundRect(0, 0, this.maxWidth - padding * 2, 80, 15, 15);
            grayArea.set_x(padding);
            grayArea.set_y(120);
            grayArea.get_graphics().endFill();
            this.addChild(grayArea);
            var grayAreaLabel = new oaktree_ext_ui_Label({
                text: "Get the Agar.io mobile version for free!",
                fontSize: 18,
                bold: false,
                color: 0,
                width: grayArea.get_width(),
                autoSize: 1,
                align: 0
            });
            grayAreaLabel.set_y((grayArea.get_height() - grayAreaLabel.get_height()) / 2);
            grayArea.addChild(grayAreaLabel);
            var appstoreImg = new agario_views_components_ImageWrap({
                url: "img/appstore.png",
                getFromConfiguration: false
            });
            appstoreImg.set_x(padding);
            appstoreImg.set_y(220);
            appstoreImg.addEventListener("click", $bind(this, this.onAppstoreClick));
            appstoreImg.buttonMode = true;
            this.addChild(appstoreImg);
            var playstoreImg = new agario_views_components_ImageWrap({
                url: "img/google_play.png",
                getFromConfiguration: false
            });
            playstoreImg.set_x(155);
            playstoreImg.set_y(220);
            playstoreImg.addEventListener("click", $bind(this, this.onPlaystoreClick));
            playstoreImg.buttonMode = true;
            this.addChild(playstoreImg)
        },
        onAppstoreClick: function(e) {
            openfl_Lib.getURL(new openfl_net_URLRequest(agario_views_PartyCodeIsMobileDialog.APPSTORE_URL))
        },
        onPlaystoreClick: function(e) {
            openfl_Lib.getURL(new openfl_net_URLRequest(agario_views_PartyCodeIsMobileDialog.PLAYSTORE_URL))
        },
        __class__: agario_views_PartyCodeIsMobileDialog
    });
    var agario_views_ShopDialog = function() {
        this.redirect_to = "";
        this.initialized = false;
        this.currentCategory = "";
        this.lastCategory = "";
        oaktree_ext_ui_views_GenericDialog.call(this, "state_shop_dialog");
        this.maxWidth = 760;
        this.maxHeight = 560;
        var shop = Core.services.shop;
        shop.onSoftPurchaseResponse.add($bind(this, this.handleSoftPurchaseComplete));
        shop.onOfferBundleResponse.add($bind(this, this.handleOfferBundleComplete));
        shop.onUseResponse.add($bind(this, this.handleUseResponse));
        shop.S_notEnoughCoins.add($bind(this, this.notEnoughCoins))
    };
    $hxClasses["agario.views.ShopDialog"] = agario_views_ShopDialog;
    agario_views_ShopDialog.__name__ = ["agario", "views", "ShopDialog"];
    agario_views_ShopDialog.displayProductPurchaseScreen = function(purchaseId) {
        var purchaseConfirmationDlg = new agario_module_shop_view_PurchaseCompleteDialog();
        Core.views.openView(purchaseConfirmationDlg, {
            priority: 2,
            animate: true,
            allowClickClose: false,
            callerView: MiniclipAPI.instance.shopDialog
        });
        Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
        var walletProduct = Core.models.shopPurchasesModel.getPurchaseByPurchaseId(purchaseId);
        var productsToGive = Core.models.walletProductBundlesModel.getProductsByBundleId(walletProduct.bundleId);
        if (productsToGive == null || productsToGive.length == 0) {
            return
        }
        Core.get_events().dispatchEventWith("ShopEvent::INAPP_PURCHASE_COMPLETE", purchaseId);
        Core.get_events().dispatchEventWith("ShopEvent::useProductResponse", walletProduct.bundleId)
    };
    agario_views_ShopDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_ShopDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        lastCategory: null,
        currentCategory: null,
        initialized: null,
        viewContainer: null,
        currentView: null,
        backButton: null,
        titleLabel: null,
        viewMain: null,
        viewCoins: null,
        viewMass: null,
        viewSkins: null,
        viewBoosts: null,
        hud: null,
        _container: null,
        redirect_to: null,
        redirect_data: null,
        redirect_path: null,
        disconnectDialog: null,
        initialize: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.showLoading();
            this._container = new openfl_display_Sprite();
            this.addChild(this._container);
            this._container.set_alpha(0);
            Core.get_events().addEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            this.onShopReady(null)
        },
        onConnectionLost: function(e) {
            Core.views.closeAllViews(agario_views_ShopDialog);
            this.disable();
            this.disconnectDialog = new agario_module_shop_view_ConnectionLostDialog();
            Core.views.openView(this.disconnectDialog, {
                priority: 5,
                animate: true,
                allowClickClose: true,
                callerView: this
            });
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            this.disconnectDialog.addEventListener("close", $bind(this, this.closeDisconnect))
        },
        closeDisconnect: function(e) {
            Core.views.closeTopView()
        },
        onShopReady: function(e) {
            Core.get_events().removeEventListener("ShopEvent::Ready", $bind(this, this.onShopReady));
            Core.services.shop.isShopAvailable = true;
            this.buildUI();
            motion_Actuate.tween(this._container, 0.5, {
                alpha: 1
            });
            this.hideLoading();
            if (this.redirect_to != "") {
                this.openCategory(this.redirect_to, this.redirect_path, this.redirect_data);
                this.redirect_to = ""
            }
        },
        buildUI: function() {
            var _g = this;
            this.backButton = new agario_views_controls_ArrowCircleButton("shop_back");
            this._container.addChild(this.backButton);
            this.backButton.set_visible(false);
            var format = new openfl_text_TextFormat("Arial", 30, 0, true);
            format.align = 3;
            this.titleLabel = new openfl_text_TextField();
            this.titleLabel.set_defaultTextFormat(format);
            this.titleLabel.set_text(oaktree_ext_localization_I18n.text("menu_main_shop"));
            this.titleLabel.set_width(this.maxWidth - 20);
            this.titleLabel.set_height(this.titleLabel.get_textHeight() + 5);
            this.titleLabel.set_autoSize(1);
            this.titleLabel.set_selectable(false);
            this.titleLabel.set_embedFonts(false);
            this.titleLabel.set_textColor(5329233);
            this._container.addChild(this.titleLabel);
            this.hud = new agario_views_controls_ShopHUD();
            this.hud.mouseChildren = false;
            this.hud.buttonMode = true;
            this._container.addChild(this.hud);
            this.hud.addEventListener("click", $bind(this, this.onHudClick));
            this.hud.set_y(35);
            this.hud.set_x(this.maxWidth - this.hud.get_width() / 2 - 20);
            this.viewContainer = new openfl_display_Sprite();
            this._container.addChild(this.viewContainer);
            this.viewMain = new agario_module_shop_screens_ShopMainScreen();
            this.viewCoins = new agario_module_shop_screens_ShopCoinsScreen();
            this.viewMass = new agario_module_shop_screens_ShopMassScreen();
            this.viewSkins = new agario_module_shop_screens_ShopSkinsScreen();
            this.viewBoosts = new agario_module_shop_screens_ShopXPScreen();
            this.setView(this.viewMain);
            this.viewMain.coinsSectionBtn.addEventListener("click", $bind(this, this.handleCurrencySectionClick));
            this.viewMain.massSectionBtn.addEventListener("click", $bind(this, this.handleMassSectionClick));
            this.viewMain.skinsSectionBtn.addEventListener("click", $bind(this, this.handleSkinsSectionClick));
            this.viewMain.xpSectionBtn.addEventListener("click", $bind(this, this.handleBoostSectionClick));
            this.backButton.addEventListener("click", $bind(this, this.handleBackButton));
            Core.get_events().addEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableShop));
            Core.get_events().addEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableShop));
            this.addEventListener("close", function(e) {
                Core.get_events().dispatchEventWith("ShopEvent::SHOP_ENABLED");
                _g.enable();
                _g.closeButton.set_enabled(true)
            }, false, 0, true);
            this.initialized = true
        },
        enableShop: function(e) {
            this.enable()
        },
        enable: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
            this.closeButton.set_enabled(true)
        },
        disableShop: function(e) {
            this.closeButton.set_enabled(false);
            this.disable()
        },
        onCloseHandler: function() {
            this.enableShop()
        },
        onHudClick: function(e) {
            if (this.currentCategory == "shopCurrency") {
                return
            }
            this.lastCategory = this.currentCategory;
            this.openCategory("shopCurrency");
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        notEnoughCoins: function() {
            this.lastCategory = this.currentCategory;
            this.openCategory("shopCurrency");
            this.setTitle(oaktree_ext_localization_I18n.text("menu_not_enough_coins_title"))
        },
        getItem: function(itemId) {
            return Core.models.shopItems.getItemByPurchaseId(itemId)
        },
        handleUseResponse: function(item) {
            var useItem = item;
            if (useItem != null) {
                Core.get_events().dispatchEventWith("ShopEvent::useProductResponse", useItem, true)
            }
        },
        handleSoftPurchaseComplete: function(purchaseResponse) {
            var item = this.getItem(purchaseResponse.get_purchaseId());
            if (purchaseResponse.get_result() == 1 && item != null) {
                if (js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopSkinItemVO)) {
                    item.set_owned(true);
                    if (!Core.ui.state.isPlayerAlive) {
                        Core.get_events().dispatchEventWith("ShopEvent::USE", item)
                    }
                } else {
                    if (js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopBoostItemVO)) {
                        var walletItem = Core.user.getWalletItemById((js_Boot.__cast(item, agario_module_shop_models_vo_ShopBoostItemVO)).productIdToQuantify);
                        if (walletItem == null) {
                            walletItem = new agario_module_shop_models_vo_WalletItemVO({
                                productId: (js_Boot.__cast(item, agario_module_shop_models_vo_ShopBoostItemVO)).productIdToQuantify,
                                balance: 1
                            });
                            Core.user.wallet.push(walletItem)
                        }
                        Core.get_events().dispatchEventWith("ShopEvent::USE", item)
                    }
                }
                Core.user.handleUserUpdates(purchaseResponse.get_productUpdates());
                Core.get_events().dispatchEventWith("ShopEvent::softPurchaseComplete", item)
            } else {
                Core.get_events().dispatchEventWith("shopevent::soft_purchase_failed", item)
            }
            if (this.currentView != null) {
                this.currentView.updateView()
            }
        },
        handleOfferBundleComplete: function(purchaseResponse) {
            var item = this.getItem(purchaseResponse.get_bundleId());
            if (purchaseResponse.get_result() == 1 && item != null) {
                if (js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopSkinItemVO)) {
                    item.set_owned(true);
                    if (!Core.ui.state.isPlayerAlive) {
                        Core.get_events().dispatchEventWith("ShopEvent::USE", item)
                    }
                } else {
                    if (js_Boot.__instanceof(item, agario_module_shop_models_vo_ShopBoostItemVO)) {
                        var walletItem = Core.user.getWalletItemById((js_Boot.__cast(item, agario_module_shop_models_vo_ShopBoostItemVO)).productIdToQuantify);
                        if (walletItem == null) {
                            walletItem = new agario_module_shop_models_vo_WalletItemVO({
                                bundleId: (js_Boot.__cast(item, agario_module_shop_models_vo_ShopBoostItemVO)).productIdToQuantify,
                                balance: 1
                            });
                            Core.user.wallet.push(walletItem)
                        }
                        Core.get_events().dispatchEventWith("ShopEvent::USE", item)
                    }
                }
                Core.user.handleUserUpdates(purchaseResponse.get_productUpdates())
            } else {
                Core.get_events().dispatchEventWith("shopevent::soft_purchase_failed", item)
            }
            if (this.currentView != null) {
                this.currentView.updateView()
            }
        },
        _update: function() {
            this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_textWidth()) * 0.5);
            this.titleLabel.set_y(30);
            this.backButton.set_x(30);
            this.backButton.set_y(this.titleLabel.get_y() + (this.titleLabel.get_height() - this.backButton.get_height()) / 2);
            this.currentView.set_x((this.maxWidth - this.currentView.maxWidth) / 2);
            this.currentView.set_y(this.titleLabel.get_y() + this.titleLabel.get_height() + 15);
            this.currentView.updateView();
            return this
        },
        setView: function(newView, title) {
            if (this.currentView != null) {
                this.viewContainer.removeChild(this.currentView);
                this.currentView.deinitialize();
                this.currentView = null
            }
            if (!this.viewContainer.contains(newView)) {
                var innerMaxWidth = Math.floor(this.maxWidth - 20);
                var innerMaxHeight = Math.floor(this.maxHeight - this.titleLabel.get_height() - 50);
                newView.maxWidth = innerMaxWidth;
                newView.maxHeight = innerMaxHeight;
                this.viewContainer.addChild(newView);
                if (title != null && title != "") {
                    newView.set_name(title)
                }
            }
            this.viewContainer.setChildIndex(newView, this.viewContainer.get_numChildren() - 1);
            newView.set_visible(true);
            this.currentView = newView;
            this.titleLabel.set_text(this.currentView.get_name());
            this._update()
        },
        setTitle: function(title) {
            if (this.currentView != null) {
                this.titleLabel.set_text(title)
            }
            this._update()
        },
        handleBackButton: function(e) {
            if (this.lastCategory != "" && this.lastCategory != this.currentCategory) {
                this.openCategory(this.lastCategory);
                this.lastCategory = this.currentCategory
            } else {
                this.lastCategory = "shopMain";
                this.openCategory("shopMain")
            }
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        handleCurrencySectionClick: function(e) {
            this.openCategory("shopCurrency", true)
        },
        handleMassSectionClick: function(e) {
            this.openCategory("shopMass", true)
        },
        handleSkinsSectionClick: function(e) {
            this.openCategory("shopSkins", true)
        },
        handleBoostSectionClick: function(e) {
            this.openCategory("shopBoost", true)
        },
        disableCategory: function(category) {
            switch (category) {
                case "shopCurrency":
                    Core.get_states().remove("state_shop_currency_dialog");
                    break;
                case "shopMass":
                    Core.get_states().remove("state_shop_mass_dialog");
                    break;
                case "shopSkins":
                    Core.get_states().remove("state_shop_skins_dialog");
                    break;
                case "shopBoost":
                    Core.get_states().remove("state_shop_boost_dialog");
                    break;
                default:
            }
        },
        enableCategory: function(category) {
            switch (category) {
                case "shopCurrency":
                    Core.get_states().enable("state_shop_currency_dialog");
                    break;
                case "shopMass":
                    Core.get_states().enable("state_shop_mass_dialog");
                    break;
                case "shopSkins":
                    Core.get_states().enable("state_shop_skins_dialog");
                    break;
                case "shopBoost":
                    Core.get_states().enable("state_shop_boost_dialog");
                    break;
                default:
            }
        },
        openCategory: function(target, reset_path, data) {
            if (reset_path == null) {
                reset_path = false
            }
            if (this.lastCategory != "") {
                this.disableCategory(this.lastCategory)
            }
            if (this.lastCategory == "" || reset_path) {
                this.lastCategory = "shopMain"
            }
            if (!this.initialized) {
                if (data != null) {
                    this.redirect_data = data
                }
                if (reset_path != null) {
                    this.redirect_path = reset_path
                }
                this.redirect_to = target;
                return
            }
            this.currentCategory = target;
            switch (target) {
                case "shopCurrency":
                    this.setView(this.viewCoins);
                    this.backButton.set_visible(true);
                    break;
                case "shopMass":
                    this.setView(this.viewMass);
                    this.backButton.set_visible(true);
                    break;
                case "shopSkins":
                    this.setView(this.viewSkins);
                    if (data != null) {
                        this.viewSkins.showTab(data.tab)
                    }
                    this.backButton.set_visible(true);
                    break;
                case "shopBoost":
                    this.setView(this.viewBoosts);
                    this.backButton.set_visible(true);
                    break;
                default:
                    this.setView(this.viewMain);
                    this.backButton.set_visible(false)
            }
            this.enableCategory(this.currentCategory);
            this.redirect_to = "";
            this.redirect_data = null;
            this.redirect_path = false;
            openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage)
        },
        updateView: function() {
            if (this.currentView != null) {
                this.currentView.updateView()
            }
        },
        destroy: function() {
            var shop = Core.services.shop;
            shop.onSoftPurchaseResponse.remove($bind(this, this.handleSoftPurchaseComplete));
            shop.onUseResponse.remove($bind(this, this.handleUseResponse));
            shop.S_notEnoughCoins.remove($bind(this, this.notEnoughCoins));
            Core.get_events().removeEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableShop));
            Core.get_events().removeEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableShop));
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            if (this.disconnectDialog != null) {
                this.disconnectDialog.removeEventListener("close", $bind(this, this.closeDisconnect))
            }
            this.viewMain.coinsSectionBtn.removeEventListener("click", $bind(this, this.handleCurrencySectionClick));
            this.viewMain.massSectionBtn.removeEventListener("click", $bind(this, this.handleMassSectionClick));
            this.viewMain.skinsSectionBtn.removeEventListener("click", $bind(this, this.handleSkinsSectionClick));
            this.viewMain.xpSectionBtn.removeEventListener("click", $bind(this, this.handleBoostSectionClick))
        },
        dispose: function() {
            if (this.currentCategory != "") {
                this.disableCategory(this.currentCategory)
            }
            this.destroy();
            this.viewMain.dispose();
            this.viewCoins.dispose();
            this.viewMass.dispose();
            this.viewSkins.dispose();
            this.viewBoosts.dispose();
            Core.get_events().removeEventListener("ShopEvent::connectionLost", $bind(this, this.onConnectionLost));
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this)
        },
        onEscapePress: function() {
            if (Core.get_states().getTopState().name.indexOf("state_shop") == -1) {
                return false
            }
            if (this.currentView == this.viewMain) {
                this.close()
            } else {
                this.handleBackButton(null)
            }
            return true
        },
        close: function(animate) {
            if (animate == null) {
                animate = false
            }
            if (agario_views_ShopDialog.discardNextClose) {
                agario_views_ShopDialog.discardNextClose = false
            } else {
                oaktree_ext_ui_views_GenericDialog.prototype.close.call(this)
            }
        },
        onDisableClick: function(e) {
            if (Core.views.getTopView() == this && !this.isLoading) {
                oaktree_ext_ui_views_GenericDialog.prototype.onDisableClick.call(this, e)
            }
        },
        __class__: agario_views_ShopDialog
    });
    var agario_views_ViewManager = function() {
        this.openedViews = [];
        oaktree_OakTree.get_scenes().onLateUpdate.connect($bind(this, this.onSceneLateUpdate))
    };
    $hxClasses["agario.views.ViewManager"] = agario_views_ViewManager;
    agario_views_ViewManager.__name__ = ["agario", "views", "ViewManager"];
    agario_views_ViewManager.prototype = {
        openedViews: null,
        hasViews: null,
        get_hasViews: function() {
            return this.openedViews.length > 0
        },
        onSceneLateUpdate: function() {
            if (Core.get_states().isTopState("state_main_screen")) {
                Core.services.gameui.hideContainer()
            }
        },
        onResize: function(newWidth, newHeight) {
            var _g = 0;
            var _g1 = this.openedViews;
            while (_g < _g1.length) {
                var v = _g1[_g];
                ++_g;
                v.view.resize(newWidth, newHeight)
            }
        },
        openView: function(targetView, options) {
            if (options.callerView != null) {
                targetView.caller = options.callerView
            }
            if (this.hasView(targetView)) {
                this.closeView(targetView)
            }
            this.stashView(targetView, options);
            this.openNextView()
        },
        hasView: function(view) {
            var list = this.openedViews.filter(function(data) {
                return data.view == view
            });
            return list.length > 0
        },
        getViewData: function(view) {
            var list = this.openedViews.filter(function(data) {
                return data.view == view
            });
            if (list.length > 0) {
                return list[0]
            } else {
                return null
            }
        },
        stashView: function(targetView, options) {
            this.openedViews.push({
                view: targetView,
                options: options
            })
        },
        openNextView: function() {
            var data = this.getNextView();
            if (data == null || data.options.active) {
                return false
            }
            var active = this.getActiveView();
            if (active != null && active.options.priority >= data.options.priority) {
                return false
            }
            var targetView = data.view;
            var options = data.options;
            options.active = true;
            targetView.allowDisableClose = options.allowClickClose;
            oaktree_OakTree.get_scenes().add(targetView);
            Core.services.gameui.showContainer();
            targetView.open(options.animate);
            targetView.addEventListener(oaktree_ext_ui_views_GenericDialog.CLOSE, $bind(this, this.onCloseView));
            targetView.addEventListener("addedToStage", $bind(this, this.onShopAddedToStage), false, 0, true);
            return true
        },
        getNextView: function() {
            if (this.openedViews.length == 0) {
                return null
            }
            var tot = this.openedViews.length;
            var highPriority = this.getHighestPriority();
            var _g1 = 1;
            var _g = tot + 1;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.openedViews[tot - i].options.priority == highPriority) {
                    return this.openedViews[tot - i]
                }
            }
            return null
        },
        getActiveView: function() {
            if (this.openedViews.length == 0) {
                return null
            }
            var tot = this.openedViews.length;
            var _g = 0;
            while (_g < tot) {
                var i = _g++;
                if (this.openedViews[tot - i - 1].options.active) {
                    return this.openedViews[tot - i - 1]
                }
            }
            return null
        },
        getHighestPriority: function() {
            var priority = 0;
            var _g = 0;
            var _g1 = this.openedViews;
            while (_g < _g1.length) {
                var data = _g1[_g];
                ++_g;
                if (data.options.priority > priority) {
                    priority = data.options.priority
                }
            }
            return priority
        },
        closeView: function(targetView, overrideLoadingViews) {
            if (overrideLoadingViews == null) {
                overrideLoadingViews = false
            }
            if (this.hasView(targetView)) {
                if (targetView.isLoading && !overrideLoadingViews) {
                    return
                }
                targetView.close()
            }
        },
        onCloseView: function(e) {
            this.removeView(e.data);
            this.openNextView();
            if (this.openedViews.length == 0) {
                Core.services.gameui.hideContainer()
            }
        },
        removeView: function(view) {
            if (this.hasView(view)) {
                if (view.caller != null) {
                    view.caller.enable()
                }
                view.removeEventListener(oaktree_ext_ui_views_GenericDialog.CLOSE, $bind(this, this.onCloseView));
                view.removeEventListener("addedToStage", $bind(this, this.onShopAddedToStage));
                var data = this.getViewData(view);
                if (data != null) {
                    HxOverrides.remove(this.openedViews, data)
                }
            }
        },
        updateViews: function() {
            var _g = 0;
            var _g1 = this.openedViews;
            while (_g < _g1.length) {
                var v = _g1[_g];
                ++_g;
                v.view.updateView()
            }
        },
        getTopView: function() {
            var active = this.getActiveView();
            if (active != null) {
                return active.view
            }
            return null
        },
        closeTopView: function() {
            var active = this.getActiveView();
            if (active != null && active.view.allowDisableClose) {
                this.closeView(active.view)
            }
        },
        closeAllViews: function(except) {
            var _g = 0;
            var _g1 = this.openedViews;
            while (_g < _g1.length) {
                var v = _g1[_g];
                ++_g;
                if (except != null && Type.getClassName(Type.getClass(v.view)) != Type.getClassName(except)) {
                    this.closeView(v.view, true)
                } else {
                    if (except == null) {
                        this.closeView(v.view, true);
                        return
                    }
                }
            }
        },
        enableViews: function() {
            var _g = 0;
            var _g1 = this.openedViews;
            while (_g < _g1.length) {
                var v = _g1[_g];
                ++_g;
                v.view.enable()
            }
        },
        onShopAddedToStage: function(e) {
            e.target.removeEventListener("addedToStage", $bind(this, this.onShopAddedToStage));
            if (!(js_Boot.__cast(e.target, openfl_display_DisplayObject)).stage.hasEventListener("click")) {
                (js_Boot.__cast(e.target, openfl_display_DisplayObject)).stage.addEventListener("click", $bind(this, this.onClickStage))
            }
            if (js_Boot.__instanceof(e.target, oaktree_ext_ui_views_GenericDialog) && (js_Boot.__cast(e.target, oaktree_ext_ui_views_GenericDialog)).disableShape != null) {
                (js_Boot.__cast(e.target, oaktree_ext_ui_views_GenericDialog)).disableShape.addEventListener("click", $bind(this, this.onClickDisableShape))
            }
        },
        onClickStage: function(e) {
            if (e.target == (js_Boot.__cast(e.target, openfl_display_DisplayObject)).stage) {
                this.closeTopView()
            }
        },
        onClickDisableShape: function(e) {
            this.closeTopView()
        },
        __class__: agario_views_ViewManager,
        __properties__: {
            get_hasViews: "get_hasViews"
        }
    };
    var agario_views_components_ImageWrap = function(_opts) {
        openfl_display_Sprite.call(this);
        if (_opts.w == null) {
            _opts.w = -1
        }
        _opts.w;
        if (_opts.h == null) {
            _opts.h = -1
        }
        _opts.h;
        if (_opts.getFromConfiguration == null) {
            _opts.getFromConfiguration = true
        }
        _opts.getFromConfiguration;
        this.options = _opts;
        this.init()
    };
    $hxClasses["agario.views.components.ImageWrap"] = agario_views_components_ImageWrap;
    agario_views_components_ImageWrap.__name__ = ["agario", "views", "components", "ImageWrap"];
    agario_views_components_ImageWrap.__super__ = openfl_display_Sprite;
    agario_views_components_ImageWrap.prototype = $extend(openfl_display_Sprite.prototype, {
        options: null,
        imageMask: null,
        init: function() {
            var source = this.options.url;
            if (source == null && this.options.image != null && this.options.image.source != null) {
                source = this.options.image.source
            }
            if (source != null) {
                var imageUrl = source;
                if (this.options.getFromConfiguration) {
                    imageUrl = agario_utils_AssetsUtils.getImageUrl(source)
                }
                this.addImage(imageUrl, imageUrl, null)
            } else {
                if (this.options.image != null) {
                    var image = this.options.image;
                    this.addImage(image.id, image.source, image)
                }
            }
        },
        addImage: function(id, source, image) {
            var asset;
            if (image != null) {
                asset = image
            } else {
                asset = source
            }
            if (agario_utils_AssetsUtils.existRemoteAsset(asset)) {
                agario_utils_AssetsUtils.getRemoteBitmapData(asset).then($bind(this, this.handleImageLoading))
            } else {
                this.imageMask = new openfl_display_Sprite();
                if (this.options.w > 0) {
                    if (this.options.h < 0) {
                        this.options.h = this.options.w
                    }
                    this.imageMask.get_graphics().beginFill(16777215, 0.2);
                    this.imageMask.get_graphics().drawRect(0, 0, this.options.w, this.options.h);
                    this.imageMask.get_graphics().endFill();
                    this.addChild(this.imageMask)
                }
                agario_utils_AssetsUtils.loadRemoteBitmap(id, source, image).then($bind(this, this.handleImageLoading)).catchError($bind(this, this.handleError))
            }
        },
        handleError: function(e) {
            null
        },
        handleImageLoading: function(data) {
            if (data == null) {
                return
            }
            var bitmap = new openfl_display_Bitmap(data);
            this.addChild(bitmap);
            var ratio;
            if (this.options.w > 0) {
                ratio = this.options.w / bitmap.get_width()
            } else {
                ratio = 1
            }
            bitmap.set_scaleX(bitmap.set_scaleY(ratio));
            bitmap.smoothing = true;
            this.dispatchEvent(new openfl_events_Event("complete", true))
        },
        __class__: agario_views_components_ImageWrap
    });
    var oaktree_ext_ui_controls_TabControl = function() {
        this.line = new openfl_display_Sprite();
        this.whiteSpace = new openfl_display_Sprite();
        oaktree_ext_ui_Control.call(this, {
            name: "tabcontrol"
        });
        this.items = [];
        this.onChange = new msignal_Signal1();
        this.addEventListener("addedToStage", $bind(this, this.onAdded))
    };
    $hxClasses["oaktree.ext.ui.controls.TabControl"] = oaktree_ext_ui_controls_TabControl;
    oaktree_ext_ui_controls_TabControl.__name__ = ["oaktree", "ext", "ui", "controls", "TabControl"];
    oaktree_ext_ui_controls_TabControl.__super__ = oaktree_ext_ui_Control;
    oaktree_ext_ui_controls_TabControl.prototype = $extend(oaktree_ext_ui_Control.prototype, {
        line: null,
        whiteSpace: null,
        items: null,
        length: null,
        get_length: function() {
            return this.items.length
        },
        selectedId: null,
        current: null,
        onChange: null,
        onAdded: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.onAdded));
            this.line.get_graphics().lineStyle(2, 12566463, 1);
            this.line.get_graphics().moveTo(10, 0);
            this.line.get_graphics().lineTo(this.maxWidth - 80, 0);
            this.line.set_y(30);
            this.addChild(this.line)
        },
        setTab: function(tabId) {
            this.changeTab(this.items[tabId], true)
        },
        setTabByName: function(tabName) {
            var t1 = this.items.filter(function(t) {
                return t.id == tabName
            })[0];
            if (t1 != null) {
                this.changeTab(t1, true)
            } else {
                this.setTab(0)
            }
        },
        clear: function() {
            var _g = 0;
            var _g1 = this.items;
            while (_g < _g1.length) {
                var item = _g1[_g];
                ++_g;
                this.removeChild(item);
                item.reset()
            }
            this.current = null;
            this.items = []
        },
        addTab: function(_tab) {
            if (this.items.length == 0) {
                _tab.set_selected(true);
                this.current = _tab;
                this.selectedId = 0
            }
            this.items.push(_tab);
            this.addChild(_tab);
            _tab.onClick.add($bind(this, this.onItemClick));
            this.update_layout();
            return _tab
        },
        changeTab: function(_item, auto) {
            if (auto == null) {
                auto = false
            }
            var _g1 = 0;
            var _g = this.items.length;
            while (_g1 < _g) {
                var i = _g1++;
                this.items[i].set_selected(this.items[i] == _item);
                if (this.items[i].selected) {
                    this.current = this.items[i];
                    this.selectedId = i
                }
            }
            this.whiteSpace.get_graphics().clear();
            this.whiteSpace.get_graphics().beginFill(16777215);
            this.whiteSpace.get_graphics().drawRect(this.current.get_x() + 1, this.current.get_y() + 25, this.current.offVisual.get_width() - 2, 10);
            this.addChild(this.whiteSpace);
            if (!auto) {
                this.onChange.dispatch(_item)
            }
        },
        onItemClick: function(_item) {
            this.changeTab(_item, false)
        },
        update_layout: function() {
            var w = Math.floor((this.maxWidth - 120) / this.items.length) - 5;
            var xx = 10;
            var _g = 0;
            var _g1 = this.items;
            while (_g < _g1.length) {
                var item = _g1[_g];
                ++_g;
                item.set_x(xx);
                if (js_Boot.__instanceof(item, agario_module_shop_components_CategoryTab)) {
                    (js_Boot.__cast(item, agario_module_shop_components_CategoryTab)).set_width(w)
                }
                xx += Math.round(item.get_width()) + 5
            }
            this.update_bounds()
        },
        __class__: oaktree_ext_ui_controls_TabControl,
        __properties__: $extend(oaktree_ext_ui_Control.prototype.__properties__, {
            get_length: "get_length"
        })
    });
    var agario_views_components_SkinShopTabControl = function() {
        oaktree_ext_ui_controls_TabControl.call(this)
    };
    $hxClasses["agario.views.components.SkinShopTabControl"] = agario_views_components_SkinShopTabControl;
    agario_views_components_SkinShopTabControl.__name__ = ["agario", "views", "components", "SkinShopTabControl"];
    agario_views_components_SkinShopTabControl.__super__ = oaktree_ext_ui_controls_TabControl;
    agario_views_components_SkinShopTabControl.prototype = $extend(oaktree_ext_ui_controls_TabControl.prototype, {
        setTabByName: function(tabName) {
            var hasOwned = this.items.filter(function(t) {
                return t.id == "owned"
            }).length > 0;
            var selectedTabs = this.items.filter(function(t1) {
                return t1.id == tabName
            });
            var selectedTab;
            if (selectedTabs.length > 0) {
                selectedTab = selectedTabs[0]
            } else {
                selectedTab = null
            }
            if (selectedTab != null) {
                this.changeTab(selectedTab, true)
            } else {
                if (hasOwned && tabName.toUpperCase() != "OWNED") {
                    this.setTabByName("OWNED")
                } else {
                    this.setTab(0)
                }
            }
        },
        __class__: agario_views_components_SkinShopTabControl
    });
    var agario_views_controls_ArrowCircleButton = function(id) {
        var backButtonBitmapData = Core.get_assets().getTexture("back_button", "main_shop").get_bitmapData();
        this.upState = new openfl_display_Bitmap(backButtonBitmapData);
        this.upState.set_alpha(0.8);
        this.downState = new openfl_display_Bitmap(backButtonBitmapData);
        this.overState = new openfl_display_Bitmap(backButtonBitmapData);
        oaktree_ext_ui_controls_Button.call(this, id)
    };
    $hxClasses["agario.views.controls.ArrowCircleButton"] = agario_views_controls_ArrowCircleButton;
    agario_views_controls_ArrowCircleButton.__name__ = ["agario", "views", "controls", "ArrowCircleButton"];
    agario_views_controls_ArrowCircleButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_ArrowCircleButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        __class__: agario_views_controls_ArrowCircleButton
    });
    var agario_views_controls_CheckButton = function() {
        var checkButtonBitmapData = Core.get_assets().getTexture("check", "main_shop").get_bitmapData();
        this.upState = new openfl_display_Bitmap(checkButtonBitmapData);
        this.upState.set_alpha(0.8);
        this.downState = new openfl_display_Bitmap(checkButtonBitmapData);
        this.overState = new openfl_display_Bitmap(checkButtonBitmapData);
        oaktree_ext_ui_controls_Button.call(this)
    };
    $hxClasses["agario.views.controls.CheckButton"] = agario_views_controls_CheckButton;
    agario_views_controls_CheckButton.__name__ = ["agario", "views", "controls", "CheckButton"];
    agario_views_controls_CheckButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_CheckButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        toggleBitmap: function(value) {
            this.set_selected(value);
            this.upState.set_alpha(value ? 0.8 : 0);
            this.downState.set_alpha(value ? 1 : 0);
            this.overState.set_alpha(value ? 1 : 0)
        },
        __class__: agario_views_controls_CheckButton
    });
    var agario_views_controls_CloseButton = function() {
        var closeBitmapData = Core.get_assets().getAtlas("main_shop").getTexture("Close").get_bitmapData();
        var closeDisabledBitmapData = Core.get_assets().getAtlas("main_shop").getTexture("Close_disabled").get_bitmapData();
        this.upState = new openfl_display_Bitmap(closeBitmapData);
        this.overState = new openfl_display_Bitmap(closeDisabledBitmapData);
        this.downState = new openfl_display_Bitmap(closeBitmapData);
        this.disabledState = new openfl_display_Bitmap(closeDisabledBitmapData);
        oaktree_ext_ui_controls_Button.call(this)
    };
    $hxClasses["agario.views.controls.CloseButton"] = agario_views_controls_CloseButton;
    agario_views_controls_CloseButton.__name__ = ["agario", "views", "controls", "CloseButton"];
    agario_views_controls_CloseButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_CloseButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        __class__: agario_views_controls_CloseButton
    });
    var agario_views_controls_ColorButton = function(id, _options) {
        this._options = _options;
        if (_options.color == null) {
            _options.color = 16711680
        }
        _options.color;
        if (_options.overColor == null) {
            _options.overColor = _options.color
        }
        _options.overColor;
        if (_options.w == null) {
            _options.w = 140
        }
        _options.w;
        if (_options.h == null) {
            _options.h = 30
        }
        _options.h;
        if (_options.radius == null) {
            _options.radius = 10
        }
        _options.radius;
        if (_options.text == null) {
            _options.text = ""
        }
        _options.text;
        if (_options.textColor == null) {
            _options.textColor = 16777215
        }
        _options.textColor;
        if (_options.textColorOver == null) {
            _options.textColorOver = 3355443
        }
        _options.textColorOver;
        if (_options.icon == null) {
            _options.icon = null
        }
        _options.icon;
        if (_options.fontSize == null) {
            _options.fontSize = 12
        }
        _options.fontSize;
        if (_options.bold == null) {
            _options.bold = false
        }
        _options.bold;
        if (_options.showOutline == null) {
            _options.showOutline = false
        }
        _options.showOutline;
        if (_options.outlineColor == null) {
            _options.outlineColor = 0
        }
        _options.outlineColor;
        if (_options.iconPosition == null) {
            _options.iconPosition = "right"
        }
        _options.iconPosition;
        if (_options.iconPadding == null) {
            _options.iconPadding = 0
        }
        _options.iconPadding;
        if (_options.buttonColor == null) {
            _options.buttonColor = null
        }
        _options.buttonColor;
        if (_options.buttonColor != null) {
            _options.color = _options.buttonColor.buttonColor.toInt();
            _options.overColor = _options.buttonColor.buttonOverColor.toInt();
            _options.textColor = _options.buttonColor.textColor.toInt();
            _options.textColorOver = _options.buttonColor.textOverColor.toInt();
            _options.showOutline = _options.buttonColor.hasOutline;
            _options.outlineColor = _options.buttonColor.buttonOutlineColor.toInt()
        }
        var btnState = new openfl_display_Sprite();
        this.normalBtnFace = new openfl_display_Shape();
        var btnWidth = _options.w;
        if (_options.showOutline) {
            this.normalBtnFace.get_graphics().lineStyle(2, _options.outlineColor);
            btnWidth = _options.w - 1
        }
        this.normalBtnFace.get_graphics().beginFill(_options.color, 1);
        this.normalBtnFace.get_graphics().drawRoundRect(0, 0, btnWidth, _options.h, _options.radius, _options.radius);
        this.normalBtnFace.get_graphics().endFill();
        btnState.addChild(this.normalBtnFace);
        this.overBtnFace = new openfl_display_Shape();
        if (_options.showOutline) {
            this.overBtnFace.get_graphics().lineStyle(2, _options.outlineColor)
        }
        this.overBtnFace.get_graphics().beginFill(_options.overColor, 1);
        this.overBtnFace.get_graphics().drawRoundRect(0, 0, btnWidth, _options.h, _options.radius, _options.radius);
        this.overBtnFace.get_graphics().endFill();
        btnState.addChild(this.overBtnFace);
        this.overBtnFace.set_visible(false);
        this.btnLabel = new oaktree_ext_ui_controls_IconLabel({
            text: _options.text,
            fontSize: _options.fontSize,
            align: 0,
            color: 16777215,
            bold: _options.bold
        }, _options.icon, _options.iconPosition, _options.iconPadding);
        btnState.addChild(this.btnLabel);
        this.upState = this.downState = this.overState = btnState;
        oaktree_ext_ui_controls_Button.call(this, id);
        this.position()
    };
    $hxClasses["agario.views.controls.ColorButton"] = agario_views_controls_ColorButton;
    agario_views_controls_ColorButton.__name__ = ["agario", "views", "controls", "ColorButton"];
    agario_views_controls_ColorButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_ColorButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        btnLabel: null,
        normalBtnFace: null,
        overBtnFace: null,
        _options: null,
        text: null,
        get_text: function() {
            return this.text
        },
        set_text: function(value) {
            this.btnLabel.set_text(value);
            this.position();
            return this.text = value
        },
        position: function() {
            if (this._options.icon != null && this.btnLabel.get_height() <= this._options.icon.get_height()) {
                this.btnLabel.set_y((this._options.h - this._options.icon.get_height() / 2) * 0.5)
            } else {
                this.btnLabel.set_y((this._options.h - this.btnLabel.get_height()) * 0.5)
            }
        },
        updateState: function() {
            oaktree_ext_ui_controls_Button.prototype.updateState.call(this);
            if (this.mouseIsOver) {
                this.overBtnFace.set_visible(true);
                this.normalBtnFace.set_visible(false);
                this.btnLabel.label.set_textColor(this._options.textColorOver)
            } else {
                this.overBtnFace.set_visible(false);
                this.normalBtnFace.set_visible(true);
                this.btnLabel.label.set_textColor(this._options.textColor)
            }
        },
        hideIcon: function() {
            this.btnLabel.set_icon(null)
        },
        __class__: agario_views_controls_ColorButton,
        __properties__: $extend(oaktree_ext_ui_controls_Button.prototype.__properties__, {
            set_text: "set_text",
            get_text: "get_text"
        })
    });
    var agario_views_controls_FreeCoinsButton = function() {
        openfl_display_Sprite.call(this);
        this.freeCoinsBtn = new agario_views_controls_ColorButton("freecoins.freecoins.open", {
            color: 6343424,
            overColor: 5748225,
            text: "Free Coins \n 20 Coins",
            textColorOver: 16777215,
            textColor: 16777215,
            icon: this.freeCoinsIcon,
            w: 140,
            h: 50,
            fontSize: 14,
            bold: true
        });
        this.addChild(this.freeCoinsBtn);
        this.freeCoinsBtn.set_enabled(false);
        this.freeCoinsBtn.set_alpha(0.5);
        this.freeCoinsIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon", "main_shop").get_bitmapData())
    };
    $hxClasses["agario.views.controls.FreeCoinsButton"] = agario_views_controls_FreeCoinsButton;
    agario_views_controls_FreeCoinsButton.__name__ = ["agario", "views", "controls", "FreeCoinsButton"];
    agario_views_controls_FreeCoinsButton.__super__ = openfl_display_Sprite;
    agario_views_controls_FreeCoinsButton.prototype = $extend(openfl_display_Sprite.prototype, {
        freeCoinsBtn: null,
        timeLeft: null,
        freeCoinsIcon: null,
        setTimeLeft: function(timestampLeft) {
            this.timeLeft = timestampLeft;
            if (this.timeLeft > 0) {
                this.freeCoinsBtn = new agario_views_controls_ColorButton(null, {
                    color: 14699578,
                    overColor: 14699578,
                    text: "Collect in: \n",
                    textColorOver: 16777215,
                    textColor: 16777215,
                    icon: this.freeCoinsIcon,
                    w: 140,
                    h: 50,
                    fontSize: 14,
                    bold: true
                });
                this.startTimedEvents()
            } else {
                this.freeCoinsBtn = new agario_views_controls_ColorButton("freecoins.freecoins", {
                    color: 6343424,
                    overColor: 5748225,
                    textColorOver: 16777215,
                    textColor: 16777215,
                    text: "Free Coins \n 20 Coins",
                    icon: this.freeCoinsIcon,
                    w: 140,
                    h: 50,
                    fontSize: 14,
                    bold: true
                })
            }
            this.addChild(this.freeCoinsBtn);
            this.freeCoinsBtn.addEventListener("click", $bind(this, this.onFreeCoinsClick));
            this.freeCoinsBtn.set_x(0)
        },
        onFreeCoinsClick: function(e) {
            e.stopImmediatePropagation();
            this.freeCoinsBtn.set_enabled(false);
            this.freeCoinsBtn.delayedEnable();
            this.dispatchEvent(e)
        },
        startTimedEvents: function() {
            var _g = this;
            var timer = new haxe_Timer(1000);
            timer.run = function() {
                var secs = Math.round(_g.timeLeft / 1000);
                _g.freeCoinsBtn.set_text("Collect in: \n" + Math.floor(secs / 60) + "m " + (secs % 60 >= 10 ? "" : "0") + secs % 60 + "s");
                _g.timeLeft -= 1000;
                if (secs <= 0) {
                    secs = 0;
                    timer.stop();
                    _g.dispatchEvent(new openfl_events_Event("complete"));
                    _g.freeCoinsBtn.set_enabled(true)
                }
            }
        },
        __class__: agario_views_controls_FreeCoinsButton
    });
    var agario_views_controls_HintTooltip = function(displayText, w, h, direction) {
        if (direction == null) {
            direction = "left"
        }
        if (h == null) {
            h = 80
        }
        if (w == null) {
            w = 140
        }
        openfl_display_Sprite.call(this);
        var atlas = Core.get_assets().getAtlas("main_shop");
        this.icon = new openfl_display_Bitmap(atlas.get("hint").get_bitmapData());
        this.closeIcon = new openfl_display_Bitmap(atlas.get("Close").get_bitmapData());
        this.direction = direction;
        this.h = h;
        this.w = w;
        this.displayText = displayText;
        this.addEventListener("click", $bind(this, this.onHintClick));
        this.addChild(this.icon);
        this.closeIcon.set_x((this.icon.get_width() - this.closeIcon.get_width()) / 2);
        this.closeIcon.set_y((this.icon.get_height() - this.closeIcon.get_height()) / 2);
        this.drawShape();
        this.createLabel();
        this.doLayout();
        this.buttonMode = true;
        this.useHandCursor = true;
        this.opened = false
    };
    $hxClasses["agario.views.controls.HintTooltip"] = agario_views_controls_HintTooltip;
    agario_views_controls_HintTooltip.__name__ = ["agario", "views", "controls", "HintTooltip"];
    agario_views_controls_HintTooltip.__super__ = openfl_display_Sprite;
    agario_views_controls_HintTooltip.prototype = $extend(openfl_display_Sprite.prototype, {
        icon: null,
        closeIcon: null,
        displayText: null,
        h: null,
        quadShape: null,
        direction: null,
        lbl: null,
        w: null,
        opened: null,
        doLayout: function() {
            if (this.direction.toLowerCase() == "left") {
                this.quadShape.set_x(-this.quadShape.get_width() + this.icon.get_width() + 5);
                this.quadShape.set_y(-5);
                this.lbl.set_x(this.quadShape.get_x() + (this.quadShape.get_width() - this.lbl.get_width()) / 2 - 10);
                this.lbl.set_y(this.quadShape.get_y() + (this.quadShape.get_height() - this.lbl.get_height()) / 2)
            }
        },
        createLabel: function() {
            var _options = {};
            _options.align = 0;
            _options.text = this.displayText;
            _options.width = this.quadShape.get_width() - 40;
            _options.color = 3355443;
            this.lbl = new oaktree_ext_ui_Label(_options);
            this.lbl.set_selectable(false);
            this.lbl.mouseEnabled = false
        },
        drawShape: function() {
            this.quadShape = new openfl_display_Shape();
            this.quadShape.get_graphics().beginFill(16777215);
            this.quadShape.get_graphics().drawRoundRect(0, 0, this.w, this.h, 5, 5);
            this.quadShape.get_graphics().endFill()
        },
        onHintClick: function(e) {
            if (this.opened) {
                this.closeHint();
                this.dispatchEvent(new agario_module_shop_events_HintTooltipEvent(agario_module_shop_events_HintTooltipEvent.CLOSED))
            } else {
                this.openHint();
                this.dispatchEvent(new agario_module_shop_events_HintTooltipEvent(agario_module_shop_events_HintTooltipEvent.OPENED))
            }
            /*agario_sounds_GameSounds.play("sfxClick")*/
        },
        openHint: function() {
            this.addChild(this.quadShape);
            this.addChild(this.lbl);
            this.addChild(this.closeIcon);
            if (this.contains(this.icon)) {
                this.removeChild(this.icon)
            }
            this.opened = true;
            this.set_scaleX(this.set_scaleY(oaktree_ext_ui_views_GenericDialog.initialHighDpiScale))
        },
        closeHint: function() {
            if (this.quadShape.parent != null) {
                this.quadShape.parent.removeChild(this.quadShape);
                this.lbl.parent.removeChild(this.lbl)
            }
            if (this.contains(this.closeIcon)) {
                this.removeChild(this.closeIcon)
            }
            this.addChild(this.icon);
            this.set_scaleX(this.set_scaleY(1));
            this.opened = false
        },
        __class__: agario_views_controls_HintTooltip
    });
    var agario_views_controls_ImageButton = function(bitmap) {
        this.upState = this.overState = this.downState = this.disabledState = bitmap;
        oaktree_ext_ui_controls_Button.call(this)
    };
    $hxClasses["agario.views.controls.ImageButton"] = agario_views_controls_ImageButton;
    agario_views_controls_ImageButton.__name__ = ["agario", "views", "controls", "ImageButton"];
    agario_views_controls_ImageButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_ImageButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        __class__: agario_views_controls_ImageButton
    });
    var agario_views_controls_QuantityCircle = function(quantity) {
        openfl_display_Sprite.call(this);
        this.circle = new openfl_display_Sprite();
        this.circle.get_graphics().beginFill(15742775, 1);
        this.circle.get_graphics().lineStyle(2, 12783377);
        this.circle.get_graphics().drawCircle(0, 0, 10);
        this.circle.get_graphics().endFill();
        this.addChild(this.circle);
        this.quantityLabel = new oaktree_ext_ui_Label({
            text: quantity == null ? "null" : "" + quantity,
            align: 3,
            color: 16777215
        });
        this.quantityLabel.set_autoSize(1);
        this.quantityLabel.set_selectable(false);
        this.addChild(this.quantityLabel);
        this.quantityLabel.addEventListener("addedToStage", $bind(this, this.onAdded))
    };
    $hxClasses["agario.views.controls.QuantityCircle"] = agario_views_controls_QuantityCircle;
    agario_views_controls_QuantityCircle.__name__ = ["agario", "views", "controls", "QuantityCircle"];
    agario_views_controls_QuantityCircle.__super__ = openfl_display_Sprite;
    agario_views_controls_QuantityCircle.prototype = $extend(openfl_display_Sprite.prototype, {
        quantityLabel: null,
        circle: null,
        onAdded: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.onAdded));
            this.doLayout()
        },
        doLayout: function() {
            this.quantityLabel.set_x(-this.quantityLabel.get_width() / 2);
            this.quantityLabel.set_y(-this.quantityLabel.get_height() / 2)
        },
        update: function(value) {
            this.quantityLabel.set_text(value == null ? "null" : "" + value);
            this.doLayout();
            this.set_visible(value > 0)
        },
        __class__: agario_views_controls_QuantityCircle
    });
    var agario_views_controls_SemiRoundButton = function(label, w, h) {
        if (h == null) {
            h = 65
        }
        if (w == null) {
            w = 85
        }
        var stateUp = new openfl_display_Sprite();
        var stateOver = new openfl_display_Sprite();
        var stateDown = new openfl_display_Sprite();
        var labelUp = new oaktree_ext_ui_Label({
            text: label,
            fontSize: 18,
            align: 3,
            color: 16777215
        });
        var labelOver = new oaktree_ext_ui_Label({
            text: label,
            fontSize: 18,
            align: 3,
            color: 16777215
        });
        var labelDown = new oaktree_ext_ui_Label({
            text: label,
            fontSize: 18,
            align: 3,
            color: 16777215
        });
        labelUp.set_autoSize(1);
        labelOver.set_autoSize(1);
        labelDown.set_autoSize(1);
        var upBackground = new openfl_display_Shape();
        upBackground.get_graphics().beginFill(6349312);
        oaktree_utils_MCGraphics.drawRoundRectComplex(upBackground.get_graphics(), 0, 0, w, h, 0, 5, 0, 5);
        upBackground.get_graphics().endFill();
        stateUp.addChild(upBackground);
        stateUp.addChild(labelUp);
        var overBackground = new openfl_display_Shape();
        overBackground.get_graphics().beginFill(4760069);
        oaktree_utils_MCGraphics.drawRoundRectComplex(overBackground.get_graphics(), 0, 0, w, h, 0, 5, 0, 5);
        overBackground.get_graphics().endFill();
        stateOver.addChild(overBackground);
        stateOver.addChild(labelOver);
        var downBackground = new openfl_display_Shape();
        downBackground.get_graphics().beginFill(2446594);
        oaktree_utils_MCGraphics.drawRoundRectComplex(downBackground.get_graphics(), 0, 0, w, h, 0, 5, 0, 5);
        downBackground.get_graphics().endFill();
        stateDown.addChild(downBackground);
        stateDown.addChild(labelDown);
        this.upState = this.disabledState = stateUp;
        this.overState = stateOver;
        this.downState = stateDown;
        labelOver.set_y(labelUp.set_y(labelDown.set_y((h - labelUp.get_height()) / 2)));
        labelOver.set_x(labelUp.set_x(labelDown.set_x(20)));
        oaktree_ext_ui_controls_Button.call(this)
    };
    $hxClasses["agario.views.controls.SemiRoundButton"] = agario_views_controls_SemiRoundButton;
    agario_views_controls_SemiRoundButton.__name__ = ["agario", "views", "controls", "SemiRoundButton"];
    agario_views_controls_SemiRoundButton.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_SemiRoundButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        __class__: agario_views_controls_SemiRoundButton
    });
    var agario_views_controls_ShopHUD = function() {
        this.amount = 0;
        this.backgroundShape = new openfl_display_Shape();
        var labelOpts = {
            text: "",
            fontSize: 16,
            color: 3421236,
            align: 4
        };
        this.stateUp = new openfl_display_Sprite();
        this.amountLabel = new oaktree_ext_ui_Label(labelOpts);
        this.amountLabel.set_backgroundColor(16711935);
        this.amountLabel.set_name("0");
        this.finalAmountLabel = new oaktree_ext_ui_Label(labelOpts);
        this.finalAmountLabel.set_name("0");
        this.icon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon", "main_shop").get_bitmapData());
        this.upState = this.disabledState = this.stateUp;
        this.overState = this.stateUp;
        this.downState = this.stateUp;
        oaktree_ext_ui_controls_Button.call(this);
        this.addEventListener("addedToStage", $bind(this, this.onAddedToStage));
        this.set_cacheAsBitmap(true);
        this.mouseChildren = false
    };
    $hxClasses["agario.views.controls.ShopHUD"] = agario_views_controls_ShopHUD;
    agario_views_controls_ShopHUD.__name__ = ["agario", "views", "controls", "ShopHUD"];
    agario_views_controls_ShopHUD.__super__ = oaktree_ext_ui_controls_Button;
    agario_views_controls_ShopHUD.prototype = $extend(oaktree_ext_ui_controls_Button.prototype, {
        amountLabel: null,
        finalAmountLabel: null,
        outlineShape: null,
        backgroundShape: null,
        plusButton: null,
        stateUp: null,
        countDownTimer: null,
        icon: null,
        amount: null,
        get_amount: function() {
            return this.amount
        },
        set_amount: function(value) {
            this.updateAmount(value);
            return this.amount = value
        },
        onAddedToStage: function(e) {
            oaktree_ext_ui_controls_Button.prototype.onAddedToStage.call(this, e);
            this.clear();
            this.init();
            Core.get_events().addEventListener(agario_module_shop_events_WalletEvent.WALLET_UPDATED, $bind(this, this.handleWalletUpdate));
            this.updateAmount(Core.user.get_coins())
        },
        handleWalletUpdate: function(event) {
            Core.services.gameui.setUserCoins(Core.user.get_coins());
            this.updateAmount(Core.user.get_coins())
        },
        init: function() {
            if (this.plusButton == null) {
                this.plusButton = this.drawPlusBtn()
            }
            this.stateUp.addChild(this.plusButton);
            this.plusButton.set_x(0);
            this.icon.set_x(this.plusButton.get_x() - this.icon.get_width() - 5);
            this.icon.set_y(this.plusButton.get_y() + (this.plusButton.get_height() - this.icon.get_height()) / 2);
            this.addChild(this.icon);
            this.addChild(this.amountLabel);
            this.amountLabel.set_y(this.plusButton.get_y() + (this.plusButton.get_height() - this.finalAmountLabel.get_height()) / 2 + 2);
            this.outlineShape = this.drawOutline(this.finalAmountLabel.get_textWidth());
            this.outlineShape.set_x(this.plusButton.get_x() - (this.outlineShape.get_width() - this.plusButton.get_width()) + 1);
            this.outlineShape.set_y(this.plusButton.get_y() - 1);
            this.stateUp.addChild(this.outlineShape);
            this.backgroundShape = this.drawBackground(this.backgroundShape, this.outlineShape.get_width());
            this.backgroundShape.set_x(this.outlineShape.get_x());
            this.backgroundShape.set_y(this.outlineShape.get_y());
            this.stateUp.addChildAt(this.backgroundShape, 0);
            this.upState = this.disabledState = this.stateUp;
            this.overState = this.stateUp;
            this.downState = this.stateUp
        },
        drawPlusBtn: function() {
            var plusBtn = new openfl_display_Sprite();
            var plusBg = new openfl_display_Shape();
            plusBg.get_graphics().beginFill(6349312);
            oaktree_utils_MCGraphics.drawRoundRectComplex(plusBg.get_graphics(), 0, 0, 30, 32, 0, 4, 0, 4);
            plusBg.get_graphics().endFill();
            plusBtn.addChild(plusBg);
            var plusLabel = new oaktree_ext_ui_Label({
                text: "+",
                fontSize: 24,
                bold: true,
                color: 16777215
            });
            plusLabel.set_x((plusBg.get_width() - plusLabel.get_width()) / 2);
            plusLabel.set_y((plusBg.get_height() - plusLabel.get_height()) / 2);
            plusBtn.addChild(plusLabel);
            return plusBtn
        },
        drawBackground: function(pShape, pWidth) {
            pShape.get_graphics().clear();
            pShape.get_graphics().beginFill(16777215, 1);
            pShape.get_graphics().drawRoundRect(0, 0, pWidth, 34, 10, 10);
            pShape.get_graphics().endFill();
            return pShape
        },
        drawOutline: function(textWidth) {
            var stateUpOutline = new openfl_display_Shape();
            stateUpOutline.get_graphics().lineStyle(2, 5093376, 1, true, 2);
            stateUpOutline.get_graphics().drawRoundRect(0, 0, textWidth + this.plusButton.get_width() + 40, 34, 10, 10);
            stateUpOutline.set_cacheAsBitmap(true);
            return stateUpOutline
        },
        updateAmount: function(value) {
            this.finalAmountLabel.set_name("" + value);
            this.updateHudValue(this.finalAmountLabel);
            this.updateCoinContainer();
            if (this.countDownTimer != null) {
                this.countDownTimer.stop()
            }
            this.countDownTimer = new haxe_Timer(10);
            this.countDown(this.amountLabel, value, $bind(this, this.onAmountUpdate))
        },
        onAmountUpdate: function() {
            this.amountLabel.set_x(this.icon.get_x() - this.amountLabel.get_textWidth() - 10)
        },
        updateCoinContainer: function() {
            this.clear();
            this.init()
        },
        countDown: function(lbl, value, completeCallback) {
            var _g = this;
            var oldValue = Std.parseInt(lbl.get_name());
            var diff = Math.abs((value - oldValue) / 5);
            if (oldValue > value) {
                lbl.set_name(Std.string(oldValue - Math.ceil(diff)));
                this.updateHudValue(lbl)
            } else {
                if (oldValue < value) {
                    lbl.set_name(Std.string(oldValue + Math.ceil(diff)));
                    this.updateHudValue(lbl)
                }
            }
            if (oldValue != value) {
                this.countDownTimer.run = function() {
                    _g.countDown(lbl, value, completeCallback)
                }
            } else {
                lbl.set_name(value == null ? "null" : "" + value);
                this.updateHudValue(lbl);
                this.countDownTimer.stop()
            }
            completeCallback()
        },
        updateHudValue: function(lbl) {
            lbl.set_text(oaktree_utils_StringUtility.formatNumber(Std.parseInt(lbl.get_name()), "n", " "))
        },
        clear: function() {
            while (this.stateUp.get_numChildren() > 0) {
                this.stateUp.removeChildAt(0)
            }
        },
        __class__: agario_views_controls_ShopHUD,
        __properties__: $extend(oaktree_ext_ui_controls_Button.prototype.__properties__, {
            set_amount: "set_amount",
            get_amount: "get_amount"
        })
    });
    var agario_views_controls_StampSticker = function(txt) {
        openfl_display_Sprite.call(this);
        this.txt = txt;
        this.initialize()
    };
    $hxClasses["agario.views.controls.StampSticker"] = agario_views_controls_StampSticker;
    agario_views_controls_StampSticker.__name__ = ["agario", "views", "controls", "StampSticker"];
    agario_views_controls_StampSticker.__super__ = openfl_display_Sprite;
    agario_views_controls_StampSticker.prototype = $extend(openfl_display_Sprite.prototype, {
        txt: null,
        stamp: null,
        stampLabel: null,
        initialize: function() {
            this.stamp = new openfl_display_Bitmap(Core.get_assets().getTexture("sticker").get_bitmapData());
            this.addChild(this.stamp);
            this.stampLabel = new oaktree_ext_ui_Label({
                text: this.txt,
                fontSize: 11,
                align: 0,
                color: 16777215,
                width: 60,
                bold: true
            });
            this.stampLabel.set_wordWrap(true);
            this.stampLabel.set_multiline(true);
            this.stampLabel.set_selectable(false);
            this.stampLabel.set_height(30);
            this.stampLabel.addEventListener("addedToStage", $bind(this, this.onAdded));
            this.addChild(this.stampLabel);
            this.stamp.set_x(-this.stamp.get_width() / 2);
            this.stamp.set_y(-this.stamp.get_height() / 2)
        },
        onAdded: function(e) {
            this.removeEventListener("addedToStage", $bind(this, this.onAdded));
            this.stampLabel.set_x(-this.stampLabel.get_width() / 2);
            this.stampLabel.set_y(-this.stampLabel.get_height() / 2)
        },
        __class__: agario_views_controls_StampSticker
    });
    var agario_views_promoclient_HTMLPromoButton = function() {
        this.buttonSize = new openfl_geom_Rectangle();
        this.element = window.document.createElement("div");
        this.element.className = "promo-badge-element";
        this.element.setAttribute("style", "position: relative")
    };
    $hxClasses["agario.views.promoclient.HTMLPromoButton"] = agario_views_promoclient_HTMLPromoButton;
    agario_views_promoclient_HTMLPromoButton.__name__ = ["agario", "views", "promoclient", "HTMLPromoButton"];
    agario_views_promoclient_HTMLPromoButton.getButtonForOffer = function(pofferId, pConfig, pGameDelegate, pSystem) {
        var btn = new agario_views_promoclient_HTMLPromoButton();
        if (!btn.initWithConfig(pofferId, pConfig, pGameDelegate, pSystem)) {
            btn.dispose();
            btn = null
        }
        return btn
    };
    agario_views_promoclient_HTMLPromoButton.prototype = {
        element: null,
        _offerId: null,
        _gameDelegate: null,
        _system: null,
        _style: null,
        fullBtn: null,
        iconElement: null,
        buttonCache: null,
        buttonMatrix: null,
        buttonSize: null,
        initWithConfig: function(pofferId, pConfig, pGameDelegate, pSystem) {
            if (pConfig == null) {
                return false
            }
            this._gameDelegate = pGameDelegate;
            this._system = pSystem;
            this.fullBtn = agario_views_promoclient_PromoButton.getButtonForOffer(pofferId, pConfig, null, this._gameDelegate, this._system);
            if (this.fullBtn == null) {
                haxe_Log.trace(" / htmlpromobutton / " + ("Failed to load " + pofferId + " button"), {
                    fileName: "HTMLPromoButton.hx",
                    lineNumber: 58,
                    className: "agario.views.promoclient.HTMLPromoButton",
                    methodName: "initWithConfig"
                });
                return false
            }
            this.buttonCache = new openfl_display_BitmapData(Math.floor(this.fullBtn.get_width()), Math.floor(this.fullBtn.get_height()), true, 0);
            var bounds = this.fullBtn.getBounds(null);
            this.buttonMatrix = new openfl_geom_Matrix();
            this.buttonMatrix.translate(bounds.x * -1, bounds.y * -1);
            this.iconElement = window.document.createElement("img");
            this.iconElement.className = "promo-badge-frame";
            this.element.appendChild(this.iconElement);
            this.update();
            return true
        },
        update: function(dt) {
            if (dt == null) {
                dt = 0
            }
            this.fullBtn.update(dt);
            this.buttonCache.fillRect(this.buttonCache.rect, 0);
            this.buttonCache.draw(this.fullBtn.content, this.buttonMatrix);
            var b64 = this.convertBitmapToBase64(this.buttonCache);
            this.iconElement.setAttribute("src", "data:image/png;base64," + b64)
        },
        convertBitmapToBase64: function(pContent) {
            var bm = pContent;
            var pixels = new openfl_utils_ByteArrayData(0);
            try {
                pixels = bm.encode(new openfl_geom_Rectangle(0, 0, bm.width, bm.height), new openfl_display_PNGEncoderOptions())
            } catch (e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) {
                    e = e.val
                }
                haxe_Log.trace("failed to encode bitmap", {
                    fileName: "HTMLPromoButton.hx",
                    lineNumber: 245,
                    className: "agario.views.promoclient.HTMLPromoButton",
                    methodName: "convertBitmapToBase64"
                })
            }
            var b64 = "";
            if (pixels != null) {
                b64 = lime_tools_helpers_StringHelper.base64Encode(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(pixels))
            }
            return b64
        },
        dispose: function() {
            if (this.buttonCache != null) {
                this.buttonCache.dispose()
            }
        },
        __class__: agario_views_promoclient_HTMLPromoButton
    };
    var agario_views_promoclient_PromoButton = function() {
        agario_display_SpriteNode.call(this);
        this.setAnchorPoint(new openfl_geom_Point(0, 0));
        this.buttonSize = new openfl_geom_Rectangle();
        this.iconNodes = [];
        this.labelNodes = new List()
    };
    $hxClasses["agario.views.promoclient.PromoButton"] = agario_views_promoclient_PromoButton;
    agario_views_promoclient_PromoButton.__name__ = ["agario", "views", "promoclient", "PromoButton"];
    agario_views_promoclient_PromoButton.getButtonForOffer = function(pOfferId, pConfig, onClick, pGameDelegate, pSystem) {
        var btn = new agario_views_promoclient_PromoButton();
        if (!btn.initWithConfig(pOfferId, pConfig, onClick, pGameDelegate, pSystem)) {
            btn.dispose();
            btn = null
        }
        return btn
    };
    agario_views_promoclient_PromoButton.__super__ = agario_display_SpriteNode;
    agario_views_promoclient_PromoButton.prototype = $extend(agario_display_SpriteNode.prototype, {
        offsetX: null,
        offsetY: null,
        buttonFrame: null,
        buttonHitBox: null,
        buttonSize: null,
        iconNodes: null,
        labelNodes: null,
        onClickCallback: null,
        _offerId: null,
        _gameDelegate: null,
        _system: null,
        _timerText: null,
        _timerLabel: null,
        _action: null,
        _config: null,
        timerLabel: null,
        get_timerLabel: function() {
            return this._timerLabel
        },
        initWithConfig: function(pOfferId, pConfig, onClick, pGameDelegate, pSystem) {
            if (pConfig == null) {
                return false
            }
            this._config = pConfig;
            this._action = pConfig.buttonAction;
            this._offerId = pOfferId;
            this._gameDelegate = pGameDelegate;
            this._system = pSystem;
            this.onClickCallback = onClick;
            if (!this.renderButtonFrame(pConfig)) {
                return false
            }
            if (!this.renderButtonIcons(pConfig)) {
                return false
            }
            this.renderLabels(pConfig);
            this.renderCountdown(pConfig);
            this.buttonMode = this.onClickCallback != null;
            this.addEventListener("click", $bind(this, this.handleMouseClick));
            return true
        },
        handleMouseClick: function(e) {
            var rect = this.getBounds(this);
            var m = new openfl_geom_Matrix();
            m.translate(Math.round(-rect.get_left()), Math.round(-rect.get_top()));
            var bmpd = new openfl_display_BitmapData(Math.round(this.get_width()), Math.round(this.get_height()), true, 0);
            bmpd.draw(this, m, null);
            var color = bmpd.getPixel32(Math.round(e.localX - rect.get_left()), Math.round(e.localY - rect.get_top()));
            var hit = color != 0;
            if (this.onClickCallback != null && hit) {
                this.onClickCallback(this._offerId, this._action)
            }
        },
        renderButtonFrame: function(pConfig) {
            var backgroundConfiguration = pConfig.buttonBackgroundImage;
            if (backgroundConfiguration == null) {
                return false
            }
            var basePack = backgroundConfiguration.useBasePack;
            this.offsetX = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(pConfig.buttonBackgroundImage.offsetX, 0), basePack);
            this.offsetY = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(pConfig.buttonBackgroundImage.offsetY, 0), basePack);
            var minimumScale = agario_views_promoclient_PromoClientUtils.asFloat(backgroundConfiguration.minimumScale, 1);
            var maximumScale = agario_views_promoclient_PromoClientUtils.asFloat(backgroundConfiguration.maximumScale, 1);
            var rotation = agario_views_promoclient_PromoClientUtils.asFloat(backgroundConfiguration.rotation, 0);
            this.buttonFrame = agario_views_promoclient_PromoClientUtils.getImageNodeFromConfig(pConfig.buttonBackgroundImage);
            if (this.buttonFrame == null) {
                return false
            }
            var tempWidth = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(backgroundConfiguration.maxWidth, 0), basePack);
            var tempHeight = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(backgroundConfiguration.maxHeight, 0), basePack);
            var w;
            if (tempWidth == 0) {
                w = this.buttonFrame.get_width()
            } else {
                w = tempWidth
            }
            var h;
            if (tempHeight == 0) {
                h = this.buttonFrame.get_height()
            } else {
                h = tempHeight
            }
            this.buttonSize.setTo(0, 0, w, h);
            this.buttonFrame.buttonMode = true;
            this.buttonFrame.set_rotation(rotation);
            var colorData = pConfig.colorData;
            if (colorData != null) {
                this.buttonFrame.setColor(new agario_display_Color().set(colorData.r, colorData.g, colorData.b, colorData.a))
            }
            if (backgroundConfiguration.zOrder > -1) {
                this.addNodeAt(this.buttonFrame, backgroundConfiguration.zOrder)
            } else {
                this.addNode(this.buttonFrame)
            }
            this.buttonSize.setTo(this.buttonFrame.get_x(), this.buttonFrame.get_y(), this.buttonFrame.get_width(), this.buttonFrame.get_height());
            return true
        },
        renderButtonIcons: function(pConfig) {
            var iconsConfiguration = pConfig.buttonIconImages;
            var basePack = pConfig.buttonBackgroundImage.useBasePack;
            if (iconsConfiguration == null) {
                return true
            }
            var _g = 0;
            while (_g < iconsConfiguration.length) {
                var iconConfig = iconsConfiguration[_g];
                ++_g;
                var imageNode = agario_views_promoclient_PromoClientUtils.getImageNodeFromConfig(iconConfig);
                if (imageNode != null) {
                    var labelOffsetX = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(iconConfig.offsetX, 0), basePack);
                    var labelOffsetY = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(iconConfig.offsetY, 0), basePack);
                    var buttonPositionX = labelOffsetX;
                    var buttonPositionY = -labelOffsetY;
                    imageNode.setPosition(new openfl_geom_Point(buttonPositionX, buttonPositionY));
                    imageNode.mouseChildren = false;
                    if (iconConfig.zOrder > -1) {
                        this.addNodeAt(imageNode, iconConfig.zOrder)
                    } else {
                        this.addNode(imageNode)
                    }
                    this.iconNodes.push(imageNode)
                }
            }
            return true
        },
        renderLabels: function(pConfig) {
            if (pConfig.buttonTextLabels == null) {
                return
            }
            var _g = 0;
            var _g1 = pConfig.buttonTextLabels;
            while (_g < _g1.length) {
                var labelConfig = _g1[_g];
                ++_g;
                var label = agario_views_promoclient_PromoClientUtils.getTextNodeFromConfig(labelConfig, this._gameDelegate, this._system);
                if (label == null) {
                    continue
                }
                var xPosition = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(labelConfig.offsetX, 0), labelConfig.useBasePack);
                var yPosition = -agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(labelConfig.offsetY, 0), labelConfig.useBasePack);
                label.setPosition(new openfl_geom_Point(xPosition, yPosition));
                if (labelConfig.zOrder > -1) {
                    this.addNodeAt(label, labelConfig.zOrder)
                } else {
                    this.addNode(label)
                }
                this.labelNodes.add(label);
                label.mouseEnabled = false;
                label.mouseChildren = false
            }
        },
        renderCountdown: function(pConfig) {
            var shouldScheduleUpdate = false;
            var compatModeTimer = pConfig.displayRemainingTimeOnBadge;
            var timerConfig = pConfig.timerConfiguration;
            this._timerText = null;
            this._timerLabel = null;
            if (timerConfig != null && !oaktree_utils_StringUtility.isEmpty(this._offerId) && this._system != null) {
                var tag = timerConfig.tag;
                this._timerText = null;
                if (tag != null) {
                    this._timerText = this._gameDelegate.getLocalizedTextForTag(tag, this._system)
                }
                this._timerLabel = agario_views_promoclient_PromoClientUtils.getTimerLabelFromConfig(timerConfig, this._offerId, this._gameDelegate, this._system);
                if (this._timerLabel != null) {
                    this._timerLabel.setText("99h 99m 99s");
                    var xPosition = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(timerConfig.offsetX, 0), timerConfig.useBasePack);
                    var yPosition = -agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(timerConfig.offsetY, 0), timerConfig.useBasePack);
                    this._timerLabel.setPosition(new openfl_geom_Point(xPosition, yPosition));
                    if (timerConfig.zOrder > -1) {
                        this.addNodeAt(this._timerLabel, timerConfig.zOrder)
                    } else {
                        this.addNode(this._timerLabel)
                    }
                    this._timerLabel.mouseChildren = false
                }
            } else {
                if (compatModeTimer && !oaktree_utils_StringUtility.isEmpty(this._offerId) && this._system != null) {}
            }
        },
        update: function(pDelta) {
            agario_display_SpriteNode.prototype.update.call(this, pDelta);
            if (this._timerLabel != null) {
                agario_views_promoclient_PromoClientUtils.updateTimerOnLabel(this._timerLabel, this._timerText, this._offerId, this._gameDelegate, this._system);
                var timerConfig = this._config.timerConfiguration;
                var xPosition = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(timerConfig.offsetX, 0), timerConfig.useBasePack);
                var yPosition = -agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(timerConfig.offsetY, 0), timerConfig.useBasePack);
                this._timerLabel.setPosition(new openfl_geom_Point(xPosition, yPosition))
            }
        },
        dispose: function() {
            if (this.iconNodes != null) {
                var _g = 0;
                var _g1 = this.iconNodes;
                while (_g < _g1.length) {
                    var icons = _g1[_g];
                    ++_g;
                    icons.dispose()
                }
            }
            if (this.labelNodes != null) {
                var _g_head = this.labelNodes.h;
                var _g_val = null;
                while (_g_head != null) {
                    var label;
                    label = (function($this) {
                        var $r;
                        _g_val = _g_head[0];
                        _g_head = _g_head[1];
                        $r = _g_val;
                        return $r
                    }(this));
                    label.dispose()
                }
            }
            if (this._timerLabel != null) {
                this._timerLabel.dispose()
            }
            agario_display_SpriteNode.prototype.dispose.call(this)
        },
        __class__: agario_views_promoclient_PromoButton,
        __properties__: $extend(agario_display_SpriteNode.prototype.__properties__, {
            get_timerLabel: "get_timerLabel"
        })
    });
    var agario_views_promoclient_PromoClientUtils = function() {};
    $hxClasses["agario.views.promoclient.PromoClientUtils"] = agario_views_promoclient_PromoClientUtils;
    agario_views_promoclient_PromoClientUtils.__name__ = ["agario", "views", "promoclient", "PromoClientUtils"];
    agario_views_promoclient_PromoClientUtils.getAsset = function(assetDef) {
        var _g = assetDef.type;
        switch (_g) {
            case "Sprite":
                return Core.get_assets().getAsset(assetDef.spriteName);
            case "FramedSprite":
                break;
            default:
                return agario_views_promoclient_PromoClientUtils.getAssetLegacy(assetDef)
        }
        return null
    };
    agario_views_promoclient_PromoClientUtils.getAssetLegacy = function(assetdef) {
        throw new js__$Boot_HaxeError("not implemented");
        return null
    };
    agario_views_promoclient_PromoClientUtils.getImageNodeFromConfig = function(pConfig) {
        if (pConfig == null) {
            return null
        }
        if (pConfig.type == null) {
            return null
        }
        var resultNode = null;
        try {
            var _g = pConfig.type;
            switch (_g) {
                case "Sprite":
                    if (pConfig.get_isAtlas()) {
                        var atlas = Core.get_assets().getAtlas(agario_views_promoclient_PromoClientUtils.removeExtension(pConfig.plistFilename));
                        if (atlas != null) {
                            var texture = null;
                            if (atlas.hasTexture(pConfig.frameName)) {
                                texture = atlas.getTexture(pConfig.frameName)
                            } else {
                                if (atlas.hasTexture(agario_views_promoclient_PromoClientUtils.removeExtension(pConfig.frameName))) {
                                    texture = atlas.getTexture(agario_views_promoclient_PromoClientUtils.removeExtension(pConfig.frameName))
                                }
                            }
                            if (texture != null) {
                                resultNode = new agario_display_ImageNode(texture.asBitmap());
                                (js_Boot.__cast(resultNode.content, openfl_display_Bitmap)).smoothing = true;
                                if (!isNaN(pConfig.maxWidth) && resultNode.get_width() > pConfig.maxWidth) {
                                    resultNode.set_width(Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxWidth, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))))
                                }
                                if (!isNaN(pConfig.maxHeight) && resultNode.get_height() > pConfig.maxHeight) {
                                    resultNode.set_height(Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxHeight, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))))
                                }
                            } else {}
                        } else {}
                    } else {
                        var spriteFileName;
                        if (pConfig.spriteFilename != null) {
                            spriteFileName = pConfig.spriteFilename
                        } else {
                            spriteFileName = pConfig.imageData.spriteFilename
                        }
                        if (spriteFileName != null) {
                            var asset = Core.get_assets().getAsset(spriteFileName);
                            if (asset != null && asset.loaded) {
                                var bitmap = new openfl_display_Bitmap(asset.get_data());
                                bitmap.smoothing = true;
                                if (!isNaN(pConfig.maxWidth) && bitmap.get_width() > pConfig.maxWidth) {
                                    bitmap.set_width(Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxWidth, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))))
                                }
                                if (!isNaN(pConfig.maxHeight) && bitmap.get_height() > pConfig.maxHeight) {
                                    bitmap.set_height(Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxHeight, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))))
                                }
                                resultNode = new agario_display_ImageNode(bitmap)
                            } else {}
                        }
                    }
                    break;
                case "FramedSprite":
                    var _frame = Core.get_assets().getFramedSprite(pConfig.frameName + ".plist");
                    if (_frame != null && _frame.loaded) {
                        var frameConfig = agario_views_promoclient_PromoClientUtils.scaleFramedSpriteVO(_frame.config);
                        var frameAsset = Core.get_assets().getTexture(frameConfig.imageFrameName, frameConfig.texture).get_bitmapData();
                        var node = oaktree_utils_Slice9Bitmap.fromFrameSpriteVO(frameAsset, frameConfig);
                        node.setSize(Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxWidth, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))), Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxHeight, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))));
                        resultNode = new agario_display_ImageNode(node)
                    } else {}
                    break;
                case "HorizontalStretchFrame":
                    var _frame1 = Core.get_assets().getFramedSprite(pConfig.frameDescription);
                    var frameConfig1 = null;
                    if (_frame1 == null) {
                        if (!isNaN(pConfig.leftX) && !isNaN(pConfig.rightX)) {
                            frameConfig1 = new oaktree_objects_FramedSpriteVO();
                            frameConfig1.leftX = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.leftX, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
                            frameConfig1.rightX = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.rightX, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
                            frameConfig1.imageFrameName = agario_views_promoclient_PromoClientUtils.removeExtension(pConfig.frameName);
                            frameConfig1.texture = pConfig.plistFilename
                        }
                    }
                    if (_frame1 != null && _frame1.loaded) {
                        frameConfig1 = agario_views_promoclient_PromoClientUtils.scaleFramedSpriteVO(_frame1.config)
                    }
                    if (frameConfig1 != null) {
                        var frameAsset1 = Core.get_assets().getTexture(frameConfig1.imageFrameName, frameConfig1.texture).get_bitmapData();
                        var node1 = oaktree_utils_Slice9Bitmap.fromFrameSpriteVO(frameAsset1, frameConfig1);
                        node1.isHorizontal = true;
                        node1.setSize(Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxWidth, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))), Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(pConfig.maxHeight, agario_views_promoclient_PromoClientUtils.getScaleRatio(pConfig.useBasePack))));
                        resultNode = new agario_display_ImageNode(node1)
                    } else {}
                    break;
                case "Special":
                    break;
                default:
            }
        } catch (e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) {
                e = e.val
            }
        }
        if (resultNode != null) {
            var anchorX;
            if (isNaN(pConfig.anchorX)) {
                anchorX = 0.5
            } else {
                anchorX = pConfig.anchorX
            }
            var anchorY;
            if (isNaN(pConfig.anchorY)) {
                anchorY = 0.5
            } else {
                anchorY = pConfig.anchorY
            }
            resultNode.setAnchorPoint(new openfl_geom_Point(anchorX, anchorY))
        }
        return resultNode
    };
    agario_views_promoclient_PromoClientUtils.getTextFromConfig = function(config, delegate, system) {
        var text = null;
        var tag = config.tag;
        var dataType = config.dataType;
        var tag1 = config.tag;
        var shouldFormatValue = config.shouldFormatValue;
        var productIdMultiplier = config.productMultiplier;
        var transactionId = config.transactionId;
        var productId = config.productId;
        var priceMayBeOutdated = false;
        if (dataType == null || dataType == "" || dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_TEXT) {} else {
            if (dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_DESCRIPTION) {
                if (productId == null || productId == "") {
                    text = delegate.getDescriptionForTransaction(transactionId, system)
                } else {
                    text = delegate.getDescriptionForProduct(productId, transactionId, system)
                }
            } else {
                if (dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_OLD_PRICE) {
                    text = delegate.getReferencePriceForTransaction(transactionId, priceMayBeOutdated, system)
                } else {
                    if (dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_NEW_PRICE) {
                        text = delegate.getPromotionalPriceForTransaction(transactionId, priceMayBeOutdated, system)
                    } else {
                        if (dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_OLD_AMOUNT || dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_NEW_AMOUNT) {
                            var shouldGetSumValue = config.shouldGetSum;
                            var productIdIndex = config.productIndex;
                            if (dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_OLD_AMOUNT) {
                                if (shouldGetSumValue) {
                                    text = delegate.getReferenceSumAmountForProduct(productId, transactionId, system)
                                } else {
                                    var referenceAmounts = delegate.getReferenceAmountForProduct(productId, transactionId, system);
                                    if (referenceAmounts.length >= productIdIndex) {
                                        text = "" + referenceAmounts[productIdIndex]
                                    } else {
                                        text = null
                                    }
                                }
                            } else {
                                if (shouldGetSumValue) {
                                    text = delegate.getPromotionalSumAmountForProduct(productId, transactionId, system)
                                } else {
                                    var promotionalAmounts = delegate.getPromotionalAmountForProduct(productId, transactionId, system);
                                    if (promotionalAmounts.length >= productIdIndex) {
                                        text = "" + promotionalAmounts[productIdIndex]
                                    } else {
                                        text = null
                                    }
                                }
                            }
                            if (productIdMultiplier != 1 && parseFloat(text) != 0) {
                                text = "" + parseFloat(text) * productIdMultiplier
                            }
                            if (shouldFormatValue && !(text == null || text == "")) {
                                text = agario_views_promoclient_PromoClientUtils.getFormattedAmountString(Std.parseInt(text))
                            }
                        } else {
                            if (dataType == miniclip_promotionsystem_core_model_vo_TextEntryVO.TEXT_DATA_TYPE_JSON_QUERY) {
                                var jsonQuery = config.jsonQuery;
                                text = delegate.getValueForJSONQuery(jsonQuery, system)
                            }
                        }
                    }
                }
            }
        }
        if (!(tag1 == null || tag1 == "")) {
            var tagText = null;
            tagText = delegate.getLocalizedTextForTag(tag1, system);
            if (tagText == null || tagText == "") {
                tagText = tag1
            }
            if (!(text == null || text == "")) {
                text = agario_views_promoclient_PromoClientUtils.stringWithFormat(tagText, [text])
            } else {
                text = tagText
            }
        }
        if (text == null || text == "") {
            return null
        }
        return text
    };
    agario_views_promoclient_PromoClientUtils.getTextNodeFromConfig = function(config, delegate, system) {
        if (config == null) {
            return null
        }
        var textNode = new agario_display_LabelNode();
        textNode.set_name("text");
        var text = agario_views_promoclient_PromoClientUtils.getTextFromConfig(config, delegate, system);
        if (text == null || text == "") {
            return null
        }
        var currencyIcon = null;
        var shouldDisplayCurrencyIcon = config.shouldDisplayCurrencyIcon;
        if (shouldDisplayCurrencyIcon) {}
        var bitmapFontName = config.bitmapFontName;
        var ttfFontName = config.ttfFontName;
        var minimumScaleDefault = 0.1;
        var maximumScaleDefault = 1;
        var minimumScale = agario_views_promoclient_PromoClientUtils.asFloat(config.minimumScale, minimumScaleDefault);
        var maximumScale = agario_views_promoclient_PromoClientUtils.asFloat(config.maximumScale, maximumScaleDefault);
        if (minimumScale <= 0) {
            minimumScale = minimumScaleDefault
        } else {
            minimumScale = minimumScale
        }
        if (maximumScale <= 0) {
            maximumScale = maximumScaleDefault
        } else {
            maximumScale = maximumScale
        }
        if (minimumScale > maximumScale) {
            minimumScale = maximumScale
        }
        var basePack = config.useBasePack;
        var maxWidth = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(config.maxWidth, null), basePack);
        var maxHeight = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(config.maxHeight, null), basePack);
        if (maxWidth <= 0) {
            maxWidth = -1
        }
        if (maxHeight <= 0) {
            maxHeight = -1
        }
        if (!(bitmapFontName == null || bitmapFontName == "")) {
            var fontfile = bitmapFontName;
            if (delegate != null) {
                fontfile = delegate.getLocalizedResourceForResource(bitmapFontName, system)
            }
        } else {
            if (!(ttfFontName == null || ttfFontName == "")) {
                var fontSize = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(config.ttfFontSize, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
                var fontfile1 = ttfFontName;
                if (delegate != null) {
                    ttfFontName = delegate.getLocalizedResourceForResource(fontfile1, system)
                }
                var cenas = openfl_text_Font.enumerateFonts();
                var color = 16777215;
                if (config.colorData != null) {
                    color = config.colorData.get_hex()
                }
                textNode.initialize({
                    text: text,
                    align: 0,
                    color: color,
                    bold: true,
                    fontSize: fontSize,
                    font: ttfFontName
                });
                textNode.get_label().set_antiAliasType(1);
                textNode.get_label().set_selectable(false);
                var txtMagin = 5;
                if (textNode.get_label().get_width() + txtMagin > maxWidth || textNode.get_label().get_height() + txtMagin > maxHeight) {
                    textNode.set_scaleX(textNode.set_scaleY(Math.min(maxWidth / (textNode.get_label().get_width() + txtMagin), maxHeight / (textNode.get_label().get_height() + txtMagin))))
                }
                textNode.set_rotation(agario_views_promoclient_PromoClientUtils.asFloat(config.rotation, 0));
                var anchorX = agario_views_promoclient_PromoClientUtils.asFloat(config.anchorX, 0.5);
                var anchorY = agario_views_promoclient_PromoClientUtils.asFloat(config.anchorY, 0.5);
                textNode.setAnchorPoint(new openfl_geom_Point(anchorX, anchorY));
                var fontOutline = config.ttfFontOutline;
                if (fontOutline && config.ttfFontOutlineColor != null) {
                    var color1 = config.ttfFontOutlineColor.r << 16 | config.ttfFontOutlineColor.g << 8 | config.ttfFontOutlineColor.b;
                    textNode.setOutline(color1, config.ttfFontOutlineSize)
                }
            }
        }
        if (textNode == null) {
            return null
        }
        var horizontalStrikethrough = config.horizontalStrikethrough;
        var diagonalStrikethrough = config.diagonalStrikethrough;
        if (horizontalStrikethrough) {
            agario_views_promoclient_PromoClientUtils.addNodeStrikeThrough(textNode, false, system)
        } else {
            if (diagonalStrikethrough) {
                agario_views_promoclient_PromoClientUtils.addNodeStrikeThrough(textNode, true, system)
            }
        }
        textNode.setScale(oaktree_utils_Maths.clamp(textNode.content.get_scaleX(), minimumScale, maximumScale));
        return textNode
    };
    agario_views_promoclient_PromoClientUtils.addNodeStrikeThrough = function(node, pDiagonal, pSystem) {
        if (node == null || node.get_label() == null) {
            return
        }
        var stroke = new openfl_display_Sprite();
        stroke.get_graphics().lineStyle(Math.max(2, node.get_label().get_textHeight() * 0.1), 16711680, 1);
        stroke.get_graphics().moveTo(0, pDiagonal ? node.get_label().get_textHeight() : 0);
        stroke.get_graphics().lineTo(node.get_label().get_textWidth() * 1.1, 0);
        node.addChild(stroke);
        var charRectangle = node.get_label().getCharBoundaries(0);
        stroke.set_x(node.get_label().get_x() + (node.get_label().get_width() - stroke.get_width()) * 0.5);
        stroke.set_y(node.get_label().get_y() + charRectangle.y + (charRectangle.height + stroke.get_height()) * 0.5)
    };
    agario_views_promoclient_PromoClientUtils.getTimerLabelFromConfig = function(timerConfig, offerId, delegate, system) {
        if (timerConfig == null) {
            return null
        }
        var timerLabel;
        var remainingTime = system.getRemainingBadgeTimeForOffer(offerId);
        var currentTime = agario_views_promoclient_PromoClientUtils.formatRemaningTime(remainingTime, delegate, system);
        timerLabel = agario_views_promoclient_PromoClientUtils.getTextNodeFromConfig(timerConfig, delegate, system);
        if (timerLabel != null) {
            var tag = timerConfig.tag;
            var timerText = "";
            if (tag != null) {
                timerText = delegate.getLocalizedTextForTag(tag, system)
            }
            var currentText = oaktree_utils_StringUtility.withFormat(timerText, [currentTime]);
            timerLabel.setText(currentText)
        } else {
            var oldTag = timerConfig.tag;
            timerConfig.tag = currentTime;
            timerLabel = agario_views_promoclient_PromoClientUtils.getTextNodeFromConfig(timerConfig, delegate, system);
            timerConfig.tag = oldTag
        }
        return timerLabel
    };
    agario_views_promoclient_PromoClientUtils.getUpdatedTime = function(timerText, offerId, delegate, system) {
        var remainingTime = system.getRemainingBadgeTimeForOffer(offerId);
        var currentTime = agario_views_promoclient_PromoClientUtils.formatRemaningTime(remainingTime, delegate, system);
        if (timerText != null) {
            currentTime = oaktree_utils_StringUtility.withFormat(timerText, [currentTime])
        }
        return currentTime
    };
    agario_views_promoclient_PromoClientUtils.updateTimerOnLabel = function(label, timerText, offerId, delegate, system) {
        if (label == null) {
            return
        }
        if (label.get_label().get_text() != timerText) {
            var oldText = label.get_label().get_text();
            var newText = agario_views_promoclient_PromoClientUtils.getUpdatedTime(timerText, offerId, delegate, system);
            label.setText(newText, oldText.length >= newText.length)
        }
    };
    agario_views_promoclient_PromoClientUtils.formatRemaningTime = function(timestamp, delegate, system) {
        return delegate.getFormatedStringForTimeStamp(timestamp, system)
    };
    agario_views_promoclient_PromoClientUtils.getScaleRatio = function(basePack) {
        if (basePack == null) {
            return 0.732421875
        } else {
            return 1.6
        }
    };
    agario_views_promoclient_PromoClientUtils.scaleDimension = function(value, ratio) {
        if (ratio == null) {
            ratio = 0.732421875
        }
        return value * ratio
    };
    agario_views_promoclient_PromoClientUtils.scaleF = function(value, basePack) {
        return agario_views_promoclient_PromoClientUtils.scaleDimension(value, agario_views_promoclient_PromoClientUtils.getScaleRatio(basePack))
    };
    agario_views_promoclient_PromoClientUtils.scaleI = function(value, basePack) {
        return Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(value, agario_views_promoclient_PromoClientUtils.getScaleRatio(basePack)))
    };
    agario_views_promoclient_PromoClientUtils.scaleFramedSpriteVO = function(frame) {
        var newFrame = frame.clone();
        newFrame.leftX = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(newFrame.leftX, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
        newFrame.rightX = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(newFrame.rightX, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
        newFrame.bottomY = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(newFrame.bottomY, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
        newFrame.topY = Math.floor(agario_views_promoclient_PromoClientUtils.scaleDimension(newFrame.topY, agario_views_promoclient_PromoClientUtils.getScaleRatio(null)));
        return newFrame
    };
    agario_views_promoclient_PromoClientUtils.removeExtension = function(filename) {
        var regex = new EReg("[.](png|jpg|gif|plist|xml)$", "g");
        return regex.replace(filename, "")
    };
    agario_views_promoclient_PromoClientUtils.asFloat = function(value, default_value) {
        if (default_value == null) {
            default_value = 0
        }
        if (isNaN(value)) {
            return default_value
        } else {
            return value
        }
    };
    agario_views_promoclient_PromoClientUtils.asString = function(value, default_value) {
        if (default_value == null) {
            default_value = ""
        }
        if (value == null) {
            return default_value
        } else {
            return value
        }
    };
    agario_views_promoclient_PromoClientUtils.loadResources = function(pConfig, pOnReady) {
        var resources = [];
        pConfig.getResourceList(resources);
        var promoAssets = [];
        var _g = 0;
        while (_g < resources.length) {
            var resource = resources[_g];
            ++_g;
            var tempAsset;
            if (!resource.isAtlas && resource.spriteName != null) {
                tempAsset = Core.get_assets().getAsset(resource.spriteName);
                promoAssets.push(tempAsset.load())
            }
            if (resource.atlasName != null) {
                tempAsset = Core.get_assets().getAsset(agario_views_promoclient_PromoClientUtils.removeExtension(resource.atlasName));
                promoAssets.push(tempAsset.load())
            }
        }
        var gotPromoAssets = promhx_Promise.whenAll(promoAssets);
        gotPromoAssets.then(function(_) {
            if (pOnReady != null) {
                pOnReady()
            }
        }).catchError(function(error) {
            null
        })
    };
    agario_views_promoclient_PromoClientUtils.isStringEmpty = function(str) {
        return str == null || str == ""
    };
    agario_views_promoclient_PromoClientUtils.getFormattedAmountString = function(amount) {
        return oaktree_utils_Accounting.formatNumber(amount)
    };
    agario_views_promoclient_PromoClientUtils.stringWithFormat = function(str, arr) {
        var str_arr = str.split("%@");
        var str_buf = new StringBuf();
        var _g1 = 0;
        var _g = str_arr.length;
        while (_g1 < _g) {
            var i = _g1++;
            str_buf.b += Std.string(str_arr[i]);
            if (arr[i] != null) {
                str_buf.add(arr[i])
            }
        }
        return str_buf.b
    };
    agario_views_promoclient_PromoClientUtils.prototype = {
        __class__: agario_views_promoclient_PromoClientUtils
    };
    var agario_views_promoclient_PromotionDialog = function(promoNode) {
        this.debugMode = false;
        oaktree_ext_ui_views_GenericDialog.call(this, "promoDialog");
        this.animateOnClose = true;
        this.animateOnOpen = true;
        this.closeOnEscape = true;
        this.maxWidth = 596;
        this.maxHeight = 396;
        this.node = promoNode;
        if (this.node != null) {
            this.node.onReady.connect($bind(this, this.handleNodeReady));
            this.node.onFail.connect($bind(this, this.handleNodeFail))
        }
        this._dismissEvent = this.node.offer.getPopupDismissedEvent();
        this._ps = oaktree_ext_services_ServiceManager.getService(agario_services_promo_PromoService)
    };
    $hxClasses["agario.views.promoclient.PromotionDialog"] = agario_views_promoclient_PromotionDialog;
    agario_views_promoclient_PromotionDialog.__name__ = ["agario", "views", "promoclient", "PromotionDialog"];
    agario_views_promoclient_PromotionDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
    agario_views_promoclient_PromotionDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype, {
        debugMode: null,
        node: null,
        _ps: null,
        _dismissEvent: null,
        initialize: function() {
            var _g = this;
            oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
            this.addChild(this.node);
            this.node.set_alpha(0);
            Core.get_events().addEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().addEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog));
            Core.get_events().addEventListener("shop_event::allow_disable_close", $bind(this, this.handleAllowDisableCloseEvent));
            this.addEventListener("close", function(e) {
                Core.get_events().dispatchEventWith("ShopEvent::SHOP_ENABLED");
                _g.enable();
                _g.closeButton.set_enabled(true)
            }, false, 0, true);
            this.showLoading()
        },
        postInit: function() {
            if (this.node.isReady) {
                this.handleNodeReady()
            }
        },
        closeWrapper: function(_) {
            if (!this.debugMode) {
                this.close()
            }
        },
        onShow: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.onShow.call(this);
            if (this.node != null && this.node.promosystem != null) {
                this.node.promosystem.registerForEvent(this._dismissEvent, this, $bind(this, this.closeWrapper))
            }
        },
        onHide: function() {
            if (this.node != null) {
                this.node.promosystem.unregisterForEvent(this._dismissEvent, $bind(this, this.closeWrapper));
                var event = this.node.offer.getPopupDismissedEvent();
                this.node.promosystem.postEvent(this._dismissEvent);
                this._ps.get_clientDelegate().promoCloseTriggeredForSystem(this.node.promosystem)
            }
            oaktree_ext_ui_views_GenericDialog.prototype.onHide.call(this)
        },
        handleNodeReady: function() {
            if (!this._initialized) {
                return
            }
            this.resizeBackground(Math.round(this.node.wantedFrameSize.width), Math.round(this.node.wantedFrameSize.height));
            this.node.set_x(this.maxWidth / 2);
            this.node.set_y(this.maxHeight / 2);
            motion_Actuate.tween(this.node, 0.5, {
                alpha: 1
            }, true);
            this.hideLoading()
        },
        handleNodeFail: function() {
            this.close()
        },
        enableDialog: function(e) {
            this.enable()
        },
        enable: function() {
            oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
            this.closeButton.set_enabled(true)
        },
        disableDialog: function(e) {
            this.closeButton.set_enabled(false);
            this.disable()
        },
        handleAllowDisableCloseEvent: function(e) {
            var status = e.data;
            this.allowDisableClose = status
        },
        dispose: function() {
            Core.get_events().removeEventListener("ShopEvent::ENABLE_SHOP", $bind(this, this.enableDialog));
            Core.get_events().removeEventListener("ShopEvent::DISABLE_SHOP", $bind(this, this.disableDialog));
            Core.get_events().removeEventListener("shop_event::allow_disable_close", $bind(this, this.handleAllowDisableCloseEvent));
            oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this)
        },
        __class__: agario_views_promoclient_PromotionDialog
    });
    var miniclip_promotionsystem_client_interfaces_IPromotionPopup = function() {};
    $hxClasses["miniclip.promotionsystem.client.interfaces.IPromotionPopup"] = miniclip_promotionsystem_client_interfaces_IPromotionPopup;
    miniclip_promotionsystem_client_interfaces_IPromotionPopup.__name__ = ["miniclip", "promotionsystem", "client", "interfaces", "IPromotionPopup"];
    miniclip_promotionsystem_client_interfaces_IPromotionPopup.prototype = {
        getOfferId: null,
        __class__: miniclip_promotionsystem_client_interfaces_IPromotionPopup
    };
    var agario_views_promoclient_PromotionNode = function() {
        this.debugMode = false;
        this.isReady = false;
        agario_display_SpriteNode.call(this);
        this.onReady = new hxsignal_impl_Signal0();
        this.onFail = new hxsignal_impl_Signal0();
        this.labelNodes = new List();
        this.imageNodes = new List();
        this.buttonNodes = new List()
    };
    $hxClasses["agario.views.promoclient.PromotionNode"] = agario_views_promoclient_PromotionNode;
    agario_views_promoclient_PromotionNode.__name__ = ["agario", "views", "promoclient", "PromotionNode"];
    agario_views_promoclient_PromotionNode.__interfaces__ = [miniclip_promotionsystem_client_interfaces_IPromotionPopup];
    agario_views_promoclient_PromotionNode.createPromoNode = function(pOfferId, pActionDelegate, pGameDelegate, pPromoSystem) {
        return new agario_views_promoclient_PromotionNode().initWithOffer(pOfferId, pActionDelegate, pGameDelegate, pPromoSystem)
    };
    agario_views_promoclient_PromotionNode.__super__ = agario_display_SpriteNode;
    agario_views_promoclient_PromotionNode.prototype = $extend(agario_display_SpriteNode.prototype, {
        onReady: null,
        onFail: null,
        isReady: null,
        debugMode: null,
        offerId: null,
        offer: null,
        actionDelegate: null,
        gameDelegate: null,
        promosystem: null,
        wantedFrameSize: null,
        background: null,
        labelNodes: null,
        imageNodes: null,
        buttonNodes: null,
        _timerLabel: null,
        _timerText: null,
        initWithOffer: function(pOfferId, pActionDelegate, pGameDelegate, pPromoSystem) {
            var success = true;
            if (pOfferId == null || pOfferId == "") {
                return null
            }
            this.offerId = pOfferId;
            this.offer = pPromoSystem.getOfferFromId(pOfferId);
            if (this.offer == null) {
                return null
            }
            if (pGameDelegate == null) {
                return null
            }
            if (this.offer.popUpCustomData == null) {
                return null
            }
            this.actionDelegate = pActionDelegate;
            this.gameDelegate = pGameDelegate;
            this.promosystem = pPromoSystem;
            if (!this.createNode()) {
                return null
            }
            return this
        },
        getOfferId: function() {
            return this.offerId
        },
        createNode: function() {
            var _g = this;
            var cs = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService);
            var resources = [];
            this.offer.getResourceList(resources);
            var promoAssets = [];
            var _g1 = 0;
            while (_g1 < resources.length) {
                var resource = resources[_g1];
                ++_g1;
                var tempAsset;
                if (!resource.isAtlas && resource.spriteName != null) {
                    tempAsset = Core.get_assets().getAsset(resource.spriteName);
                    promoAssets.push(tempAsset.load())
                }
                if (resource.atlasName != null) {
                    tempAsset = Core.get_assets().getAsset(agario_views_promoclient_PromoClientUtils.removeExtension(resource.atlasName));
                    promoAssets.push(tempAsset.load())
                }
            }
            var gotPromoAssets = promhx_Promise.whenAll(promoAssets);
            ((function($this) {
                var $r;
                var varargf = function(f) {
                    var ret = new promhx_Promise();
                    var arr = [gotPromoAssets];
                    var p = promhx_Promise.whenAll(arr);
                    p._update.push({
                        async: ret,
                        linkf: function(x) {
                            ret.handleResolve(f(arr[0]._val))
                        }
                    });
                    return ret
                };
                $r = {
                    then: varargf
                };
                return $r
            }(this))).then($bind(this, this.checkAssets)).then($bind(this, this.buildUI)).catchError(function(error) {
                haxe_Log.trace(" / promotionnode / " + ("Failed to get promo dialog assets: " + _g.offerId), {
                    fileName: "PromotionNode.hx",
                    lineNumber: 129,
                    className: "agario.views.promoclient.PromotionNode",
                    methodName: "createNode"
                });
                _g.onFail.emit()
            });
            return true
        },
        checkAssets: function(promoAssets) {
            var _g = 0;
            while (_g < promoAssets.length) {
                var asset = promoAssets[_g];
                ++_g;
                if (js_Boot.__instanceof(asset, oaktree_display_NullAssetHolder)) {
                    throw new js__$Boot_HaxeError("Promo asset " + asset.id + " failed to download")
                }
            }
            return promoAssets
        },
        buildUI: function(promoAssets) {
            var customData = this.offer.popUpCustomData;
            this.wantedFrameSize = new openfl_geom_Rectangle(0, 0, 200, 120);
            var frameSize = this.wantedFrameSize;
            if (customData == null) {
                return
            }
            var largerNode;
            this.background = null;
            if (customData.popUpImage != null) {
                var backgroundAsset = Core.get_assets().getAsset(customData.popUpImage);
                if (backgroundAsset.loaded) {
                    this.background = new agario_display_ImageNode(new openfl_display_Bitmap(backgroundAsset.getData()));
                    this.addNode(this.background);
                    this.background.mouseEnabled = false;
                    this.background.mouseChildren = false
                }
            }
            var defaultMargin = 10;
            if (this.background != null) {
                this.wantedFrameSize = new openfl_geom_Rectangle(0, 0, this.background.get_width() + defaultMargin, this.background.get_height() + defaultMargin)
            }
            if (!this.renderButtons()) {
                return null
            }
            if (!this.renderLabels()) {
                return null
            }
            if (!this.renderImages()) {
                return null
            }
            if (!this.renderTimer()) {
                return null
            }
            this.isReady = true;
            if (this.onReady != null) {
                this.onReady.emit()
            }
        },
        renderButtons: function() {
            var buttonsConfig = this.offer.popUpCustomData.buttonsConfiguration;
            if (buttonsConfig == null) {
                return true
            }
            var _g = 0;
            while (_g < buttonsConfig.length) {
                var buttonConfig = buttonsConfig[_g];
                ++_g;
                var popupButton = agario_views_promoclient_PromoButton.getButtonForOffer(this.offerId, buttonConfig, $bind(this, this.handleButtonClick), this.gameDelegate, this.promosystem);
                if (buttonConfig.darkenOnPress) {
                    null
                }
                if (popupButton != null) {
                    popupButton.setPosition(new openfl_geom_Point(popupButton.offsetX, -popupButton.offsetY));
                    this.addNode(popupButton);
                    this.buttonNodes.add(popupButton)
                }
            }
            return true
        },
        handleButtonClick: function(id, action) {
            var key = action;
            if (key == null) {
                key = ""
            }
            this.actionButtonCallback(key)
        },
        renderLabels: function() {
            var textEntries = this.offer.popUpCustomData.textEntries;
            if (textEntries == null) {
                return true
            }
            var _g = 0;
            while (_g < textEntries.length) {
                var textConfig = textEntries[_g];
                ++_g;
                var textNode = agario_views_promoclient_PromoClientUtils.getTextNodeFromConfig(textConfig, this.gameDelegate, this.promosystem);
                if (textNode != null) {
                    var labelOffsetX = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(textConfig.offsetX, 0), textConfig.useBasePack);
                    var labelOffsetY = -agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(textConfig.offsetY, 0), textConfig.useBasePack);
                    textNode.setPosition(new openfl_geom_Point(labelOffsetX, labelOffsetY));
                    if (textConfig.zOrder > -1) {
                        this.addNodeAt(textNode, textConfig.zOrder)
                    } else {
                        this.addNode(textNode)
                    }
                    this.labelNodes.add(textNode);
                    textNode.buttonMode = false;
                    textNode.get_label().set_selectable(false);
                    textNode.get_label().mouseEnabled = false;
                    textNode.mouseEnabled = false;
                    textNode.mouseChildren = false
                }
            }
            return true
        },
        renderImages: function() {
            var imageEntries = this.offer.popUpCustomData.imageEntries;
            if (imageEntries == null) {
                return true
            }
            var xPosition;
            var yPosition;
            var _g = 0;
            while (_g < imageEntries.length) {
                var imageConfig = imageEntries[_g];
                ++_g;
                var imageNode = agario_views_promoclient_PromoClientUtils.getImageNodeFromConfig(imageConfig);
                if (imageNode != null) {
                    xPosition = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(imageConfig.offsetX, 0), imageConfig.useBasePack);
                    yPosition = -agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(imageConfig.offsetY, 0), imageConfig.useBasePack);
                    imageNode.setPosition(new openfl_geom_Point(xPosition, yPosition));
                    if (imageConfig.zOrder > -1) {
                        this.addNodeAt(imageNode, imageConfig.zOrder)
                    } else {
                        this.addNode(imageNode)
                    }
                    this.imageNodes.add(imageNode);
                    imageNode.mouseChildren = false;
                    imageNode.mouseEnabled = false
                }
            }
            return true
        },
        renderTimer: function() {
            var timerConfig = this.offer.popUpCustomData.timerConfiguration;
            if (timerConfig != null) {
                var tag = timerConfig.tag;
                this._timerText = null;
                if (tag != null) {
                    this._timerText = this.gameDelegate.getLocalizedTextForTag(tag, this.promosystem)
                }
                this._timerLabel = agario_views_promoclient_PromoClientUtils.getTimerLabelFromConfig(timerConfig, this.offerId, this.gameDelegate, this.promosystem);
                if (this._timerLabel != null) {
                    var xPosition = agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(timerConfig.offsetX, 0), timerConfig.useBasePack);
                    var yPosition = -agario_views_promoclient_PromoClientUtils.scaleF(agario_views_promoclient_PromoClientUtils.asFloat(timerConfig.offsetY, 0), timerConfig.useBasePack);
                    this._timerLabel.setPosition(new openfl_geom_Point(xPosition, yPosition));
                    if (timerConfig.zOrder > -1) {
                        this.addNodeAt(this._timerLabel, timerConfig.zOrder)
                    } else {
                        this.addNode(this._timerLabel)
                    }
                }
            }
            return true
        },
        update: function(pDelta) {
            agario_display_SpriteNode.prototype.update.call(this, pDelta);
            if (this._timerLabel != null) {
                agario_views_promoclient_PromoClientUtils.updateTimerOnLabel(this._timerLabel, this._timerText, this.offerId, this.gameDelegate, this.promosystem)
            }
        },
        dispose: function() {
            this.background.dispose();
            var _g_head = this.buttonNodes.h;
            var _g_val = null;
            while (_g_head != null) {
                var button;
                button = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                button.dispose()
            }
            var _g_head1 = this.imageNodes.h;
            var _g_val1 = null;
            while (_g_head1 != null) {
                var image;
                image = (function($this) {
                    var $r;
                    _g_val1 = _g_head1[0];
                    _g_head1 = _g_head1[1];
                    $r = _g_val1;
                    return $r
                }(this));
                image.dispose()
            }
            var _g_head2 = this.labelNodes.h;
            var _g_val2 = null;
            while (_g_head2 != null) {
                var label;
                label = (function($this) {
                    var $r;
                    _g_val2 = _g_head2[0];
                    _g_head2 = _g_head2[1];
                    $r = _g_val2;
                    return $r
                }(this));
                label.dispose()
            }
            if (this._timerLabel != null) {
                this._timerLabel.dispose()
            }
            if (this.onReady != null) {
                this.onReady.disconnectAll()
            }
            if (this.onFail != null) {
                this.onFail.disconnectAll()
            }
            agario_display_SpriteNode.prototype.dispose.call(this)
        },
        actionButtonCallback: function(key) {
            this.gameDelegate.promoActionTriggered(key, this.offerId, this.promosystem);
            this.promosystem.runPopUpAction(key, this.offerId, this.actionDelegate)
        },
        __class__: agario_views_promoclient_PromotionNode
    });
    var assets_manager_FileLoader = function(maxConnectionLimit) {
        if (maxConnectionLimit == null) {
            maxConnectionLimit = 3
        }
        this.onFilesLoaded = new msignal_Signal1();
        this.onFileLoaded = new msignal_Signal1();
        this.uniqueCallbacks = new haxe_ds_StringMap();
        this.queuedFiles = [];
        this.manager = new assets_manager_loaders_LoaderManager(maxConnectionLimit);
        this.manager.addEventListener("complete", $bind(this, this.onManagerComplete));
        this.manager.addEventListener("evtFileLoadComplete", $bind(this, this.onManagerFileComplete))
    };
    $hxClasses["assets.manager.FileLoader"] = assets_manager_FileLoader;
    assets_manager_FileLoader.__name__ = ["assets", "manager", "FileLoader"];
    assets_manager_FileLoader.prototype = {
        manager: null,
        onFilesLoaded: null,
        onFileLoaded: null,
        queuedFiles: null,
        uniqueCallbacks: null,
        loadText: function(id, onComplete) {
            this.loadFile(id, assets_manager_misc_FileType.TEXT, onComplete)
        },
        loadImage: function(id, onComplete) {
            this.loadFile(id, assets_manager_misc_FileType.IMAGE, onComplete)
        },
        loadBinary: function(id, onComplete) {
            this.loadFile(id, assets_manager_misc_FileType.BINARY, onComplete)
        },
        loadSound: function(id, onComplete) {
            this.loadFile(id, assets_manager_misc_FileType.SOUND, onComplete)
        },
        loadFile: function(id, type, onComplete) {
            if (onComplete != null) {
                this.storeCallback(id, onComplete)
            }
            if (!this.exists(id)) {
                this.addLoader(id, type)
            }
            this.manager.loadList([id])
        },
        queueText: function(id, onComplete) {
            this.queueFile(id, assets_manager_misc_FileType.TEXT, onComplete)
        },
        queueImage: function(id, onComplete) {
            this.queueFile(id, assets_manager_misc_FileType.IMAGE, onComplete)
        },
        queueBinary: function(id, onComplete) {
            this.queueFile(id, assets_manager_misc_FileType.BINARY, onComplete)
        },
        queueSound: function(id, onComplete) {
            this.queueFile(id, assets_manager_misc_FileType.SOUND, onComplete)
        },
        queueFile: function(id, type, onComplete) {
            if (onComplete != null) {
                this.storeCallback(id, onComplete)
            }
            if (!this.exists(id)) {
                this.addLoader(id, type)
            }
            if (HxOverrides.indexOf(this.queuedFiles, id, 0) == -1) {
                this.queuedFiles.push(id)
            }
        },
        loadQueuedFiles: function() {
            if (this.queuedFiles.length == 0) {
                return
            }
            var qf = this.queuedFiles.slice();
            this.queuedFiles = [];
            this.manager.loadList(qf)
        },
        getLoadedImage: function(id) {
            var loader = this.getLoadedFile(id);
            if (loader != null && loader.type == assets_manager_misc_FileType.IMAGE) {
                return loader.data
            }
            return null
        },
        getLoadedText: function(id) {
            var loader = this.getLoadedFile(id);
            if (loader != null && loader.type == assets_manager_misc_FileType.TEXT) {
                return loader.data
            }
            return null
        },
        getLoadedBytes: function(id) {
            var loader = this.getLoadedFile(id);
            if (loader != null && loader.type == assets_manager_misc_FileType.BINARY) {
                return loader.data
            }
            return null
        },
        getLoadedSound: function(id) {
            var loader = this.getLoadedFile(id);
            if (loader != null && loader.type == assets_manager_misc_FileType.SOUND) {
                return loader.data
            }
            return null
        },
        getLoadedFile: function(id) {
            var loader = this.manager.findLoader(id);
            if (loader == null) {
                return null
            }
            var asset = {
                id: id,
                type: loader.type,
                status: loader.status,
                data: loader.data
            };
            return asset
        },
        exists: function(file) {
            return this.manager.findLoader(file) != null
        },
        listFiles: function(type) {
            var result = [];
            var $it0 = this.manager.loaders.iterator();
            while ($it0.hasNext()) {
                var loader = $it0.next();
                if (loader.type == type || type == null) {
                    result.push(loader.id)
                }
            }
            return result
        },
        removeFile: function(id, dispose) {
            if (dispose == null) {
                dispose = false
            }
            if (this.manager.remove(id, dispose)) {
                if (HxOverrides.indexOf(this.queuedFiles, id, 0) != -1) {
                    HxOverrides.remove(this.queuedFiles, id)
                }
                if (this.uniqueCallbacks.exists(id)) {
                    this.uniqueCallbacks.remove(id)
                }
                return true
            }
            return false
        },
        destroy: function(dispose) {
            if (dispose == null) {
                dispose = false
            }
            this.onFileLoaded.removeAll();
            this.onFileLoaded = null;
            this.onFilesLoaded.removeAll();
            this.onFilesLoaded = null;
            this.manager.removeEventListener("complete", $bind(this, this.onManagerComplete));
            this.manager.removeEventListener("evtFileLoadComplete", $bind(this, this.onManagerFileComplete));
            var files = this.listFiles();
            var _g = 0;
            while (_g < files.length) {
                var file = files[_g];
                ++_g;
                this.removeFile(file, dispose)
            }
            this.queuedFiles = null;
            this.uniqueCallbacks = null
        },
        addLoader: function(id, type) {
            switch (type[1]) {
                case 0:
                    this.manager.addLoader(new assets_manager_loaders_ImageLoader(id));
                    break;
                case 1:
                    this.manager.addLoader(new assets_manager_loaders_TextLoader(id));
                    break;
                case 2:
                    this.manager.addLoader(new assets_manager_loaders_BinaryLoader(id));
                    break;
                case 3:
                    this.manager.addLoader(new assets_manager_loaders_SoundLoader(id));
                    break
            }
        },
        createInfoList: function(list) {
            var info = [];
            var _g = 0;
            while (_g < list.length) {
                var entry = list[_g];
                ++_g;
                info.push(this.getLoadedFile(entry))
            }
            return info
        },
        storeCallback: function(id, cbk) {
            if (!Reflect.isFunction(cbk)) {
                haxe_Log.trace("Assets loader error: callback provided is not a function", {
                    fileName: "FileLoader.hx",
                    lineNumber: 352,
                    className: "assets.manager.FileLoader",
                    methodName: "storeCallback"
                });
                return
            }
            var cbks;
            if (!this.uniqueCallbacks.exists(id)) {
                cbks = [];
                this.uniqueCallbacks.set(id, cbks);
                cbks
            } else {
                cbks = this.uniqueCallbacks.get(id)
            }
            if (!Lambda.has(cbks, cbk)) {
                cbks.push(cbk)
            }
        },
        onManagerComplete: function(e) {
            var loadedFiles = this.createInfoList(this.manager.loadedFiles);
            this.onFilesLoaded.dispatch(loadedFiles)
        },
        onManagerFileComplete: function(e) {
            var fileId = this.manager.loadedFiles[this.manager.loadedFiles.length - 1];
            var file = this.getLoadedFile(fileId);
            this.onFileLoaded.dispatch(file);
            if (this.uniqueCallbacks.exists(fileId)) {
                var list = this.uniqueCallbacks.get(fileId);
                this.uniqueCallbacks.remove(fileId);
                var _g = 0;
                while (_g < list.length) {
                    var cbk = list[_g];
                    ++_g;
                    cbk(file)
                }
            }
        },
        __class__: assets_manager_FileLoader
    };
    var assets_manager_SoundManager = function() {};
    $hxClasses["assets.manager.SoundManager"] = assets_manager_SoundManager;
    assets_manager_SoundManager.__name__ = ["assets", "manager", "SoundManager"];
    assets_manager_SoundManager.load = function(url) {
        assets_manager_SoundManager.play(url, -1)
    };
    assets_manager_SoundManager.play = function(url, maxTimeout) {
        if (maxTimeout == null) {
            maxTimeout = 300
        }
        if (!assets_manager_SoundManager.cachedSounds.exists(url)) {
            var v = new assets_manager_TimedSound(url, maxTimeout);
            assets_manager_SoundManager.cachedSounds.set(url, v);
            v
        }
        if (maxTimeout >= 0) {
            assets_manager_SoundManager.cachedSounds.get(url).play()
        }
    };
    var assets_manager_TimedSound = function(url, maxTimeout) {
        this.startedDownloadingTime = openfl_Lib.getTimer();
        this.sound = new openfl_media_Sound(new openfl_net_URLRequest(url));
        this.sound.addEventListener("complete", $bind(this, this.onSoundLoaded));
        this.maxTimeout = maxTimeout
    };
    $hxClasses["assets.manager.TimedSound"] = assets_manager_TimedSound;
    assets_manager_TimedSound.__name__ = ["assets", "manager", "TimedSound"];
    assets_manager_TimedSound.prototype = {
        sound: null,
        startedDownloadingTime: null,
        maxTimeout: null,
        play: function() {
            this.sound.play()
        },
        onSoundLoaded: function(e) {
            var deltaTime = openfl_Lib.getTimer() - this.startedDownloadingTime;
            if (deltaTime < this.maxTimeout) {
                this.play()
            }
        },
        __class__: assets_manager_TimedSound
    };
    var assets_manager_loaders_BaseLoader = function(id, type) {
        openfl_events_EventDispatcher.call(this);
        this.id = id;
        this.data = null;
        this.type = type;
        this.status = assets_manager_misc_LoaderStatus.IDLE;
        this.loader = new openfl_net_URLLoader();
        this.loader.addEventListener("complete", $bind(this, this.handleComplete));
        this.loader.addEventListener("ioError", $bind(this, this.onLoadFail));
        this.loader.addEventListener("securityError", $bind(this, this.onLoadFail))
    };
    $hxClasses["assets.manager.loaders.BaseLoader"] = assets_manager_loaders_BaseLoader;
    assets_manager_loaders_BaseLoader.__name__ = ["assets", "manager", "loaders", "BaseLoader"];
    assets_manager_loaders_BaseLoader.__super__ = openfl_events_EventDispatcher;
    assets_manager_loaders_BaseLoader.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        loader: null,
        type: null,
        id: null,
        data: null,
        status: null,
        error: null,
        handleComplete: function(e) {
            this.processData();
            this.status = assets_manager_misc_LoaderStatus.LOADED;
            this.dispatchEvent(new openfl_events_Event("complete"))
        },
        onLoadFail: function(e) {
            this.data = null;
            this.error = e.toString();
            this.status = assets_manager_misc_LoaderStatus.ERROR;
            this.dispatchEvent(new openfl_events_Event("complete"))
        },
        processData: function() {
            this.data = this.loader.data
        },
        prepare: function() {
            this.status = assets_manager_misc_LoaderStatus.READY
        },
        reset: function(dispose) {
            this.status = assets_manager_misc_LoaderStatus.IDLE;
            this.data = null;
            this.loader.data = null
        },
        start: function() {
            this.status = assets_manager_misc_LoaderStatus.LOADING;
            this.loader.load(new openfl_net_URLRequest(this.id))
        },
        __class__: assets_manager_loaders_BaseLoader
    });
    var assets_manager_loaders_BinaryLoader = function(id) {
        assets_manager_loaders_BaseLoader.call(this, id, assets_manager_misc_FileType.BINARY);
        this.loader.dataFormat = 0
    };
    $hxClasses["assets.manager.loaders.BinaryLoader"] = assets_manager_loaders_BinaryLoader;
    assets_manager_loaders_BinaryLoader.__name__ = ["assets", "manager", "loaders", "BinaryLoader"];
    assets_manager_loaders_BinaryLoader.__super__ = assets_manager_loaders_BaseLoader;
    assets_manager_loaders_BinaryLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype, {
        __class__: assets_manager_loaders_BinaryLoader
    });
    var assets_manager_loaders_ImageLoader = function(id) {
        assets_manager_loaders_BaseLoader.call(this, id, assets_manager_misc_FileType.IMAGE);
        this.flashLoader = new openfl_display_Loader();
        this.flashLoader.contentLoaderInfo.addEventListener("complete", $bind(this, this.handleComplete));
        this.flashLoader.contentLoaderInfo.addEventListener("ioError", $bind(this, this.onLoadFail));
        this.flashLoader.contentLoaderInfo.addEventListener("securityError", $bind(this, this.onLoadFail))
    };
    $hxClasses["assets.manager.loaders.ImageLoader"] = assets_manager_loaders_ImageLoader;
    assets_manager_loaders_ImageLoader.__name__ = ["assets", "manager", "loaders", "ImageLoader"];
    assets_manager_loaders_ImageLoader.__super__ = assets_manager_loaders_BaseLoader;
    assets_manager_loaders_ImageLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype, {
        flashLoader: null,
        processData: function() {
            this.data = (js_Boot.__cast(this.flashLoader.content, openfl_display_Bitmap)).bitmapData
        },
        start: function() {
            this.status = assets_manager_misc_LoaderStatus.LOADING;
            this.flashLoader.load(new openfl_net_URLRequest(this.id))
        },
        reset: function(dispose) {
            this.status = assets_manager_misc_LoaderStatus.IDLE;
            if (this.data != null && dispose) {
                (js_Boot.__cast(this.data, openfl_display_BitmapData)).dispose()
            }
            this.data = null
        },
        __class__: assets_manager_loaders_ImageLoader
    });
    var assets_manager_loaders_LoaderManager = function(maxConnectionLimit) {
        if (maxConnectionLimit == null) {
            maxConnectionLimit = 1
        }
        openfl_events_EventDispatcher.call(this);
        this.maxConnectionLimit = maxConnectionLimit;
        this.activeLoads = 0;
        this.loadedFiles = [];
        this.loaders = new haxe_ds_StringMap();
        this.loadQueue = []
    };
    $hxClasses["assets.manager.loaders.LoaderManager"] = assets_manager_loaders_LoaderManager;
    assets_manager_loaders_LoaderManager.__name__ = ["assets", "manager", "loaders", "LoaderManager"];
    assets_manager_loaders_LoaderManager.__super__ = openfl_events_EventDispatcher;
    assets_manager_loaders_LoaderManager.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        loadQueue: null,
        activeLoads: null,
        loaders: null,
        maxConnectionLimit: null,
        loadedFiles: null,
        addLoader: function(loader) {
            var id = loader.id;
            if (this.loaders.get(id) != null) {
                return
            }
            this.loaders.set(id, loader);
            loader
        },
        loadList: function(list) {
            this.loadedFiles = [];
            var _g = 0;
            while (_g < list.length) {
                var id = list[_g];
                ++_g;
                var l = this.findLoader(id);
                if (l != null && l.status != assets_manager_misc_LoaderStatus.LOADING && l.status != assets_manager_misc_LoaderStatus.READY) {
                    this.loadQueue.push(l);
                    l.addEventListener("complete", $bind(this, this.onFileLoaded));
                    l.prepare()
                }
            }
            this.checkLoadSequence()
        },
        unloadList: function(list, dispose) {
            var $it0 = this.loaders.iterator();
            while ($it0.hasNext()) {
                var loader = $it0.next();
                var _g = 0;
                while (_g < list.length) {
                    var id = list[_g];
                    ++_g;
                    if (loader.id == id) {
                        loader.reset(dispose)
                    }
                }
            }
        },
        remove: function(id, dispose) {
            var loader = this.findLoader(id);
            if (loader != null && loader.status != assets_manager_misc_LoaderStatus.LOADING && loader.status != assets_manager_misc_LoaderStatus.READY) {
                loader.reset(dispose);
                this.loaders.remove(id);
                if (HxOverrides.indexOf(this.loadedFiles, id, 0) != -1) {
                    HxOverrides.remove(this.loadedFiles, id)
                }
                return true
            }
            return false
        },
        findLoader: function(id) {
            var $it0 = this.loaders.iterator();
            while ($it0.hasNext()) {
                var loader = $it0.next();
                if (loader.id == id) {
                    return loader
                }
            }
            return null
        },
        checkLoadSequence: function() {
            var isAllComplete = true;
            var _g = 0;
            var _g1 = this.loadQueue;
            while (_g < _g1.length) {
                var loader = _g1[_g];
                ++_g;
                if (loader.status == assets_manager_misc_LoaderStatus.LOADING || loader.status == assets_manager_misc_LoaderStatus.READY) {
                    isAllComplete = false
                }
                if (loader.status == assets_manager_misc_LoaderStatus.READY && this.activeLoads < this.maxConnectionLimit) {
                    this.activeLoads++;
                    loader.start()
                }
            }
            if (isAllComplete) {
                this.onLoadListComplete()
            }
        },
        onFileLoaded: function(e) {
            var loader = e.currentTarget;
            loader.removeEventListener("complete", $bind(this, this.onFileLoaded));
            this.activeLoads--;
            HxOverrides.remove(this.loadQueue, loader);
            if (HxOverrides.indexOf(this.loadedFiles, loader.id, 0) != -1) {
                HxOverrides.remove(this.loadedFiles, loader.id)
            }
            this.loadedFiles.push(loader.id);
            this.dispatchEvent(new openfl_events_Event("evtFileLoadComplete"));
            this.checkLoadSequence()
        },
        onLoadListComplete: function() {
            this.dispatchEvent(new openfl_events_Event("complete"))
        },
        __class__: assets_manager_loaders_LoaderManager
    });
    var assets_manager_loaders_SoundLoader = function(id) {
        assets_manager_loaders_BaseLoader.call(this, id, assets_manager_misc_FileType.SOUND);
        this.loader.dataFormat = 0
    };
    $hxClasses["assets.manager.loaders.SoundLoader"] = assets_manager_loaders_SoundLoader;
    assets_manager_loaders_SoundLoader.__name__ = ["assets", "manager", "loaders", "SoundLoader"];
    assets_manager_loaders_SoundLoader.__super__ = assets_manager_loaders_BaseLoader;
    assets_manager_loaders_SoundLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype, {
        processData: function() {
            var sound = new openfl_media_Sound();
            sound.loadCompressedDataFromByteArray(this.loader.data, this.loader.data.length);
            this.data = sound
        },
        __class__: assets_manager_loaders_SoundLoader
    });
    var assets_manager_loaders_TextLoader = function(id) {
        assets_manager_loaders_BaseLoader.call(this, id, assets_manager_misc_FileType.TEXT)
    };
    $hxClasses["assets.manager.loaders.TextLoader"] = assets_manager_loaders_TextLoader;
    assets_manager_loaders_TextLoader.__name__ = ["assets", "manager", "loaders", "TextLoader"];
    assets_manager_loaders_TextLoader.__super__ = assets_manager_loaders_BaseLoader;
    assets_manager_loaders_TextLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype, {
        processData: function() {
            this.data = Std.string(this.loader.data)
        },
        __class__: assets_manager_loaders_TextLoader
    });
    var assets_manager_misc_FileType = $hxClasses["assets.manager.misc.FileType"] = {
        __ename__: ["assets", "manager", "misc", "FileType"],
        __constructs__: ["IMAGE", "TEXT", "BINARY", "SOUND"]
    };
    assets_manager_misc_FileType.IMAGE = ["IMAGE", 0];
    assets_manager_misc_FileType.IMAGE.toString = $estr;
    assets_manager_misc_FileType.IMAGE.__enum__ = assets_manager_misc_FileType;
    assets_manager_misc_FileType.TEXT = ["TEXT", 1];
    assets_manager_misc_FileType.TEXT.toString = $estr;
    assets_manager_misc_FileType.TEXT.__enum__ = assets_manager_misc_FileType;
    assets_manager_misc_FileType.BINARY = ["BINARY", 2];
    assets_manager_misc_FileType.BINARY.toString = $estr;
    assets_manager_misc_FileType.BINARY.__enum__ = assets_manager_misc_FileType;
    assets_manager_misc_FileType.SOUND = ["SOUND", 3];
    assets_manager_misc_FileType.SOUND.toString = $estr;
    assets_manager_misc_FileType.SOUND.__enum__ = assets_manager_misc_FileType;
    var assets_manager_misc_LoaderStatus = $hxClasses["assets.manager.misc.LoaderStatus"] = {
        __ename__: ["assets", "manager", "misc", "LoaderStatus"],
        __constructs__: ["IDLE", "READY", "LOADING", "LOADED", "ERROR"]
    };
    assets_manager_misc_LoaderStatus.IDLE = ["IDLE", 0];
    assets_manager_misc_LoaderStatus.IDLE.toString = $estr;
    assets_manager_misc_LoaderStatus.IDLE.__enum__ = assets_manager_misc_LoaderStatus;
    assets_manager_misc_LoaderStatus.READY = ["READY", 1];
    assets_manager_misc_LoaderStatus.READY.toString = $estr;
    assets_manager_misc_LoaderStatus.READY.__enum__ = assets_manager_misc_LoaderStatus;
    assets_manager_misc_LoaderStatus.LOADING = ["LOADING", 2];
    assets_manager_misc_LoaderStatus.LOADING.toString = $estr;
    assets_manager_misc_LoaderStatus.LOADING.__enum__ = assets_manager_misc_LoaderStatus;
    assets_manager_misc_LoaderStatus.LOADED = ["LOADED", 3];
    assets_manager_misc_LoaderStatus.LOADED.toString = $estr;
    assets_manager_misc_LoaderStatus.LOADED.__enum__ = assets_manager_misc_LoaderStatus;
    assets_manager_misc_LoaderStatus.ERROR = ["ERROR", 4];
    assets_manager_misc_LoaderStatus.ERROR.toString = $estr;
    assets_manager_misc_LoaderStatus.ERROR.__enum__ = assets_manager_misc_LoaderStatus;
    var com_plist_Reader = function() {};
    $hxClasses["com.plist.Reader"] = com_plist_Reader;
    com_plist_Reader.__name__ = ["com", "plist", "Reader"];
    com_plist_Reader.read = function(s) {
        return com_plist_Reader.parseNode(Xml.parse(s).firstElement())
    };
    com_plist_Reader.val = function(x) {
        return ((function($this) {
            var $r;
            if (x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + x.nodeType)
            }
            $r = x.children[0];
            return $r
        }(this))).get_nodeValue()
    };
    com_plist_Reader.parseNode = function(x) {
        var _g;
        if (x.nodeType != Xml.Element) {
            throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + x.nodeType)
        }
        _g = x.nodeName;
        var v = _g;
        switch (_g) {
            case "plist":
                return com_plist_Reader.parseNode(x.firstElement());
            case "date":
                return com_plist_Reader.handleDate(com_plist_Reader.val(x));
            case "dict":
                var elts = x.elements();
                var ret = {};
                while (elts.hasNext()) {
                    Reflect.setField(ret, com_plist_Reader.val(elts.next()), com_plist_Reader.parseNode(elts.next()))
                }
                return ret;
            case "true":
                return true;
            case "false":
                return false;
            case "array":
                var _g1 = [];
                var $it0 = x.elements();
                while ($it0.hasNext()) {
                    var c = $it0.next();
                    _g1.push(com_plist_Reader.parseNode(c))
                }
                return _g1;
            case "string":
                return com_plist_Reader.val(x);
            case "integer":
                return Std.parseInt(com_plist_Reader.val(x));
            case "real":
                return Std.parseFloat(com_plist_Reader.val(x));
            default:
                return null
        }
    };
    com_plist_Reader.handleDate = function(data) {
        if (data.length == 20) {
            var k = data.split("T");
            var y = k[0].split("-");
            var t = k[1].split(":");
            return new Date(Std.parseInt(y[0]), Std.parseInt(y[1]) - 1, Std.parseInt(y[2]), Std.parseInt(t[0]), Std.parseInt(t[1]), Std.parseInt(t[2]))
        } else {
            if (data.length == 10) {
                var k1 = data.split("-");
                return new Date(Std.parseInt(k1[0]), Std.parseInt(k1[1]) - 1, Std.parseInt(k1[2]), 0, 0, 0)
            } else {
                var k2 = data.split(":");
                var d = new Date(0, 0, 0, Std.parseInt(k2[0]), Std.parseInt(k2[1]), Std.parseInt(k2[2]));
                return d
            }
        }
    };
    var format_gz_Reader = function(i) {
        this.i = i
    };
    $hxClasses["format.gz.Reader"] = format_gz_Reader;
    format_gz_Reader.__name__ = ["format", "gz", "Reader"];
    format_gz_Reader.prototype = {
        i: null,
        read: function() {
            var h = this.readHeader();
            var o = new haxe_io_BytesOutput();
            this.readData(o);
            return {
                file: h.fileName,
                data: o.getBytes()
            }
        },
        readHeader: function() {
            if (this.i.readByte() != 31 || this.i.readByte() != 139) {
                throw new js__$Boot_HaxeError("Invalid GZ header")
            }
            if (this.i.readByte() != 8) {
                throw new js__$Boot_HaxeError("Invalid compression method")
            }
            var flags = this.i.readByte();
            var mtime = this.i.read(4);
            var xflags = this.i.readByte();
            var os = this.i.readByte();
            var fname = null;
            var comments = null;
            var xdata = null;
            if ((flags & 4) != 0) {
                var xlen = this.i.readUInt16();
                xdata = this.i.read(xlen)
            }
            if ((flags & 8) != 0) {
                fname = this.i.readUntil(0)
            }
            if ((flags & 16) != 0) {
                comments = this.i.readUntil(0)
            }
            if ((flags & 2) != 0) {
                var hcrc = this.i.readUInt16()
            }
            return {
                fileName: fname,
                comments: comments,
                extraData: xdata
            }
        },
        readData: function(o, bufsize) {
            if (bufsize == null) {
                bufsize = 65536
            }
            var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
            var tsize = 0;
            var inflate = new format_tools_InflateImpl(this.i, false, false);
            while (true) {
                var len = inflate.readBytes(buf, 0, bufsize);
                o.writeFullBytes(buf, 0, len);
                if (len < bufsize) {
                    break
                }
                tsize += len
            }
            return tsize
        },
        refill: function(buf, pos) {
            try {
                while (pos != buf.length) {
                    var k = this.i.readBytes(buf, pos, buf.length - pos);
                    pos += k
                }
            } catch (e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) {
                    e = e.val
                }
                if (js_Boot.__instanceof(e, haxe_io_Eof)) {} else {
                    throw (e)
                }
            }
            if (pos == 0) {
                throw new js__$Boot_HaxeError(new haxe_io_Eof())
            }
            if (pos != buf.length) {
                buf = buf.sub(0, pos)
            }
            return buf
        },
        __class__: format_gz_Reader
    };
    var format_png_Color = $hxClasses["format.png.Color"] = {
        __ename__: ["format", "png", "Color"],
        __constructs__: ["ColGrey", "ColTrue", "ColIndexed"]
    };
    format_png_Color.ColGrey = function(alpha) {
        var $x = ["ColGrey", 0, alpha];
        $x.__enum__ = format_png_Color;
        $x.toString = $estr;
        return $x
    };
    format_png_Color.ColTrue = function(alpha) {
        var $x = ["ColTrue", 1, alpha];
        $x.__enum__ = format_png_Color;
        $x.toString = $estr;
        return $x
    };
    format_png_Color.ColIndexed = ["ColIndexed", 2];
    format_png_Color.ColIndexed.toString = $estr;
    format_png_Color.ColIndexed.__enum__ = format_png_Color;
    var format_png_Chunk = $hxClasses["format.png.Chunk"] = {
        __ename__: ["format", "png", "Chunk"],
        __constructs__: ["CEnd", "CHeader", "CData", "CPalette", "CUnknown"]
    };
    format_png_Chunk.CEnd = ["CEnd", 0];
    format_png_Chunk.CEnd.toString = $estr;
    format_png_Chunk.CEnd.__enum__ = format_png_Chunk;
    format_png_Chunk.CHeader = function(h) {
        var $x = ["CHeader", 1, h];
        $x.__enum__ = format_png_Chunk;
        $x.toString = $estr;
        return $x
    };
    format_png_Chunk.CData = function(b) {
        var $x = ["CData", 2, b];
        $x.__enum__ = format_png_Chunk;
        $x.toString = $estr;
        return $x
    };
    format_png_Chunk.CPalette = function(b) {
        var $x = ["CPalette", 3, b];
        $x.__enum__ = format_png_Chunk;
        $x.toString = $estr;
        return $x
    };
    format_png_Chunk.CUnknown = function(id, data) {
        var $x = ["CUnknown", 4, id, data];
        $x.__enum__ = format_png_Chunk;
        $x.toString = $estr;
        return $x
    };
    var format_png_Reader = function(i) {
        this.i = i;
        i.set_bigEndian(true);
        this.checkCRC = true
    };
    $hxClasses["format.png.Reader"] = format_png_Reader;
    format_png_Reader.__name__ = ["format", "png", "Reader"];
    format_png_Reader.prototype = {
        i: null,
        checkCRC: null,
        read: function() {
            var _g = 0;
            var _g1 = [137, 80, 78, 71, 13, 10, 26, 10];
            while (_g < _g1.length) {
                var b = _g1[_g];
                ++_g;
                if (this.i.readByte() != b) {
                    throw new js__$Boot_HaxeError("Invalid header")
                }
            }
            var l = new List();
            while (true) {
                var c = this.readChunk();
                l.add(c);
                if (c == format_png_Chunk.CEnd) {
                    break
                }
            }
            return l
        },
        readHeader: function(i) {
            i.set_bigEndian(true);
            var width = i.readInt32();
            var height = i.readInt32();
            var colbits = i.readByte();
            var color = i.readByte();
            var color1;
            switch (color) {
                case 0:
                    color1 = format_png_Color.ColGrey(false);
                    break;
                case 2:
                    color1 = format_png_Color.ColTrue(false);
                    break;
                case 3:
                    color1 = format_png_Color.ColIndexed;
                    break;
                case 4:
                    color1 = format_png_Color.ColGrey(true);
                    break;
                case 6:
                    color1 = format_png_Color.ColTrue(true);
                    break;
                default:
                    throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits)
            }
            var compress = i.readByte();
            var filter = i.readByte();
            if (compress != 0 || filter != 0) {
                throw new js__$Boot_HaxeError("Invalid header")
            }
            var interlace = i.readByte();
            if (interlace != 0 && interlace != 1) {
                throw new js__$Boot_HaxeError("Invalid header")
            }
            return {
                width: width,
                height: height,
                colbits: colbits,
                color: color1,
                interlaced: interlace == 1
            }
        },
        readChunk: function() {
            var dataLen = this.i.readInt32();
            var id = this.i.readString(4);
            var data = this.i.read(dataLen);
            var crc = this.i.readInt32();
            if (this.checkCRC) {
                var c = new haxe_crypto_Crc32();
                var _g = 0;
                while (_g < 4) {
                    var i = _g++;
                    c["byte"](HxOverrides.cca(id, i))
                }
                c.update(data, 0, data.length);
                if (c.get() != crc) {
                    throw new js__$Boot_HaxeError("CRC check failure")
                }
            }
            switch (id) {
                case "IEND":
                    return format_png_Chunk.CEnd;
                case "IHDR":
                    return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
                case "IDAT":
                    return format_png_Chunk.CData(data);
                case "PLTE":
                    return format_png_Chunk.CPalette(data);
                default:
                    return format_png_Chunk.CUnknown(id, data)
            }
        },
        __class__: format_png_Reader
    };
    var format_png_Tools = function() {};
    $hxClasses["format.png.Tools"] = format_png_Tools;
    format_png_Tools.__name__ = ["format", "png", "Tools"];
    format_png_Tools.getHeader = function(d) {
        var _g_head = d.h;
        var _g_val = null;
        while (_g_head != null) {
            var c;
            c = (function($this) {
                var $r;
                _g_val = _g_head[0];
                _g_head = _g_head[1];
                $r = _g_val;
                return $r
            }(this));
            switch (c[1]) {
                case 1:
                    var h = c[2];
                    return h;
                default:
            }
        }
        throw new js__$Boot_HaxeError("Header not found")
    };
    format_png_Tools.getPalette = function(d) {
        var _g_head = d.h;
        var _g_val = null;
        while (_g_head != null) {
            var c;
            c = (function($this) {
                var $r;
                _g_val = _g_head[0];
                _g_head = _g_head[1];
                $r = _g_val;
                return $r
            }(this));
            switch (c[1]) {
                case 3:
                    var b = c[2];
                    return b;
                default:
            }
        }
        return null
    };
    format_png_Tools.filter = function(data, x, y, stride, prev, p, numChannels) {
        if (numChannels == null) {
            numChannels = 4
        }
        var b;
        if (y == 0) {
            b = 0
        } else {
            b = data.b[p - stride]
        }
        var c;
        if (x == 0 || y == 0) {
            c = 0
        } else {
            c = data.b[p - stride - numChannels]
        }
        var k = prev + b - c;
        var pa = k - prev;
        if (pa < 0) {
            pa = -pa
        }
        var pb = k - b;
        if (pb < 0) {
            pb = -pb
        }
        var pc = k - c;
        if (pc < 0) {
            pc = -pc
        }
        if (pa <= pb && pa <= pc) {
            return prev
        } else {
            if (pb <= pc) {
                return b
            } else {
                return c
            }
        }
    };
    format_png_Tools.reverseBytes = function(b) {
        var p = 0;
        var _g1 = 0;
        var _g = b.length >> 2;
        while (_g1 < _g) {
            var i = _g1++;
            var b1 = b.b[p];
            var g = b.b[p + 1];
            var r = b.b[p + 2];
            var a = b.b[p + 3];
            var p1 = p++;
            b.b[p1] = a & 255;
            var p2 = p++;
            b.b[p2] = r & 255;
            var p3 = p++;
            b.b[p3] = g & 255;
            var p4 = p++;
            b.b[p4] = b1 & 255
        }
    };
    format_png_Tools.extractGrey = function(d) {
        var h = format_png_Tools.getHeader(d);
        var grey = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height));
        var data = null;
        var fullData = null;
        var _g_head = d.h;
        var _g_val = null;
        while (_g_head != null) {
            var c;
            c = (function($this) {
                var $r;
                _g_val = _g_head[0];
                _g_head = _g_head[1];
                $r = _g_val;
                return $r
            }(this));
            switch (c[1]) {
                case 2:
                    var b = c[2];
                    if (fullData != null) {
                        fullData.add(b)
                    } else {
                        if (data == null) {
                            data = b
                        } else {
                            fullData = new haxe_io_BytesBuffer();
                            fullData.add(data);
                            fullData.add(b);
                            data = null
                        }
                    }
                    break;
                default:
            }
        }
        if (fullData != null) {
            data = fullData.getBytes()
        }
        if (data == null) {
            throw new js__$Boot_HaxeError("Data not found")
        }
        data = format_tools_Inflate.run(data);
        var r = 0;
        var w = 0;
        var _g = h.color;
        switch (_g[1]) {
            case 0:
                var alpha = _g[2];
                if (h.colbits != 8) {
                    throw new js__$Boot_HaxeError("Unsupported color mode")
                }
                var width = h.width;
                var stride;
                stride = (alpha ? 2 : 1) * width + 1;
                if (data.length < h.height * stride) {
                    throw new js__$Boot_HaxeError("Not enough data")
                }
                var rinc;
                if (alpha) {
                    rinc = 2
                } else {
                    rinc = 1
                }
                var _g2 = 0;
                var _g1 = h.height;
                while (_g2 < _g1) {
                    var y = _g2++;
                    var f = data.get(r++);
                    switch (f) {
                        case 0:
                            var _g3 = 0;
                            while (_g3 < width) {
                                var x = _g3++;
                                var v = data.b[r];
                                r += rinc;
                                grey.set(w++, v)
                            }
                            break;
                        case 1:
                            var cv = 0;
                            var _g31 = 0;
                            while (_g31 < width) {
                                var x1 = _g31++;
                                cv += data.b[r];
                                r += rinc;
                                grey.set(w++, cv)
                            }
                            break;
                        case 2:
                            var stride1;
                            if (y == 0) {
                                stride1 = 0
                            } else {
                                stride1 = width
                            }
                            var _g32 = 0;
                            while (_g32 < width) {
                                var x2 = _g32++;
                                var v1 = data.b[r] + grey.b[w - stride1];
                                r += rinc;
                                grey.set(w++, v1)
                            }
                            break;
                        case 3:
                            var cv1 = 0;
                            var stride2;
                            if (y == 0) {
                                stride2 = 0
                            } else {
                                stride2 = width
                            }
                            var _g33 = 0;
                            while (_g33 < width) {
                                var x3 = _g33++;
                                cv1 = data.b[r] + (cv1 + grey.b[w - stride2] >> 1) & 255;
                                r += rinc;
                                grey.set(w++, cv1)
                            }
                            break;
                        case 4:
                            var stride3 = width;
                            var cv2 = 0;
                            var _g34 = 0;
                            while (_g34 < width) {
                                var x4 = _g34++;
                                cv2 = format_png_Tools.filter(grey, x4, y, stride3, cv2, w, 1) + data.b[r] & 255;
                                r += rinc;
                                grey.set(w++, cv2)
                            }
                            break;
                        default:
                            throw new js__$Boot_HaxeError("Invalid filter " + f)
                    }
                }
                break;
            default:
                throw new js__$Boot_HaxeError("Unsupported color mode")
        }
        return grey
    };
    format_png_Tools.extract32 = function(d, bytes, flipY) {
        var h = format_png_Tools.getHeader(d);
        var bgra;
        if (bytes == null) {
            bgra = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4))
        } else {
            bgra = bytes
        }
        var data = null;
        var fullData = null;
        var _g_head = d.h;
        var _g_val = null;
        while (_g_head != null) {
            var c;
            c = (function($this) {
                var $r;
                _g_val = _g_head[0];
                _g_head = _g_head[1];
                $r = _g_val;
                return $r
            }(this));
            switch (c[1]) {
                case 2:
                    var b = c[2];
                    if (fullData != null) {
                        fullData.add(b)
                    } else {
                        if (data == null) {
                            data = b
                        } else {
                            fullData = new haxe_io_BytesBuffer();
                            fullData.add(data);
                            fullData.add(b);
                            data = null
                        }
                    }
                    break;
                default:
            }
        }
        if (fullData != null) {
            data = fullData.getBytes()
        }
        if (data == null) {
            throw new js__$Boot_HaxeError("Data not found")
        }
        data = format_tools_Inflate.run(data);
        var r = 0;
        var w = 0;
        var lineDelta = 0;
        if (flipY) {
            lineDelta = -h.width * 8;
            w = (h.height - 1) * (h.width * 4)
        }
        var flipY1;
        if (flipY) {
            flipY1 = -1
        } else {
            flipY1 = 1
        }
        var _g = h.color;
        switch (_g[1]) {
            case 2:
                var pal = format_png_Tools.getPalette(d);
                if (pal == null) {
                    throw new js__$Boot_HaxeError("PNG Palette is missing")
                }
                var alpha = null;
                var _g1_head = d.h;
                var _g1_val = null;
                try {
                    while (_g1_head != null) {
                        var t;
                        t = (function($this) {
                            var $r;
                            _g1_val = _g1_head[0];
                            _g1_head = _g1_head[1];
                            $r = _g1_val;
                            return $r
                        }(this));
                        switch (t[1]) {
                            case 4:
                                switch (t[2]) {
                                    case "tRNS":
                                        var data1 = t[3];
                                        alpha = data1;
                                        throw "__break__";
                                        break;
                                    default:
                                }
                                break;
                            default:
                        }
                    }
                } catch (e) {
                    if (e != "__break__") {
                        throw e
                    }
                }
                if (alpha != null && alpha.length < 1 << h.colbits) {
                    var alpha2 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
                    alpha2.blit(0, alpha, 0, alpha.length);
                    alpha2.fill(alpha.length, alpha2.length - alpha.length, 255);
                    alpha = alpha2
                }
                var width = h.width;
                var stride = Math.ceil(width * h.colbits / 8) + 1;
                if (data.length < h.height * stride) {
                    throw new js__$Boot_HaxeError("Not enough data")
                }
                var rline = h.width * h.colbits >> 3;
                var _g2 = 0;
                var _g1 = h.height;
                while (_g2 < _g1) {
                    var y = _g2++;
                    var f = data.get(r++);
                    if (f == 0) {
                        r += rline;
                        continue
                    }
                    switch (f) {
                        case 1:
                            var c1 = 0;
                            var _g3 = 0;
                            while (_g3 < width) {
                                var x = _g3++;
                                var v = data.b[r];
                                c1 += v;
                                data.set(r++, c1 & 255)
                            }
                            break;
                        case 2:
                            var stride1;
                            if (y == 0) {
                                stride1 = 0
                            } else {
                                stride1 = rline + 1
                            }
                            var _g31 = 0;
                            while (_g31 < width) {
                                var x1 = _g31++;
                                var v1 = data.b[r];
                                data.b[r] = v1 + data.b[r - stride1] & 255;
                                r++
                            }
                            break;
                        case 3:
                            var c2 = 0;
                            var stride2;
                            if (y == 0) {
                                stride2 = 0
                            } else {
                                stride2 = rline + 1
                            }
                            var _g32 = 0;
                            while (_g32 < width) {
                                var x2 = _g32++;
                                var v2 = data.b[r];
                                c2 = v2 + (c2 + data.b[r - stride2] >> 1) & 255;
                                data.set(r++, c2)
                            }
                            break;
                        case 4:
                            var stride3 = rline + 1;
                            var c3 = 0;
                            var _g33 = 0;
                            while (_g33 < width) {
                                var x3 = _g33++;
                                var v3 = data.b[r];
                                c3 = format_png_Tools.filter(data, x3, y, stride3, c3, r, 1) + v3 & 255;
                                data.set(r++, c3)
                            }
                            break;
                        default:
                            throw new js__$Boot_HaxeError("Invalid filter " + f)
                    }
                }
                var r1 = 0;
                if (h.colbits == 8) {
                    var _g21 = 0;
                    var _g11 = h.height;
                    while (_g21 < _g11) {
                        var y1 = _g21++;
                        r1++;
                        var _g4 = 0;
                        var _g34 = h.width;
                        while (_g4 < _g34) {
                            var x4 = _g4++;
                            var c4 = data.get(r1++);
                            bgra.set(w++, pal.b[c4 * 3 + 2]);
                            bgra.set(w++, pal.b[c4 * 3 + 1]);
                            bgra.set(w++, pal.b[c4 * 3]);
                            bgra.set(w++, alpha != null ? alpha.b[c4] : 255)
                        }
                        w += lineDelta
                    }
                } else {
                    if (h.colbits < 8) {
                        var req = h.colbits;
                        var mask = (1 << req) - 1;
                        var _g22 = 0;
                        var _g12 = h.height;
                        while (_g22 < _g12) {
                            var y2 = _g22++;
                            r1++;
                            var bits = 0;
                            var nbits = 0;
                            var v4;
                            var _g41 = 0;
                            var _g35 = h.width;
                            while (_g41 < _g35) {
                                var x5 = _g41++;
                                if (nbits < req) {
                                    bits = bits << 8 | data.get(r1++);
                                    nbits += 8
                                }
                                var c5 = bits >>> nbits - req & mask;
                                nbits -= req;
                                bgra.set(w++, pal.b[c5 * 3 + 2]);
                                bgra.set(w++, pal.b[c5 * 3 + 1]);
                                bgra.set(w++, pal.b[c5 * 3]);
                                bgra.set(w++, alpha != null ? alpha.b[c5] : 255)
                            }
                            w += lineDelta
                        }
                    } else {
                        throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported")
                    }
                }
                break;
            case 0:
                var alpha1 = _g[2];
                if (h.colbits != 8) {
                    throw new js__$Boot_HaxeError("Unsupported color mode")
                }
                var width1 = h.width;
                var stride4;
                stride4 = (alpha1 ? 2 : 1) * width1 + 1;
                if (data.length < h.height * stride4) {
                    throw new js__$Boot_HaxeError("Not enough data")
                }
                var _g23 = 0;
                var _g13 = h.height;
                while (_g23 < _g13) {
                    var y3 = _g23++;
                    var f1 = data.get(r++);
                    switch (f1) {
                        case 0:
                            if (alpha1) {
                                var _g36 = 0;
                                while (_g36 < width1) {
                                    var x6 = _g36++;
                                    var v5 = data.get(r++);
                                    bgra.set(w++, v5);
                                    bgra.set(w++, v5);
                                    bgra.set(w++, v5);
                                    bgra.set(w++, data.get(r++))
                                }
                            } else {
                                var _g37 = 0;
                                while (_g37 < width1) {
                                    var x7 = _g37++;
                                    var v6 = data.get(r++);
                                    bgra.set(w++, v6);
                                    bgra.set(w++, v6);
                                    bgra.set(w++, v6);
                                    bgra.set(w++, 255)
                                }
                            }
                            break;
                        case 1:
                            var cv = 0;
                            var ca = 0;
                            if (alpha1) {
                                var _g38 = 0;
                                while (_g38 < width1) {
                                    var x8 = _g38++;
                                    cv += data.get(r++);
                                    bgra.set(w++, cv);
                                    bgra.set(w++, cv);
                                    bgra.set(w++, cv);
                                    ca += data.get(r++);
                                    bgra.set(w++, ca)
                                }
                            } else {
                                var _g39 = 0;
                                while (_g39 < width1) {
                                    var x9 = _g39++;
                                    cv += data.get(r++);
                                    bgra.set(w++, cv);
                                    bgra.set(w++, cv);
                                    bgra.set(w++, cv);
                                    bgra.set(w++, 255)
                                }
                            }
                            break;
                        case 2:
                            var stride5;
                            if (y3 == 0) {
                                stride5 = 0
                            } else {
                                stride5 = width1 * 4 * flipY1
                            }
                            if (alpha1) {
                                var _g310 = 0;
                                while (_g310 < width1) {
                                    var x10 = _g310++;
                                    var v7 = data.get(r++) + bgra.b[w - stride5];
                                    bgra.set(w++, v7);
                                    bgra.set(w++, v7);
                                    bgra.set(w++, v7);
                                    bgra.set(w++, data.get(r++) + bgra.b[w - stride5])
                                }
                            } else {
                                var _g311 = 0;
                                while (_g311 < width1) {
                                    var x11 = _g311++;
                                    var v8 = data.get(r++) + bgra.b[w - stride5];
                                    bgra.set(w++, v8);
                                    bgra.set(w++, v8);
                                    bgra.set(w++, v8);
                                    bgra.set(w++, 255)
                                }
                            }
                            break;
                        case 3:
                            var cv1 = 0;
                            var ca1 = 0;
                            var stride6;
                            if (y3 == 0) {
                                stride6 = 0
                            } else {
                                stride6 = width1 * 4 * flipY1
                            }
                            if (alpha1) {
                                var _g312 = 0;
                                while (_g312 < width1) {
                                    var x12 = _g312++;
                                    cv1 = data.get(r++) + (cv1 + bgra.b[w - stride6] >> 1) & 255;
                                    bgra.set(w++, cv1);
                                    bgra.set(w++, cv1);
                                    bgra.set(w++, cv1);
                                    ca1 = data.get(r++) + (ca1 + bgra.b[w - stride6] >> 1) & 255;
                                    bgra.set(w++, ca1)
                                }
                            } else {
                                var _g313 = 0;
                                while (_g313 < width1) {
                                    var x13 = _g313++;
                                    cv1 = data.get(r++) + (cv1 + bgra.b[w - stride6] >> 1) & 255;
                                    bgra.set(w++, cv1);
                                    bgra.set(w++, cv1);
                                    bgra.set(w++, cv1);
                                    bgra.set(w++, 255)
                                }
                            }
                            break;
                        case 4:
                            var stride7 = width1 * 4 * flipY1;
                            var cv2 = 0;
                            var ca2 = 0;
                            if (alpha1) {
                                var _g314 = 0;
                                while (_g314 < width1) {
                                    var x14 = _g314++;
                                    cv2 = format_png_Tools.filter(bgra, x14, y3, stride7, cv2, w, null) + data.get(r++) & 255;
                                    bgra.set(w++, cv2);
                                    bgra.set(w++, cv2);
                                    bgra.set(w++, cv2);
                                    ca2 = format_png_Tools.filter(bgra, x14, y3, stride7, ca2, w, null) + data.get(r++) & 255;
                                    bgra.set(w++, ca2)
                                }
                            } else {
                                var _g315 = 0;
                                while (_g315 < width1) {
                                    var x15 = _g315++;
                                    cv2 = format_png_Tools.filter(bgra, x15, y3, stride7, cv2, w, null) + data.get(r++) & 255;
                                    bgra.set(w++, cv2);
                                    bgra.set(w++, cv2);
                                    bgra.set(w++, cv2);
                                    bgra.set(w++, 255)
                                }
                            }
                            break;
                        default:
                            throw new js__$Boot_HaxeError("Invalid filter " + f1)
                    }
                    w += lineDelta
                }
                break;
            case 1:
                var alpha3 = _g[2];
                if (h.colbits != 8) {
                    throw new js__$Boot_HaxeError("Unsupported color mode")
                }
                var width2 = h.width;
                var stride8;
                stride8 = (alpha3 ? 4 : 3) * width2 + 1;
                if (data.length < h.height * stride8) {
                    throw new js__$Boot_HaxeError("Not enough data")
                }
                var _g24 = 0;
                var _g14 = h.height;
                while (_g24 < _g14) {
                    var y4 = _g24++;
                    var f2 = data.get(r++);
                    switch (f2) {
                        case 0:
                            if (alpha3) {
                                var _g316 = 0;
                                while (_g316 < width2) {
                                    var x16 = _g316++;
                                    bgra.set(w++, data.b[r + 2]);
                                    bgra.set(w++, data.b[r + 1]);
                                    bgra.set(w++, data.b[r]);
                                    bgra.set(w++, data.b[r + 3]);
                                    r += 4
                                }
                            } else {
                                var _g317 = 0;
                                while (_g317 < width2) {
                                    var x17 = _g317++;
                                    bgra.set(w++, data.b[r + 2]);
                                    bgra.set(w++, data.b[r + 1]);
                                    bgra.set(w++, data.b[r]);
                                    bgra.set(w++, 255);
                                    r += 3
                                }
                            }
                            break;
                        case 1:
                            var cr = 0;
                            var cg = 0;
                            var cb = 0;
                            var ca3 = 0;
                            if (alpha3) {
                                var _g318 = 0;
                                while (_g318 < width2) {
                                    var x18 = _g318++;
                                    cb += data.b[r + 2];
                                    bgra.set(w++, cb);
                                    cg += data.b[r + 1];
                                    bgra.set(w++, cg);
                                    cr += data.b[r];
                                    bgra.set(w++, cr);
                                    ca3 += data.b[r + 3];
                                    bgra.set(w++, ca3);
                                    r += 4
                                }
                            } else {
                                var _g319 = 0;
                                while (_g319 < width2) {
                                    var x19 = _g319++;
                                    cb += data.b[r + 2];
                                    bgra.set(w++, cb);
                                    cg += data.b[r + 1];
                                    bgra.set(w++, cg);
                                    cr += data.b[r];
                                    bgra.set(w++, cr);
                                    bgra.set(w++, 255);
                                    r += 3
                                }
                            }
                            break;
                        case 2:
                            var stride9;
                            if (y4 == 0) {
                                stride9 = 0
                            } else {
                                stride9 = width2 * 4 * flipY1
                            }
                            if (alpha3) {
                                var _g320 = 0;
                                while (_g320 < width2) {
                                    var x20 = _g320++;
                                    bgra.b[w] = data.b[r + 2] + bgra.b[w - stride9] & 255;
                                    w++;
                                    bgra.b[w] = data.b[r + 1] + bgra.b[w - stride9] & 255;
                                    w++;
                                    bgra.b[w] = data.b[r] + bgra.b[w - stride9] & 255;
                                    w++;
                                    bgra.b[w] = data.b[r + 3] + bgra.b[w - stride9] & 255;
                                    w++;
                                    r += 4
                                }
                            } else {
                                var _g321 = 0;
                                while (_g321 < width2) {
                                    var x21 = _g321++;
                                    bgra.b[w] = data.b[r + 2] + bgra.b[w - stride9] & 255;
                                    w++;
                                    bgra.b[w] = data.b[r + 1] + bgra.b[w - stride9] & 255;
                                    w++;
                                    bgra.b[w] = data.b[r] + bgra.b[w - stride9] & 255;
                                    w++;
                                    bgra.set(w++, 255);
                                    r += 3
                                }
                            }
                            break;
                        case 3:
                            var cr1 = 0;
                            var cg1 = 0;
                            var cb1 = 0;
                            var ca4 = 0;
                            var stride10;
                            if (y4 == 0) {
                                stride10 = 0
                            } else {
                                stride10 = width2 * 4 * flipY1
                            }
                            if (alpha3) {
                                var _g322 = 0;
                                while (_g322 < width2) {
                                    var x22 = _g322++;
                                    cb1 = data.b[r + 2] + (cb1 + bgra.b[w - stride10] >> 1) & 255;
                                    bgra.set(w++, cb1);
                                    cg1 = data.b[r + 1] + (cg1 + bgra.b[w - stride10] >> 1) & 255;
                                    bgra.set(w++, cg1);
                                    cr1 = data.b[r] + (cr1 + bgra.b[w - stride10] >> 1) & 255;
                                    bgra.set(w++, cr1);
                                    ca4 = data.b[r + 3] + (ca4 + bgra.b[w - stride10] >> 1) & 255;
                                    bgra.set(w++, ca4);
                                    r += 4
                                }
                            } else {
                                var _g323 = 0;
                                while (_g323 < width2) {
                                    var x23 = _g323++;
                                    cb1 = data.b[r + 2] + (cb1 + bgra.b[w - stride10] >> 1) & 255;
                                    bgra.set(w++, cb1);
                                    cg1 = data.b[r + 1] + (cg1 + bgra.b[w - stride10] >> 1) & 255;
                                    bgra.set(w++, cg1);
                                    cr1 = data.b[r] + (cr1 + bgra.b[w - stride10] >> 1) & 255;
                                    bgra.set(w++, cr1);
                                    bgra.set(w++, 255);
                                    r += 3
                                }
                            }
                            break;
                        case 4:
                            var stride11 = width2 * 4 * flipY1;
                            var cr2 = 0;
                            var cg2 = 0;
                            var cb2 = 0;
                            var ca5 = 0;
                            if (alpha3) {
                                var _g324 = 0;
                                while (_g324 < width2) {
                                    var x24 = _g324++;
                                    cb2 = format_png_Tools.filter(bgra, x24, y4, stride11, cb2, w, null) + data.b[r + 2] & 255;
                                    bgra.set(w++, cb2);
                                    cg2 = format_png_Tools.filter(bgra, x24, y4, stride11, cg2, w, null) + data.b[r + 1] & 255;
                                    bgra.set(w++, cg2);
                                    cr2 = format_png_Tools.filter(bgra, x24, y4, stride11, cr2, w, null) + data.b[r] & 255;
                                    bgra.set(w++, cr2);
                                    ca5 = format_png_Tools.filter(bgra, x24, y4, stride11, ca5, w, null) + data.b[r + 3] & 255;
                                    bgra.set(w++, ca5);
                                    r += 4
                                }
                            } else {
                                var _g325 = 0;
                                while (_g325 < width2) {
                                    var x25 = _g325++;
                                    cb2 = format_png_Tools.filter(bgra, x25, y4, stride11, cb2, w, null) + data.b[r + 2] & 255;
                                    bgra.set(w++, cb2);
                                    cg2 = format_png_Tools.filter(bgra, x25, y4, stride11, cg2, w, null) + data.b[r + 1] & 255;
                                    bgra.set(w++, cg2);
                                    cr2 = format_png_Tools.filter(bgra, x25, y4, stride11, cr2, w, null) + data.b[r] & 255;
                                    bgra.set(w++, cr2);
                                    bgra.set(w++, 255);
                                    r += 3
                                }
                            }
                            break;
                        default:
                            throw new js__$Boot_HaxeError("Invalid filter " + f2)
                    }
                    w += lineDelta
                }
                break
        }
        return bgra
    };
    format_png_Tools.buildGrey = function(width, height, data) {
        var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
        var w = 0;
        var r = 0;
        var _g = 0;
        while (_g < height) {
            var y = _g++;
            rgb.set(w++, 0);
            var _g1 = 0;
            while (_g1 < width) {
                var x = _g1++;
                rgb.set(w++, data.get(r++))
            }
        }
        var l = new List();
        l.add(format_png_Chunk.CHeader({
            width: width,
            height: height,
            colbits: 8,
            color: format_png_Color.ColGrey(false),
            interlaced: false
        }));
        l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb)));
        l.add(format_png_Chunk.CEnd);
        return l
    };
    format_png_Tools.buildRGB = function(width, height, data) {
        var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height * 3 + height));
        var w = 0;
        var r = 0;
        var _g = 0;
        while (_g < height) {
            var y = _g++;
            rgb.set(w++, 0);
            var _g1 = 0;
            while (_g1 < width) {
                var x = _g1++;
                rgb.set(w++, data.b[r + 2]);
                rgb.set(w++, data.b[r + 1]);
                rgb.set(w++, data.b[r]);
                r += 3
            }
        }
        var l = new List();
        l.add(format_png_Chunk.CHeader({
            width: width,
            height: height,
            colbits: 8,
            color: format_png_Color.ColTrue(false),
            interlaced: false
        }));
        l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb)));
        l.add(format_png_Chunk.CEnd);
        return l
    };
    format_png_Tools.build32ARGB = function(width, height, data) {
        var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
        var w = 0;
        var r = 0;
        var _g = 0;
        while (_g < height) {
            var y = _g++;
            rgba.set(w++, 0);
            var _g1 = 0;
            while (_g1 < width) {
                var x = _g1++;
                rgba.set(w++, data.b[r + 1]);
                rgba.set(w++, data.b[r + 2]);
                rgba.set(w++, data.b[r + 3]);
                rgba.set(w++, data.b[r]);
                r += 4
            }
        }
        var l = new List();
        l.add(format_png_Chunk.CHeader({
            width: width,
            height: height,
            colbits: 8,
            color: format_png_Color.ColTrue(true),
            interlaced: false
        }));
        l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba)));
        l.add(format_png_Chunk.CEnd);
        return l
    };
    format_png_Tools.build32BGRA = function(width, height, data) {
        var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
        var w = 0;
        var r = 0;
        var _g = 0;
        while (_g < height) {
            var y = _g++;
            rgba.set(w++, 0);
            var _g1 = 0;
            while (_g1 < width) {
                var x = _g1++;
                rgba.set(w++, data.b[r + 2]);
                rgba.set(w++, data.b[r + 1]);
                rgba.set(w++, data.b[r]);
                rgba.set(w++, data.b[r + 3]);
                r += 4
            }
        }
        var l = new List();
        l.add(format_png_Chunk.CHeader({
            width: width,
            height: height,
            colbits: 8,
            color: format_png_Color.ColTrue(true),
            interlaced: false
        }));
        l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba)));
        l.add(format_png_Chunk.CEnd);
        return l
    };
    var format_png_Writer = function(o) {
        this.o = o;
        o.set_bigEndian(true)
    };
    $hxClasses["format.png.Writer"] = format_png_Writer;
    format_png_Writer.__name__ = ["format", "png", "Writer"];
    format_png_Writer.prototype = {
        o: null,
        write: function(png) {
            var _g = 0;
            var _g1 = [137, 80, 78, 71, 13, 10, 26, 10];
            while (_g < _g1.length) {
                var b = _g1[_g];
                ++_g;
                this.o.writeByte(b)
            }
            var _g_head = png.h;
            var _g_val = null;
            while (_g_head != null) {
                var c;
                c = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                switch (c[1]) {
                    case 1:
                        var h = c[2];
                        var b1 = new haxe_io_BytesOutput();
                        b1.set_bigEndian(true);
                        b1.writeInt32(h.width);
                        b1.writeInt32(h.height);
                        b1.writeByte(h.colbits);
                        b1.writeByte((function($this) {
                            var $r;
                            var _g2 = h.color;
                            $r = (function($this) {
                                var $r;
                                switch (_g2[1]) {
                                    case 0:
                                        $r = (function($this) {
                                            var $r;
                                            var alpha = _g2[2];
                                            $r = alpha ? 4 : 0;
                                            return $r
                                        }($this));
                                        break;
                                    case 1:
                                        $r = (function($this) {
                                            var $r;
                                            var alpha1 = _g2[2];
                                            $r = alpha1 ? 6 : 2;
                                            return $r
                                        }($this));
                                        break;
                                    case 2:
                                        $r = 3;
                                        break
                                }
                                return $r
                            }($this));
                            return $r
                        }(this)));
                        b1.writeByte(0);
                        b1.writeByte(0);
                        b1.writeByte(h.interlaced ? 1 : 0);
                        this.writeChunk("IHDR", b1.getBytes());
                        break;
                    case 0:
                        this.writeChunk("IEND", new haxe_io_Bytes(new ArrayBuffer(0)));
                        break;
                    case 2:
                        var d = c[2];
                        this.writeChunk("IDAT", d);
                        break;
                    case 3:
                        var b2 = c[2];
                        this.writeChunk("PLTE", b2);
                        break;
                    case 4:
                        var data = c[3];
                        var id = c[2];
                        this.writeChunk(id, data);
                        break
                }
            }
        },
        writeChunk: function(id, data) {
            this.o.writeInt32(data.length);
            this.o.writeString(id);
            this.o.write(data);
            var crc = new haxe_crypto_Crc32();
            var _g = 0;
            while (_g < 4) {
                var i = _g++;
                crc["byte"](HxOverrides.cca(id, i))
            }
            crc.update(data, 0, data.length);
            this.o.writeInt32(crc.get())
        },
        __class__: format_png_Writer
    };
    var format_tools_Adler32 = function() {
        this.a1 = 1;
        this.a2 = 0
    };
    $hxClasses["format.tools.Adler32"] = format_tools_Adler32;
    format_tools_Adler32.__name__ = ["format", "tools", "Adler32"];
    format_tools_Adler32.read = function(i) {
        var a = new format_tools_Adler32();
        var a2a = i.readByte();
        var a2b = i.readByte();
        var a1a = i.readByte();
        var a1b = i.readByte();
        a.a1 = a1a << 8 | a1b;
        a.a2 = a2a << 8 | a2b;
        return a
    };
    format_tools_Adler32.prototype = {
        a1: null,
        a2: null,
        update: function(b, pos, len) {
            var a1 = this.a1;
            var a2 = this.a2;
            var _g1 = pos;
            var _g = pos + len;
            while (_g1 < _g) {
                var p = _g1++;
                var c = b.b[p];
                a1 = (a1 + c) % 65521;
                a2 = (a2 + a1) % 65521
            }
            this.a1 = a1;
            this.a2 = a2
        },
        equals: function(a) {
            return a.a1 == this.a1 && a.a2 == this.a2
        },
        __class__: format_tools_Adler32
    };
    var format_tools_Deflate = function() {};
    $hxClasses["format.tools.Deflate"] = format_tools_Deflate;
    format_tools_Deflate.__name__ = ["format", "tools", "Deflate"];
    format_tools_Deflate.run = function(b) {
        throw new js__$Boot_HaxeError("Deflate is not supported on this platform");
        return null
    };
    var format_tools_Huffman = $hxClasses["format.tools.Huffman"] = {
        __ename__: ["format", "tools", "Huffman"],
        __constructs__: ["Found", "NeedBit", "NeedBits"]
    };
    format_tools_Huffman.Found = function(i) {
        var $x = ["Found", 0, i];
        $x.__enum__ = format_tools_Huffman;
        $x.toString = $estr;
        return $x
    };
    format_tools_Huffman.NeedBit = function(left, right) {
        var $x = ["NeedBit", 1, left, right];
        $x.__enum__ = format_tools_Huffman;
        $x.toString = $estr;
        return $x
    };
    format_tools_Huffman.NeedBits = function(n, table) {
        var $x = ["NeedBits", 2, n, table];
        $x.__enum__ = format_tools_Huffman;
        $x.toString = $estr;
        return $x
    };
    var format_tools_HuffTools = function() {};
    $hxClasses["format.tools.HuffTools"] = format_tools_HuffTools;
    format_tools_HuffTools.__name__ = ["format", "tools", "HuffTools"];
    format_tools_HuffTools.prototype = {
        treeDepth: function(t) {
            switch (t[1]) {
                case 0:
                    return 0;
                case 2:
                    throw new js__$Boot_HaxeError("assert");
                    break;
                case 1:
                    var b = t[3];
                    var a = t[2];
                    var da = this.treeDepth(a);
                    var db = this.treeDepth(b);
                    return 1 + (da < db ? da : db)
            }
        },
        treeCompress: function(t) {
            var d = this.treeDepth(t);
            if (d == 0) {
                return t
            }
            if (d == 1) {
                switch (t[1]) {
                    case 1:
                        var b = t[3];
                        var a = t[2];
                        return format_tools_Huffman.NeedBit(this.treeCompress(a), this.treeCompress(b));
                    default:
                        throw new js__$Boot_HaxeError("assert")
                }
            }
            var size = 1 << d;
            var table = [];
            var _g = 0;
            while (_g < size) {
                var i = _g++;
                table.push(format_tools_Huffman.Found(-1))
            }
            this.treeWalk(table, 0, 0, d, t);
            return format_tools_Huffman.NeedBits(d, table)
        },
        treeWalk: function(table, p, cd, d, t) {
            switch (t[1]) {
                case 1:
                    var b = t[3];
                    var a = t[2];
                    if (d > 0) {
                        this.treeWalk(table, p, cd + 1, d - 1, a);
                        this.treeWalk(table, p | 1 << cd, cd + 1, d - 1, b)
                    } else {
                        table[p] = this.treeCompress(t)
                    }
                    break;
                default:
                    table[p] = this.treeCompress(t)
            }
        },
        treeMake: function(bits, maxbits, v, len) {
            if (len > maxbits) {
                throw new js__$Boot_HaxeError("Invalid huffman")
            }
            var idx = v << 5 | len;
            if (bits.h.hasOwnProperty(idx)) {
                return format_tools_Huffman.Found(bits.h[idx])
            }
            v <<= 1;
            len += 1;
            return format_tools_Huffman.NeedBit(this.treeMake(bits, maxbits, v, len), this.treeMake(bits, maxbits, v | 1, len))
        },
        make: function(lengths, pos, nlengths, maxbits) {
            var counts = [];
            var tmp = [];
            if (maxbits > 32) {
                throw new js__$Boot_HaxeError("Invalid huffman")
            }
            var _g = 0;
            while (_g < maxbits) {
                var i = _g++;
                counts.push(0);
                tmp.push(0)
            }
            var _g1 = 0;
            while (_g1 < nlengths) {
                var i1 = _g1++;
                var p = lengths[i1 + pos];
                if (p >= maxbits) {
                    throw new js__$Boot_HaxeError("Invalid huffman")
                }
                counts[p]++
            }
            var code = 0;
            var _g11 = 1;
            var _g2 = maxbits - 1;
            while (_g11 < _g2) {
                var i2 = _g11++;
                code = code + counts[i2] << 1;
                tmp[i2] = code
            }
            var bits = new haxe_ds_IntMap();
            var _g3 = 0;
            while (_g3 < nlengths) {
                var i3 = _g3++;
                var l = lengths[i3 + pos];
                if (l != 0) {
                    var n = tmp[l - 1];
                    tmp[l - 1] = n + 1;
                    bits.h[n << 5 | l] = i3
                }
            }
            return this.treeCompress(format_tools_Huffman.NeedBit(this.treeMake(bits, maxbits, 0, 1), this.treeMake(bits, maxbits, 1, 1)))
        },
        __class__: format_tools_HuffTools
    };
    var format_tools_Inflate = function() {};
    $hxClasses["format.tools.Inflate"] = format_tools_Inflate;
    format_tools_Inflate.__name__ = ["format", "tools", "Inflate"];
    format_tools_Inflate.run = function(bytes) {
        return format_tools_InflateImpl.run(new haxe_io_BytesInput(bytes))
    };
    var format_tools__$InflateImpl_Window = function(hasCrc) {
        this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
        this.pos = 0;
        if (hasCrc) {
            this.crc = new format_tools_Adler32()
        }
    };
    $hxClasses["format.tools._InflateImpl.Window"] = format_tools__$InflateImpl_Window;
    format_tools__$InflateImpl_Window.__name__ = ["format", "tools", "_InflateImpl", "Window"];
    format_tools__$InflateImpl_Window.prototype = {
        buffer: null,
        pos: null,
        crc: null,
        slide: function() {
            if (this.crc != null) {
                this.crc.update(this.buffer, 0, 32768)
            }
            var b = new haxe_io_Bytes(new ArrayBuffer(65536));
            this.pos -= 32768;
            b.blit(0, this.buffer, 32768, this.pos);
            this.buffer = b
        },
        addBytes: function(b, p, len) {
            if (this.pos + len > 65536) {
                this.slide()
            }
            this.buffer.blit(this.pos, b, p, len);
            this.pos += len
        },
        addByte: function(c) {
            if (this.pos == 65536) {
                this.slide()
            }
            this.buffer.b[this.pos] = c & 255;
            this.pos++
        },
        getLastChar: function() {
            return this.buffer.b[this.pos - 1]
        },
        available: function() {
            return this.pos
        },
        checksum: function() {
            if (this.crc != null) {
                this.crc.update(this.buffer, 0, this.pos)
            }
            return this.crc
        },
        __class__: format_tools__$InflateImpl_Window
    };
    var format_tools__$InflateImpl_State = $hxClasses["format.tools._InflateImpl.State"] = {
        __ename__: ["format", "tools", "_InflateImpl", "State"],
        __constructs__: ["Head", "Block", "CData", "Flat", "Crc", "Dist", "DistOne", "Done"]
    };
    format_tools__$InflateImpl_State.Head = ["Head", 0];
    format_tools__$InflateImpl_State.Head.toString = $estr;
    format_tools__$InflateImpl_State.Head.__enum__ = format_tools__$InflateImpl_State;
    format_tools__$InflateImpl_State.Block = ["Block", 1];
    format_tools__$InflateImpl_State.Block.toString = $estr;
    format_tools__$InflateImpl_State.Block.__enum__ = format_tools__$InflateImpl_State;
    format_tools__$InflateImpl_State.CData = ["CData", 2];
    format_tools__$InflateImpl_State.CData.toString = $estr;
    format_tools__$InflateImpl_State.CData.__enum__ = format_tools__$InflateImpl_State;
    format_tools__$InflateImpl_State.Flat = ["Flat", 3];
    format_tools__$InflateImpl_State.Flat.toString = $estr;
    format_tools__$InflateImpl_State.Flat.__enum__ = format_tools__$InflateImpl_State;
    format_tools__$InflateImpl_State.Crc = ["Crc", 4];
    format_tools__$InflateImpl_State.Crc.toString = $estr;
    format_tools__$InflateImpl_State.Crc.__enum__ = format_tools__$InflateImpl_State;
    format_tools__$InflateImpl_State.Dist = ["Dist", 5];
    format_tools__$InflateImpl_State.Dist.toString = $estr;
    format_tools__$InflateImpl_State.Dist.__enum__ = format_tools__$InflateImpl_State;
    format_tools__$InflateImpl_State.DistOne = ["DistOne", 6];
    format_tools__$InflateImpl_State.DistOne.toString = $estr;
    format_tools__$InflateImpl_State.DistOne.__enum__ = format_tools__$InflateImpl_State;
    format_tools__$InflateImpl_State.Done = ["Done", 7];
    format_tools__$InflateImpl_State.Done.toString = $estr;
    format_tools__$InflateImpl_State.Done.__enum__ = format_tools__$InflateImpl_State;
    var format_tools_InflateImpl = function(i, header, crc) {
        if (crc == null) {
            crc = true
        }
        if (header == null) {
            header = true
        }
        this["final"] = false;
        this.htools = new format_tools_HuffTools();
        this.huffman = this.buildFixedHuffman();
        this.huffdist = null;
        this.len = 0;
        this.dist = 0;
        if (header) {
            this.state = format_tools__$InflateImpl_State.Head
        } else {
            this.state = format_tools__$InflateImpl_State.Block
        }
        this.input = i;
        this.bits = 0;
        this.nbits = 0;
        this.needed = 0;
        this.output = null;
        this.outpos = 0;
        this.lengths = [];
        var _g = 0;
        while (_g < 19) {
            var i1 = _g++;
            this.lengths.push(-1)
        }
        this.window = new format_tools__$InflateImpl_Window(crc)
    };
    $hxClasses["format.tools.InflateImpl"] = format_tools_InflateImpl;
    format_tools_InflateImpl.__name__ = ["format", "tools", "InflateImpl"];
    format_tools_InflateImpl.run = function(i, bufsize) {
        if (bufsize == null) {
            bufsize = 65536
        }
        var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
        var output = new haxe_io_BytesBuffer();
        var inflate = new format_tools_InflateImpl(i);
        while (true) {
            var len = inflate.readBytes(buf, 0, bufsize);
            output.addBytes(buf, 0, len);
            if (len < bufsize) {
                break
            }
        }
        return output.getBytes()
    };
    format_tools_InflateImpl.prototype = {
        nbits: null,
        bits: null,
        state: null,
        "final": null,
        huffman: null,
        huffdist: null,
        htools: null,
        len: null,
        dist: null,
        needed: null,
        output: null,
        outpos: null,
        input: null,
        lengths: null,
        window: null,
        buildFixedHuffman: function() {
            if (format_tools_InflateImpl.FIXED_HUFFMAN != null) {
                return format_tools_InflateImpl.FIXED_HUFFMAN
            }
            var a = [];
            var _g = 0;
            while (_g < 288) {
                var n = _g++;
                a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8)
            }
            format_tools_InflateImpl.FIXED_HUFFMAN = this.htools.make(a, 0, 288, 10);
            return format_tools_InflateImpl.FIXED_HUFFMAN
        },
        readBytes: function(b, pos, len) {
            this.needed = len;
            this.outpos = pos;
            this.output = b;
            if (len > 0) {
                while (this.inflateLoop()) {}
            }
            return len - this.needed
        },
        getBits: function(n) {
            while (this.nbits < n) {
                this.bits |= this.input.readByte() << this.nbits;
                this.nbits += 8
            }
            var b = this.bits & (1 << n) - 1;
            this.nbits -= n;
            this.bits >>= n;
            return b
        },
        getBit: function() {
            if (this.nbits == 0) {
                this.nbits = 8;
                this.bits = this.input.readByte()
            }
            var b = (this.bits & 1) == 1;
            this.nbits--;
            this.bits >>= 1;
            return b
        },
        getRevBits: function(n) {
            if (n == 0) {
                return 0
            } else {
                if (this.getBit()) {
                    return 1 << n - 1 | this.getRevBits(n - 1)
                } else {
                    return this.getRevBits(n - 1)
                }
            }
        },
        resetBits: function() {
            this.bits = 0;
            this.nbits = 0
        },
        addBytes: function(b, p, len) {
            this.window.addBytes(b, p, len);
            this.output.blit(this.outpos, b, p, len);
            this.needed -= len;
            this.outpos += len
        },
        addByte: function(b) {
            this.window.addByte(b);
            this.output.b[this.outpos] = b & 255;
            this.needed--;
            this.outpos++
        },
        addDistOne: function(n) {
            var c = this.window.getLastChar();
            var _g = 0;
            while (_g < n) {
                var i = _g++;
                this.addByte(c)
            }
        },
        addDist: function(d, len) {
            this.addBytes(this.window.buffer, this.window.pos - d, len)
        },
        applyHuffman: function(h) {
            switch (h[1]) {
                case 0:
                    var n = h[2];
                    return n;
                case 1:
                    var b = h[3];
                    var a = h[2];
                    return this.applyHuffman(this.getBit() ? b : a);
                case 2:
                    var tbl = h[3];
                    var n1 = h[2];
                    return this.applyHuffman(tbl[this.getBits(n1)])
            }
        },
        inflateLengths: function(a, max) {
            var i = 0;
            var prev = 0;
            while (i < max) {
                var n = this.applyHuffman(this.huffman);
                switch (n) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                        prev = n;
                        a[i] = n;
                        i++;
                        break;
                    case 16:
                        var end = i + 3 + this.getBits(2);
                        if (end > max) {
                            throw new js__$Boot_HaxeError("Invalid data")
                        }
                        while (i < end) {
                            a[i] = prev;
                            i++
                        }
                        break;
                    case 17:
                        i += 3 + this.getBits(3);
                        if (i > max) {
                            throw new js__$Boot_HaxeError("Invalid data")
                        }
                        break;
                    case 18:
                        i += 11 + this.getBits(7);
                        if (i > max) {
                            throw new js__$Boot_HaxeError("Invalid data")
                        }
                        break;
                    default:
                        throw new js__$Boot_HaxeError("Invalid data")
                }
            }
        },
        inflateLoop: function() {
            var _g = this.state;
            switch (_g[1]) {
                case 0:
                    var cmf = this.input.readByte();
                    var cm = cmf & 15;
                    var cinfo = cmf >> 4;
                    if (cm != 8) {
                        throw new js__$Boot_HaxeError("Invalid data")
                    }
                    var flg = this.input.readByte();
                    var fdict = (flg & 32) != 0;
                    if (((cmf << 8) + flg) % 31 != 0) {
                        throw new js__$Boot_HaxeError("Invalid data")
                    }
                    if (fdict) {
                        throw new js__$Boot_HaxeError("Unsupported dictionary")
                    }
                    this.state = format_tools__$InflateImpl_State.Block;
                    return true;
                case 4:
                    var calc = this.window.checksum();
                    if (calc == null) {
                        this.state = format_tools__$InflateImpl_State.Done;
                        return true
                    }
                    var crc = format_tools_Adler32.read(this.input);
                    if (!calc.equals(crc)) {
                        throw new js__$Boot_HaxeError("Invalid CRC")
                    }
                    this.state = format_tools__$InflateImpl_State.Done;
                    return true;
                case 7:
                    return false;
                case 1:
                    this["final"] = this.getBit();
                    var _g1 = this.getBits(2);
                    switch (_g1) {
                        case 0:
                            this.len = this.input.readUInt16();
                            var nlen = this.input.readUInt16();
                            if (nlen != 65535 - this.len) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            this.state = format_tools__$InflateImpl_State.Flat;
                            var r = this.inflateLoop();
                            this.resetBits();
                            return r;
                        case 1:
                            this.huffman = this.buildFixedHuffman();
                            this.huffdist = null;
                            this.state = format_tools__$InflateImpl_State.CData;
                            return true;
                        case 2:
                            var hlit = this.getBits(5) + 257;
                            var hdist = this.getBits(5) + 1;
                            var hclen = this.getBits(4) + 4;
                            var _g2 = 0;
                            while (_g2 < hclen) {
                                var i = _g2++;
                                this.lengths[format_tools_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3)
                            }
                            var _g21 = hclen;
                            while (_g21 < 19) {
                                var i1 = _g21++;
                                this.lengths[format_tools_InflateImpl.CODE_LENGTHS_POS[i1]] = 0
                            }
                            this.huffman = this.htools.make(this.lengths, 0, 19, 8);
                            var lengths = [];
                            var _g3 = 0;
                            var _g22 = hlit + hdist;
                            while (_g3 < _g22) {
                                var i2 = _g3++;
                                lengths.push(0)
                            }
                            this.inflateLengths(lengths, hlit + hdist);
                            this.huffdist = this.htools.make(lengths, hlit, hdist, 16);
                            this.huffman = this.htools.make(lengths, 0, hlit, 16);
                            this.state = format_tools__$InflateImpl_State.CData;
                            return true;
                        default:
                            throw new js__$Boot_HaxeError("Invalid data")
                    }
                    break;
                case 3:
                    var rlen;
                    if (this.len < this.needed) {
                        rlen = this.len
                    } else {
                        rlen = this.needed
                    }
                    var bytes = this.input.read(rlen);
                    this.len -= rlen;
                    this.addBytes(bytes, 0, rlen);
                    if (this.len == 0) {
                        if (this["final"]) {
                            this.state = format_tools__$InflateImpl_State.Crc
                        } else {
                            this.state = format_tools__$InflateImpl_State.Block
                        }
                    }
                    return this.needed > 0;
                case 6:
                    var rlen1;
                    if (this.len < this.needed) {
                        rlen1 = this.len
                    } else {
                        rlen1 = this.needed
                    }
                    this.addDistOne(rlen1);
                    this.len -= rlen1;
                    if (this.len == 0) {
                        this.state = format_tools__$InflateImpl_State.CData
                    }
                    return this.needed > 0;
                case 5:
                    while (this.len > 0 && this.needed > 0) {
                        var rdist;
                        if (this.len < this.dist) {
                            rdist = this.len
                        } else {
                            rdist = this.dist
                        }
                        var rlen2;
                        if (this.needed < rdist) {
                            rlen2 = this.needed
                        } else {
                            rlen2 = rdist
                        }
                        this.addDist(this.dist, rlen2);
                        this.len -= rlen2
                    }
                    if (this.len == 0) {
                        this.state = format_tools__$InflateImpl_State.CData
                    }
                    return this.needed > 0;
                case 2:
                    var n = this.applyHuffman(this.huffman);
                    if (n < 256) {
                        this.addByte(n);
                        return this.needed > 0
                    } else {
                        if (n == 256) {
                            if (this["final"]) {
                                this.state = format_tools__$InflateImpl_State.Crc
                            } else {
                                this.state = format_tools__$InflateImpl_State.Block
                            }
                            return true
                        } else {
                            n -= 257;
                            var extra_bits = format_tools_InflateImpl.LEN_EXTRA_BITS_TBL[n];
                            if (extra_bits == -1) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            this.len = format_tools_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
                            var dist_code;
                            if (this.huffdist == null) {
                                dist_code = this.getRevBits(5)
                            } else {
                                dist_code = this.applyHuffman(this.huffdist)
                            }
                            extra_bits = format_tools_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
                            if (extra_bits == -1) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            this.dist = format_tools_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
                            if (this.dist > this.window.available()) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            if (this.dist == 1) {
                                this.state = format_tools__$InflateImpl_State.DistOne
                            } else {
                                this.state = format_tools__$InflateImpl_State.Dist
                            }
                            return true
                        }
                    }
                    break
            }
        },
        __class__: format_tools_InflateImpl
    };
    var gamepad_LocalGamepad = function() {
        this.connected = false;
        this.buttons = [];
        this.axes = [];
        this.timestamp = 0
    };
    $hxClasses["gamepad.LocalGamepad"] = gamepad_LocalGamepad;
    gamepad_LocalGamepad.__name__ = ["gamepad", "LocalGamepad"];
    gamepad_LocalGamepad.fromJSGamepad = function(gamepad1) {
        var newGamepad = new gamepad_LocalGamepad();
        newGamepad.timestamp = gamepad1.timestamp;
        newGamepad.connected = gamepad1.connected;
        var _g1 = 0;
        var _g = gamepad1.buttons.length;
        while (_g1 < _g) {
            var i = _g1++;
            newGamepad.buttons.push(gamepad_LocalGamepad.normalizeJSButton(gamepad1.buttons[i]))
        }
        var _g11 = 0;
        var _g2 = gamepad1.axes.length;
        while (_g11 < _g2) {
            var i1 = _g11++;
            newGamepad.axes.push(gamepad1.axes[i1])
        }
        return newGamepad
    };
    gamepad_LocalGamepad.normalizeJSButton = function(button) {
        if ("pressed" in button) {
            return {
                pressed: button.pressed,
                value: button.value
            }
        } else {
            return {
                pressed: button == 1,
                value: button
            }
        }
    };
    gamepad_LocalGamepad.prototype = {
        connected: null,
        buttons: null,
        axes: null,
        timestamp: null,
        __class__: gamepad_LocalGamepad
    };
    var gamepad_HTML5GamepadManager = function() {};
    $hxClasses["gamepad.HTML5GamepadManager"] = gamepad_HTML5GamepadManager;
    gamepad_HTML5GamepadManager.__name__ = ["gamepad", "HTML5GamepadManager"];
    gamepad_HTML5GamepadManager.init = function() {
        gamepad_HTML5GamepadManager.hasGamepadEvents = "GamepadEvent" in window;
        gamepad_HTML5GamepadManager._gamepads = [];
        if (gamepad_HTML5GamepadManager.hasGamepadEvents) {
            window.addEventListener("gamepadconnected", gamepad_HTML5GamepadManager.handleGamepadEvent, false);
            window.addEventListener("gamepaddisconnected", gamepad_HTML5GamepadManager.handleGamepadEvent, false)
        }
    };
    gamepad_HTML5GamepadManager.update = function() {
        var gamepads = gamepad_HTML5GamepadManager.getGamepads();
        var _g = 0;
        while (_g < gamepads.length) {
            var gamepad1 = gamepads[_g];
            ++_g;
            if (gamepad1 != null) {
                gamepad_HTML5GamepadManager.addGamepad(gamepad1);
                gamepad_HTML5GamepadManager.updateGamepad(gamepad1)
            }
        }
    };
    gamepad_HTML5GamepadManager.updateGamepad = function(gamepad1) {
        if (!lime_ui_Gamepad.devices.h.hasOwnProperty(gamepad1.index)) {
            return
        }
        var limeGamepad = lime_ui_Gamepad.devices.h[gamepad1.index];
        var localGamepad = gamepad_HTML5GamepadManager._gamepads[gamepad1.index];
        var _g1 = 0;
        var _g = gamepad1.buttons.length;
        while (_g1 < _g) {
            var idx = _g1++;
            if (gamepad_HTML5GamepadManager.isButtonPressed(gamepad1.buttons[idx])) {
                if (!localGamepad.buttons[idx].pressed) {
                    limeGamepad.onButtonDown.dispatch(idx)
                }
            } else {
                if (localGamepad.buttons[idx].pressed) {
                    limeGamepad.onButtonUp.dispatch(idx)
                }
            }
            localGamepad.buttons[idx] = gamepad_LocalGamepad.normalizeJSButton(gamepad1.buttons[idx])
        }
        var _g11 = 0;
        var _g2 = gamepad1.axes.length;
        while (_g11 < _g2) {
            var idx1 = _g11++;
            if (Math.abs(gamepad1.axes[idx1] - localGamepad.axes[idx1]) > 0.00002) {
                limeGamepad.onAxisMove.dispatch(idx1, gamepad1.axes[idx1])
            }
            localGamepad.axes[idx1] = gamepad1.axes[idx1]
        }
    };
    gamepad_HTML5GamepadManager.isButtonPressed = function(button) {
        if ("pressed" in button) {
            return button.pressed
        } else {
            return button == 1
        }
    };
    gamepad_HTML5GamepadManager.getButtonValue = function(button) {
        if ("value" in button) {
            return button.value
        } else {
            return button
        }
    };
    gamepad_HTML5GamepadManager.getGamepads = function() {
        if (navigator.getGamepads) {
            return navigator.getGamepads()
        } else {
            if (navigator.webkitGetGamepads) {
                return navigator.webkitGetGamepads()
            } else {
                return []
            }
        }
    };
    gamepad_HTML5GamepadManager.handleGamepadEvent = function(event) {
        var _g = event.type;
        switch (_g) {
            case "gamepadconnected":
                gamepad_HTML5GamepadManager.addGamepad(event.gamepad);
                break;
            case "gamepaddisconnected":
                gamepad_HTML5GamepadManager.removeGamepad(event.gamepad);
                break
        }
    };
    gamepad_HTML5GamepadManager.addGamepad = function(gm) {
        if (!lime_ui_Gamepad.devices.h.hasOwnProperty(gm.index)) {
            var gamepad1 = new lime_ui_Gamepad(gm.index);
            lime_ui_Gamepad.devices.h[gm.index] = gamepad1;
            lime_ui_Gamepad.onConnect.dispatch(gamepad1);
            gamepad_HTML5GamepadManager._gamepads[gm.index] = gamepad_LocalGamepad.fromJSGamepad(gm)
        }
    };
    gamepad_HTML5GamepadManager.removeGamepad = function(gm) {
        var gamepad1 = lime_ui_Gamepad.devices.h[gm.index];
        if (gamepad1 != null) {
            gamepad1.connected = false
        }
        lime_ui_Gamepad.devices.remove(gm.index);
        gamepad_HTML5GamepadManager._gamepads[gm.index] = null;
        if (gamepad1 != null) {
            gamepad1.onDisconnect.dispatch()
        }
    };
    var haxe_StackItem = $hxClasses["haxe.StackItem"] = {
        __ename__: ["haxe", "StackItem"],
        __constructs__: ["CFunction", "Module", "FilePos", "Method", "LocalFunction"]
    };
    haxe_StackItem.CFunction = ["CFunction", 0];
    haxe_StackItem.CFunction.toString = $estr;
    haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
    haxe_StackItem.Module = function(m) {
        var $x = ["Module", 1, m];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x
    };
    haxe_StackItem.FilePos = function(s, file, line) {
        var $x = ["FilePos", 2, s, file, line];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x
    };
    haxe_StackItem.Method = function(classname, method) {
        var $x = ["Method", 3, classname, method];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x
    };
    haxe_StackItem.LocalFunction = function(v) {
        var $x = ["LocalFunction", 4, v];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x
    };
    var haxe_CallStack = function() {};
    $hxClasses["haxe.CallStack"] = haxe_CallStack;
    haxe_CallStack.__name__ = ["haxe", "CallStack"];
    haxe_CallStack.getStack = function(e) {
        if (e == null) {
            return []
        }
        var oldValue = Error.prepareStackTrace;
        Error.prepareStackTrace = function(error, callsites) {
            var stack = [];
            var _g = 0;
            while (_g < callsites.length) {
                var site = callsites[_g];
                ++_g;
                if (haxe_CallStack.wrapCallSite != null) {
                    site = haxe_CallStack.wrapCallSite(site)
                }
                var method = null;
                var fullName = site.getFunctionName();
                if (fullName != null) {
                    var idx = fullName.lastIndexOf(".");
                    if (idx >= 0) {
                        var className = HxOverrides.substr(fullName, 0, idx);
                        var methodName = HxOverrides.substr(fullName, idx + 1, null);
                        method = haxe_StackItem.Method(className, methodName)
                    }
                }
                stack.push(haxe_StackItem.FilePos(method, site.getFileName(), site.getLineNumber()))
            }
            return stack
        };
        var a = haxe_CallStack.makeStack(e.stack);
        Error.prepareStackTrace = oldValue;
        return a
    };
    haxe_CallStack.callStack = function() {
        try {
            throw new Error()
        } catch (e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) {
                e = e.val
            }
            var a = haxe_CallStack.getStack(e);
            a.shift();
            return a
        }
    };
    haxe_CallStack.exceptionStack = function() {
        return haxe_CallStack.getStack(haxe_CallStack.lastException)
    };
    haxe_CallStack.toString = function(stack) {
        var b = new StringBuf();
        var _g = 0;
        while (_g < stack.length) {
            var s = stack[_g];
            ++_g;
            b.b += "\nCalled from ";
            haxe_CallStack.itemToString(b, s)
        }
        return b.b
    };
    haxe_CallStack.itemToString = function(b, s) {
        switch (s[1]) {
            case 0:
                b.b += "a C function";
                break;
            case 1:
                var m = s[2];
                b.b += "module ";
                if (m == null) {
                    b.b += "null"
                } else {
                    b.b += "" + m
                }
                break;
            case 2:
                var line = s[4];
                var file = s[3];
                var s1 = s[2];
                if (s1 != null) {
                    haxe_CallStack.itemToString(b, s1);
                    b.b += " ("
                }
                if (file == null) {
                    b.b += "null"
                } else {
                    b.b += "" + file
                }
                b.b += " line ";
                if (line == null) {
                    b.b += "null"
                } else {
                    b.b += "" + line
                }
                if (s1 != null) {
                    b.b += ")"
                }
                break;
            case 3:
                var meth = s[3];
                var cname = s[2];
                if (cname == null) {
                    b.b += "null"
                } else {
                    b.b += "" + cname
                }
                b.b += ".";
                if (meth == null) {
                    b.b += "null"
                } else {
                    b.b += "" + meth
                }
                break;
            case 4:
                var n = s[2];
                b.b += "local function #";
                if (n == null) {
                    b.b += "null"
                } else {
                    b.b += "" + n
                }
                break
        }
    };
    haxe_CallStack.makeStack = function(s) {
        if (s == null) {
            return []
        } else {
            if (typeof(s) == "string") {
                var stack = s.split("\n");
                if (stack[0] == "Error") {
                    stack.shift()
                }
                var m = [];
                var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$", "");
                var _g = 0;
                while (_g < stack.length) {
                    var line = stack[_g];
                    ++_g;
                    if (rie10.match(line)) {
                        var path = rie10.matched(1).split(".");
                        var meth = path.pop();
                        var file = rie10.matched(2);
                        var line1 = Std.parseInt(rie10.matched(3));
                        m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."), meth), file, line1))
                    } else {
                        m.push(haxe_StackItem.Module(StringTools.trim(line)))
                    }
                }
                return m
            } else {
                return s
            }
        }
    };
    var haxe_IMap = function() {};
    $hxClasses["haxe.IMap"] = haxe_IMap;
    haxe_IMap.__name__ = ["haxe", "IMap"];
    haxe_IMap.prototype = {
        set: null,
        iterator: null,
        __class__: haxe_IMap
    };
    var haxe_Http = function(url) {
        this.url = url;
        this.headers = new List();
        this.params = new List();
        this.async = true
    };
    $hxClasses["haxe.Http"] = haxe_Http;
    haxe_Http.__name__ = ["haxe", "Http"];
    haxe_Http.prototype = {
        url: null,
        responseData: null,
        async: null,
        postData: null,
        headers: null,
        params: null,
        req: null,
        request: function(post) {
            var me = this;
            me.responseData = null;
            var r = this.req = js_Browser.createXMLHttpRequest();
            var onreadystatechange = function(_) {
                if (r.readyState != 4) {
                    return
                }
                var s;
                try {
                    s = r.status
                } catch (e) {
                    haxe_CallStack.lastException = e;
                    if (e instanceof js__$Boot_HaxeError) {
                        e = e.val
                    }
                    s = null
                }
                if (s != null) {
                    var protocol = window.location.protocol.toLowerCase();
                    var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$", "");
                    var isLocal = rlocalProtocol.match(protocol);
                    if (isLocal) {
                        if (r.responseText != null) {
                            s = 200
                        } else {
                            s = 404
                        }
                    }
                }
                if (s == undefined) {
                    s = null
                }
                if (s != null) {
                    me.onStatus(s)
                }
                if (s != null && s >= 200 && s < 400) {
                    me.req = null;
                    me.onData(me.responseData = r.responseText)
                } else {
                    if (s == null) {
                        me.req = null;
                        me.onError("Failed to connect or resolve host")
                    } else {
                        switch (s) {
                            case 12029:
                                me.req = null;
                                me.onError("Failed to connect to host");
                                break;
                            case 12007:
                                me.req = null;
                                me.onError("Unknown host");
                                break;
                            default:
                                me.req = null;
                                me.responseData = r.responseText;
                                me.onError("Http Error #" + r.status)
                        }
                    }
                }
            };
            if (this.async) {
                r.onreadystatechange = onreadystatechange
            }
            var uri = this.postData;
            if (uri != null) {
                post = true
            } else {
                var _g_head = this.params.h;
                var _g_val = null;
                while (_g_head != null) {
                    var p;
                    p = (function($this) {
                        var $r;
                        _g_val = _g_head[0];
                        _g_head = _g_head[1];
                        $r = _g_val;
                        return $r
                    }(this));
                    if (uri == null) {
                        uri = ""
                    } else {
                        uri += "&"
                    }
                    uri += encodeURIComponent(p.param) + "=" + encodeURIComponent(p.value)
                }
            }
            try {
                if (post) {
                    r.open("POST", this.url, this.async)
                } else {
                    if (uri != null) {
                        var question = this.url.split("?").length <= 1;
                        r.open("GET", this.url + (question ? "?" : "&") + uri, this.async);
                        uri = null
                    } else {
                        r.open("GET", this.url, this.async)
                    }
                }
            } catch (e1) {
                haxe_CallStack.lastException = e1;
                if (e1 instanceof js__$Boot_HaxeError) {
                    e1 = e1.val
                }
                me.req = null;
                this.onError(e1.toString());
                return
            }
            if (!Lambda.exists(this.headers, function(h) {
                    return h.header == "Content-Type"
                }) && post && this.postData == null) {
                r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded")
            }
            var _g_head1 = this.headers.h;
            var _g_val1 = null;
            while (_g_head1 != null) {
                var h1;
                h1 = (function($this) {
                    var $r;
                    _g_val1 = _g_head1[0];
                    _g_head1 = _g_head1[1];
                    $r = _g_val1;
                    return $r
                }(this));
                r.setRequestHeader(h1.header, h1.value)
            }
            r.send(uri);
            if (!this.async) {
                onreadystatechange(null)
            }
        },
        onData: function(data) {},
        onError: function(msg) {},
        onStatus: function(status) {},
        __class__: haxe_Http
    };
    var haxe__$Int64__$_$_$Int64 = function(high, low) {
        this.high = high;
        this.low = low
    };
    $hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
    haxe__$Int64__$_$_$Int64.__name__ = ["haxe", "_Int64", "___Int64"];
    haxe__$Int64__$_$_$Int64.prototype = {
        high: null,
        low: null,
        __class__: haxe__$Int64__$_$_$Int64
    };
    var haxe_Json = function() {};
    $hxClasses["haxe.Json"] = haxe_Json;
    haxe_Json.__name__ = ["haxe", "Json"];
    haxe_Json.parse = function(text) {
        return new haxe_format_JsonParser(text).parseRec()
    };
    var haxe_Log = function() {};
    $hxClasses["haxe.Log"] = haxe_Log;
    haxe_Log.__name__ = ["haxe", "Log"];
    haxe_Log.trace = function(v, infos) {
        js_Boot.__trace(v, infos)
    };
    var haxe_Serializer = function() {
        this.buf = new StringBuf();
        this.cache = [];
        this.useCache = haxe_Serializer.USE_CACHE;
        this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
        this.shash = new haxe_ds_StringMap();
        this.scount = 0
    };
    $hxClasses["haxe.Serializer"] = haxe_Serializer;
    haxe_Serializer.__name__ = ["haxe", "Serializer"];
    haxe_Serializer.run = function(v) {
        var s = new haxe_Serializer();
        s.serialize(v);
        return s.toString()
    };
    haxe_Serializer.prototype = {
        buf: null,
        cache: null,
        shash: null,
        scount: null,
        useCache: null,
        useEnumIndex: null,
        toString: function() {
            return this.buf.b
        },
        serializeString: function(s) {
            var x = this.shash.get(s);
            if (x != null) {
                this.buf.b += "R";
                if (x == null) {
                    this.buf.b += "null"
                } else {
                    this.buf.b += "" + x
                }
                return
            }
            this.shash.set(s, this.scount++);
            this.buf.b += "y";
            s = encodeURIComponent(s);
            if (s.length == null) {
                this.buf.b += "null"
            } else {
                this.buf.b += "" + s.length
            }
            this.buf.b += ":";
            if (s == null) {
                this.buf.b += "null"
            } else {
                this.buf.b += "" + s
            }
        },
        serializeRef: function(v) {
            var vt = typeof(v);
            var _g1 = 0;
            var _g = this.cache.length;
            while (_g1 < _g) {
                var i = _g1++;
                var ci = this.cache[i];
                if (typeof(ci) == vt && ci == v) {
                    this.buf.b += "r";
                    if (i == null) {
                        this.buf.b += "null"
                    } else {
                        this.buf.b += "" + i
                    }
                    return true
                }
            }
            this.cache.push(v);
            return false
        },
        serializeFields: function(v) {
            var _g = 0;
            var _g1 = Reflect.fields(v);
            while (_g < _g1.length) {
                var f = _g1[_g];
                ++_g;
                this.serializeString(f);
                this.serialize(Reflect.field(v, f))
            }
            this.buf.b += "g"
        },
        serialize: function(v) {
            var _g = Type["typeof"](v);
            switch (_g[1]) {
                case 0:
                    this.buf.b += "n";
                    break;
                case 1:
                    var v1 = v;
                    if (v1 == 0) {
                        this.buf.b += "z";
                        return
                    }
                    this.buf.b += "i";
                    if (v1 == null) {
                        this.buf.b += "null"
                    } else {
                        this.buf.b += "" + v1
                    }
                    break;
                case 2:
                    var v2 = v;
                    if (isNaN(v2)) {
                        this.buf.b += "k"
                    } else {
                        if (!isFinite(v2)) {
                            if (v2 < 0) {
                                this.buf.b += "m"
                            } else {
                                this.buf.b += "p"
                            }
                        } else {
                            this.buf.b += "d";
                            if (v2 == null) {
                                this.buf.b += "null"
                            } else {
                                this.buf.b += "" + v2
                            }
                        }
                    }
                    break;
                case 3:
                    if (v) {
                        this.buf.b += "t"
                    } else {
                        this.buf.b += "f"
                    }
                    break;
                case 6:
                    var c = _g[2];
                    if (c == String) {
                        this.serializeString(v);
                        return
                    }
                    if (this.useCache && this.serializeRef(v)) {
                        return
                    }
                    switch (c) {
                        case Array:
                            var ucount = 0;
                            this.buf.b += "a";
                            var l = v.length;
                            var _g1 = 0;
                            while (_g1 < l) {
                                var i = _g1++;
                                if (v[i] == null) {
                                    ucount++
                                } else {
                                    if (ucount > 0) {
                                        if (ucount == 1) {
                                            this.buf.b += "n"
                                        } else {
                                            this.buf.b += "u";
                                            if (ucount == null) {
                                                this.buf.b += "null"
                                            } else {
                                                this.buf.b += "" + ucount
                                            }
                                        }
                                        ucount = 0
                                    }
                                    this.serialize(v[i])
                                }
                            }
                            if (ucount > 0) {
                                if (ucount == 1) {
                                    this.buf.b += "n"
                                } else {
                                    this.buf.b += "u";
                                    if (ucount == null) {
                                        this.buf.b += "null"
                                    } else {
                                        this.buf.b += "" + ucount
                                    }
                                }
                            }
                            this.buf.b += "h";
                            break;
                        case List:
                            this.buf.b += "l";
                            var v3 = v;
                            var _g1_head = v3.h;
                            var _g1_val = null;
                            while (_g1_head != null) {
                                var i1;
                                _g1_val = _g1_head[0];
                                _g1_head = _g1_head[1];
                                i1 = _g1_val;
                                this.serialize(i1)
                            }
                            this.buf.b += "h";
                            break;
                        case Date:
                            var d = v;
                            this.buf.b += "v";
                            this.buf.add(d.getTime());
                            break;
                        case haxe_ds_StringMap:
                            this.buf.b += "b";
                            var v4 = v;
                            var $it0 = v4.keys();
                            while ($it0.hasNext()) {
                                var k = $it0.next();
                                this.serializeString(k);
                                this.serialize(__map_reserved[k] != null ? v4.getReserved(k) : v4.h[k])
                            }
                            this.buf.b += "h";
                            break;
                        case haxe_ds_IntMap:
                            this.buf.b += "q";
                            var v5 = v;
                            var $it1 = v5.keys();
                            while ($it1.hasNext()) {
                                var k1 = $it1.next();
                                this.buf.b += ":";
                                if (k1 == null) {
                                    this.buf.b += "null"
                                } else {
                                    this.buf.b += "" + k1
                                }
                                this.serialize(v5.h[k1])
                            }
                            this.buf.b += "h";
                            break;
                        case haxe_ds_ObjectMap:
                            this.buf.b += "M";
                            var v6 = v;
                            var $it2 = v6.keys();
                            while ($it2.hasNext()) {
                                var k2 = $it2.next();
                                var id = Reflect.field(k2, "__id__");
                                Reflect.deleteField(k2, "__id__");
                                this.serialize(k2);
                                k2.__id__ = id;
                                this.serialize(v6.h[k2.__id__])
                            }
                            this.buf.b += "h";
                            break;
                        case haxe_io_Bytes:
                            var v7 = v;
                            var i2 = 0;
                            var max = v7.length - 2;
                            var charsBuf = new StringBuf();
                            var b64 = haxe_Serializer.BASE64;
                            while (i2 < max) {
                                var b1 = v7.get(i2++);
                                var b2 = v7.get(i2++);
                                var b3 = v7.get(i2++);
                                charsBuf.add(b64.charAt(b1 >> 2));
                                charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
                                charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
                                charsBuf.add(b64.charAt(b3 & 63))
                            }
                            if (i2 == max) {
                                var b11 = v7.get(i2++);
                                var b21 = v7.get(i2++);
                                charsBuf.add(b64.charAt(b11 >> 2));
                                charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
                                charsBuf.add(b64.charAt(b21 << 2 & 63))
                            } else {
                                if (i2 == max + 1) {
                                    var b12 = v7.get(i2++);
                                    charsBuf.add(b64.charAt(b12 >> 2));
                                    charsBuf.add(b64.charAt(b12 << 4 & 63))
                                }
                            }
                            var chars = charsBuf.b;
                            this.buf.b += "s";
                            if (chars.length == null) {
                                this.buf.b += "null"
                            } else {
                                this.buf.b += "" + chars.length
                            }
                            this.buf.b += ":";
                            if (chars == null) {
                                this.buf.b += "null"
                            } else {
                                this.buf.b += "" + chars
                            }
                            break;
                        default:
                            if (this.useCache) {
                                this.cache.pop()
                            }
                            if (v.hxSerialize != null) {
                                this.buf.b += "C";
                                this.serializeString(Type.getClassName(c));
                                if (this.useCache) {
                                    this.cache.push(v)
                                }
                                v.hxSerialize(this);
                                this.buf.b += "g"
                            } else {
                                this.buf.b += "c";
                                this.serializeString(Type.getClassName(c));
                                if (this.useCache) {
                                    this.cache.push(v)
                                }
                                this.serializeFields(v)
                            }
                    }
                    break;
                case 4:
                    if (js_Boot.__instanceof(v, Class)) {
                        var className = Type.getClassName(v);
                        this.buf.b += "A";
                        this.serializeString(className)
                    } else {
                        if (js_Boot.__instanceof(v, Enum)) {
                            this.buf.b += "B";
                            this.serializeString(Type.getEnumName(v))
                        } else {
                            if (this.useCache && this.serializeRef(v)) {
                                return
                            }
                            this.buf.b += "o";
                            this.serializeFields(v)
                        }
                    }
                    break;
                case 7:
                    var e = _g[2];
                    if (this.useCache) {
                        if (this.serializeRef(v)) {
                            return
                        }
                        this.cache.pop()
                    }
                    if (this.useEnumIndex) {
                        this.buf.b += "j"
                    } else {
                        this.buf.b += "w"
                    }
                    this.serializeString(Type.getEnumName(e));
                    if (this.useEnumIndex) {
                        this.buf.b += ":";
                        this.buf.b += Std.string(v[1])
                    } else {
                        this.serializeString(v[0])
                    }
                    this.buf.b += ":";
                    var l1 = v.length;
                    this.buf.b += Std.string(l1 - 2);
                    var _g11 = 2;
                    while (_g11 < l1) {
                        var i3 = _g11++;
                        this.serialize(v[i3])
                    }
                    if (this.useCache) {
                        this.cache.push(v)
                    }
                    break;
                case 5:
                    throw new js__$Boot_HaxeError("Cannot serialize function");
                    break;
                default:
                    throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v))
            }
        },
        __class__: haxe_Serializer
    };
    var haxe_Timer = function(time_ms) {
        var me = this;
        this.id = window.setInterval(function() {
            me.run()
        }, time_ms)
    };
    $hxClasses["haxe.Timer"] = haxe_Timer;
    haxe_Timer.__name__ = ["haxe", "Timer"];
    haxe_Timer.delay = function(f, time_ms) {
        var t = new haxe_Timer(time_ms);
        t.run = function() {
            t.stop();
            f()
        };
        return t
    };
    haxe_Timer.measure = function(f, pos) {
        var t0 = haxe_Timer.stamp();
        var r = f();
        haxe_Log.trace(haxe_Timer.stamp() - t0 + "s", pos);
        return r
    };
    haxe_Timer.stamp = function() {
        return new Date().getTime() / 1000
    };
    haxe_Timer.prototype = {
        id: null,
        stop: function() {
            if (this.id == null) {
                return
            }
            window.clearInterval(this.id);
            this.id = null
        },
        run: function() {},
        __class__: haxe_Timer
    };
    var haxe_Unserializer = function(buf) {
        this.buf = buf;
        this.length = buf.length;
        this.pos = 0;
        this.scache = [];
        this.cache = [];
        var r = haxe_Unserializer.DEFAULT_RESOLVER;
        if (r == null) {
            r = Type;
            haxe_Unserializer.DEFAULT_RESOLVER = r
        }
        this.setResolver(r)
    };
    $hxClasses["haxe.Unserializer"] = haxe_Unserializer;
    haxe_Unserializer.__name__ = ["haxe", "Unserializer"];
    haxe_Unserializer.initCodes = function() {
        var codes = [];
        var _g1 = 0;
        var _g = haxe_Unserializer.BASE64.length;
        while (_g1 < _g) {
            var i = _g1++;
            codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i
        }
        return codes
    };
    haxe_Unserializer.run = function(v) {
        return new haxe_Unserializer(v).unserialize()
    };
    haxe_Unserializer.prototype = {
        buf: null,
        pos: null,
        length: null,
        cache: null,
        scache: null,
        resolver: null,
        setResolver: function(r) {
            if (r == null) {
                this.resolver = {
                    resolveClass: function(_) {
                        return null
                    },
                    resolveEnum: function(_1) {
                        return null
                    }
                }
            } else {
                this.resolver = r
            }
        },
        get: function(p) {
            return this.buf.charCodeAt(p)
        },
        readDigits: function() {
            var k = 0;
            var s = false;
            var fpos = this.pos;
            while (true) {
                var c = this.buf.charCodeAt(this.pos);
                if (c != c) {
                    break
                }
                if (c == 45) {
                    if (this.pos != fpos) {
                        break
                    }
                    s = true;
                    this.pos++;
                    continue
                }
                if (c < 48 || c > 57) {
                    break
                }
                k = k * 10 + (c - 48);
                this.pos++
            }
            if (s) {
                k *= -1
            }
            return k
        },
        readFloat: function() {
            var p1 = this.pos;
            while (true) {
                var c = this.buf.charCodeAt(this.pos);
                if (c >= 43 && c < 58 || c == 101 || c == 69) {
                    this.pos++
                } else {
                    break
                }
            }
            return Std.parseFloat(HxOverrides.substr(this.buf, p1, this.pos - p1))
        },
        unserializeObject: function(o) {
            while (true) {
                if (this.pos >= this.length) {
                    throw new js__$Boot_HaxeError("Invalid object")
                }
                if (this.buf.charCodeAt(this.pos) == 103) {
                    break
                }
                var k = this.unserialize();
                if (!(typeof(k) == "string")) {
                    throw new js__$Boot_HaxeError("Invalid object key")
                }
                var v = this.unserialize();
                o[k] = v
            }
            this.pos++
        },
        unserializeEnum: function(edecl, tag) {
            if (this.get(this.pos++) != 58) {
                throw new js__$Boot_HaxeError("Invalid enum format")
            }
            var nargs = this.readDigits();
            if (nargs == 0) {
                return Type.createEnum(edecl, tag)
            }
            var args = [];
            while (nargs-- > 0) {
                args.push(this.unserialize())
            }
            return Type.createEnum(edecl, tag, args)
        },
        unserialize: function() {
            var _g = this.get(this.pos++);
            switch (_g) {
                case 110:
                    return null;
                case 116:
                    return true;
                case 102:
                    return false;
                case 122:
                    return 0;
                case 105:
                    return this.readDigits();
                case 100:
                    return this.readFloat();
                case 121:
                    var len = this.readDigits();
                    if (this.get(this.pos++) != 58 || this.length - this.pos < len) {
                        throw new js__$Boot_HaxeError("Invalid string length")
                    }
                    var s = HxOverrides.substr(this.buf, this.pos, len);
                    this.pos += len;
                    s = decodeURIComponent(s.split("+").join(" "));
                    this.scache.push(s);
                    return s;
                case 107:
                    return NaN;
                case 109:
                    return -Infinity;
                case 112:
                    return Infinity;
                case 97:
                    var buf = this.buf;
                    var a = [];
                    this.cache.push(a);
                    while (true) {
                        var c = this.buf.charCodeAt(this.pos);
                        if (c == 104) {
                            this.pos++;
                            break
                        }
                        if (c == 117) {
                            this.pos++;
                            var n = this.readDigits();
                            a[a.length + n - 1] = null
                        } else {
                            a.push(this.unserialize())
                        }
                    }
                    return a;
                case 111:
                    var o = {};
                    this.cache.push(o);
                    this.unserializeObject(o);
                    return o;
                case 114:
                    var n1 = this.readDigits();
                    if (n1 < 0 || n1 >= this.cache.length) {
                        throw new js__$Boot_HaxeError("Invalid reference")
                    }
                    return this.cache[n1];
                case 82:
                    var n2 = this.readDigits();
                    if (n2 < 0 || n2 >= this.scache.length) {
                        throw new js__$Boot_HaxeError("Invalid string reference")
                    }
                    return this.scache[n2];
                case 120:
                    throw new js__$Boot_HaxeError(this.unserialize());
                    break;
                case 99:
                    var name = this.unserialize();
                    var cl = this.resolver.resolveClass(name);
                    if (cl == null) {
                        throw new js__$Boot_HaxeError("Class not found " + name)
                    }
                    var o1 = Type.createEmptyInstance(cl);
                    this.cache.push(o1);
                    this.unserializeObject(o1);
                    return o1;
                case 119:
                    var name1 = this.unserialize();
                    var edecl = this.resolver.resolveEnum(name1);
                    if (edecl == null) {
                        throw new js__$Boot_HaxeError("Enum not found " + name1)
                    }
                    var e = this.unserializeEnum(edecl, this.unserialize());
                    this.cache.push(e);
                    return e;
                case 106:
                    var name2 = this.unserialize();
                    var edecl1 = this.resolver.resolveEnum(name2);
                    if (edecl1 == null) {
                        throw new js__$Boot_HaxeError("Enum not found " + name2)
                    }
                    this.pos++;
                    var index = this.readDigits();
                    var tag = Type.getEnumConstructs(edecl1)[index];
                    if (tag == null) {
                        throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index)
                    }
                    var e1 = this.unserializeEnum(edecl1, tag);
                    this.cache.push(e1);
                    return e1;
                case 108:
                    var l = new List();
                    this.cache.push(l);
                    var buf1 = this.buf;
                    while (this.buf.charCodeAt(this.pos) != 104) {
                        l.add(this.unserialize())
                    }
                    this.pos++;
                    return l;
                case 98:
                    var h = new haxe_ds_StringMap();
                    this.cache.push(h);
                    var buf2 = this.buf;
                    while (this.buf.charCodeAt(this.pos) != 104) {
                        var s1 = this.unserialize();
                        h.set(s1, this.unserialize())
                    }
                    this.pos++;
                    return h;
                case 113:
                    var h1 = new haxe_ds_IntMap();
                    this.cache.push(h1);
                    var buf3 = this.buf;
                    var c1 = this.get(this.pos++);
                    while (c1 == 58) {
                        var i = this.readDigits();
                        h1.set(i, this.unserialize());
                        c1 = this.get(this.pos++)
                    }
                    if (c1 != 104) {
                        throw new js__$Boot_HaxeError("Invalid IntMap format")
                    }
                    return h1;
                case 77:
                    var h2 = new haxe_ds_ObjectMap();
                    this.cache.push(h2);
                    var buf4 = this.buf;
                    while (this.buf.charCodeAt(this.pos) != 104) {
                        var s2 = this.unserialize();
                        h2.set(s2, this.unserialize())
                    }
                    this.pos++;
                    return h2;
                case 118:
                    var d;
                    if (this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
                        var s3 = HxOverrides.substr(this.buf, this.pos, 19);
                        d = HxOverrides.strDate(s3);
                        this.pos += 19
                    } else {
                        var t = this.readFloat();
                        var d1 = new Date();
                        d1.setTime(t);
                        d = d1
                    }
                    this.cache.push(d);
                    return d;
                case 115:
                    var len1 = this.readDigits();
                    var buf5 = this.buf;
                    if (this.get(this.pos++) != 58 || this.length - this.pos < len1) {
                        throw new js__$Boot_HaxeError("Invalid bytes length")
                    }
                    var codes = haxe_Unserializer.CODES;
                    if (codes == null) {
                        codes = haxe_Unserializer.initCodes();
                        haxe_Unserializer.CODES = codes
                    }
                    var i1 = this.pos;
                    var rest = len1 & 3;
                    var size;
                    size = (len1 >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
                    var max = i1 + (len1 - rest);
                    var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
                    var bpos = 0;
                    while (i1 < max) {
                        var c11 = codes[StringTools.fastCodeAt(buf5, i1++)];
                        var c2 = codes[StringTools.fastCodeAt(buf5, i1++)];
                        bytes.set(bpos++, c11 << 2 | c2 >> 4);
                        var c3 = codes[StringTools.fastCodeAt(buf5, i1++)];
                        bytes.set(bpos++, c2 << 4 | c3 >> 2);
                        var c4 = codes[StringTools.fastCodeAt(buf5, i1++)];
                        bytes.set(bpos++, c3 << 6 | c4)
                    }
                    if (rest >= 2) {
                        var c12 = codes[StringTools.fastCodeAt(buf5, i1++)];
                        var c21 = codes[StringTools.fastCodeAt(buf5, i1++)];
                        bytes.set(bpos++, c12 << 2 | c21 >> 4);
                        if (rest == 3) {
                            var c31 = codes[StringTools.fastCodeAt(buf5, i1++)];
                            bytes.set(bpos++, c21 << 4 | c31 >> 2)
                        }
                    }
                    this.pos += len1;
                    this.cache.push(bytes);
                    return bytes;
                case 67:
                    var name3 = this.unserialize();
                    var cl1 = this.resolver.resolveClass(name3);
                    if (cl1 == null) {
                        throw new js__$Boot_HaxeError("Class not found " + name3)
                    }
                    var o2 = Type.createEmptyInstance(cl1);
                    this.cache.push(o2);
                    o2.hxUnserialize(this);
                    if (this.get(this.pos++) != 103) {
                        throw new js__$Boot_HaxeError("Invalid custom data")
                    }
                    return o2;
                case 65:
                    var name4 = this.unserialize();
                    var cl2 = this.resolver.resolveClass(name4);
                    if (cl2 == null) {
                        throw new js__$Boot_HaxeError("Class not found " + name4)
                    }
                    return cl2;
                case 66:
                    var name5 = this.unserialize();
                    var e2 = this.resolver.resolveEnum(name5);
                    if (e2 == null) {
                        throw new js__$Boot_HaxeError("Enum not found " + name5)
                    }
                    return e2;
                default:
            }
            this.pos--;
            throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos)
        },
        __class__: haxe_Unserializer
    };
    var haxe_crypto_Adler32 = function() {
        this.a1 = 1;
        this.a2 = 0
    };
    $hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
    haxe_crypto_Adler32.__name__ = ["haxe", "crypto", "Adler32"];
    haxe_crypto_Adler32.read = function(i) {
        var a = new haxe_crypto_Adler32();
        var a2a = i.readByte();
        var a2b = i.readByte();
        var a1a = i.readByte();
        var a1b = i.readByte();
        a.a1 = a1a << 8 | a1b;
        a.a2 = a2a << 8 | a2b;
        return a
    };
    haxe_crypto_Adler32.prototype = {
        a1: null,
        a2: null,
        update: function(b, pos, len) {
            var a1 = this.a1;
            var a2 = this.a2;
            var _g1 = pos;
            var _g = pos + len;
            while (_g1 < _g) {
                var p = _g1++;
                var c = b.b[p];
                a1 = (a1 + c) % 65521;
                a2 = (a2 + a1) % 65521
            }
            this.a1 = a1;
            this.a2 = a2
        },
        equals: function(a) {
            return a.a1 == this.a1 && a.a2 == this.a2
        },
        __class__: haxe_crypto_Adler32
    };
    var haxe_io_Bytes = function(data) {
        this.length = data.byteLength;
        this.b = new Uint8Array(data);
        this.b.bufferValue = data;
        data.hxBytes = this;
        data.bytes = this.b
    };
    $hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
    haxe_io_Bytes.__name__ = ["haxe", "io", "Bytes"];
    haxe_io_Bytes.alloc = function(length) {
        return new haxe_io_Bytes(new ArrayBuffer(length))
    };
    haxe_io_Bytes.ofString = function(s) {
        var a = [];
        var i = 0;
        while (i < s.length) {
            var c = StringTools.fastCodeAt(s, i++);
            if (55296 <= c && c <= 56319) {
                c = c - 55232 << 10 | StringTools.fastCodeAt(s, i++) & 1023
            }
            if (c <= 127) {
                a.push(c)
            } else {
                if (c <= 2047) {
                    a.push(192 | c >> 6);
                    a.push(128 | c & 63)
                } else {
                    if (c <= 65535) {
                        a.push(224 | c >> 12);
                        a.push(128 | c >> 6 & 63);
                        a.push(128 | c & 63)
                    } else {
                        a.push(240 | c >> 18);
                        a.push(128 | c >> 12 & 63);
                        a.push(128 | c >> 6 & 63);
                        a.push(128 | c & 63)
                    }
                }
            }
        }
        return new haxe_io_Bytes(new Uint8Array(a).buffer)
    };
    haxe_io_Bytes.ofData = function(b) {
        var hb = b.hxBytes;
        if (hb != null) {
            return hb
        }
        return new haxe_io_Bytes(b)
    };
    haxe_io_Bytes.fastGet = function(b, pos) {
        return b.bytes[pos]
    };
    haxe_io_Bytes.prototype = {
        length: null,
        b: null,
        data: null,
        get: function(pos) {
            return this.b[pos]
        },
        set: function(pos, v) {
            this.b[pos] = v & 255
        },
        blit: function(pos, src, srcpos, len) {
            if (pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
                throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
            }
            if (srcpos == 0 && len == src.b.byteLength) {
                this.b.set(src.b, pos)
            } else {
                this.b.set(src.b.subarray(srcpos, srcpos + len), pos)
            }
        },
        fill: function(pos, len, value) {
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.set(pos++, value)
            }
        },
        sub: function(pos, len) {
            if (pos < 0 || len < 0 || pos + len > this.length) {
                throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
            }
            return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset, pos + this.b.byteOffset + len))
        },
        compare: function(other) {
            var b1 = this.b;
            var b2 = other.b;
            var len;
            if (this.length < other.length) {
                len = this.length
            } else {
                len = other.length
            }
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (b1[i] != b2[i]) {
                    return b1[i] - b2[i]
                }
            }
            return this.length - other.length
        },
        initData: function() {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
        },
        getDouble: function(pos) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            return this.data.getFloat64(pos, true)
        },
        getFloat: function(pos) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            return this.data.getFloat32(pos, true)
        },
        setDouble: function(pos, v) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            this.data.setFloat64(pos, v, true)
        },
        setFloat: function(pos, v) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            this.data.setFloat32(pos, v, true)
        },
        getUInt16: function(pos) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            return this.data.getUint16(pos, true)
        },
        setUInt16: function(pos, v) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            this.data.setUint16(pos, v, true)
        },
        getInt32: function(pos) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            return this.data.getInt32(pos, true)
        },
        setInt32: function(pos, v) {
            if (this.data == null) {
                this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength)
            }
            this.data.setInt32(pos, v, true)
        },
        getInt64: function(pos) {
            var high = this.getInt32(pos + 4);
            var low = this.getInt32(pos);
            var x = new haxe__$Int64__$_$_$Int64(high, low);
            return x
        },
        setInt64: function(pos, v) {
            this.setInt32(pos, v.low);
            this.setInt32(pos + 4, v.high)
        },
        getString: function(pos, len) {
            if (pos < 0 || len < 0 || pos + len > this.length) {
                throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
            }
            var s = "";
            var b = this.b;
            var fcc = String.fromCharCode;
            var i = pos;
            var max = pos + len;
            while (i < max) {
                var c = b[i++];
                if (c < 128) {
                    if (c == 0) {
                        break
                    }
                    s += fcc(c)
                } else {
                    if (c < 224) {
                        s += fcc((c & 63) << 6 | b[i++] & 127)
                    } else {
                        if (c < 240) {
                            var c2 = b[i++];
                            s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127)
                        } else {
                            var c21 = b[i++];
                            var c3 = b[i++];
                            var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
                            s += fcc((u >> 10) + 55232);
                            s += fcc(u & 1023 | 56320)
                        }
                    }
                }
            }
            return s
        },
        readString: function(pos, len) {
            return this.getString(pos, len)
        },
        toString: function() {
            return this.getString(0, this.length)
        },
        toHex: function() {
            var s_b = "";
            var chars = [];
            var str = "0123456789abcdef";
            var _g1 = 0;
            var _g = str.length;
            while (_g1 < _g) {
                var i = _g1++;
                chars.push(HxOverrides.cca(str, i))
            }
            var _g11 = 0;
            var _g2 = this.length;
            while (_g11 < _g2) {
                var i1 = _g11++;
                var c = this.b[i1];
                s_b += String.fromCharCode(chars[c >> 4]);
                s_b += String.fromCharCode(chars[c & 15])
            }
            return s_b
        },
        getData: function() {
            return this.b.bufferValue
        },
        __class__: haxe_io_Bytes
    };
    var haxe_crypto_Base64 = function() {};
    $hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
    haxe_crypto_Base64.__name__ = ["haxe", "crypto", "Base64"];
    haxe_crypto_Base64.decode = function(str, complement) {
        if (complement == null) {
            complement = true
        }
        if (complement) {
            while (HxOverrides.cca(str, str.length - 1) == 61) {
                str = HxOverrides.substr(str, 0, -1)
            }
        }
        return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str))
    };
    var haxe_crypto_BaseCode = function(base) {
        var len = base.length;
        var nbits = 1;
        while (len > 1 << nbits) {
            nbits++
        }
        if (nbits > 8 || len != 1 << nbits) {
            throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.")
        }
        this.base = base;
        this.nbits = nbits
    };
    $hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
    haxe_crypto_BaseCode.__name__ = ["haxe", "crypto", "BaseCode"];
    haxe_crypto_BaseCode.prototype = {
        base: null,
        nbits: null,
        tbl: null,
        encodeBytes: function(b) {
            var nbits = this.nbits;
            var base = this.base;
            var size = b.length * 8 / nbits | 0;
            var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
            var buf = 0;
            var curbits = 0;
            var mask = (1 << nbits) - 1;
            var pin = 0;
            var pout = 0;
            while (pout < size) {
                while (curbits < nbits) {
                    curbits += 8;
                    buf <<= 8;
                    buf |= b.get(pin++)
                }
                curbits -= nbits;
                out.set(pout++, base.b[buf >> curbits & mask])
            }
            if (curbits > 0) {
                out.set(pout++, base.b[buf << nbits - curbits & mask])
            }
            return out
        },
        initTable: function() {
            var tbl = [];
            var _g = 0;
            while (_g < 256) {
                var i = _g++;
                tbl[i] = -1
            }
            var _g1 = 0;
            var _g2 = this.base.length;
            while (_g1 < _g2) {
                var i1 = _g1++;
                tbl[this.base.b[i1]] = i1
            }
            this.tbl = tbl
        },
        decodeBytes: function(b) {
            var nbits = this.nbits;
            var base = this.base;
            if (this.tbl == null) {
                this.initTable()
            }
            var tbl = this.tbl;
            var size = b.length * nbits >> 3;
            var out = new haxe_io_Bytes(new ArrayBuffer(size));
            var buf = 0;
            var curbits = 0;
            var pin = 0;
            var pout = 0;
            while (pout < size) {
                while (curbits < 8) {
                    curbits += nbits;
                    buf <<= nbits;
                    var i = tbl[b.get(pin++)];
                    if (i == -1) {
                        throw new js__$Boot_HaxeError("BaseCode : invalid encoded char")
                    }
                    buf |= i
                }
                curbits -= 8;
                out.set(pout++, buf >> curbits & 255)
            }
            return out
        },
        __class__: haxe_crypto_BaseCode
    };
    var haxe_crypto_Crc32 = function() {
        this.crc = -1
    };
    $hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
    haxe_crypto_Crc32.__name__ = ["haxe", "crypto", "Crc32"];
    haxe_crypto_Crc32.prototype = {
        crc: null,
        "byte": function(b) {
            var tmp = (this.crc ^ b) & 255;
            var _g = 0;
            while (_g < 8) {
                var j = _g++;
                if ((tmp & 1) == 1) {
                    tmp = tmp >>> 1 ^ -306674912
                } else {
                    tmp >>>= 1
                }
            }
            this.crc = this.crc >>> 8 ^ tmp
        },
        update: function(b, pos, len) {
            var b1 = b.b.bufferValue;
            var _g1 = pos;
            var _g = pos + len;
            while (_g1 < _g) {
                var i = _g1++;
                var tmp = (this.crc ^ b1.bytes[i]) & 255;
                var _g2 = 0;
                while (_g2 < 8) {
                    var j = _g2++;
                    if ((tmp & 1) == 1) {
                        tmp = tmp >>> 1 ^ -306674912
                    } else {
                        tmp >>>= 1
                    }
                }
                this.crc = this.crc >>> 8 ^ tmp
            }
        },
        get: function() {
            return this.crc ^ -1
        },
        __class__: haxe_crypto_Crc32
    };
    var haxe_ds_BalancedTree = function() {};
    $hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
    haxe_ds_BalancedTree.__name__ = ["haxe", "ds", "BalancedTree"];
    haxe_ds_BalancedTree.prototype = {
        root: null,
        set: function(key, value) {
            this.root = this.setLoop(key, value, this.root)
        },
        get: function(key) {
            var node = this.root;
            while (node != null) {
                var c = this.compare(key, node.key);
                if (c == 0) {
                    return node.value
                }
                if (c < 0) {
                    node = node.left
                } else {
                    node = node.right
                }
            }
            return null
        },
        remove: function(key) {
            try {
                this.root = this.removeLoop(key, this.root);
                return true
            } catch (e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) {
                    e = e.val
                }
                if (js_Boot.__instanceof(e, String)) {
                    return false
                } else {
                    throw (e)
                }
            }
        },
        exists: function(key) {
            var node = this.root;
            while (node != null) {
                var c = this.compare(key, node.key);
                if (c == 0) {
                    return true
                } else {
                    if (c < 0) {
                        node = node.left
                    } else {
                        node = node.right
                    }
                }
            }
            return false
        },
        iterator: function() {
            var ret = [];
            this.iteratorLoop(this.root, ret);
            return HxOverrides.iter(ret)
        },
        keys: function() {
            var ret = [];
            this.keysLoop(this.root, ret);
            return HxOverrides.iter(ret)
        },
        setLoop: function(k, v, node) {
            if (node == null) {
                return new haxe_ds_TreeNode(null, k, v, null)
            }
            var c = this.compare(k, node.key);
            if (c == 0) {
                return new haxe_ds_TreeNode(node.left, k, v, node.right, node == null ? 0 : node._height)
            } else {
                if (c < 0) {
                    var nl = this.setLoop(k, v, node.left);
                    return this.balance(nl, node.key, node.value, node.right)
                } else {
                    var nr = this.setLoop(k, v, node.right);
                    return this.balance(node.left, node.key, node.value, nr)
                }
            }
        },
        removeLoop: function(k, node) {
            if (node == null) {
                throw new js__$Boot_HaxeError("Not_found")
            }
            var c = this.compare(k, node.key);
            if (c == 0) {
                return this.merge(node.left, node.right)
            } else {
                if (c < 0) {
                    return this.balance(this.removeLoop(k, node.left), node.key, node.value, node.right)
                } else {
                    return this.balance(node.left, node.key, node.value, this.removeLoop(k, node.right))
                }
            }
        },
        iteratorLoop: function(node, acc) {
            if (node != null) {
                this.iteratorLoop(node.left, acc);
                acc.push(node.value);
                this.iteratorLoop(node.right, acc)
            }
        },
        keysLoop: function(node, acc) {
            if (node != null) {
                this.keysLoop(node.left, acc);
                acc.push(node.key);
                this.keysLoop(node.right, acc)
            }
        },
        merge: function(t1, t2) {
            if (t1 == null) {
                return t2
            }
            if (t2 == null) {
                return t1
            }
            var t = this.minBinding(t2);
            return this.balance(t1, t.key, t.value, this.removeMinBinding(t2))
        },
        minBinding: function(t) {
            if (t == null) {
                throw new js__$Boot_HaxeError("Not_found")
            } else {
                if (t.left == null) {
                    return t
                } else {
                    return this.minBinding(t.left)
                }
            }
        },
        removeMinBinding: function(t) {
            if (t.left == null) {
                return t.right
            } else {
                return this.balance(this.removeMinBinding(t.left), t.key, t.value, t.right)
            }
        },
        balance: function(l, k, v, r) {
            var hl;
            if (l == null) {
                hl = 0
            } else {
                hl = l._height
            }
            var hr;
            if (r == null) {
                hr = 0
            } else {
                hr = r._height
            }
            if (hl > hr + 2) {
                if ((function($this) {
                        var $r;
                        var _this = l.left;
                        $r = _this == null ? 0 : _this._height;
                        return $r
                    }(this)) >= (function($this) {
                        var $r;
                        var _this1 = l.right;
                        $r = _this1 == null ? 0 : _this1._height;
                        return $r
                    }(this))) {
                    return new haxe_ds_TreeNode(l.left, l.key, l.value, new haxe_ds_TreeNode(l.right, k, v, r))
                } else {
                    return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left, l.key, l.value, l.right.left), l.right.key, l.right.value, new haxe_ds_TreeNode(l.right.right, k, v, r))
                }
            } else {
                if (hr > hl + 2) {
                    if ((function($this) {
                            var $r;
                            var _this2 = r.right;
                            $r = _this2 == null ? 0 : _this2._height;
                            return $r
                        }(this)) > (function($this) {
                            var $r;
                            var _this3 = r.left;
                            $r = _this3 == null ? 0 : _this3._height;
                            return $r
                        }(this))) {
                        return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l, k, v, r.left), r.key, r.value, r.right)
                    } else {
                        return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l, k, v, r.left.left), r.left.key, r.left.value, new haxe_ds_TreeNode(r.left.right, r.key, r.value, r.right))
                    }
                } else {
                    return new haxe_ds_TreeNode(l, k, v, r, (hl > hr ? hl : hr) + 1)
                }
            }
        },
        compare: function(k1, k2) {
            return Reflect.compare(k1, k2)
        },
        __class__: haxe_ds_BalancedTree
    };
    var haxe_ds_TreeNode = function(l, k, v, r, h) {
        if (h == null) {
            h = -1
        }
        this.left = l;
        this.key = k;
        this.value = v;
        this.right = r;
        if (h == -1) {
            this._height = ((function($this) {
                var $r;
                var _this = $this.left;
                $r = _this == null ? 0 : _this._height;
                return $r
            }(this)) > (function($this) {
                var $r;
                var _this1 = $this.right;
                $r = _this1 == null ? 0 : _this1._height;
                return $r
            }(this)) ? (function($this) {
                var $r;
                var _this2 = $this.left;
                $r = _this2 == null ? 0 : _this2._height;
                return $r
            }(this)) : (function($this) {
                var $r;
                var _this3 = $this.right;
                $r = _this3 == null ? 0 : _this3._height;
                return $r
            }(this))) + 1
        } else {
            this._height = h
        }
    };
    $hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
    haxe_ds_TreeNode.__name__ = ["haxe", "ds", "TreeNode"];
    haxe_ds_TreeNode.prototype = {
        left: null,
        right: null,
        key: null,
        value: null,
        _height: null,
        __class__: haxe_ds_TreeNode
    };
    var haxe_ds_EnumValueMap = function() {
        haxe_ds_BalancedTree.call(this)
    };
    $hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
    haxe_ds_EnumValueMap.__name__ = ["haxe", "ds", "EnumValueMap"];
    haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
    haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
    haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype, {
        compare: function(k1, k2) {
            var d = k1[1] - k2[1];
            if (d != 0) {
                return d
            }
            var p1 = k1.slice(2);
            var p2 = k2.slice(2);
            if (p1.length == 0 && p2.length == 0) {
                return 0
            }
            return this.compareArgs(p1, p2)
        },
        compareArgs: function(a1, a2) {
            var ld = a1.length - a2.length;
            if (ld != 0) {
                return ld
            }
            var _g1 = 0;
            var _g = a1.length;
            while (_g1 < _g) {
                var i = _g1++;
                var d = this.compareArg(a1[i], a2[i]);
                if (d != 0) {
                    return d
                }
            }
            return 0
        },
        compareArg: function(v1, v2) {
            if (Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
                return this.compare(v1, v2)
            } else {
                if ((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
                    return this.compareArgs(v1, v2)
                } else {
                    return Reflect.compare(v1, v2)
                }
            }
        },
        __class__: haxe_ds_EnumValueMap
    });
    var haxe_ds_IntMap = function() {
        this.h = {}
    };
    $hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
    haxe_ds_IntMap.__name__ = ["haxe", "ds", "IntMap"];
    haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
    haxe_ds_IntMap.prototype = {
        h: null,
        set: function(key, value) {
            this.h[key] = value
        },
        remove: function(key) {
            if (!this.h.hasOwnProperty(key)) {
                return false
            }
            delete(this.h[key]);
            return true
        },
        keys: function() {
            var a = [];
            for (var key in this.h) {
                if (this.h.hasOwnProperty(key)) {
                    a.push(key | 0)
                }
            }
            return HxOverrides.iter(a)
        },
        iterator: function() {
            return {
                ref: this.h,
                it: this.keys(),
                hasNext: function() {
                    return this.it.hasNext()
                },
                next: function() {
                    var i = this.it.next();
                    return this.ref[i]
                }
            }
        },
        __class__: haxe_ds_IntMap
    };
    var haxe_ds_ObjectMap = function() {
        this.h = {};
        this.h.__keys__ = {}
    };
    $hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
    haxe_ds_ObjectMap.__name__ = ["haxe", "ds", "ObjectMap"];
    haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
    haxe_ds_ObjectMap.prototype = {
        h: null,
        set: function(key, value) {
            var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
            this.h[id] = value;
            this.h.__keys__[id] = key
        },
        remove: function(key) {
            var id = key.__id__;
            if (this.h.__keys__[id] == null) {
                return false
            }
            delete(this.h[id]);
            delete(this.h.__keys__[id]);
            return true
        },
        keys: function() {
            var a = [];
            for (var key in this.h.__keys__) {
                if (this.h.hasOwnProperty(key)) {
                    a.push(this.h.__keys__[key])
                }
            }
            return HxOverrides.iter(a)
        },
        iterator: function() {
            return {
                ref: this.h,
                it: this.keys(),
                hasNext: function() {
                    return this.it.hasNext()
                },
                next: function() {
                    var i = this.it.next();
                    return this.ref[i.__id__]
                }
            }
        },
        __class__: haxe_ds_ObjectMap
    };
    var haxe_ds_Option = $hxClasses["haxe.ds.Option"] = {
        __ename__: ["haxe", "ds", "Option"],
        __constructs__: ["Some", "None"]
    };
    haxe_ds_Option.Some = function(v) {
        var $x = ["Some", 0, v];
        $x.__enum__ = haxe_ds_Option;
        $x.toString = $estr;
        return $x
    };
    haxe_ds_Option.None = ["None", 1];
    haxe_ds_Option.None.toString = $estr;
    haxe_ds_Option.None.__enum__ = haxe_ds_Option;
    var haxe_ds__$StringMap_StringMapIterator = function(map, keys) {
        this.map = map;
        this.keys = keys;
        this.index = 0;
        this.count = keys.length
    };
    $hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
    haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe", "ds", "_StringMap", "StringMapIterator"];
    haxe_ds__$StringMap_StringMapIterator.prototype = {
        map: null,
        keys: null,
        index: null,
        count: null,
        hasNext: function() {
            return this.index < this.count
        },
        next: function() {
            return this.map.get(this.keys[this.index++])
        },
        __class__: haxe_ds__$StringMap_StringMapIterator
    };
    var haxe_ds_StringMap = function() {
        this.h = {}
    };
    $hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
    haxe_ds_StringMap.__name__ = ["haxe", "ds", "StringMap"];
    haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
    haxe_ds_StringMap.prototype = {
        h: null,
        rh: null,
        set: function(key, value) {
            if (__map_reserved[key] != null) {
                this.setReserved(key, value)
            } else {
                this.h[key] = value
            }
        },
        get: function(key) {
            if (__map_reserved[key] != null) {
                return this.getReserved(key)
            }
            return this.h[key]
        },
        exists: function(key) {
            if (__map_reserved[key] != null) {
                return this.existsReserved(key)
            }
            return this.h.hasOwnProperty(key)
        },
        setReserved: function(key, value) {
            if (this.rh == null) {
                this.rh = {}
            }
            this.rh["$" + key] = value
        },
        getReserved: function(key) {
            if (this.rh == null) {
                return null
            } else {
                return this.rh["$" + key]
            }
        },
        existsReserved: function(key) {
            if (this.rh == null) {
                return false
            }
            return this.rh.hasOwnProperty("$" + key)
        },
        remove: function(key) {
            if (__map_reserved[key] != null) {
                key = "$" + key;
                if (this.rh == null || !this.rh.hasOwnProperty(key)) {
                    return false
                }
                delete(this.rh[key]);
                return true
            } else {
                if (!this.h.hasOwnProperty(key)) {
                    return false
                }
                delete(this.h[key]);
                return true
            }
        },
        keys: function() {
            var _this = this.arrayKeys();
            return HxOverrides.iter(_this)
        },
        arrayKeys: function() {
            var out = [];
            for (var key in this.h) {
                if (this.h.hasOwnProperty(key)) {
                    out.push(key)
                }
            }
            if (this.rh != null) {
                for (var key in this.rh) {
                    if (key.charCodeAt(0) == 36) {
                        out.push(key.substr(1))
                    }
                }
            }
            return out
        },
        iterator: function() {
            return new haxe_ds__$StringMap_StringMapIterator(this, this.arrayKeys())
        },
        __class__: haxe_ds_StringMap
    };
    var haxe_format_JsonParser = function(str) {
        this.str = str;
        this.pos = 0
    };
    $hxClasses["haxe.format.JsonParser"] = haxe_format_JsonParser;
    haxe_format_JsonParser.__name__ = ["haxe", "format", "JsonParser"];
    haxe_format_JsonParser.prototype = {
        str: null,
        pos: null,
        parseRec: function() {
            while (true) {
                var c = StringTools.fastCodeAt(this.str, this.pos++);
                switch (c) {
                    case 32:
                    case 13:
                    case 10:
                    case 9:
                        break;
                    case 123:
                        var obj = {};
                        var field = null;
                        var comma = null;
                        while (true) {
                            var c1 = StringTools.fastCodeAt(this.str, this.pos++);
                            switch (c1) {
                                case 32:
                                case 13:
                                case 10:
                                case 9:
                                    break;
                                case 125:
                                    if (field != null || comma == false) {
                                        this.invalidChar()
                                    }
                                    return obj;
                                case 58:
                                    if (field == null) {
                                        this.invalidChar()
                                    }
                                    Reflect.setField(obj, field, this.parseRec());
                                    field = null;
                                    comma = true;
                                    break;
                                case 44:
                                    if (comma) {
                                        comma = false
                                    } else {
                                        this.invalidChar()
                                    }
                                    break;
                                case 34:
                                    if (comma) {
                                        this.invalidChar()
                                    }
                                    field = this.parseString();
                                    break;
                                default:
                                    this.invalidChar()
                            }
                        }
                        break;
                    case 91:
                        var arr = [];
                        var comma1 = null;
                        while (true) {
                            var c2 = StringTools.fastCodeAt(this.str, this.pos++);
                            switch (c2) {
                                case 32:
                                case 13:
                                case 10:
                                case 9:
                                    break;
                                case 93:
                                    if (comma1 == false) {
                                        this.invalidChar()
                                    }
                                    return arr;
                                case 44:
                                    if (comma1) {
                                        comma1 = false
                                    } else {
                                        this.invalidChar()
                                    }
                                    break;
                                default:
                                    if (comma1) {
                                        this.invalidChar()
                                    }
                                    this.pos--;
                                    arr.push(this.parseRec());
                                    comma1 = true
                            }
                        }
                        break;
                    case 116:
                        var save = this.pos;
                        if (StringTools.fastCodeAt(this.str, this.pos++) != 114 || StringTools.fastCodeAt(this.str, this.pos++) != 117 || StringTools.fastCodeAt(this.str, this.pos++) != 101) {
                            this.pos = save;
                            this.invalidChar()
                        }
                        return true;
                    case 102:
                        var save1 = this.pos;
                        if (StringTools.fastCodeAt(this.str, this.pos++) != 97 || StringTools.fastCodeAt(this.str, this.pos++) != 108 || StringTools.fastCodeAt(this.str, this.pos++) != 115 || StringTools.fastCodeAt(this.str, this.pos++) != 101) {
                            this.pos = save1;
                            this.invalidChar()
                        }
                        return false;
                    case 110:
                        var save2 = this.pos;
                        if (StringTools.fastCodeAt(this.str, this.pos++) != 117 || StringTools.fastCodeAt(this.str, this.pos++) != 108 || StringTools.fastCodeAt(this.str, this.pos++) != 108) {
                            this.pos = save2;
                            this.invalidChar()
                        }
                        return null;
                    case 34:
                        return this.parseString();
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 45:
                        return this.parseNumber(c);
                    default:
                        this.invalidChar()
                }
            }
        },
        parseString: function() {
            var start = this.pos;
            var buf = null;
            while (true) {
                var c = StringTools.fastCodeAt(this.str, this.pos++);
                if (c == 34) {
                    break
                }
                if (c == 92) {
                    if (buf == null) {
                        buf = new StringBuf()
                    }
                    buf.addSub(this.str, start, this.pos - start - 1);
                    c = StringTools.fastCodeAt(this.str, this.pos++);
                    switch (c) {
                        case 114:
                            buf.b += "\r";
                            break;
                        case 110:
                            buf.b += "\n";
                            break;
                        case 116:
                            buf.b += "\t";
                            break;
                        case 98:
                            buf.b += "\x08";
                            break;
                        case 102:
                            buf.b += "\x0C";
                            break;
                        case 47:
                        case 92:
                        case 34:
                            buf.b += String.fromCharCode(c);
                            break;
                        case 117:
                            var uc = Std.parseInt("0x" + HxOverrides.substr(this.str, this.pos, 4));
                            this.pos += 4;
                            buf.b += String.fromCharCode(uc);
                            break;
                        default:
                            throw new js__$Boot_HaxeError("Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1))
                    }
                    start = this.pos
                } else {
                    if (c != c) {
                        throw new js__$Boot_HaxeError("Unclosed string")
                    }
                }
            }
            if (buf == null) {
                return HxOverrides.substr(this.str, start, this.pos - start - 1)
            } else {
                buf.addSub(this.str, start, this.pos - start - 1);
                return buf.b
            }
        },
        parseNumber: function(c) {
            var start = this.pos - 1;
            var minus = c == 45;
            var digit = !minus;
            var zero = c == 48;
            var point = false;
            var e = false;
            var pm = false;
            var end = false;
            while (true) {
                c = StringTools.fastCodeAt(this.str, this.pos++);
                switch (c) {
                    case 48:
                        if (zero && !point) {
                            this.invalidNumber(start)
                        }
                        if (minus) {
                            minus = false;
                            zero = true
                        }
                        digit = true;
                        break;
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                        if (zero && !point) {
                            this.invalidNumber(start)
                        }
                        if (minus) {
                            minus = false
                        }
                        digit = true;
                        zero = false;
                        break;
                    case 46:
                        if (minus || point) {
                            this.invalidNumber(start)
                        }
                        digit = false;
                        point = true;
                        break;
                    case 101:
                    case 69:
                        if (minus || zero || e) {
                            this.invalidNumber(start)
                        }
                        digit = false;
                        e = true;
                        break;
                    case 43:
                    case 45:
                        if (!e || pm) {
                            this.invalidNumber(start)
                        }
                        digit = false;
                        pm = true;
                        break;
                    default:
                        if (!digit) {
                            this.invalidNumber(start)
                        }
                        this.pos--;
                        end = true
                }
                if (end) {
                    break
                }
            }
            var f = Std.parseFloat(HxOverrides.substr(this.str, start, this.pos - start));
            var i = f | 0;
            if (i == f) {
                return i
            } else {
                return f
            }
        },
        invalidChar: function() {
            this.pos--;
            throw new js__$Boot_HaxeError("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos)
        },
        invalidNumber: function(start) {
            throw new js__$Boot_HaxeError("Invalid number at position " + start + ": " + HxOverrides.substr(this.str, start, this.pos - start))
        },
        __class__: haxe_format_JsonParser
    };
    var haxe_format_JsonPrinter = function(replacer, space) {
        this.replacer = replacer;
        this.indent = space;
        this.pretty = space != null;
        this.nind = 0;
        this.buf = new StringBuf()
    };
    $hxClasses["haxe.format.JsonPrinter"] = haxe_format_JsonPrinter;
    haxe_format_JsonPrinter.__name__ = ["haxe", "format", "JsonPrinter"];
    haxe_format_JsonPrinter.print = function(o, replacer, space) {
        var printer = new haxe_format_JsonPrinter(replacer, space);
        printer.write("", o);
        return printer.buf.b
    };
    haxe_format_JsonPrinter.prototype = {
        buf: null,
        replacer: null,
        indent: null,
        pretty: null,
        nind: null,
        ipad: function() {
            if (this.pretty) {
                var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
                if (v == null) {
                    this.buf.b += "null"
                } else {
                    this.buf.b += "" + v
                }
            }
        },
        write: function(k, v) {
            if (this.replacer != null) {
                v = this.replacer(k, v)
            }
            var _g = Type["typeof"](v);
            switch (_g[1]) {
                case 8:
                    this.buf.b += '"???"';
                    break;
                case 4:
                    this.fieldsString(v, Reflect.fields(v));
                    break;
                case 1:
                    var v1 = v;
                    if (v1 == null) {
                        this.buf.b += "null"
                    } else {
                        this.buf.b += "" + v1
                    }
                    break;
                case 2:
                    var v2;
                    if ((function($this) {
                            var $r;
                            var f = v;
                            $r = isFinite(f);
                            return $r
                        }(this))) {
                        v2 = v
                    } else {
                        v2 = "null"
                    }
                    if (v2 == null) {
                        this.buf.b += "null"
                    } else {
                        this.buf.b += "" + v2
                    }
                    break;
                case 5:
                    this.buf.b += '"<fun>"';
                    break;
                case 6:
                    var c = _g[2];
                    if (c == String) {
                        this.quote(v)
                    } else {
                        if (c == Array) {
                            var v3 = v;
                            this.buf.b += "[";
                            var len = v3.length;
                            var last = len - 1;
                            var _g1 = 0;
                            while (_g1 < len) {
                                var i = _g1++;
                                if (i > 0) {
                                    this.buf.b += ","
                                } else {
                                    this.nind++
                                }
                                if (this.pretty) {
                                    this.buf.b += "\n"
                                }
                                this.ipad();
                                this.write(i, v3[i]);
                                if (i == last) {
                                    this.nind--;
                                    if (this.pretty) {
                                        this.buf.b += "\n"
                                    }
                                    this.ipad()
                                }
                            }
                            this.buf.b += "]"
                        } else {
                            if (c == haxe_ds_StringMap) {
                                var v4 = v;
                                var o = {};
                                var $it0 = v4.keys();
                                while ($it0.hasNext()) {
                                    var k1 = $it0.next();
                                    Reflect.setField(o, k1, __map_reserved[k1] != null ? v4.getReserved(k1) : v4.h[k1])
                                }
                                this.fieldsString(o, Reflect.fields(o))
                            } else {
                                if (c == Date) {
                                    var v5 = v;
                                    this.quote(HxOverrides.dateStr(v5))
                                } else {
                                    this.fieldsString(v, Reflect.fields(v))
                                }
                            }
                        }
                    }
                    break;
                case 7:
                    var i1 = Type.enumIndex(v);
                    var v6 = i1;
                    if (v6 == null) {
                        this.buf.b += "null"
                    } else {
                        this.buf.b += "" + v6
                    }
                    break;
                case 3:
                    var v7 = v;
                    if (v7 == null) {
                        this.buf.b += "null"
                    } else {
                        this.buf.b += "" + v7
                    }
                    break;
                case 0:
                    this.buf.b += "null";
                    break
            }
        },
        fieldsString: function(v, fields) {
            this.buf.b += "{";
            var len = fields.length;
            var last = len - 1;
            var first = true;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var f = fields[i];
                var value = Reflect.field(v, f);
                if (Reflect.isFunction(value)) {
                    continue
                }
                if (first) {
                    this.nind++;
                    first = false
                } else {
                    this.buf.b += ","
                }
                if (this.pretty) {
                    this.buf.b += "\n"
                }
                this.ipad();
                this.quote(f);
                this.buf.b += ":";
                if (this.pretty) {
                    this.buf.b += " "
                }
                this.write(f, value);
                if (i == last) {
                    this.nind--;
                    if (this.pretty) {
                        this.buf.b += "\n"
                    }
                    this.ipad()
                }
            }
            this.buf.b += "}"
        },
        quote: function(s) {
            this.buf.b += '"';
            var i = 0;
            while (true) {
                var c = StringTools.fastCodeAt(s, i++);
                if (c != c) {
                    break
                }
                switch (c) {
                    case 34:
                        this.buf.b += '\\"';
                        break;
                    case 92:
                        this.buf.b += "\\\\";
                        break;
                    case 10:
                        this.buf.b += "\\n";
                        break;
                    case 13:
                        this.buf.b += "\\r";
                        break;
                    case 9:
                        this.buf.b += "\\t";
                        break;
                    case 8:
                        this.buf.b += "\\b";
                        break;
                    case 12:
                        this.buf.b += "\\f";
                        break;
                    default:
                        this.buf.b += String.fromCharCode(c)
                }
            }
            this.buf.b += '"'
        },
        __class__: haxe_format_JsonPrinter
    };
    var haxe_io_BytesBuffer = function() {
        this.b = []
    };
    $hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
    haxe_io_BytesBuffer.__name__ = ["haxe", "io", "BytesBuffer"];
    haxe_io_BytesBuffer.prototype = {
        b: null,
        add: function(src) {
            var b1 = this.b;
            var b2 = src.b;
            var _g1 = 0;
            var _g = src.length;
            while (_g1 < _g) {
                var i = _g1++;
                this.b.push(b2[i])
            }
        },
        addBytes: function(src, pos, len) {
            if (pos < 0 || len < 0 || pos + len > src.length) {
                throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
            }
            var b1 = this.b;
            var b2 = src.b;
            var _g1 = pos;
            var _g = pos + len;
            while (_g1 < _g) {
                var i = _g1++;
                this.b.push(b2[i])
            }
        },
        getBytes: function() {
            var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
            this.b = null;
            return bytes
        },
        __class__: haxe_io_BytesBuffer
    };
    var haxe_io_Input = function() {};
    $hxClasses["haxe.io.Input"] = haxe_io_Input;
    haxe_io_Input.__name__ = ["haxe", "io", "Input"];
    haxe_io_Input.prototype = {
        bigEndian: null,
        readByte: function() {
            throw new js__$Boot_HaxeError("Not implemented")
        },
        readBytes: function(s, pos, len) {
            var k = len;
            var b = s.b;
            if (pos < 0 || len < 0 || pos + len > s.length) {
                throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
            }
            while (k > 0) {
                b[pos] = this.readByte();
                pos++;
                k--
            }
            return len
        },
        set_bigEndian: function(b) {
            this.bigEndian = b;
            return b
        },
        readFullBytes: function(s, pos, len) {
            while (len > 0) {
                var k = this.readBytes(s, pos, len);
                pos += k;
                len -= k
            }
        },
        read: function(nbytes) {
            var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
            var p = 0;
            while (nbytes > 0) {
                var k = this.readBytes(s, p, nbytes);
                if (k == 0) {
                    throw new js__$Boot_HaxeError(haxe_io_Error.Blocked)
                }
                p += k;
                nbytes -= k
            }
            return s
        },
        readUntil: function(end) {
            var buf_b = "";
            var last;
            while ((last = this.readByte()) != end) {
                buf_b += String.fromCharCode(last)
            }
            return buf_b
        },
        readDouble: function() {
            var i1 = this.readInt32();
            var i2 = this.readInt32();
            if (this.bigEndian) {
                return haxe_io_FPHelper.i64ToDouble(i2, i1)
            } else {
                return haxe_io_FPHelper.i64ToDouble(i1, i2)
            }
        },
        readUInt16: function() {
            var ch1 = this.readByte();
            var ch2 = this.readByte();
            if (this.bigEndian) {
                return ch2 | ch1 << 8
            } else {
                return ch1 | ch2 << 8
            }
        },
        readInt32: function() {
            var ch1 = this.readByte();
            var ch2 = this.readByte();
            var ch3 = this.readByte();
            var ch4 = this.readByte();
            if (this.bigEndian) {
                return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24
            } else {
                return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24
            }
        },
        readString: function(len) {
            var b = new haxe_io_Bytes(new ArrayBuffer(len));
            this.readFullBytes(b, 0, len);
            return b.toString()
        },
        __class__: haxe_io_Input,
        __properties__: {
            set_bigEndian: "set_bigEndian"
        }
    };
    var haxe_io_BytesInput = function(b, pos, len) {
        if (pos == null) {
            pos = 0
        }
        if (len == null) {
            len = b.length - pos
        }
        if (pos < 0 || len < 0 || pos + len > b.length) {
            throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
        }
        this.b = b.b;
        this.pos = pos;
        this.len = len;
        this.totlen = len
    };
    $hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
    haxe_io_BytesInput.__name__ = ["haxe", "io", "BytesInput"];
    haxe_io_BytesInput.__super__ = haxe_io_Input;
    haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype, {
        b: null,
        pos: null,
        len: null,
        totlen: null,
        readByte: function() {
            if (this.len == 0) {
                throw new js__$Boot_HaxeError(new haxe_io_Eof())
            }
            this.len--;
            return this.b[this.pos++]
        },
        readBytes: function(buf, pos, len) {
            if (pos < 0 || len < 0 || pos + len > buf.length) {
                throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
            }
            if (this.len == 0 && len > 0) {
                throw new js__$Boot_HaxeError(new haxe_io_Eof())
            }
            if (this.len < len) {
                len = this.len
            }
            var b1 = this.b;
            var b2 = buf.b;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                b2[pos + i] = b1[this.pos + i]
            }
            this.pos += len;
            this.len -= len;
            return len
        },
        __class__: haxe_io_BytesInput
    });
    var haxe_io_Output = function() {};
    $hxClasses["haxe.io.Output"] = haxe_io_Output;
    haxe_io_Output.__name__ = ["haxe", "io", "Output"];
    haxe_io_Output.prototype = {
        bigEndian: null,
        writeByte: function(c) {
            throw new js__$Boot_HaxeError("Not implemented")
        },
        writeBytes: function(s, pos, len) {
            var k = len;
            var b = s.b.bufferValue;
            if (pos < 0 || len < 0 || pos + len > s.length) {
                throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
            }
            while (k > 0) {
                this.writeByte(b[pos]);
                pos++;
                k--
            }
            return len
        },
        set_bigEndian: function(b) {
            this.bigEndian = b;
            return b
        },
        write: function(s) {
            var l = s.length;
            var p = 0;
            while (l > 0) {
                var k = this.writeBytes(s, p, l);
                if (k == 0) {
                    throw new js__$Boot_HaxeError(haxe_io_Error.Blocked)
                }
                p += k;
                l -= k
            }
        },
        writeFullBytes: function(s, pos, len) {
            while (len > 0) {
                var k = this.writeBytes(s, pos, len);
                pos += k;
                len -= k
            }
        },
        writeDouble: function(x) {
            var i64 = haxe_io_FPHelper.doubleToI64(x);
            if (this.bigEndian) {
                this.writeInt32(i64.high);
                this.writeInt32(i64.low)
            } else {
                this.writeInt32(i64.low);
                this.writeInt32(i64.high)
            }
        },
        writeInt32: function(x) {
            if (this.bigEndian) {
                this.writeByte(x >>> 24);
                this.writeByte(x >> 16 & 255);
                this.writeByte(x >> 8 & 255);
                this.writeByte(x & 255)
            } else {
                this.writeByte(x & 255);
                this.writeByte(x >> 8 & 255);
                this.writeByte(x >> 16 & 255);
                this.writeByte(x >>> 24)
            }
        },
        writeString: function(s) {
            var b = haxe_io_Bytes.ofString(s);
            this.writeFullBytes(b, 0, b.length)
        },
        __class__: haxe_io_Output,
        __properties__: {
            set_bigEndian: "set_bigEndian"
        }
    };
    var haxe_io_BytesOutput = function() {
        this.b = new haxe_io_BytesBuffer()
    };
    $hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
    haxe_io_BytesOutput.__name__ = ["haxe", "io", "BytesOutput"];
    haxe_io_BytesOutput.__super__ = haxe_io_Output;
    haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype, {
        b: null,
        writeByte: function(c) {
            this.b.b.push(c)
        },
        writeBytes: function(buf, pos, len) {
            this.b.addBytes(buf, pos, len);
            return len
        },
        getBytes: function() {
            return this.b.getBytes()
        },
        __class__: haxe_io_BytesOutput
    });
    var haxe_io_Eof = function() {};
    $hxClasses["haxe.io.Eof"] = haxe_io_Eof;
    haxe_io_Eof.__name__ = ["haxe", "io", "Eof"];
    haxe_io_Eof.prototype = {
        toString: function() {
            return "Eof"
        },
        __class__: haxe_io_Eof
    };
    var haxe_io_Error = $hxClasses["haxe.io.Error"] = {
        __ename__: ["haxe", "io", "Error"],
        __constructs__: ["Blocked", "Overflow", "OutsideBounds", "Custom"]
    };
    haxe_io_Error.Blocked = ["Blocked", 0];
    haxe_io_Error.Blocked.toString = $estr;
    haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
    haxe_io_Error.Overflow = ["Overflow", 1];
    haxe_io_Error.Overflow.toString = $estr;
    haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
    haxe_io_Error.OutsideBounds = ["OutsideBounds", 2];
    haxe_io_Error.OutsideBounds.toString = $estr;
    haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
    haxe_io_Error.Custom = function(e) {
        var $x = ["Custom", 3, e];
        $x.__enum__ = haxe_io_Error;
        $x.toString = $estr;
        return $x
    };
    var haxe_io_FPHelper = function() {};
    $hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
    haxe_io_FPHelper.__name__ = ["haxe", "io", "FPHelper"];
    haxe_io_FPHelper.i32ToFloat = function(i) {
        var sign = 1 - (i >>> 31 << 1);
        var exp = i >>> 23 & 255;
        var sig = i & 8388607;
        if (sig == 0 && exp == 0) {
            return 0
        }
        return sign * (1 + Math.pow(2, -23) * sig) * Math.pow(2, exp - 127)
    };
    haxe_io_FPHelper.floatToI32 = function(f) {
        if (f == 0) {
            return 0
        }
        var af;
        if (f < 0) {
            af = -f
        } else {
            af = f
        }
        var exp = Math.floor(Math.log(af) / 0.6931471805599453);
        if (exp < -127) {
            exp = -127
        } else {
            if (exp > 128) {
                exp = 128
            }
        }
        var sig = Math.round((af / Math.pow(2, exp) - 1) * 8388608);
        if (sig == 8388608 && exp < 128) {
            sig = 0;
            exp++
        }
        return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig
    };
    haxe_io_FPHelper.i64ToDouble = function(low, high) {
        var sign = 1 - (high >>> 31 << 1);
        var exp = (high >> 20 & 2047) - 1023;
        var sig = (high & 1048575) * 4294967296 + (low >>> 31) * 2147483648 + (low & 2147483647);
        if (sig == 0 && exp == -1023) {
            return 0
        }
        return sign * (1 + Math.pow(2, -52) * sig) * Math.pow(2, exp)
    };
    haxe_io_FPHelper.doubleToI64 = function(v) {
        var i64 = haxe_io_FPHelper.i64tmp;
        if (v == 0) {
            i64.low = 0;
            i64.high = 0
        } else {
            if (!isFinite(v)) {
                if (v > 0) {
                    i64.low = 0;
                    i64.high = 2146435072
                } else {
                    i64.low = 0;
                    i64.high = -1048576
                }
            } else {
                var av;
                if (v < 0) {
                    av = -v
                } else {
                    av = v
                }
                var exp = Math.floor(Math.log(av) / 0.6931471805599453);
                var sig;
                var v1 = (av / Math.pow(2, exp) - 1) * 4503599627370496;
                sig = Math.round(v1);
                var sig_l = sig | 0;
                var sig_h = sig / 4294967296 | 0;
                i64.low = sig_l;
                i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h
            }
        }
        return i64
    };
    var haxe_io_Path = function(path) {
        switch (path) {
            case ".":
            case "..":
                this.dir = path;
                this.file = "";
                return
        }
        var c1 = path.lastIndexOf("/");
        var c2 = path.lastIndexOf("\\");
        if (c1 < c2) {
            this.dir = HxOverrides.substr(path, 0, c2);
            path = HxOverrides.substr(path, c2 + 1, null);
            this.backslash = true
        } else {
            if (c2 < c1) {
                this.dir = HxOverrides.substr(path, 0, c1);
                path = HxOverrides.substr(path, c1 + 1, null)
            } else {
                this.dir = null
            }
        }
        var cp = path.lastIndexOf(".");
        if (cp != -1) {
            this.ext = HxOverrides.substr(path, cp + 1, null);
            this.file = HxOverrides.substr(path, 0, cp)
        } else {
            this.ext = null;
            this.file = path
        }
    };
    $hxClasses["haxe.io.Path"] = haxe_io_Path;
    haxe_io_Path.__name__ = ["haxe", "io", "Path"];
    haxe_io_Path.withoutExtension = function(path) {
        var s = new haxe_io_Path(path);
        s.ext = null;
        return s.toString()
    };
    haxe_io_Path.withoutDirectory = function(path) {
        var s = new haxe_io_Path(path);
        s.dir = null;
        return s.toString()
    };
    haxe_io_Path.directory = function(path) {
        var s = new haxe_io_Path(path);
        if (s.dir == null) {
            return ""
        }
        return s.dir
    };
    haxe_io_Path.extension = function(path) {
        var s = new haxe_io_Path(path);
        if (s.ext == null) {
            return ""
        }
        return s.ext
    };
    haxe_io_Path.prototype = {
        dir: null,
        file: null,
        ext: null,
        backslash: null,
        toString: function() {
            return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext)
        },
        __class__: haxe_io_Path
    };
    var haxe_rtti_CType = $hxClasses["haxe.rtti.CType"] = {
        __ename__: ["haxe", "rtti", "CType"],
        __constructs__: ["CUnknown", "CEnum", "CClass", "CTypedef", "CFunction", "CAnonymous", "CDynamic", "CAbstract"]
    };
    haxe_rtti_CType.CUnknown = ["CUnknown", 0];
    haxe_rtti_CType.CUnknown.toString = $estr;
    haxe_rtti_CType.CUnknown.__enum__ = haxe_rtti_CType;
    haxe_rtti_CType.CEnum = function(name, params) {
        var $x = ["CEnum", 1, name, params];
        $x.__enum__ = haxe_rtti_CType;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_CType.CClass = function(name, params) {
        var $x = ["CClass", 2, name, params];
        $x.__enum__ = haxe_rtti_CType;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_CType.CTypedef = function(name, params) {
        var $x = ["CTypedef", 3, name, params];
        $x.__enum__ = haxe_rtti_CType;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_CType.CFunction = function(args, ret) {
        var $x = ["CFunction", 4, args, ret];
        $x.__enum__ = haxe_rtti_CType;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_CType.CAnonymous = function(fields) {
        var $x = ["CAnonymous", 5, fields];
        $x.__enum__ = haxe_rtti_CType;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_CType.CDynamic = function(t) {
        var $x = ["CDynamic", 6, t];
        $x.__enum__ = haxe_rtti_CType;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_CType.CAbstract = function(name, params) {
        var $x = ["CAbstract", 7, name, params];
        $x.__enum__ = haxe_rtti_CType;
        $x.toString = $estr;
        return $x
    };
    var haxe_rtti_Rights = $hxClasses["haxe.rtti.Rights"] = {
        __ename__: ["haxe", "rtti", "Rights"],
        __constructs__: ["RNormal", "RNo", "RCall", "RMethod", "RDynamic", "RInline"]
    };
    haxe_rtti_Rights.RNormal = ["RNormal", 0];
    haxe_rtti_Rights.RNormal.toString = $estr;
    haxe_rtti_Rights.RNormal.__enum__ = haxe_rtti_Rights;
    haxe_rtti_Rights.RNo = ["RNo", 1];
    haxe_rtti_Rights.RNo.toString = $estr;
    haxe_rtti_Rights.RNo.__enum__ = haxe_rtti_Rights;
    haxe_rtti_Rights.RCall = function(m) {
        var $x = ["RCall", 2, m];
        $x.__enum__ = haxe_rtti_Rights;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_Rights.RMethod = ["RMethod", 3];
    haxe_rtti_Rights.RMethod.toString = $estr;
    haxe_rtti_Rights.RMethod.__enum__ = haxe_rtti_Rights;
    haxe_rtti_Rights.RDynamic = ["RDynamic", 4];
    haxe_rtti_Rights.RDynamic.toString = $estr;
    haxe_rtti_Rights.RDynamic.__enum__ = haxe_rtti_Rights;
    haxe_rtti_Rights.RInline = ["RInline", 5];
    haxe_rtti_Rights.RInline.toString = $estr;
    haxe_rtti_Rights.RInline.__enum__ = haxe_rtti_Rights;
    var haxe_rtti_TypeTree = $hxClasses["haxe.rtti.TypeTree"] = {
        __ename__: ["haxe", "rtti", "TypeTree"],
        __constructs__: ["TPackage", "TClassdecl", "TEnumdecl", "TTypedecl", "TAbstractdecl"]
    };
    haxe_rtti_TypeTree.TPackage = function(name, full, subs) {
        var $x = ["TPackage", 0, name, full, subs];
        $x.__enum__ = haxe_rtti_TypeTree;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_TypeTree.TClassdecl = function(c) {
        var $x = ["TClassdecl", 1, c];
        $x.__enum__ = haxe_rtti_TypeTree;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_TypeTree.TEnumdecl = function(e) {
        var $x = ["TEnumdecl", 2, e];
        $x.__enum__ = haxe_rtti_TypeTree;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_TypeTree.TTypedecl = function(t) {
        var $x = ["TTypedecl", 3, t];
        $x.__enum__ = haxe_rtti_TypeTree;
        $x.toString = $estr;
        return $x
    };
    haxe_rtti_TypeTree.TAbstractdecl = function(a) {
        var $x = ["TAbstractdecl", 4, a];
        $x.__enum__ = haxe_rtti_TypeTree;
        $x.toString = $estr;
        return $x
    };
    var haxe_rtti_Meta = function() {};
    $hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
    haxe_rtti_Meta.__name__ = ["haxe", "rtti", "Meta"];
    haxe_rtti_Meta.getMeta = function(t) {
        return t.__meta__
    };
    haxe_rtti_Meta.getFields = function(t) {
        var meta = haxe_rtti_Meta.getMeta(t);
        if (meta == null || meta.fields == null) {
            return {}
        } else {
            return meta.fields
        }
    };
    var haxe_rtti_Rtti = function() {};
    $hxClasses["haxe.rtti.Rtti"] = haxe_rtti_Rtti;
    haxe_rtti_Rtti.__name__ = ["haxe", "rtti", "Rtti"];
    haxe_rtti_Rtti.getRtti = function(c) {
        var rtti = Reflect.field(c, "__rtti");
        if (rtti == null) {
            throw new js__$Boot_HaxeError("Class " + Type.getClassName(c) + " has no RTTI information, consider adding @:rtti")
        }
        var x = Xml.parse(rtti).firstElement();
        var infos = new haxe_rtti_XmlParser().processElement(x);
        var t = infos;
        switch (infos[1]) {
            case 1:
                var c1 = infos[2];
                return c1;
            default:
                throw new js__$Boot_HaxeError("Enum mismatch: expected TClassDecl but found " + Std.string(t))
        }
    };
    var haxe_rtti_XmlParser = function() {
        this.root = []
    };
    $hxClasses["haxe.rtti.XmlParser"] = haxe_rtti_XmlParser;
    haxe_rtti_XmlParser.__name__ = ["haxe", "rtti", "XmlParser"];
    haxe_rtti_XmlParser.prototype = {
        root: null,
        curplatform: null,
        mkPath: function(p) {
            return p
        },
        mkTypeParams: function(p) {
            var pl = p.split(":");
            if (pl[0] == "") {
                return []
            }
            return pl
        },
        mkRights: function(r) {
            switch (r) {
                case "null":
                    return haxe_rtti_Rights.RNo;
                case "method":
                    return haxe_rtti_Rights.RMethod;
                case "dynamic":
                    return haxe_rtti_Rights.RDynamic;
                case "inline":
                    return haxe_rtti_Rights.RInline;
                default:
                    return haxe_rtti_Rights.RCall(r)
            }
        },
        xerror: function(c) {
            throw new js__$Boot_HaxeError("Invalid " + c.get_name())
        },
        processElement: function(x) {
            var c = new haxe_xml_Fast(x);
            var _g = c.get_name();
            switch (_g) {
                case "class":
                    return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
                case "enum":
                    return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
                case "typedef":
                    return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
                case "abstract":
                    return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
                default:
                    return this.xerror(c)
            }
        },
        xmeta: function(x) {
            var ml = [];
            var _g = x.nodes.resolve("m").iterator();
            while (_g.head != null) {
                var m;
                m = (function($this) {
                    var $r;
                    _g.val = _g.head[0];
                    _g.head = _g.head[1];
                    $r = _g.val;
                    return $r
                }(this));
                var pl = [];
                var _g1 = m.nodes.resolve("e").iterator();
                while (_g1.head != null) {
                    var p;
                    p = (function($this) {
                        var $r;
                        _g1.val = _g1.head[0];
                        _g1.head = _g1.head[1];
                        $r = _g1.val;
                        return $r
                    }(this));
                    pl.push(p.get_innerHTML())
                }
                ml.push({
                    name: m.att.resolve("n"),
                    params: pl
                })
            }
            return ml
        },
        xoverloads: function(x) {
            var l = new List();
            var $it0 = x.get_elements();
            while ($it0.hasNext()) {
                var m = $it0.next();
                l.add(this.xclassfield(m))
            }
            return l
        },
        xpath: function(x) {
            var path = this.mkPath(x.att.resolve("path"));
            var params = new List();
            var $it0 = x.get_elements();
            while ($it0.hasNext()) {
                var c = $it0.next();
                params.add(this.xtype(c))
            }
            return {
                path: path,
                params: params
            }
        },
        xclass: function(x) {
            var csuper = null;
            var doc = null;
            var tdynamic = null;
            var interfaces = new List();
            var fields = new List();
            var statics = new List();
            var meta = [];
            var $it0 = x.get_elements();
            while ($it0.hasNext()) {
                var c = $it0.next();
                var _g = c.get_name();
                switch (_g) {
                    case "haxe_doc":
                        doc = c.get_innerData();
                        break;
                    case "extends":
                        csuper = this.xpath(c);
                        break;
                    case "implements":
                        interfaces.add(this.xpath(c));
                        break;
                    case "haxe_dynamic":
                        tdynamic = this.xtype(new haxe_xml_Fast(c.x.firstElement()));
                        break;
                    case "meta":
                        meta = this.xmeta(c);
                        break;
                    default:
                        if (c.x.exists("static")) {
                            statics.add(this.xclassfield(c))
                        } else {
                            fields.add(this.xclassfield(c))
                        }
                }
            }
            return {
                file: x.has.resolve("file") ? x.att.resolve("file") : null,
                path: this.mkPath(x.att.resolve("path")),
                module: x.has.resolve("module") ? this.mkPath(x.att.resolve("module")) : null,
                doc: doc,
                isPrivate: x.x.exists("private"),
                isExtern: x.x.exists("extern"),
                isInterface: x.x.exists("interface"),
                params: this.mkTypeParams(x.att.resolve("params")),
                superClass: csuper,
                interfaces: interfaces,
                fields: fields,
                statics: statics,
                tdynamic: tdynamic,
                platforms: this.defplat(),
                meta: meta
            }
        },
        xclassfield: function(x, defPublic) {
            if (defPublic == null) {
                defPublic = false
            }
            var e = x.get_elements();
            var t = this.xtype(e.next());
            var doc = null;
            var meta = [];
            var overloads = null;
            while (e.hasNext()) {
                var c = e.next();
                var _g = c.get_name();
                switch (_g) {
                    case "haxe_doc":
                        doc = c.get_innerData();
                        break;
                    case "meta":
                        meta = this.xmeta(c);
                        break;
                    case "overloads":
                        overloads = this.xoverloads(c);
                        break;
                    default:
                        this.xerror(c)
                }
            }
            return {
                name: x.get_name(),
                type: t,
                isPublic: x.x.exists("public") || defPublic,
                isOverride: x.x.exists("override"),
                line: x.has.resolve("line") ? Std.parseInt(x.att.resolve("line")) : null,
                doc: doc,
                get: x.has.resolve("get") ? this.mkRights(x.att.resolve("get")) : haxe_rtti_Rights.RNormal,
                set: x.has.resolve("set") ? this.mkRights(x.att.resolve("set")) : haxe_rtti_Rights.RNormal,
                params: x.has.resolve("params") ? this.mkTypeParams(x.att.resolve("params")) : [],
                platforms: this.defplat(),
                meta: meta,
                overloads: overloads,
                expr: x.has.resolve("expr") ? x.att.resolve("expr") : null
            }
        },
        xenum: function(x) {
            var cl = new List();
            var doc = null;
            var meta = [];
            var $it0 = x.get_elements();
            while ($it0.hasNext()) {
                var c = $it0.next();
                if (c.get_name() == "haxe_doc") {
                    doc = c.get_innerData()
                } else {
                    if (c.get_name() == "meta") {
                        meta = this.xmeta(c)
                    } else {
                        cl.add(this.xenumfield(c))
                    }
                }
            }
            return {
                file: x.has.resolve("file") ? x.att.resolve("file") : null,
                path: this.mkPath(x.att.resolve("path")),
                module: x.has.resolve("module") ? this.mkPath(x.att.resolve("module")) : null,
                doc: doc,
                isPrivate: x.x.exists("private"),
                isExtern: x.x.exists("extern"),
                params: this.mkTypeParams(x.att.resolve("params")),
                constructors: cl,
                platforms: this.defplat(),
                meta: meta
            }
        },
        xenumfield: function(x) {
            var args = null;
            var xdoc = x.x.elementsNamed("haxe_doc").next();
            var meta;
            if (x.hasNode.resolve("meta")) {
                meta = this.xmeta(x.node.resolve("meta"))
            } else {
                meta = []
            }
            if (x.has.resolve("a")) {
                var names = x.att.resolve("a").split(":");
                var elts = x.get_elements();
                args = new List();
                var _g = 0;
                while (_g < names.length) {
                    var c = names[_g];
                    ++_g;
                    var opt = false;
                    if (c.charAt(0) == "?") {
                        opt = true;
                        c = HxOverrides.substr(c, 1, null)
                    }
                    args.add({
                        name: c,
                        opt: opt,
                        t: this.xtype(elts.next())
                    })
                }
            }
            return {
                name: x.get_name(),
                args: args,
                doc: xdoc == null ? null : new haxe_xml_Fast(xdoc).get_innerData(),
                meta: meta,
                platforms: this.defplat()
            }
        },
        xabstract: function(x) {
            var doc = null;
            var impl = null;
            var athis = null;
            var meta = [];
            var to = [];
            var from = [];
            var $it0 = x.get_elements();
            while ($it0.hasNext()) {
                var c = $it0.next();
                var _g = c.get_name();
                switch (_g) {
                    case "haxe_doc":
                        doc = c.get_innerData();
                        break;
                    case "meta":
                        meta = this.xmeta(c);
                        break;
                    case "to":
                        var $it1 = c.get_elements();
                        while ($it1.hasNext()) {
                            var t = $it1.next();
                            to.push({
                                t: this.xtype(new haxe_xml_Fast(t.x.firstElement())),
                                field: t.has.resolve("field") ? t.att.resolve("field") : null
                            })
                        }
                        break;
                    case "from":
                        var $it2 = c.get_elements();
                        while ($it2.hasNext()) {
                            var t1 = $it2.next();
                            from.push({
                                t: this.xtype(new haxe_xml_Fast(t1.x.firstElement())),
                                field: t1.has.resolve("field") ? t1.att.resolve("field") : null
                            })
                        }
                        break;
                    case "impl":
                        impl = this.xclass(c.node.resolve("class"));
                        break;
                    case "this":
                        athis = this.xtype(new haxe_xml_Fast(c.x.firstElement()));
                        break;
                    default:
                        this.xerror(c)
                }
            }
            return {
                file: x.has.resolve("file") ? x.att.resolve("file") : null,
                path: this.mkPath(x.att.resolve("path")),
                module: x.has.resolve("module") ? this.mkPath(x.att.resolve("module")) : null,
                doc: doc,
                isPrivate: x.x.exists("private"),
                params: this.mkTypeParams(x.att.resolve("params")),
                platforms: this.defplat(),
                meta: meta,
                athis: athis,
                to: to,
                from: from,
                impl: impl
            }
        },
        xtypedef: function(x) {
            var doc = null;
            var t = null;
            var meta = [];
            var $it0 = x.get_elements();
            while ($it0.hasNext()) {
                var c = $it0.next();
                if (c.get_name() == "haxe_doc") {
                    doc = c.get_innerData()
                } else {
                    if (c.get_name() == "meta") {
                        meta = this.xmeta(c)
                    } else {
                        t = this.xtype(c)
                    }
                }
            }
            var types = new haxe_ds_StringMap();
            if (this.curplatform != null) {
                types.set(this.curplatform, t)
            }
            return {
                file: x.has.resolve("file") ? x.att.resolve("file") : null,
                path: this.mkPath(x.att.resolve("path")),
                module: x.has.resolve("module") ? this.mkPath(x.att.resolve("module")) : null,
                doc: doc,
                isPrivate: x.x.exists("private"),
                params: this.mkTypeParams(x.att.resolve("params")),
                type: t,
                types: types,
                platforms: this.defplat(),
                meta: meta
            }
        },
        xtype: function(x) {
            var _g = x.get_name();
            switch (_g) {
                case "unknown":
                    return haxe_rtti_CType.CUnknown;
                case "e":
                    return haxe_rtti_CType.CEnum(this.mkPath(x.att.resolve("path")), this.xtypeparams(x));
                case "c":
                    return haxe_rtti_CType.CClass(this.mkPath(x.att.resolve("path")), this.xtypeparams(x));
                case "t":
                    return haxe_rtti_CType.CTypedef(this.mkPath(x.att.resolve("path")), this.xtypeparams(x));
                case "x":
                    return haxe_rtti_CType.CAbstract(this.mkPath(x.att.resolve("path")), this.xtypeparams(x));
                case "f":
                    var args = new List();
                    var aname = x.att.resolve("a").split(":");
                    var eargs = HxOverrides.iter(aname);
                    var evalues;
                    if (x.has.resolve("v")) {
                        var _this = x.att.resolve("v").split(":");
                        evalues = HxOverrides.iter(_this)
                    } else {
                        evalues = null
                    }
                    var $it0 = x.get_elements();
                    while ($it0.hasNext()) {
                        var e = $it0.next();
                        var opt = false;
                        var a = eargs.next();
                        if (a == null) {
                            a = ""
                        }
                        if (a.charAt(0) == "?") {
                            opt = true;
                            a = HxOverrides.substr(a, 1, null)
                        }
                        var v;
                        if (evalues == null) {
                            v = null
                        } else {
                            v = evalues.next()
                        }
                        args.add({
                            name: a,
                            opt: opt,
                            t: this.xtype(e),
                            value: v == "" ? null : v
                        })
                    }
                    var ret = args.last();
                    args.remove(ret);
                    return haxe_rtti_CType.CFunction(args, ret.t);
                case "a":
                    var fields = new List();
                    var $it1 = x.get_elements();
                    while ($it1.hasNext()) {
                        var f = $it1.next();
                        var f1 = this.xclassfield(f, true);
                        f1.platforms = new List();
                        fields.add(f1)
                    }
                    return haxe_rtti_CType.CAnonymous(fields);
                case "d":
                    var t = null;
                    var tx = x.x.firstElement();
                    if (tx != null) {
                        t = this.xtype(new haxe_xml_Fast(tx))
                    }
                    return haxe_rtti_CType.CDynamic(t);
                default:
                    return this.xerror(x)
            }
        },
        xtypeparams: function(x) {
            var p = new List();
            var $it0 = x.get_elements();
            while ($it0.hasNext()) {
                var c = $it0.next();
                p.add(this.xtype(c))
            }
            return p
        },
        defplat: function() {
            var l = new List();
            if (this.curplatform != null) {
                l.add(this.curplatform)
            }
            return l
        },
        __class__: haxe_rtti_XmlParser
    };
    var haxe_xml__$Fast_NodeAccess = function(x) {
        this.__x = x
    };
    $hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
    haxe_xml__$Fast_NodeAccess.__name__ = ["haxe", "xml", "_Fast", "NodeAccess"];
    haxe_xml__$Fast_NodeAccess.prototype = {
        __x: null,
        resolve: function(name) {
            var x = this.__x.elementsNamed(name).next();
            if (x == null) {
                var xname;
                if (this.__x.nodeType == Xml.Document) {
                    xname = "Document"
                } else {
                    xname = this.__x.get_nodeName()
                }
                throw new js__$Boot_HaxeError(xname + " is missing element " + name)
            }
            return new haxe_xml_Fast(x)
        },
        __class__: haxe_xml__$Fast_NodeAccess
    };
    var haxe_xml__$Fast_AttribAccess = function(x) {
        this.__x = x
    };
    $hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
    haxe_xml__$Fast_AttribAccess.__name__ = ["haxe", "xml", "_Fast", "AttribAccess"];
    haxe_xml__$Fast_AttribAccess.prototype = {
        __x: null,
        resolve: function(name) {
            if (this.__x.nodeType == Xml.Document) {
                throw new js__$Boot_HaxeError("Cannot access document attribute " + name)
            }
            var v = this.__x.get(name);
            if (v == null) {
                throw new js__$Boot_HaxeError(this.__x.get_nodeName() + " is missing attribute " + name)
            }
            return v
        },
        __class__: haxe_xml__$Fast_AttribAccess
    };
    var haxe_xml__$Fast_HasAttribAccess = function(x) {
        this.__x = x
    };
    $hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
    haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe", "xml", "_Fast", "HasAttribAccess"];
    haxe_xml__$Fast_HasAttribAccess.prototype = {
        __x: null,
        resolve: function(name) {
            if (this.__x.nodeType == Xml.Document) {
                throw new js__$Boot_HaxeError("Cannot access document attribute " + name)
            }
            return this.__x.exists(name)
        },
        __class__: haxe_xml__$Fast_HasAttribAccess
    };
    var haxe_xml__$Fast_HasNodeAccess = function(x) {
        this.__x = x
    };
    $hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
    haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe", "xml", "_Fast", "HasNodeAccess"];
    haxe_xml__$Fast_HasNodeAccess.prototype = {
        __x: null,
        resolve: function(name) {
            return this.__x.elementsNamed(name).hasNext()
        },
        __class__: haxe_xml__$Fast_HasNodeAccess
    };
    var haxe_xml__$Fast_NodeListAccess = function(x) {
        this.__x = x
    };
    $hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
    haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe", "xml", "_Fast", "NodeListAccess"];
    haxe_xml__$Fast_NodeListAccess.prototype = {
        __x: null,
        resolve: function(name) {
            var l = new List();
            var $it0 = this.__x.elementsNamed(name);
            while ($it0.hasNext()) {
                var x = $it0.next();
                l.add(new haxe_xml_Fast(x))
            }
            return l
        },
        __class__: haxe_xml__$Fast_NodeListAccess
    };
    var haxe_xml_Fast = function(x) {
        if (x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
            throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType)
        }
        this.x = x;
        this.node = new haxe_xml__$Fast_NodeAccess(x);
        this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
        this.att = new haxe_xml__$Fast_AttribAccess(x);
        this.has = new haxe_xml__$Fast_HasAttribAccess(x);
        this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x)
    };
    $hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
    haxe_xml_Fast.__name__ = ["haxe", "xml", "Fast"];
    haxe_xml_Fast.prototype = {
        x: null,
        node: null,
        nodes: null,
        att: null,
        has: null,
        hasNode: null,
        get_name: function() {
            if (this.x.nodeType == Xml.Document) {
                return "Document"
            } else {
                return this.x.get_nodeName()
            }
        },
        get_innerData: function() {
            var it = this.x.iterator();
            if (!it.hasNext()) {
                throw new js__$Boot_HaxeError(this.get_name() + " does not have data")
            }
            var v = it.next();
            var n = it.next();
            if (n != null) {
                if (v.nodeType == Xml.PCData && n.nodeType == Xml.CData && StringTools.trim((function($this) {
                        var $r;
                        if (v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType)
                        }
                        $r = v.nodeValue;
                        return $r
                    }(this))) == "") {
                    var n2 = it.next();
                    if (n2 == null || n2.nodeType == Xml.PCData && StringTools.trim((function($this) {
                            var $r;
                            if (n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
                                throw new js__$Boot_HaxeError("Bad node type, unexpected " + n2.nodeType)
                            }
                            $r = n2.nodeValue;
                            return $r
                        }(this))) == "" && it.next() == null) {
                        if (n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType)
                        }
                        return n.nodeValue
                    }
                }
                throw new js__$Boot_HaxeError(this.get_name() + " does not only have data")
            }
            if (v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
                throw new js__$Boot_HaxeError(this.get_name() + " does not have data")
            }
            if (v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
                throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType)
            }
            return v.nodeValue
        },
        get_innerHTML: function() {
            var s = new StringBuf();
            var $it0 = this.x.iterator();
            while ($it0.hasNext()) {
                var x = $it0.next();
                s.add(haxe_xml_Printer.print(x))
            }
            return s.b
        },
        get_elements: function() {
            var it = this.x.elements();
            return {
                hasNext: $bind(it, it.hasNext),
                next: function() {
                    var x = it.next();
                    if (x == null) {
                        return null
                    }
                    return new haxe_xml_Fast(x)
                }
            }
        },
        __class__: haxe_xml_Fast,
        __properties__: {
            get_elements: "get_elements",
            get_innerHTML: "get_innerHTML",
            get_innerData: "get_innerData",
            get_name: "get_name"
        }
    };
    var haxe_xml_Parser = function() {};
    $hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
    haxe_xml_Parser.__name__ = ["haxe", "xml", "Parser"];
    haxe_xml_Parser.parse = function(str, strict) {
        if (strict == null) {
            strict = false
        }
        var doc = Xml.createDocument();
        haxe_xml_Parser.doParse(str, strict, 0, doc);
        return doc
    };
    haxe_xml_Parser.doParse = function(str, strict, p, parent) {
        if (p == null) {
            p = 0
        }
        var xml = null;
        var state = 1;
        var next = 1;
        var aname = null;
        var start = 0;
        var nsubs = 0;
        var nbrackets = 0;
        var c = str.charCodeAt(p);
        var buf = new StringBuf();
        var escapeNext = 1;
        var attrValQuote = -1;
        while (!(c != c)) {
            switch (state) {
                case 0:
                    switch (c) {
                        case 10:
                        case 13:
                        case 9:
                        case 32:
                            break;
                        default:
                            state = next;
                            continue
                    }
                    break;
                case 1:
                    switch (c) {
                        case 60:
                            state = 0;
                            next = 2;
                            break;
                        default:
                            start = p;
                            state = 13;
                            continue
                    }
                    break;
                case 13:
                    if (c == 60) {
                        buf.addSub(str, start, p - start);
                        var child = Xml.createPCData(buf.b);
                        buf = new StringBuf();
                        parent.addChild(child);
                        nsubs++;
                        state = 0;
                        next = 2
                    } else {
                        if (c == 38) {
                            buf.addSub(str, start, p - start);
                            state = 18;
                            escapeNext = 13;
                            start = p + 1
                        }
                    }
                    break;
                case 17:
                    if (c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
                        var child1 = Xml.createCData(HxOverrides.substr(str, start, p - start));
                        parent.addChild(child1);
                        nsubs++;
                        p += 2;
                        state = 1
                    }
                    break;
                case 2:
                    switch (c) {
                        case 33:
                            if (str.charCodeAt(p + 1) == 91) {
                                p += 2;
                                if (HxOverrides.substr(str, p, 6).toUpperCase() != "CDATA[") {
                                    throw new js__$Boot_HaxeError("Expected <![CDATA[")
                                }
                                p += 5;
                                state = 17;
                                start = p + 1
                            } else {
                                if (str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
                                    if (HxOverrides.substr(str, p + 2, 6).toUpperCase() != "OCTYPE") {
                                        throw new js__$Boot_HaxeError("Expected <!DOCTYPE")
                                    }
                                    p += 8;
                                    state = 16;
                                    start = p + 1
                                } else {
                                    if (str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
                                        throw new js__$Boot_HaxeError("Expected <!--")
                                    } else {
                                        p += 2;
                                        state = 15;
                                        start = p + 1
                                    }
                                }
                            }
                            break;
                        case 63:
                            state = 14;
                            start = p;
                            break;
                        case 47:
                            if (parent == null) {
                                throw new js__$Boot_HaxeError("Expected node name")
                            }
                            start = p + 1;
                            state = 0;
                            next = 10;
                            break;
                        default:
                            state = 3;
                            start = p;
                            continue
                    }
                    break;
                case 3:
                    if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
                        if (p == start) {
                            throw new js__$Boot_HaxeError("Expected node name")
                        }
                        xml = Xml.createElement(HxOverrides.substr(str, start, p - start));
                        parent.addChild(xml);
                        nsubs++;
                        state = 0;
                        next = 4;
                        continue
                    }
                    break;
                case 4:
                    switch (c) {
                        case 47:
                            state = 11;
                            break;
                        case 62:
                            state = 9;
                            break;
                        default:
                            state = 5;
                            start = p;
                            continue
                    }
                    break;
                case 5:
                    if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
                        var tmp;
                        if (start == p) {
                            throw new js__$Boot_HaxeError("Expected attribute name")
                        }
                        tmp = HxOverrides.substr(str, start, p - start);
                        aname = tmp;
                        if (xml.exists(aname)) {
                            throw new js__$Boot_HaxeError("Duplicate attribute")
                        }
                        state = 0;
                        next = 6;
                        continue
                    }
                    break;
                case 6:
                    switch (c) {
                        case 61:
                            state = 0;
                            next = 7;
                            break;
                        default:
                            throw new js__$Boot_HaxeError("Expected =")
                    }
                    break;
                case 7:
                    switch (c) {
                        case 34:
                        case 39:
                            buf = new StringBuf();
                            state = 8;
                            start = p + 1;
                            attrValQuote = c;
                            break;
                        default:
                            throw new js__$Boot_HaxeError('Expected "')
                    }
                    break;
                case 8:
                    switch (c) {
                        case 38:
                            buf.addSub(str, start, p - start);
                            state = 18;
                            escapeNext = 8;
                            start = p + 1;
                            break;
                        case 62:
                            if (strict) {
                                throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value")
                            } else {
                                if (c == attrValQuote) {
                                    buf.addSub(str, start, p - start);
                                    var val = buf.b;
                                    buf = new StringBuf();
                                    xml.set(aname, val);
                                    state = 0;
                                    next = 4
                                }
                            }
                            break;
                        case 60:
                            if (strict) {
                                throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value")
                            } else {
                                if (c == attrValQuote) {
                                    buf.addSub(str, start, p - start);
                                    var val1 = buf.b;
                                    buf = new StringBuf();
                                    xml.set(aname, val1);
                                    state = 0;
                                    next = 4
                                }
                            }
                            break;
                        default:
                            if (c == attrValQuote) {
                                buf.addSub(str, start, p - start);
                                var val2 = buf.b;
                                buf = new StringBuf();
                                xml.set(aname, val2);
                                state = 0;
                                next = 4
                            }
                    }
                    break;
                case 9:
                    p = haxe_xml_Parser.doParse(str, strict, p, xml);
                    start = p;
                    state = 1;
                    break;
                case 11:
                    switch (c) {
                        case 62:
                            state = 1;
                            break;
                        default:
                            throw new js__$Boot_HaxeError("Expected >")
                    }
                    break;
                case 12:
                    switch (c) {
                        case 62:
                            if (nsubs == 0) {
                                parent.addChild(Xml.createPCData(""))
                            }
                            return p;
                        default:
                            throw new js__$Boot_HaxeError("Expected >")
                    }
                    break;
                case 10:
                    if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
                        if (start == p) {
                            throw new js__$Boot_HaxeError("Expected node name")
                        }
                        var v = HxOverrides.substr(str, start, p - start);
                        if (v != (function($this) {
                                var $r;
                                if (parent.nodeType != Xml.Element) {
                                    throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType)
                                }
                                $r = parent.nodeName;
                                return $r
                            }(this))) {
                            throw new js__$Boot_HaxeError("Expected </" + (function($this) {
                                var $r;
                                if (parent.nodeType != Xml.Element) {
                                    throw "Bad node type, expected Element but found " + parent.nodeType
                                }
                                $r = parent.nodeName;
                                return $r
                            }(this)) + ">")
                        }
                        state = 0;
                        next = 12;
                        continue
                    }
                    break;
                case 15:
                    if (c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
                        var xml1 = Xml.createComment(HxOverrides.substr(str, start, p - start));
                        parent.addChild(xml1);
                        nsubs++;
                        p += 2;
                        state = 1
                    }
                    break;
                case 16:
                    if (c == 91) {
                        nbrackets++
                    } else {
                        if (c == 93) {
                            nbrackets--
                        } else {
                            if (c == 62 && nbrackets == 0) {
                                var xml2 = Xml.createDocType(HxOverrides.substr(str, start, p - start));
                                parent.addChild(xml2);
                                nsubs++;
                                state = 1
                            }
                        }
                    }
                    break;
                case 14:
                    if (c == 63 && str.charCodeAt(p + 1) == 62) {
                        p++;
                        var str1 = HxOverrides.substr(str, start + 1, p - start - 2);
                        var xml3 = Xml.createProcessingInstruction(str1);
                        parent.addChild(xml3);
                        nsubs++;
                        state = 1
                    }
                    break;
                case 18:
                    if (c == 59) {
                        var s = HxOverrides.substr(str, start, p - start);
                        if (s.charCodeAt(0) == 35) {
                            var c1;
                            if (s.charCodeAt(1) == 120) {
                                c1 = Std.parseInt("0" + HxOverrides.substr(s, 1, s.length - 1))
                            } else {
                                c1 = Std.parseInt(HxOverrides.substr(s, 1, s.length - 1))
                            }
                            buf.b += String.fromCharCode(c1)
                        } else {
                            if (!haxe_xml_Parser.escapes.exists(s)) {
                                if (strict) {
                                    throw new js__$Boot_HaxeError("Undefined entity: " + s)
                                }
                                buf.b += Std.string("&" + s + ";")
                            } else {
                                buf.add(haxe_xml_Parser.escapes.get(s))
                            }
                        }
                        start = p + 1;
                        state = escapeNext
                    } else {
                        if (!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
                            if (strict) {
                                throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c))
                            }
                            buf.b += "&";
                            buf.addSub(str, start, p - start);
                            p--;
                            start = p + 1;
                            state = escapeNext
                        }
                    }
                    break
            }
            c = StringTools.fastCodeAt(str, ++p)
        }
        if (state == 1) {
            start = p;
            state = 13
        }
        if (state == 13) {
            if (p != start || nsubs == 0) {
                buf.addSub(str, start, p - start);
                var xml4 = Xml.createPCData(buf.b);
                parent.addChild(xml4);
                nsubs++
            }
            return p
        }
        if (!strict && state == 18 && escapeNext == 13) {
            buf.b += "&";
            buf.addSub(str, start, p - start);
            var xml5 = Xml.createPCData(buf.b);
            parent.addChild(xml5);
            nsubs++;
            return p
        }
        throw new js__$Boot_HaxeError("Unexpected end")
    };
    var haxe_xml_Printer = function(pretty) {
        this.output = new StringBuf();
        this.pretty = pretty
    };
    $hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
    haxe_xml_Printer.__name__ = ["haxe", "xml", "Printer"];
    haxe_xml_Printer.print = function(xml, pretty) {
        if (pretty == null) {
            pretty = false
        }
        var printer = new haxe_xml_Printer(pretty);
        printer.writeNode(xml, "");
        return printer.output.b
    };
    haxe_xml_Printer.prototype = {
        output: null,
        pretty: null,
        writeNode: function(value, tabs) {
            var _g = value.nodeType;
            switch (_g) {
                case 2:
                    this.output.b += Std.string(tabs + "<![CDATA[");
                    this.write(StringTools.trim((function($this) {
                        var $r;
                        if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType)
                        }
                        $r = value.nodeValue;
                        return $r
                    }(this))));
                    this.output.b += "]]>";
                    if (this.pretty) {
                        this.output.b += ""
                    }
                    break;
                case 3:
                    var commentContent;
                    if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
                        throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType)
                    }
                    commentContent = value.nodeValue;
                    commentContent = new EReg("[\n\r\t]+", "g").replace(commentContent, "");
                    commentContent = "<!--" + commentContent + "-->";
                    if (tabs == null) {
                        this.output.b += "null"
                    } else {
                        this.output.b += "" + tabs
                    }
                    this.write(StringTools.trim(commentContent));
                    if (this.pretty) {
                        this.output.b += ""
                    }
                    break;
                case 6:
                    var $it0 = (function($this) {
                        var $r;
                        if (value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType)
                        }
                        $r = HxOverrides.iter(value.children);
                        return $r
                    }(this));
                    while ($it0.hasNext()) {
                        var child = $it0.next();
                        this.writeNode(child, tabs)
                    }
                    break;
                case 0:
                    this.output.b += Std.string(tabs + "<");
                    this.write((function($this) {
                        var $r;
                        if (value.nodeType != Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType)
                        }
                        $r = value.nodeName;
                        return $r
                    }(this)));
                    var $it1 = value.attributes();
                    while ($it1.hasNext()) {
                        var attribute = $it1.next();
                        this.output.b += Std.string(" " + attribute + '="');
                        this.write(StringTools.htmlEscape(value.get(attribute), true));
                        this.output.b += '"'
                    }
                    if (this.hasChildren(value)) {
                        this.output.b += ">";
                        if (this.pretty) {
                            this.output.b += ""
                        }
                        var $it2 = (function($this) {
                            var $r;
                            if (value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
                                throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType)
                            }
                            $r = HxOverrides.iter(value.children);
                            return $r
                        }(this));
                        while ($it2.hasNext()) {
                            var child1 = $it2.next();
                            this.writeNode(child1, this.pretty ? tabs + "\t" : tabs)
                        }
                        this.output.b += Std.string(tabs + "</");
                        this.write((function($this) {
                            var $r;
                            if (value.nodeType != Xml.Element) {
                                throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType)
                            }
                            $r = value.nodeName;
                            return $r
                        }(this)));
                        this.output.b += ">";
                        if (this.pretty) {
                            this.output.b += ""
                        }
                    } else {
                        this.output.b += "/>";
                        if (this.pretty) {
                            this.output.b += ""
                        }
                    }
                    break;
                case 1:
                    var nodeValue;
                    if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
                        throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType)
                    }
                    nodeValue = value.nodeValue;
                    if (nodeValue.length != 0) {
                        this.write(tabs + StringTools.htmlEscape(nodeValue));
                        if (this.pretty) {
                            this.output.b += ""
                        }
                    }
                    break;
                case 5:
                    this.write("<?" + (function($this) {
                        var $r;
                        if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType)
                        }
                        $r = value.nodeValue;
                        return $r
                    }(this)) + "?>");
                    break;
                case 4:
                    this.write("<!DOCTYPE " + (function($this) {
                        var $r;
                        if (value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
                            throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType)
                        }
                        $r = value.nodeValue;
                        return $r
                    }(this)) + ">");
                    break
            }
        },
        write: function(input) {
            if (input == null) {
                this.output.b += "null"
            } else {
                this.output.b += "" + input
            }
        },
        hasChildren: function(value) {
            var $it0 = (function($this) {
                var $r;
                if (value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
                    throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType)
                }
                $r = HxOverrides.iter(value.children);
                return $r
            }(this));
            while ($it0.hasNext()) {
                var child = $it0.next();
                var _g = child.nodeType;
                switch (_g) {
                    case 0:
                    case 1:
                        return true;
                    case 2:
                    case 3:
                        if (StringTools.ltrim((function($this) {
                                var $r;
                                if (child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
                                    throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType)
                                }
                                $r = child.nodeValue;
                                return $r
                            }(this))).length != 0) {
                            return true
                        }
                        break;
                    default:
                }
            }
            return false
        },
        __class__: haxe_xml_Printer
    };
    var haxe_zip_Huffman = $hxClasses["haxe.zip.Huffman"] = {
        __ename__: ["haxe", "zip", "Huffman"],
        __constructs__: ["Found", "NeedBit", "NeedBits"]
    };
    haxe_zip_Huffman.Found = function(i) {
        var $x = ["Found", 0, i];
        $x.__enum__ = haxe_zip_Huffman;
        $x.toString = $estr;
        return $x
    };
    haxe_zip_Huffman.NeedBit = function(left, right) {
        var $x = ["NeedBit", 1, left, right];
        $x.__enum__ = haxe_zip_Huffman;
        $x.toString = $estr;
        return $x
    };
    haxe_zip_Huffman.NeedBits = function(n, table) {
        var $x = ["NeedBits", 2, n, table];
        $x.__enum__ = haxe_zip_Huffman;
        $x.toString = $estr;
        return $x
    };
    var haxe_zip_HuffTools = function() {};
    $hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
    haxe_zip_HuffTools.__name__ = ["haxe", "zip", "HuffTools"];
    haxe_zip_HuffTools.prototype = {
        treeDepth: function(t) {
            switch (t[1]) {
                case 0:
                    return 0;
                case 2:
                    throw new js__$Boot_HaxeError("assert");
                    break;
                case 1:
                    var b = t[3];
                    var a = t[2];
                    var da = this.treeDepth(a);
                    var db = this.treeDepth(b);
                    return 1 + (da < db ? da : db)
            }
        },
        treeCompress: function(t) {
            var d = this.treeDepth(t);
            if (d == 0) {
                return t
            }
            if (d == 1) {
                switch (t[1]) {
                    case 1:
                        var b = t[3];
                        var a = t[2];
                        return haxe_zip_Huffman.NeedBit(this.treeCompress(a), this.treeCompress(b));
                    default:
                        throw new js__$Boot_HaxeError("assert")
                }
            }
            var size = 1 << d;
            var table = [];
            var _g = 0;
            while (_g < size) {
                var i = _g++;
                table.push(haxe_zip_Huffman.Found(-1))
            }
            this.treeWalk(table, 0, 0, d, t);
            return haxe_zip_Huffman.NeedBits(d, table)
        },
        treeWalk: function(table, p, cd, d, t) {
            switch (t[1]) {
                case 1:
                    var b = t[3];
                    var a = t[2];
                    if (d > 0) {
                        this.treeWalk(table, p, cd + 1, d - 1, a);
                        this.treeWalk(table, p | 1 << cd, cd + 1, d - 1, b)
                    } else {
                        table[p] = this.treeCompress(t)
                    }
                    break;
                default:
                    table[p] = this.treeCompress(t)
            }
        },
        treeMake: function(bits, maxbits, v, len) {
            if (len > maxbits) {
                throw new js__$Boot_HaxeError("Invalid huffman")
            }
            var idx = v << 5 | len;
            if (bits.h.hasOwnProperty(idx)) {
                return haxe_zip_Huffman.Found(bits.h[idx])
            }
            v <<= 1;
            len += 1;
            return haxe_zip_Huffman.NeedBit(this.treeMake(bits, maxbits, v, len), this.treeMake(bits, maxbits, v | 1, len))
        },
        make: function(lengths, pos, nlengths, maxbits) {
            var counts = [];
            var tmp = [];
            if (maxbits > 32) {
                throw new js__$Boot_HaxeError("Invalid huffman")
            }
            var _g = 0;
            while (_g < maxbits) {
                var i = _g++;
                counts.push(0);
                tmp.push(0)
            }
            var _g1 = 0;
            while (_g1 < nlengths) {
                var i1 = _g1++;
                var p = lengths[i1 + pos];
                if (p >= maxbits) {
                    throw new js__$Boot_HaxeError("Invalid huffman")
                }
                counts[p]++
            }
            var code = 0;
            var _g11 = 1;
            var _g2 = maxbits - 1;
            while (_g11 < _g2) {
                var i2 = _g11++;
                code = code + counts[i2] << 1;
                tmp[i2] = code
            }
            var bits = new haxe_ds_IntMap();
            var _g3 = 0;
            while (_g3 < nlengths) {
                var i3 = _g3++;
                var l = lengths[i3 + pos];
                if (l != 0) {
                    var n = tmp[l - 1];
                    tmp[l - 1] = n + 1;
                    bits.h[n << 5 | l] = i3
                }
            }
            return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits, maxbits, 0, 1), this.treeMake(bits, maxbits, 1, 1)))
        },
        __class__: haxe_zip_HuffTools
    };
    var haxe_zip__$InflateImpl_Window = function(hasCrc) {
        this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
        this.pos = 0;
        if (hasCrc) {
            this.crc = new haxe_crypto_Adler32()
        }
    };
    $hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
    haxe_zip__$InflateImpl_Window.__name__ = ["haxe", "zip", "_InflateImpl", "Window"];
    haxe_zip__$InflateImpl_Window.prototype = {
        buffer: null,
        pos: null,
        crc: null,
        slide: function() {
            if (this.crc != null) {
                this.crc.update(this.buffer, 0, 32768)
            }
            var b = new haxe_io_Bytes(new ArrayBuffer(65536));
            this.pos -= 32768;
            b.blit(0, this.buffer, 32768, this.pos);
            this.buffer = b
        },
        addBytes: function(b, p, len) {
            if (this.pos + len > 65536) {
                this.slide()
            }
            this.buffer.blit(this.pos, b, p, len);
            this.pos += len
        },
        addByte: function(c) {
            if (this.pos == 65536) {
                this.slide()
            }
            this.buffer.b[this.pos] = c & 255;
            this.pos++
        },
        getLastChar: function() {
            return this.buffer.b[this.pos - 1]
        },
        available: function() {
            return this.pos
        },
        checksum: function() {
            if (this.crc != null) {
                this.crc.update(this.buffer, 0, this.pos)
            }
            return this.crc
        },
        __class__: haxe_zip__$InflateImpl_Window
    };
    var haxe_zip__$InflateImpl_State = $hxClasses["haxe.zip._InflateImpl.State"] = {
        __ename__: ["haxe", "zip", "_InflateImpl", "State"],
        __constructs__: ["Head", "Block", "CData", "Flat", "Crc", "Dist", "DistOne", "Done"]
    };
    haxe_zip__$InflateImpl_State.Head = ["Head", 0];
    haxe_zip__$InflateImpl_State.Head.toString = $estr;
    haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
    haxe_zip__$InflateImpl_State.Block = ["Block", 1];
    haxe_zip__$InflateImpl_State.Block.toString = $estr;
    haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
    haxe_zip__$InflateImpl_State.CData = ["CData", 2];
    haxe_zip__$InflateImpl_State.CData.toString = $estr;
    haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
    haxe_zip__$InflateImpl_State.Flat = ["Flat", 3];
    haxe_zip__$InflateImpl_State.Flat.toString = $estr;
    haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
    haxe_zip__$InflateImpl_State.Crc = ["Crc", 4];
    haxe_zip__$InflateImpl_State.Crc.toString = $estr;
    haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
    haxe_zip__$InflateImpl_State.Dist = ["Dist", 5];
    haxe_zip__$InflateImpl_State.Dist.toString = $estr;
    haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
    haxe_zip__$InflateImpl_State.DistOne = ["DistOne", 6];
    haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
    haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
    haxe_zip__$InflateImpl_State.Done = ["Done", 7];
    haxe_zip__$InflateImpl_State.Done.toString = $estr;
    haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
    var haxe_zip_InflateImpl = function(i, header, crc) {
        if (crc == null) {
            crc = true
        }
        if (header == null) {
            header = true
        }
        this["final"] = false;
        this.htools = new haxe_zip_HuffTools();
        this.huffman = this.buildFixedHuffman();
        this.huffdist = null;
        this.len = 0;
        this.dist = 0;
        if (header) {
            this.state = haxe_zip__$InflateImpl_State.Head
        } else {
            this.state = haxe_zip__$InflateImpl_State.Block
        }
        this.input = i;
        this.bits = 0;
        this.nbits = 0;
        this.needed = 0;
        this.output = null;
        this.outpos = 0;
        this.lengths = [];
        var _g = 0;
        while (_g < 19) {
            var i1 = _g++;
            this.lengths.push(-1)
        }
        this.window = new haxe_zip__$InflateImpl_Window(crc)
    };
    $hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
    haxe_zip_InflateImpl.__name__ = ["haxe", "zip", "InflateImpl"];
    haxe_zip_InflateImpl.run = function(i, bufsize) {
        if (bufsize == null) {
            bufsize = 65536
        }
        var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
        var output = new haxe_io_BytesBuffer();
        var inflate = new haxe_zip_InflateImpl(i);
        while (true) {
            var len = inflate.readBytes(buf, 0, bufsize);
            output.addBytes(buf, 0, len);
            if (len < bufsize) {
                break
            }
        }
        return output.getBytes()
    };
    haxe_zip_InflateImpl.prototype = {
        nbits: null,
        bits: null,
        state: null,
        "final": null,
        huffman: null,
        huffdist: null,
        htools: null,
        len: null,
        dist: null,
        needed: null,
        output: null,
        outpos: null,
        input: null,
        lengths: null,
        window: null,
        buildFixedHuffman: function() {
            if (haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
                return haxe_zip_InflateImpl.FIXED_HUFFMAN
            }
            var a = [];
            var _g = 0;
            while (_g < 288) {
                var n = _g++;
                a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8)
            }
            haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a, 0, 288, 10);
            return haxe_zip_InflateImpl.FIXED_HUFFMAN
        },
        readBytes: function(b, pos, len) {
            this.needed = len;
            this.outpos = pos;
            this.output = b;
            if (len > 0) {
                while (this.inflateLoop()) {}
            }
            return len - this.needed
        },
        getBits: function(n) {
            while (this.nbits < n) {
                this.bits |= this.input.readByte() << this.nbits;
                this.nbits += 8
            }
            var b = this.bits & (1 << n) - 1;
            this.nbits -= n;
            this.bits >>= n;
            return b
        },
        getBit: function() {
            if (this.nbits == 0) {
                this.nbits = 8;
                this.bits = this.input.readByte()
            }
            var b = (this.bits & 1) == 1;
            this.nbits--;
            this.bits >>= 1;
            return b
        },
        getRevBits: function(n) {
            if (n == 0) {
                return 0
            } else {
                if (this.getBit()) {
                    return 1 << n - 1 | this.getRevBits(n - 1)
                } else {
                    return this.getRevBits(n - 1)
                }
            }
        },
        resetBits: function() {
            this.bits = 0;
            this.nbits = 0
        },
        addBytes: function(b, p, len) {
            this.window.addBytes(b, p, len);
            this.output.blit(this.outpos, b, p, len);
            this.needed -= len;
            this.outpos += len
        },
        addByte: function(b) {
            this.window.addByte(b);
            this.output.b[this.outpos] = b & 255;
            this.needed--;
            this.outpos++
        },
        addDistOne: function(n) {
            var c = this.window.getLastChar();
            var _g = 0;
            while (_g < n) {
                var i = _g++;
                this.addByte(c)
            }
        },
        addDist: function(d, len) {
            this.addBytes(this.window.buffer, this.window.pos - d, len)
        },
        applyHuffman: function(h) {
            switch (h[1]) {
                case 0:
                    var n = h[2];
                    return n;
                case 1:
                    var b = h[3];
                    var a = h[2];
                    return this.applyHuffman(this.getBit() ? b : a);
                case 2:
                    var tbl = h[3];
                    var n1 = h[2];
                    return this.applyHuffman(tbl[this.getBits(n1)])
            }
        },
        inflateLengths: function(a, max) {
            var i = 0;
            var prev = 0;
            while (i < max) {
                var n = this.applyHuffman(this.huffman);
                switch (n) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                        prev = n;
                        a[i] = n;
                        i++;
                        break;
                    case 16:
                        var end = i + 3 + this.getBits(2);
                        if (end > max) {
                            throw new js__$Boot_HaxeError("Invalid data")
                        }
                        while (i < end) {
                            a[i] = prev;
                            i++
                        }
                        break;
                    case 17:
                        i += 3 + this.getBits(3);
                        if (i > max) {
                            throw new js__$Boot_HaxeError("Invalid data")
                        }
                        break;
                    case 18:
                        i += 11 + this.getBits(7);
                        if (i > max) {
                            throw new js__$Boot_HaxeError("Invalid data")
                        }
                        break;
                    default:
                        throw new js__$Boot_HaxeError("Invalid data")
                }
            }
        },
        inflateLoop: function() {
            var _g = this.state;
            switch (_g[1]) {
                case 0:
                    var cmf = this.input.readByte();
                    var cm = cmf & 15;
                    var cinfo = cmf >> 4;
                    if (cm != 8) {
                        throw new js__$Boot_HaxeError("Invalid data")
                    }
                    var flg = this.input.readByte();
                    var fdict = (flg & 32) != 0;
                    if (((cmf << 8) + flg) % 31 != 0) {
                        throw new js__$Boot_HaxeError("Invalid data")
                    }
                    if (fdict) {
                        throw new js__$Boot_HaxeError("Unsupported dictionary")
                    }
                    this.state = haxe_zip__$InflateImpl_State.Block;
                    return true;
                case 4:
                    var calc = this.window.checksum();
                    if (calc == null) {
                        this.state = haxe_zip__$InflateImpl_State.Done;
                        return true
                    }
                    var crc = haxe_crypto_Adler32.read(this.input);
                    if (!calc.equals(crc)) {
                        throw new js__$Boot_HaxeError("Invalid CRC")
                    }
                    this.state = haxe_zip__$InflateImpl_State.Done;
                    return true;
                case 7:
                    return false;
                case 1:
                    this["final"] = this.getBit();
                    var _g1 = this.getBits(2);
                    switch (_g1) {
                        case 0:
                            this.len = this.input.readUInt16();
                            var nlen = this.input.readUInt16();
                            if (nlen != 65535 - this.len) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            this.state = haxe_zip__$InflateImpl_State.Flat;
                            var r = this.inflateLoop();
                            this.resetBits();
                            return r;
                        case 1:
                            this.huffman = this.buildFixedHuffman();
                            this.huffdist = null;
                            this.state = haxe_zip__$InflateImpl_State.CData;
                            return true;
                        case 2:
                            var hlit = this.getBits(5) + 257;
                            var hdist = this.getBits(5) + 1;
                            var hclen = this.getBits(4) + 4;
                            var _g2 = 0;
                            while (_g2 < hclen) {
                                var i = _g2++;
                                this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3)
                            }
                            var _g21 = hclen;
                            while (_g21 < 19) {
                                var i1 = _g21++;
                                this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0
                            }
                            this.huffman = this.htools.make(this.lengths, 0, 19, 8);
                            var lengths = [];
                            var _g3 = 0;
                            var _g22 = hlit + hdist;
                            while (_g3 < _g22) {
                                var i2 = _g3++;
                                lengths.push(0)
                            }
                            this.inflateLengths(lengths, hlit + hdist);
                            this.huffdist = this.htools.make(lengths, hlit, hdist, 16);
                            this.huffman = this.htools.make(lengths, 0, hlit, 16);
                            this.state = haxe_zip__$InflateImpl_State.CData;
                            return true;
                        default:
                            throw new js__$Boot_HaxeError("Invalid data")
                    }
                    break;
                case 3:
                    var rlen;
                    if (this.len < this.needed) {
                        rlen = this.len
                    } else {
                        rlen = this.needed
                    }
                    var bytes = this.input.read(rlen);
                    this.len -= rlen;
                    this.addBytes(bytes, 0, rlen);
                    if (this.len == 0) {
                        if (this["final"]) {
                            this.state = haxe_zip__$InflateImpl_State.Crc
                        } else {
                            this.state = haxe_zip__$InflateImpl_State.Block
                        }
                    }
                    return this.needed > 0;
                case 6:
                    var rlen1;
                    if (this.len < this.needed) {
                        rlen1 = this.len
                    } else {
                        rlen1 = this.needed
                    }
                    this.addDistOne(rlen1);
                    this.len -= rlen1;
                    if (this.len == 0) {
                        this.state = haxe_zip__$InflateImpl_State.CData
                    }
                    return this.needed > 0;
                case 5:
                    while (this.len > 0 && this.needed > 0) {
                        var rdist;
                        if (this.len < this.dist) {
                            rdist = this.len
                        } else {
                            rdist = this.dist
                        }
                        var rlen2;
                        if (this.needed < rdist) {
                            rlen2 = this.needed
                        } else {
                            rlen2 = rdist
                        }
                        this.addDist(this.dist, rlen2);
                        this.len -= rlen2
                    }
                    if (this.len == 0) {
                        this.state = haxe_zip__$InflateImpl_State.CData
                    }
                    return this.needed > 0;
                case 2:
                    var n = this.applyHuffman(this.huffman);
                    if (n < 256) {
                        this.addByte(n);
                        return this.needed > 0
                    } else {
                        if (n == 256) {
                            if (this["final"]) {
                                this.state = haxe_zip__$InflateImpl_State.Crc
                            } else {
                                this.state = haxe_zip__$InflateImpl_State.Block
                            }
                            return true
                        } else {
                            n -= 257;
                            var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
                            if (extra_bits == -1) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
                            var dist_code;
                            if (this.huffdist == null) {
                                dist_code = this.getRevBits(5)
                            } else {
                                dist_code = this.applyHuffman(this.huffdist)
                            }
                            extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
                            if (extra_bits == -1) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
                            if (this.dist > this.window.available()) {
                                throw new js__$Boot_HaxeError("Invalid data")
                            }
                            if (this.dist == 1) {
                                this.state = haxe_zip__$InflateImpl_State.DistOne
                            } else {
                                this.state = haxe_zip__$InflateImpl_State.Dist
                            }
                            return true
                        }
                    }
                    break
            }
        },
        __class__: haxe_zip_InflateImpl
    };
    var haxe_zip_Uncompress = function() {};
    $hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
    haxe_zip_Uncompress.__name__ = ["haxe", "zip", "Uncompress"];
    haxe_zip_Uncompress.run = function(src, bufsize) {
        return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src), bufsize)
    };
    var hxsignal_Signal = function() {};
    $hxClasses["hxsignal.Signal"] = hxsignal_Signal;
    hxsignal_Signal.__name__ = ["hxsignal", "Signal"];
    hxsignal_Signal.prototype = {
        connect: function(slot, times, groupId, at) {},
        isConnected: function(slot) {
            return false
        },
        block: function(slot, flag) {},
        isBlocked: function(slot) {
            return false
        },
        disconnect: function(slot) {
            return false
        },
        disconnectAll: function() {},
        disconnectGroup: function(id) {
            return false
        },
        numSlots: null,
        __class__: hxsignal_Signal
    };
    var hxsignal_ConnectionTimes = $hxClasses["hxsignal.ConnectionTimes"] = {
        __ename__: ["hxsignal", "ConnectionTimes"],
        __constructs__: ["Once", "Times", "Forever"]
    };
    hxsignal_ConnectionTimes.Once = ["Once", 0];
    hxsignal_ConnectionTimes.Once.toString = $estr;
    hxsignal_ConnectionTimes.Once.__enum__ = hxsignal_ConnectionTimes;
    hxsignal_ConnectionTimes.Times = function(t) {
        var $x = ["Times", 1, t];
        $x.__enum__ = hxsignal_ConnectionTimes;
        $x.toString = $estr;
        return $x
    };
    hxsignal_ConnectionTimes.Forever = ["Forever", 2];
    hxsignal_ConnectionTimes.Forever.toString = $estr;
    hxsignal_ConnectionTimes.Forever.__enum__ = hxsignal_ConnectionTimes;
    var hxsignal_ConnectPosition = $hxClasses["hxsignal.ConnectPosition"] = {
        __ename__: ["hxsignal", "ConnectPosition"],
        __constructs__: ["AtBack", "AtFront"]
    };
    hxsignal_ConnectPosition.AtBack = ["AtBack", 0];
    hxsignal_ConnectPosition.AtBack.toString = $estr;
    hxsignal_ConnectPosition.AtBack.__enum__ = hxsignal_ConnectPosition;
    hxsignal_ConnectPosition.AtFront = ["AtFront", 1];
    hxsignal_ConnectPosition.AtFront.toString = $estr;
    hxsignal_ConnectPosition.AtFront.__enum__ = hxsignal_ConnectPosition;
    var hxsignal_ds_LinkedList = function() {
        List.call(this)
    };
    $hxClasses["hxsignal.ds.LinkedList"] = hxsignal_ds_LinkedList;
    hxsignal_ds_LinkedList.__name__ = ["hxsignal", "ds", "LinkedList"];
    hxsignal_ds_LinkedList.__super__ = List;
    hxsignal_ds_LinkedList.prototype = $extend(List.prototype, {
        removeNode: function(node, prev) {
            if (node != null) {
                if (prev == null) {
                    this.h = node[1]
                } else {
                    prev[1] = node[1]
                }
                if (this.q == node) {
                    this.q = prev
                }
                this.length--
            }
        },
        listIterator: function() {
            var list = this;
            var next = this.h;
            var curr = null;
            var prev = null;
            return {
                hasNext: function() {
                    return next != null
                },
                next: function() {
                    if (next == null) {
                        return null
                    }
                    prev = curr;
                    curr = next;
                    next = next[1];
                    return curr[0]
                },
                remove: function() {
                    if (curr == prev) {
                        return
                    }
                    if (curr != null) {
                        if (prev == null) {
                            list.h = curr[1]
                        } else {
                            prev[1] = curr[1]
                        }
                        if (list.q == curr) {
                            list.q = prev
                        }
                        list.length--
                    }
                    curr = prev
                }
            }
        },
        __class__: hxsignal_ds_LinkedList
    });
    var hxsignal_ds_TreeMap = function() {
        haxe_ds_BalancedTree.call(this)
    };
    $hxClasses["hxsignal.ds.TreeMap"] = hxsignal_ds_TreeMap;
    hxsignal_ds_TreeMap.__name__ = ["hxsignal", "ds", "TreeMap"];
    hxsignal_ds_TreeMap.__super__ = haxe_ds_BalancedTree;
    hxsignal_ds_TreeMap.prototype = $extend(haxe_ds_BalancedTree.prototype, {
        firstKey: function() {
            var first = this.getFirstNode();
            if (first != null) {
                return first.key
            } else {
                return null
            }
        },
        lastKey: function() {
            var last = this.getLastNode();
            if (last != null) {
                return last.key
            } else {
                return null
            }
        },
        firstValue: function() {
            var first = this.getFirstNode();
            if (first != null) {
                return first.value
            } else {
                return null
            }
        },
        lastValue: function() {
            var last = this.getLastNode();
            if (last != null) {
                return last.value
            } else {
                return null
            }
        },
        getFirstNode: function() {
            var n = this.root;
            if (n != null) {
                while (n.left != null) {
                    n = n.left
                }
            }
            return n
        },
        getLastNode: function() {
            var n = this.root;
            if (n != null) {
                while (n.right != null) {
                    n = n.right
                }
            }
            return n
        },
        __class__: hxsignal_ds_TreeMap
    });
    var hxsignal_impl_Connection = function(signal, slot, times) {
        this.signal = signal;
        if (slot == null) {
            throw new js__$Boot_HaxeError("Slot cannot be null")
        }
        this.slot = slot;
        this.times = times;
        this.blocked = false;
        this.connected = true;
        this.calledTimes = 0
    };
    $hxClasses["hxsignal.impl.Connection"] = hxsignal_impl_Connection;
    hxsignal_impl_Connection.__name__ = ["hxsignal", "impl", "Connection"];
    hxsignal_impl_Connection.prototype = {
        slot: null,
        times: null,
        calledTimes: null,
        blocked: null,
        connected: null,
        groupId: null,
        signal: null,
        __class__: hxsignal_impl_Connection
    };
    var hxsignal_impl_SignalBase = function() {
        this.slots = new hxsignal_impl_SlotMap()
    };
    $hxClasses["hxsignal.impl.SignalBase"] = hxsignal_impl_SignalBase;
    hxsignal_impl_SignalBase.__name__ = ["hxsignal", "impl", "SignalBase"];
    hxsignal_impl_SignalBase.prototype = {
        emitting: null,
        numSlots: null,
        get_numSlots: function() {
            return this.slots.get_length()
        },
        slots: null,
        connect: function(slot, times, groupId, at) {
            if (times == null) {
                times = hxsignal_ConnectionTimes.Forever
            }
            if (!this.updateConnection(slot, times)) {
                var conn = new hxsignal_impl_Connection(this, slot, times);
                this.slots.insert(conn, groupId, at)
            }
        },
        updateConnection: function(slot, times, groupId, at) {
            var con = this.slots.get(slot);
            if (con == null) {
                return false
            }
            if (groupId != null && con.groupId != groupId || at != null) {
                this.slots.disconnect(slot);
                return false
            }
            con.times = times;
            con.calledTimes = 0;
            con.connected = true;
            return true
        },
        isConnected: function(slot) {
            return this.slots.has(slot)
        },
        loop: function(delegate) {
            this.emitting = true;
            var $it0 = this.slots.groups.iterator();
            while ($it0.hasNext()) {
                var g = $it0.next();
                var _g_head = g.h;
                var _g_val = null;
                while (_g_head != null) {
                    var con;
                    con = (function($this) {
                        var $r;
                        _g_val = _g_head[0];
                        _g_head = _g_head[1];
                        $r = _g_val;
                        return $r
                    }(this));
                    if (con.connected && !con.blocked) {
                        con.calledTimes++;
                        delegate(con);
                        if (!con.connected) {
                            this.slots.disconnect(con.slot)
                        }
                        if (con.times == hxsignal_ConnectionTimes.Once) {
                            con.times = hxsignal_ConnectionTimes.Times(1)
                        }
                        var _g = con.times;
                        switch (_g[1]) {
                            case 1:
                                var t = _g[2];
                                if (t <= con.calledTimes) {
                                    this.slots.disconnect(con.slot)
                                }
                                break;
                            default:
                        }
                    }
                }
            }
            this.emitting = false
        },
        block: function(slot, flag) {
            var con = this.slots.get(slot);
            if (con == null) {
                return
            }
            con.blocked = flag
        },
        isBlocked: function(slot) {
            var con = this.slots.get(slot);
            if (con == null) {
                return false
            }
            return con.blocked
        },
        disconnect: function(slot) {
            return this.slots.disconnect(slot)
        },
        disconnectAll: function() {
            if (this.emitting) {
                this.slots.disconnectAll()
            } else {
                this.slots.clear()
            }
        },
        disconnectGroup: function(id) {
            return this.slots.disconnectGroup(id)
        },
        __class__: hxsignal_impl_SignalBase,
        __properties__: {
            get_numSlots: "get_numSlots"
        }
    };
    var hxsignal_impl_Signal0 = function() {
        hxsignal_impl_SignalBase.call(this)
    };
    $hxClasses["hxsignal.impl.Signal0"] = hxsignal_impl_Signal0;
    hxsignal_impl_Signal0.__name__ = ["hxsignal", "impl", "Signal0"];
    hxsignal_impl_Signal0.__super__ = hxsignal_impl_SignalBase;
    hxsignal_impl_Signal0.prototype = $extend(hxsignal_impl_SignalBase.prototype, {
        emit: function() {
            var delegate = function(con) {
                con.slot()
            };
            this.loop(delegate)
        },
        __class__: hxsignal_impl_Signal0
    });
    var hxsignal_impl_Signal1 = function() {
        hxsignal_impl_SignalBase.call(this)
    };
    $hxClasses["hxsignal.impl.Signal1"] = hxsignal_impl_Signal1;
    hxsignal_impl_Signal1.__name__ = ["hxsignal", "impl", "Signal1"];
    hxsignal_impl_Signal1.__super__ = hxsignal_impl_SignalBase;
    hxsignal_impl_Signal1.prototype = $extend(hxsignal_impl_SignalBase.prototype, {
        emit: function(p1) {
            var delegate = function(con) {
                con.slot(p1)
            };
            this.loop(delegate)
        },
        __class__: hxsignal_impl_Signal1
    });
    var hxsignal_impl_Signal2 = function() {
        hxsignal_impl_SignalBase.call(this)
    };
    $hxClasses["hxsignal.impl.Signal2"] = hxsignal_impl_Signal2;
    hxsignal_impl_Signal2.__name__ = ["hxsignal", "impl", "Signal2"];
    hxsignal_impl_Signal2.__super__ = hxsignal_impl_SignalBase;
    hxsignal_impl_Signal2.prototype = $extend(hxsignal_impl_SignalBase.prototype, {
        emit: function(p1, p2) {
            var delegate = function(con) {
                con.slot(p1, p2)
            };
            this.loop(delegate)
        },
        __class__: hxsignal_impl_Signal2
    });
    var hxsignal_impl_Signal3 = function() {
        hxsignal_impl_SignalBase.call(this)
    };
    $hxClasses["hxsignal.impl.Signal3"] = hxsignal_impl_Signal3;
    hxsignal_impl_Signal3.__name__ = ["hxsignal", "impl", "Signal3"];
    hxsignal_impl_Signal3.__super__ = hxsignal_impl_SignalBase;
    hxsignal_impl_Signal3.prototype = $extend(hxsignal_impl_SignalBase.prototype, {
        emit: function(p1, p2, p3) {
            var delegate = function(con) {
                con.slot(p1, p2, p3)
            };
            this.loop(delegate)
        },
        __class__: hxsignal_impl_Signal3
    });
    var hxsignal_impl_SlotMap = function() {
        this.clear()
    };
    $hxClasses["hxsignal.impl.SlotMap"] = hxsignal_impl_SlotMap;
    hxsignal_impl_SlotMap.__name__ = ["hxsignal", "impl", "SlotMap"];
    hxsignal_impl_SlotMap.prototype = {
        groups: null,
        slots: null,
        clear: function() {
            this.slots = new haxe_ds_ObjectMap();
            this.groups = new hxsignal_ds_TreeMap();
            this.groups.set(0, new hxsignal_ds_LinkedList())
        },
        insert: function(con, groupId, at) {
            if (at == null) {
                at = hxsignal_ConnectPosition.AtBack
            }
            this.slots.set(con.slot, con);
            var group;
            if (groupId == null) {
                if (at != null) {
                    switch (at[1]) {
                        case 1:
                            groupId = this.groups.firstKey();
                            group = this.groups.firstValue();
                            break;
                        default:
                            groupId = this.groups.lastKey();
                            group = this.groups.lastValue()
                    }
                } else {
                    groupId = this.groups.lastKey();
                    group = this.groups.lastValue()
                }
            } else {
                group = this.groups.get(groupId);
                if (group == null) {
                    group = new hxsignal_ds_LinkedList();
                    this.groups.set(groupId, group)
                }
            }
            con.groupId = groupId;
            if (at != null) {
                switch (at[1]) {
                    case 1:
                        group.push(con);
                        break;
                    default:
                        group.add(con)
                }
            } else {
                group.add(con)
            }
        },
        get: function(slot) {
            return this.slots.h[slot.__id__]
        },
        has: function(slot) {
            return this.slots.h[slot.__id__] != null
        },
        disconnect: function(slot) {
            var con = this.slots.h[slot.__id__];
            if (con == null) {
                return false
            }
            this.slots.remove(slot);
            con.connected = false;
            return true
        },
        disconnectGroup: function(groupId) {
            var group = this.groups.get(groupId);
            if (group == null) {
                return false
            }
            this.groups.remove(groupId);
            var _g_head = group.h;
            var _g_val = null;
            while (_g_head != null) {
                var con;
                con = (function($this) {
                    var $r;
                    _g_val = _g_head[0];
                    _g_head = _g_head[1];
                    $r = _g_val;
                    return $r
                }(this));
                this.slots.remove(con.slot);
                con.connected = false
            }
            return true
        },
        disconnectAll: function() {
            var $it0 = this.groups.keys();
            while ($it0.hasNext()) {
                var g = $it0.next();
                this.disconnectGroup(g)
            }
        },
        get_length: function() {
            return Lambda.count(this.slots)
        },
        __class__: hxsignal_impl_SlotMap,
        __properties__: {
            get_length: "get_length"
        }
    };
    var js__$Boot_HaxeError = function(val) {
        Error.call(this);
        this.val = val;
        this.message = String(val);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, js__$Boot_HaxeError)
        }
    };
    $hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
    js__$Boot_HaxeError.__name__ = ["js", "_Boot", "HaxeError"];
    js__$Boot_HaxeError.__super__ = Error;
    js__$Boot_HaxeError.prototype = $extend(Error.prototype, {
        val: null,
        __class__: js__$Boot_HaxeError
    });
    var js_Boot = function() {};
    $hxClasses["js.Boot"] = js_Boot;
    js_Boot.__name__ = ["js", "Boot"];
    js_Boot.__unhtml = function(s) {
        return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;")
    };
    js_Boot.__trace = function(v, i) {
        var msg;
        if (i != null) {
            msg = i.fileName + ":" + i.lineNumber + ": "
        } else {
            msg = ""
        }
        msg += js_Boot.__string_rec(v, "");
        if (i != null && i.customParams != null) {
            var _g = 0;
            var _g1 = i.customParams;
            while (_g < _g1.length) {
                var v1 = _g1[_g];
                ++_g;
                msg += "," + js_Boot.__string_rec(v1, "")
            }
        }
        var d;
        if (typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) {
            d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"
        } else {
            if (typeof console != "undefined" && console.log != null) {
                console.log(msg)
            }
        }
    };
    js_Boot.getClass = function(o) {
        if ((o instanceof Array) && o.__enum__ == null) {
            return Array
        } else {
            var cl = o.__class__;
            if (cl != null) {
                return cl
            }
            var name = js_Boot.__nativeClassName(o);
            if (name != null) {
                return js_Boot.__resolveNativeClass(name)
            }
            return null
        }
    };
    js_Boot.__string_rec = function(o, s) {
        if (o == null) {
            return "null"
        }
        if (s.length >= 5) {
            return "<...>"
        }
        var t = typeof(o);
        if (t == "function" && (o.__name__ || o.__ename__)) {
            t = "object"
        }
        switch (t) {
            case "object":
                if (o instanceof Array) {
                    if (o.__enum__) {
                        if (o.length == 2) {
                            return o[0]
                        }
                        var str2 = o[0] + "(";
                        s += "\t";
                        var _g1 = 2;
                        var _g = o.length;
                        while (_g1 < _g) {
                            var i1 = _g1++;
                            if (i1 != 2) {
                                str2 += "," + js_Boot.__string_rec(o[i1], s)
                            } else {
                                str2 += js_Boot.__string_rec(o[i1], s)
                            }
                        }
                        return str2 + ")"
                    }
                    var l = o.length;
                    var i;
                    var str1 = "[";
                    s += "\t";
                    var _g2 = 0;
                    while (_g2 < l) {
                        var i2 = _g2++;
                        str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2], s)
                    }
                    str1 += "]";
                    return str1
                }
                var tostr;
                try {
                    tostr = o.toString
                } catch (e) {
                    haxe_CallStack.lastException = e;
                    if (e instanceof js__$Boot_HaxeError) {
                        e = e.val
                    }
                    return "???"
                }
                if (tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
                    var s2 = o.toString();
                    if (s2 != "[object Object]") {
                        return s2
                    }
                }
                var k = null;
                var str = "{\n";
                s += "\t";
                var hasp = o.hasOwnProperty != null;
                for (var k in o) {
                    if (hasp && !o.hasOwnProperty(k)) {
                        continue
                    }
                    if (k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
                        continue
                    }
                    if (str.length != 2) {
                        str += ", \n"
                    }
                    str += s + k + " : " + js_Boot.__string_rec(o[k], s)
                }
                s = s.substring(1);
                str += "\n" + s + "}";
                return str;
            case "function":
                return "<function>";
            case "string":
                return o;
            default:
                return String(o)
        }
    };
    js_Boot.__interfLoop = function(cc, cl) {
        if (cc == null) {
            return false
        }
        if (cc == cl) {
            return true
        }
        var intf = cc.__interfaces__;
        if (intf != null) {
            var _g1 = 0;
            var _g = intf.length;
            while (_g1 < _g) {
                var i = _g1++;
                var i1 = intf[i];
                if (i1 == cl || js_Boot.__interfLoop(i1, cl)) {
                    return true
                }
            }
        }
        return js_Boot.__interfLoop(cc.__super__, cl)
    };
    js_Boot.__instanceof = function(o, cl) {
        if (cl == null) {
            return false
        }
        switch (cl) {
            case Int:
                return (o | 0) === o;
            case Float:
                return typeof(o) == "number";
            case Bool:
                return typeof(o) == "boolean";
            case String:
                return typeof(o) == "string";
            case Array:
                return (o instanceof Array) && o.__enum__ == null;
            case Dynamic:
                return true;
            default:
                if (o != null) {
                    if (typeof(cl) == "function") {
                        if (o instanceof cl) {
                            return true
                        }
                        if (js_Boot.__interfLoop(js_Boot.getClass(o), cl)) {
                            return true
                        }
                    } else {
                        if (typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
                            if (o instanceof cl) {
                                return true
                            }
                        }
                    }
                } else {
                    return false
                }
                if (cl == Class && o.__name__ != null) {
                    return true
                }
                if (cl == Enum && o.__ename__ != null) {
                    return true
                }
                return o.__enum__ == cl
        }
    };
    js_Boot.__cast = function(o, t) {
        if (js_Boot.__instanceof(o, t)) {
            return o
        } else {
            throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t))
        }
    };
    js_Boot.__nativeClassName = function(o) {
        var name = js_Boot.__toStr.call(o).slice(8, -1);
        if (name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
            return null
        }
        return name
    };
    js_Boot.__isNativeObj = function(o) {
        return js_Boot.__nativeClassName(o) != null
    };
    js_Boot.__resolveNativeClass = function(name) {
        return $global[name]
    };
    var js_Browser = function() {};
    $hxClasses["js.Browser"] = js_Browser;
    js_Browser.__name__ = ["js", "Browser"];
    js_Browser.getLocalStorage = function() {
        try {
            var s = window.localStorage;
            s.getItem("");
            return s
        } catch (e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) {
                e = e.val
            }
            return null
        }
    };
    js_Browser.createXMLHttpRequest = function() {
        if (typeof XMLHttpRequest != "undefined") {
            return new XMLHttpRequest()
        }
        if (typeof ActiveXObject != "undefined") {
            return new ActiveXObject("Microsoft.XMLHTTP")
        }
        throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.")
    };
    js_Browser.alert = function(v) {
        window.alert(js_Boot.__string_rec(v, ""))
    };
    var js_html__$CanvasElement_CanvasUtil = function() {};
    $hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
    js_html__$CanvasElement_CanvasUtil.__name__ = ["js", "html", "_CanvasElement", "CanvasUtil"];
    js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas, attribs) {
        var _g = 0;
        var _g1 = ["webgl", "experimental-webgl"];
        while (_g < _g1.length) {
            var name = _g1[_g];
            ++_g;
            var ctx = canvas.getContext(name, attribs);
            if (ctx != null) {
                return ctx
            }
        }
        return null
    };
    var js_html_compat_ArrayBuffer = function(a) {
        if ((a instanceof Array) && a.__enum__ == null) {
            this.a = a;
            this.byteLength = a.length
        } else {
            var len = a;
            this.a = [];
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.a[i] = 0
            }
            this.byteLength = len
        }
    };
    $hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
    js_html_compat_ArrayBuffer.__name__ = ["js", "html", "compat", "ArrayBuffer"];
    js_html_compat_ArrayBuffer.sliceImpl = function(begin, end) {
        var u = new Uint8Array(this, begin, end == null ? null : end - begin);
        var result = new ArrayBuffer(u.byteLength);
        var resultArray = new Uint8Array(result);
        resultArray.set(u);
        return result
    };
    js_html_compat_ArrayBuffer.prototype = {
        byteLength: null,
        a: null,
        slice: function(begin, end) {
            return new js_html_compat_ArrayBuffer(this.a.slice(begin, end))
        },
        __class__: js_html_compat_ArrayBuffer
    };
    var js_html_compat_DataView = function(buffer, byteOffset, byteLength) {
        this.buf = buffer;
        if (byteOffset == null) {
            this.offset = 0
        } else {
            this.offset = byteOffset
        }
        if (byteLength == null) {
            this.length = buffer.byteLength - this.offset
        } else {
            this.length = byteLength
        }
        if (this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
            throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds)
        }
    };
    $hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
    js_html_compat_DataView.__name__ = ["js", "html", "compat", "DataView"];
    js_html_compat_DataView.prototype = {
        buf: null,
        offset: null,
        length: null,
        getInt8: function(byteOffset) {
            var v = this.buf.a[this.offset + byteOffset];
            if (v >= 128) {
                return v - 256
            } else {
                return v
            }
        },
        getUint8: function(byteOffset) {
            return this.buf.a[this.offset + byteOffset]
        },
        getInt16: function(byteOffset, littleEndian) {
            var v = this.getUint16(byteOffset, littleEndian);
            if (v >= 32768) {
                return v - 65536
            } else {
                return v
            }
        },
        getUint16: function(byteOffset, littleEndian) {
            if (littleEndian) {
                return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8
            } else {
                return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1]
            }
        },
        getInt32: function(byteOffset, littleEndian) {
            var p = this.offset + byteOffset;
            var a = this.buf.a[p++];
            var b = this.buf.a[p++];
            var c = this.buf.a[p++];
            var d = this.buf.a[p++];
            if (littleEndian) {
                return a | b << 8 | c << 16 | d << 24
            } else {
                return d | c << 8 | b << 16 | a << 24
            }
        },
        getUint32: function(byteOffset, littleEndian) {
            var v = this.getInt32(byteOffset, littleEndian);
            if (v < 0) {
                return v + 4294967296
            } else {
                return v
            }
        },
        getFloat32: function(byteOffset, littleEndian) {
            return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset, littleEndian))
        },
        getFloat64: function(byteOffset, littleEndian) {
            var a = this.getInt32(byteOffset, littleEndian);
            var b = this.getInt32(byteOffset + 4, littleEndian);
            return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b, littleEndian ? b : a)
        },
        setInt8: function(byteOffset, value) {
            if (value < 0) {
                this.buf.a[byteOffset + this.offset] = value + 128 & 255
            } else {
                this.buf.a[byteOffset + this.offset] = value & 255
            }
        },
        setUint8: function(byteOffset, value) {
            this.buf.a[byteOffset + this.offset] = value & 255
        },
        setInt16: function(byteOffset, value, littleEndian) {
            this.setUint16(byteOffset, value < 0 ? value + 65536 : value, littleEndian)
        },
        setUint16: function(byteOffset, value, littleEndian) {
            var p = byteOffset + this.offset;
            if (littleEndian) {
                this.buf.a[p] = value & 255;
                this.buf.a[p++] = value >> 8 & 255
            } else {
                this.buf.a[p++] = value >> 8 & 255;
                this.buf.a[p] = value & 255
            }
        },
        setInt32: function(byteOffset, value, littleEndian) {
            this.setUint32(byteOffset, value, littleEndian)
        },
        setUint32: function(byteOffset, value, littleEndian) {
            var p = byteOffset + this.offset;
            if (littleEndian) {
                this.buf.a[p++] = value & 255;
                this.buf.a[p++] = value >> 8 & 255;
                this.buf.a[p++] = value >> 16 & 255;
                this.buf.a[p++] = value >>> 24
            } else {
                this.buf.a[p++] = value >>> 24;
                this.buf.a[p++] = value >> 16 & 255;
                this.buf.a[p++] = value >> 8 & 255;
                this.buf.a[p++] = value & 255
            }
        },
        setFloat32: function(byteOffset, value, littleEndian) {
            this.setUint32(byteOffset, haxe_io_FPHelper.floatToI32(value), littleEndian)
        },
        setFloat64: function(byteOffset, value, littleEndian) {
            var i64 = haxe_io_FPHelper.doubleToI64(value);
            if (littleEndian) {
                this.setUint32(byteOffset, i64.low);
                this.setUint32(byteOffset, i64.high)
            } else {
                this.setUint32(byteOffset, i64.high);
                this.setUint32(byteOffset, i64.low)
            }
        },
        __class__: js_html_compat_DataView
    };
    var js_html_compat_Uint8Array = function() {};
    $hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
    js_html_compat_Uint8Array.__name__ = ["js", "html", "compat", "Uint8Array"];
    js_html_compat_Uint8Array._new = function(arg1, offset, length) {
        var arr;
        if (typeof(arg1) == "number") {
            arr = [];
            var _g = 0;
            while (_g < arg1) {
                var i = _g++;
                arr[i] = 0
            }
            arr.byteLength = arr.length;
            arr.byteOffset = 0;
            arr.buffer = new js_html_compat_ArrayBuffer(arr)
        } else {
            if (js_Boot.__instanceof(arg1, js_html_compat_ArrayBuffer)) {
                var buffer = arg1;
                if (offset == null) {
                    offset = 0
                }
                if (length == null) {
                    length = buffer.byteLength - offset
                }
                if (offset == 0) {
                    arr = buffer.a
                } else {
                    arr = buffer.a.slice(offset, offset + length)
                }
                arr.byteLength = arr.length;
                arr.byteOffset = offset;
                arr.buffer = buffer
            } else {
                if ((arg1 instanceof Array) && arg1.__enum__ == null) {
                    arr = arg1.slice();
                    arr.byteLength = arr.length;
                    arr.byteOffset = 0;
                    arr.buffer = new js_html_compat_ArrayBuffer(arr)
                } else {
                    throw new js__$Boot_HaxeError("TODO " + Std.string(arg1))
                }
            }
        }
        arr.subarray = js_html_compat_Uint8Array._subarray;
        arr.set = js_html_compat_Uint8Array._set;
        return arr
    };
    js_html_compat_Uint8Array._set = function(arg, offset) {
        var t = this;
        if (js_Boot.__instanceof(arg.buffer, js_html_compat_ArrayBuffer)) {
            var a = arg;
            if (arg.byteLength + offset > t.byteLength) {
                throw new js__$Boot_HaxeError("set() outside of range")
            }
            var _g1 = 0;
            var _g = arg.byteLength;
            while (_g1 < _g) {
                var i = _g1++;
                t[i + offset] = a[i]
            }
        } else {
            if ((arg instanceof Array) && arg.__enum__ == null) {
                var a1 = arg;
                if (a1.length + offset > t.byteLength) {
                    throw new js__$Boot_HaxeError("set() outside of range")
                }
                var _g11 = 0;
                var _g2 = a1.length;
                while (_g11 < _g2) {
                    var i1 = _g11++;
                    t[i1 + offset] = a1[i1]
                }
            } else {
                throw new js__$Boot_HaxeError("TODO")
            }
        }
    };
    js_html_compat_Uint8Array._subarray = function(start, end) {
        var t = this;
        var a = js_html_compat_Uint8Array._new(t.slice(start, end));
        a.byteOffset = start;
        return a
    };
    var lime__$backend_html5_GameDeviceData = function() {
        this.connected = true;
        this.buttons = [];
        this.axes = []
    };
    $hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
    lime__$backend_html5_GameDeviceData.__name__ = ["lime", "_backend", "html5", "GameDeviceData"];
    lime__$backend_html5_GameDeviceData.prototype = {
        connected: null,
        id: null,
        isGamepad: null,
        buttons: null,
        axes: null,
        __class__: lime__$backend_html5_GameDeviceData
    };
    var lime__$backend_html5_HTML5AudioSource = function(parent) {
        this.parent = parent;
        this.id = -1;
        this.gain = 1;
        this.position = new lime_math_Vector4()
    };
    $hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
    lime__$backend_html5_HTML5AudioSource.__name__ = ["lime", "_backend", "html5", "HTML5AudioSource"];
    lime__$backend_html5_HTML5AudioSource.prototype = {
        completed: null,
        gain: null,
        id: null,
        length: null,
        loops: null,
        parent: null,
        playing: null,
        position: null,
        dispose: function() {},
        init: function() {},
        play: function() {
            if (this.playing || this.parent.buffer == null) {
                return
            }
            this.playing = true;
            var time = this.getCurrentTime();
            this.completed = false;
            var cacheVolume = this.parent.buffer.__srcHowl._volume;
            this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
            this.id = this.parent.buffer.__srcHowl.play();
            this.parent.buffer.__srcHowl._volume = cacheVolume;
            this.setPosition(this.parent.get_position());
            this.parent.buffer.__srcHowl.on("end", $bind(this, this.howl_onEnd), this.id);
            this.setCurrentTime(time)
        },
        pause: function() {
            this.playing = false;
            this.parent.buffer.__srcHowl.pause(this.id)
        },
        stop: function() {
            this.playing = false;
            this.parent.buffer.__srcHowl.stop(this.id)
        },
        howl_onEnd: function() {
            this.playing = false;
            if (this.loops > 0) {
                this.loops--;
                this.stop();
                this.play();
                return
            } else {
                this.parent.buffer.__srcHowl.stop(this.id)
            }
            this.completed = true;
            this.parent.onComplete.dispatch()
        },
        getCurrentTime: function() {
            if (this.id == -1) {
                return 0
            }
            if (this.completed) {
                return this.getLength()
            } else {
                var time = Std["int"](this.parent.buffer.__srcHowl.seek(this.id) * 1000) - this.parent.offset;
                if (time < 0) {
                    return 0
                }
                return time
            }
        },
        setCurrentTime: function(value) {
            if (this.parent.buffer != null) {
                var pos = (value + this.parent.offset) / 1000;
                if (pos < 0) {
                    pos = 0
                }
                this.parent.buffer.__srcHowl.seek(pos, this.id)
            }
            return value
        },
        getGain: function() {
            return this.gain
        },
        setGain: function(value) {
            if (this.parent.buffer != null) {
                this.parent.buffer.__srcHowl.volume(value, this.id)
            }
            return this.gain = value
        },
        getLength: function() {
            if (this.length != 0) {
                return this.length
            }
            return Std["int"](this.parent.buffer.__srcHowl.duration() * 1000)
        },
        setLength: function(value) {
            return this.length = value
        },
        getLoops: function() {
            return this.loops
        },
        setLoops: function(value) {
            return this.loops = value
        },
        getPosition: function() {
            return this.position
        },
        setPosition: function(value) {
            this.position.x = value.x;
            this.position.y = value.y;
            this.position.z = value.z;
            this.position.w = value.w;
            return this.position
        },
        __class__: lime__$backend_html5_HTML5AudioSource
    };
    var lime__$backend_html5_HTML5GLRenderContext = function(context) {
        this.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
        this.TIMEOUT_IGNORED = -1;
        this.INVALID_INDEX = -1;
        this.DEPTH32F_STENCIL8 = 36013;
        this.DEPTH_COMPONENT32F = 36012;
        this.DYNAMIC_COPY = 35050;
        this.DYNAMIC_READ = 35049;
        this.STATIC_COPY = 35046;
        this.STATIC_READ = 35045;
        this.STREAM_COPY = 35042;
        this.STREAM_READ = 35041;
        this.DEPTH_COMPONENT24 = 33190;
        this.MAX = 32776;
        this.MIN = 32775;
        this.STENCIL = 6146;
        this.DEPTH = 6145;
        this.COLOR = 6144;
        this.SYNC_FLUSH_COMMANDS_BIT = 1;
        this.WAIT_FAILED = 37149;
        this.CONDITION_SATISFIED = 37148;
        this.TIMEOUT_EXPIRED = 37147;
        this.ALREADY_SIGNALED = 37146;
        this.SIGNALED = 37145;
        this.UNSIGNALED = 37144;
        this.SYNC_GPU_COMMANDS_COMPLETE = 37143;
        this.SYNC_FENCE = 37142;
        this.SYNC_FLAGS = 37141;
        this.SYNC_STATUS = 37140;
        this.SYNC_CONDITION = 37139;
        this.OBJECT_TYPE = 37138;
        this.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
        this.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
        this.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
        this.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
        this.UNIFORM_BLOCK_DATA_SIZE = 35392;
        this.UNIFORM_BLOCK_BINDING = 35391;
        this.UNIFORM_IS_ROW_MAJOR = 35390;
        this.UNIFORM_MATRIX_STRIDE = 35389;
        this.UNIFORM_ARRAY_STRIDE = 35388;
        this.UNIFORM_OFFSET = 35387;
        this.UNIFORM_BLOCK_INDEX = 35386;
        this.UNIFORM_SIZE = 35384;
        this.UNIFORM_TYPE = 35383;
        this.ACTIVE_UNIFORM_BLOCKS = 35382;
        this.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
        this.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
        this.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
        this.MAX_UNIFORM_BLOCK_SIZE = 35376;
        this.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
        this.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
        this.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
        this.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
        this.UNIFORM_BUFFER_SIZE = 35370;
        this.UNIFORM_BUFFER_START = 35369;
        this.UNIFORM_BUFFER_BINDING = 35368;
        this.UNIFORM_BUFFER = 35345;
        this.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
        this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
        this.RENDERBUFFER_SAMPLES = 36011;
        this.READ_FRAMEBUFFER_BINDING = 36010;
        this.DRAW_FRAMEBUFFER = 36009;
        this.READ_FRAMEBUFFER = 36008;
        this.DRAW_FRAMEBUFFER_BINDING = 36006;
        this.DEPTH24_STENCIL8 = 35056;
        this.FRAMEBUFFER_DEFAULT = 33304;
        this.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
        this.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
        this.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
        this.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
        this.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
        this.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
        this.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
        this.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
        this.TRANSFORM_FEEDBACK_BINDING = 36389;
        this.TRANSFORM_FEEDBACK_ACTIVE = 36388;
        this.TRANSFORM_FEEDBACK_PAUSED = 36387;
        this.TRANSFORM_FEEDBACK = 36386;
        this.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
        this.TRANSFORM_FEEDBACK_BUFFER = 35982;
        this.SEPARATE_ATTRIBS = 35981;
        this.INTERLEAVED_ATTRIBS = 35980;
        this.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
        this.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
        this.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
        this.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
        this.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
        this.TRANSFORM_FEEDBACK_VARYINGS = 35971;
        this.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
        this.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
        this.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
        this.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
        this.SIGNED_NORMALIZED = 36764;
        this.UNSIGNED_NORMALIZED = 35863;
        this.UNSIGNED_INT_VEC4 = 36296;
        this.UNSIGNED_INT_VEC3 = 36295;
        this.UNSIGNED_INT_VEC2 = 36294;
        this.FLOAT_MAT4x3 = 35690;
        this.FLOAT_MAT4x2 = 35689;
        this.FLOAT_MAT3x4 = 35688;
        this.FLOAT_MAT3x2 = 35687;
        this.FLOAT_MAT2x4 = 35686;
        this.FLOAT_MAT2x3 = 35685;
        this.COPY_WRITE_BUFFER_BINDING = 36663;
        this.COPY_READ_BUFFER_BINDING = 36662;
        this.COPY_WRITE_BUFFER = 36663;
        this.COPY_READ_BUFFER = 36662;
        this.PIXEL_UNPACK_BUFFER_BINDING = 35055;
        this.PIXEL_PACK_BUFFER_BINDING = 35053;
        this.PIXEL_UNPACK_BUFFER = 35052;
        this.PIXEL_PACK_BUFFER = 35051;
        this.SAMPLER_BINDING = 35097;
        this.MAX_SAMPLES = 36183;
        this.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
        this.UNSIGNED_INT_SAMPLER_CUBE = 36308;
        this.UNSIGNED_INT_SAMPLER_3D = 36307;
        this.UNSIGNED_INT_SAMPLER_2D = 36306;
        this.INT_SAMPLER_2D_ARRAY = 36303;
        this.INT_SAMPLER_CUBE = 36300;
        this.INT_SAMPLER_3D = 36299;
        this.INT_SAMPLER_2D = 36298;
        this.SAMPLER_CUBE_SHADOW = 36293;
        this.SAMPLER_2D_ARRAY_SHADOW = 36292;
        this.SAMPLER_2D_ARRAY = 36289;
        this.SAMPLER_2D_SHADOW = 35682;
        this.SAMPLER_3D = 35679;
        this.COLOR_ATTACHMENT15 = 36079;
        this.COLOR_ATTACHMENT14 = 36078;
        this.COLOR_ATTACHMENT13 = 36077;
        this.COLOR_ATTACHMENT12 = 36076;
        this.COLOR_ATTACHMENT11 = 36075;
        this.COLOR_ATTACHMENT10 = 36074;
        this.COLOR_ATTACHMENT9 = 36073;
        this.COLOR_ATTACHMENT8 = 36072;
        this.COLOR_ATTACHMENT7 = 36071;
        this.COLOR_ATTACHMENT6 = 36070;
        this.COLOR_ATTACHMENT5 = 36069;
        this.COLOR_ATTACHMENT4 = 36068;
        this.COLOR_ATTACHMENT3 = 36067;
        this.COLOR_ATTACHMENT2 = 36066;
        this.COLOR_ATTACHMENT1 = 36065;
        this.MAX_COLOR_ATTACHMENTS = 36063;
        this.DRAW_BUFFER15 = 34868;
        this.DRAW_BUFFER14 = 34867;
        this.DRAW_BUFFER13 = 34866;
        this.DRAW_BUFFER12 = 34865;
        this.DRAW_BUFFER11 = 34864;
        this.DRAW_BUFFER10 = 34863;
        this.DRAW_BUFFER9 = 34862;
        this.DRAW_BUFFER8 = 34861;
        this.DRAW_BUFFER7 = 34860;
        this.DRAW_BUFFER6 = 34859;
        this.DRAW_BUFFER5 = 34858;
        this.DRAW_BUFFER4 = 34857;
        this.DRAW_BUFFER3 = 34856;
        this.DRAW_BUFFER2 = 34855;
        this.DRAW_BUFFER1 = 34854;
        this.DRAW_BUFFER0 = 34853;
        this.MAX_DRAW_BUFFERS = 34852;
        this.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
        this.ANY_SAMPLES_PASSED = 35887;
        this.QUERY_RESULT_AVAILABLE = 34919;
        this.QUERY_RESULT = 34918;
        this.CURRENT_QUERY = 34917;
        this.INT_2_10_10_10_REV = 36255;
        this.RG_INTEGER = 33320;
        this.RG = 33319;
        this.HALF_FLOAT = 5131;
        this.UNSIGNED_INT_24_8 = 34042;
        this.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
        this.UNSIGNED_INT_5_9_9_9_REV = 35902;
        this.UNSIGNED_INT_10F_11F_11F_REV = 35899;
        this.UNSIGNED_INT_2_10_10_10_REV = 33640;
        this.TEXTURE_IMMUTABLE_LEVELS = 33503;
        this.TEXTURE_IMMUTABLE_FORMAT = 37167;
        this.RGB10_A2UI = 36975;
        this.RGBA8_SNORM = 36759;
        this.RGB8_SNORM = 36758;
        this.RG8_SNORM = 36757;
        this.R8_SNORM = 36756;
        this.RG32UI = 33340;
        this.RG32I = 33339;
        this.RG16UI = 33338;
        this.RG16I = 33337;
        this.RG8UI = 33336;
        this.RG8I = 33335;
        this.R32UI = 33334;
        this.R32I = 33333;
        this.R16UI = 33332;
        this.R16I = 33331;
        this.R8UI = 33330;
        this.R8I = 33329;
        this.RG32F = 33328;
        this.RG16F = 33327;
        this.R32F = 33326;
        this.R16F = 33325;
        this.RG8 = 33323;
        this.R8 = 33321;
        this.RGBA_INTEGER = 36249;
        this.RGB_INTEGER = 36248;
        this.RED_INTEGER = 36244;
        this.RGB8I = 36239;
        this.RGBA8I = 36238;
        this.RGB16I = 36233;
        this.RGBA16I = 36232;
        this.RGB32I = 36227;
        this.RGBA32I = 36226;
        this.RGB8UI = 36221;
        this.RGBA8UI = 36220;
        this.RGB16UI = 36215;
        this.RGBA16UI = 36214;
        this.RGB32UI = 36209;
        this.RGBA32UI = 36208;
        this.RGB9_E5 = 35901;
        this.R11F_G11F_B10F = 35898;
        this.TEXTURE_BINDING_2D_ARRAY = 35869;
        this.TEXTURE_2D_ARRAY = 35866;
        this.RGB16F = 34843;
        this.RGBA16F = 34842;
        this.RGB32F = 34837;
        this.RGBA32F = 34836;
        this.COMPARE_REF_TO_TEXTURE = 34894;
        this.SRGB8_ALPHA8 = 35907;
        this.SRGB8 = 35905;
        this.SRGB = 35904;
        this.TEXTURE_COMPARE_FUNC = 34893;
        this.TEXTURE_COMPARE_MODE = 34892;
        this.TEXTURE_MAX_LEVEL = 33085;
        this.TEXTURE_BASE_LEVEL = 33084;
        this.TEXTURE_MAX_LOD = 33083;
        this.TEXTURE_MIN_LOD = 33082;
        this.TEXTURE_WRAP_R = 32882;
        this.TEXTURE_3D = 32879;
        this.RGB10_A2 = 32857;
        this.RGBA8 = 32856;
        this.RGB8 = 32849;
        this.RED = 6403;
        this.MAX_ELEMENT_INDEX = 36203;
        this.MAX_SERVER_WAIT_TIMEOUT = 37137;
        this.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
        this.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
        this.VERTEX_ARRAY_BINDING = 34229;
        this.RASTERIZER_DISCARD = 35977;
        this.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
        this.MAX_VARYING_COMPONENTS = 35659;
        this.MAX_PROGRAM_TEXEL_OFFSET = 35077;
        this.MIN_PROGRAM_TEXEL_OFFSET = 35076;
        this.MAX_ARRAY_TEXTURE_LAYERS = 35071;
        this.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
        this.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
        this.MAX_TEXTURE_LOD_BIAS = 34045;
        this.MAX_ELEMENTS_INDICES = 33001;
        this.MAX_ELEMENTS_VERTICES = 33000;
        this.MAX_3D_TEXTURE_SIZE = 32883;
        this.UNPACK_IMAGE_HEIGHT = 32878;
        this.UNPACK_SKIP_IMAGES = 32877;
        this.TEXTURE_BINDING_3D = 32874;
        this.PACK_SKIP_PIXELS = 3332;
        this.PACK_SKIP_ROWS = 3331;
        this.PACK_ROW_LENGTH = 3330;
        this.UNPACK_SKIP_PIXELS = 3316;
        this.UNPACK_SKIP_ROWS = 3315;
        this.UNPACK_ROW_LENGTH = 3314;
        this.READ_BUFFER = 3074;
        this.BROWSER_DEFAULT_WEBGL = 37444;
        this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
        this.CONTEXT_LOST_WEBGL = 37442;
        this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
        this.UNPACK_FLIP_Y_WEBGL = 37440;
        this.INVALID_FRAMEBUFFER_OPERATION = 1286;
        this.MAX_RENDERBUFFER_SIZE = 34024;
        this.RENDERBUFFER_BINDING = 36007;
        this.FRAMEBUFFER_BINDING = 36006;
        this.FRAMEBUFFER_UNSUPPORTED = 36061;
        this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
        this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
        this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
        this.FRAMEBUFFER_COMPLETE = 36053;
        this.NONE = 0;
        this.DEPTH_STENCIL_ATTACHMENT = 33306;
        this.STENCIL_ATTACHMENT = 36128;
        this.DEPTH_ATTACHMENT = 36096;
        this.COLOR_ATTACHMENT0 = 36064;
        this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
        this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
        this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
        this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
        this.RENDERBUFFER_STENCIL_SIZE = 36181;
        this.RENDERBUFFER_DEPTH_SIZE = 36180;
        this.RENDERBUFFER_ALPHA_SIZE = 36179;
        this.RENDERBUFFER_BLUE_SIZE = 36178;
        this.RENDERBUFFER_GREEN_SIZE = 36177;
        this.RENDERBUFFER_RED_SIZE = 36176;
        this.RENDERBUFFER_INTERNAL_FORMAT = 36164;
        this.RENDERBUFFER_HEIGHT = 36163;
        this.RENDERBUFFER_WIDTH = 36162;
        this.DEPTH_STENCIL = 34041;
        this.STENCIL_INDEX8 = 36168;
        this.STENCIL_INDEX = 6401;
        this.DEPTH_COMPONENT16 = 33189;
        this.RGB565 = 36194;
        this.RGB5_A1 = 32855;
        this.RGBA4 = 32854;
        this.RENDERBUFFER = 36161;
        this.FRAMEBUFFER = 36160;
        this.HIGH_INT = 36341;
        this.MEDIUM_INT = 36340;
        this.LOW_INT = 36339;
        this.HIGH_FLOAT = 36338;
        this.MEDIUM_FLOAT = 36337;
        this.LOW_FLOAT = 36336;
        this.COMPILE_STATUS = 35713;
        this.POINT_SPRITE = 34913;
        this.VERTEX_PROGRAM_POINT_SIZE = 34370;
        this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
        this.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
        this.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
        this.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
        this.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
        this.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
        this.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
        this.SAMPLER_CUBE = 35680;
        this.SAMPLER_2D = 35678;
        this.FLOAT_MAT4 = 35676;
        this.FLOAT_MAT3 = 35675;
        this.FLOAT_MAT2 = 35674;
        this.BOOL_VEC4 = 35673;
        this.BOOL_VEC3 = 35672;
        this.BOOL_VEC2 = 35671;
        this.BOOL = 35670;
        this.INT_VEC4 = 35669;
        this.INT_VEC3 = 35668;
        this.INT_VEC2 = 35667;
        this.FLOAT_VEC4 = 35666;
        this.FLOAT_VEC3 = 35665;
        this.FLOAT_VEC2 = 35664;
        this.MIRRORED_REPEAT = 33648;
        this.CLAMP_TO_EDGE = 33071;
        this.REPEAT = 10497;
        this.ACTIVE_TEXTURE = 34016;
        this.TEXTURE31 = 34015;
        this.TEXTURE30 = 34014;
        this.TEXTURE29 = 34013;
        this.TEXTURE28 = 34012;
        this.TEXTURE27 = 34011;
        this.TEXTURE26 = 34010;
        this.TEXTURE25 = 34009;
        this.TEXTURE24 = 34008;
        this.TEXTURE23 = 34007;
        this.TEXTURE22 = 34006;
        this.TEXTURE21 = 34005;
        this.TEXTURE20 = 34004;
        this.TEXTURE19 = 34003;
        this.TEXTURE18 = 34002;
        this.TEXTURE17 = 34001;
        this.TEXTURE16 = 34000;
        this.TEXTURE15 = 33999;
        this.TEXTURE14 = 33998;
        this.TEXTURE13 = 33997;
        this.TEXTURE12 = 33996;
        this.TEXTURE11 = 33995;
        this.TEXTURE10 = 33994;
        this.TEXTURE9 = 33993;
        this.TEXTURE8 = 33992;
        this.TEXTURE7 = 33991;
        this.TEXTURE6 = 33990;
        this.TEXTURE5 = 33989;
        this.TEXTURE4 = 33988;
        this.TEXTURE3 = 33987;
        this.TEXTURE2 = 33986;
        this.TEXTURE1 = 33985;
        this.TEXTURE0 = 33984;
        this.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
        this.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
        this.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
        this.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
        this.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
        this.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
        this.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
        this.TEXTURE_BINDING_CUBE_MAP = 34068;
        this.TEXTURE_CUBE_MAP = 34067;
        this.TEXTURE = 5890;
        this.TEXTURE_2D = 3553;
        this.TEXTURE_WRAP_T = 10243;
        this.TEXTURE_WRAP_S = 10242;
        this.TEXTURE_MIN_FILTER = 10241;
        this.TEXTURE_MAG_FILTER = 10240;
        this.LINEAR_MIPMAP_LINEAR = 9987;
        this.NEAREST_MIPMAP_LINEAR = 9986;
        this.LINEAR_MIPMAP_NEAREST = 9985;
        this.NEAREST_MIPMAP_NEAREST = 9984;
        this.LINEAR = 9729;
        this.NEAREST = 9728;
        this.VERSION = 7938;
        this.RENDERER = 7937;
        this.VENDOR = 7936;
        this.DECR_WRAP = 34056;
        this.INCR_WRAP = 34055;
        this.INVERT = 5386;
        this.DECR = 7683;
        this.INCR = 7682;
        this.REPLACE = 7681;
        this.KEEP = 7680;
        this.ALWAYS = 519;
        this.GEQUAL = 518;
        this.NOTEQUAL = 517;
        this.GREATER = 516;
        this.LEQUAL = 515;
        this.EQUAL = 514;
        this.LESS = 513;
        this.NEVER = 512;
        this.CURRENT_PROGRAM = 35725;
        this.SHADING_LANGUAGE_VERSION = 35724;
        this.ACTIVE_ATTRIBUTES = 35721;
        this.ACTIVE_UNIFORMS = 35718;
        this.ATTACHED_SHADERS = 35717;
        this.VALIDATE_STATUS = 35715;
        this.LINK_STATUS = 35714;
        this.DELETE_STATUS = 35712;
        this.SHADER_TYPE = 35663;
        this.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
        this.MAX_TEXTURE_IMAGE_UNITS = 34930;
        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
        this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
        this.MAX_VARYING_VECTORS = 36348;
        this.MAX_VERTEX_UNIFORM_VECTORS = 36347;
        this.MAX_VERTEX_ATTRIBS = 34921;
        this.VERTEX_SHADER = 35633;
        this.FRAGMENT_SHADER = 35632;
        this.UNSIGNED_SHORT_5_6_5 = 33635;
        this.UNSIGNED_SHORT_5_5_5_1 = 32820;
        this.UNSIGNED_SHORT_4_4_4_4 = 32819;
        this.LUMINANCE_ALPHA = 6410;
        this.LUMINANCE = 6409;
        this.RGBA = 6408;
        this.RGB = 6407;
        this.ALPHA = 6406;
        this.DEPTH_COMPONENT = 6402;
        this.FLOAT = 5126;
        this.UNSIGNED_INT = 5125;
        this.INT = 5124;
        this.UNSIGNED_SHORT = 5123;
        this.SHORT = 5122;
        this.UNSIGNED_BYTE = 5121;
        this.BYTE = 5120;
        this.GENERATE_MIPMAP_HINT = 33170;
        this.NICEST = 4354;
        this.FASTEST = 4353;
        this.DONT_CARE = 4352;
        this.COMPRESSED_TEXTURE_FORMATS = 34467;
        this.SAMPLE_COVERAGE_INVERT = 32939;
        this.SAMPLE_COVERAGE_VALUE = 32938;
        this.SAMPLES = 32937;
        this.SAMPLE_BUFFERS = 32936;
        this.TEXTURE_BINDING_2D = 32873;
        this.POLYGON_OFFSET_FACTOR = 32824;
        this.POLYGON_OFFSET_UNITS = 10752;
        this.STENCIL_BITS = 3415;
        this.DEPTH_BITS = 3414;
        this.ALPHA_BITS = 3413;
        this.BLUE_BITS = 3412;
        this.GREEN_BITS = 3411;
        this.RED_BITS = 3410;
        this.SUBPIXEL_BITS = 3408;
        this.MAX_VIEWPORT_DIMS = 3386;
        this.MAX_TEXTURE_SIZE = 3379;
        this.PACK_ALIGNMENT = 3333;
        this.UNPACK_ALIGNMENT = 3317;
        this.COLOR_WRITEMASK = 3107;
        this.COLOR_CLEAR_VALUE = 3106;
        this.SCISSOR_BOX = 3088;
        this.VIEWPORT = 2978;
        this.STENCIL_BACK_WRITEMASK = 36005;
        this.STENCIL_BACK_VALUE_MASK = 36004;
        this.STENCIL_BACK_REF = 36003;
        this.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
        this.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
        this.STENCIL_BACK_FAIL = 34817;
        this.STENCIL_BACK_FUNC = 34816;
        this.STENCIL_WRITEMASK = 2968;
        this.STENCIL_VALUE_MASK = 2963;
        this.STENCIL_REF = 2967;
        this.STENCIL_PASS_DEPTH_PASS = 2966;
        this.STENCIL_PASS_DEPTH_FAIL = 2965;
        this.STENCIL_FAIL = 2964;
        this.STENCIL_FUNC = 2962;
        this.STENCIL_CLEAR_VALUE = 2961;
        this.DEPTH_FUNC = 2932;
        this.DEPTH_CLEAR_VALUE = 2931;
        this.DEPTH_WRITEMASK = 2930;
        this.DEPTH_RANGE = 2928;
        this.FRONT_FACE = 2886;
        this.CULL_FACE_MODE = 2885;
        this.ALIASED_LINE_WIDTH_RANGE = 33902;
        this.ALIASED_POINT_SIZE_RANGE = 33901;
        this.LINE_WIDTH = 2849;
        this.CCW = 2305;
        this.CW = 2304;
        this.OUT_OF_MEMORY = 1285;
        this.INVALID_OPERATION = 1282;
        this.INVALID_VALUE = 1281;
        this.INVALID_ENUM = 1280;
        this.NO_ERROR = 0;
        this.SAMPLE_COVERAGE = 32928;
        this.SAMPLE_ALPHA_TO_COVERAGE = 32926;
        this.POLYGON_OFFSET_FILL = 32823;
        this.SCISSOR_TEST = 3089;
        this.DEPTH_TEST = 2929;
        this.STENCIL_TEST = 2960;
        this.DITHER = 3024;
        this.BLEND = 3042;
        this.CULL_FACE = 2884;
        this.FRONT_AND_BACK = 1032;
        this.BACK = 1029;
        this.FRONT = 1028;
        this.CURRENT_VERTEX_ATTRIB = 34342;
        this.BUFFER_USAGE = 34661;
        this.BUFFER_SIZE = 34660;
        this.DYNAMIC_DRAW = 35048;
        this.STATIC_DRAW = 35044;
        this.STREAM_DRAW = 35040;
        this.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
        this.ARRAY_BUFFER_BINDING = 34964;
        this.ELEMENT_ARRAY_BUFFER = 34963;
        this.ARRAY_BUFFER = 34962;
        this.BLEND_COLOR = 32773;
        this.ONE_MINUS_CONSTANT_ALPHA = 32772;
        this.CONSTANT_ALPHA = 32771;
        this.ONE_MINUS_CONSTANT_COLOR = 32770;
        this.CONSTANT_COLOR = 32769;
        this.BLEND_SRC_ALPHA = 32971;
        this.BLEND_DST_ALPHA = 32970;
        this.BLEND_SRC_RGB = 32969;
        this.BLEND_DST_RGB = 32968;
        this.FUNC_REVERSE_SUBTRACT = 32779;
        this.FUNC_SUBTRACT = 32778;
        this.BLEND_EQUATION_ALPHA = 34877;
        this.BLEND_EQUATION_RGB = 32777;
        this.BLEND_EQUATION = 32777;
        this.FUNC_ADD = 32774;
        this.SRC_ALPHA_SATURATE = 776;
        this.ONE_MINUS_DST_COLOR = 775;
        this.DST_COLOR = 774;
        this.ONE_MINUS_DST_ALPHA = 773;
        this.DST_ALPHA = 772;
        this.ONE_MINUS_SRC_ALPHA = 771;
        this.SRC_ALPHA = 770;
        this.ONE_MINUS_SRC_COLOR = 769;
        this.SRC_COLOR = 768;
        this.ONE = 1;
        this.ZERO = 0;
        this.TRIANGLE_FAN = 6;
        this.TRIANGLE_STRIP = 5;
        this.TRIANGLES = 4;
        this.LINE_STRIP = 3;
        this.LINE_LOOP = 2;
        this.LINES = 1;
        this.POINTS = 0;
        this.COLOR_BUFFER_BIT = 16384;
        this.STENCIL_BUFFER_BIT = 1024;
        this.DEPTH_BUFFER_BIT = 256;
        this.__context = context;
        this.version = 1;
        this.type = lime_graphics_opengl_GLContextType.WEBGL;
        if (context != null) {
            var gl = context;
            if (Object.prototype.hasOwnProperty.call(gl, "rawgl")) {
                gl = Reflect.field(context, "rawgl")
            }
            if (Reflect.hasField(window, "WebGL2RenderingContext") && js_Boot.__instanceof(gl, WebGL2RenderingContext)) {
                this.version = 2
            }
        }
    };
    $hxClasses["lime._backend.html5.HTML5GLRenderContext"] = lime__$backend_html5_HTML5GLRenderContext;
    lime__$backend_html5_HTML5GLRenderContext.__name__ = ["lime", "_backend", "html5", "HTML5GLRenderContext"];
    lime__$backend_html5_HTML5GLRenderContext.prototype = {
        DEPTH_BUFFER_BIT: null,
        STENCIL_BUFFER_BIT: null,
        COLOR_BUFFER_BIT: null,
        POINTS: null,
        LINES: null,
        LINE_LOOP: null,
        LINE_STRIP: null,
        TRIANGLES: null,
        TRIANGLE_STRIP: null,
        TRIANGLE_FAN: null,
        ZERO: null,
        ONE: null,
        SRC_COLOR: null,
        ONE_MINUS_SRC_COLOR: null,
        SRC_ALPHA: null,
        ONE_MINUS_SRC_ALPHA: null,
        DST_ALPHA: null,
        ONE_MINUS_DST_ALPHA: null,
        DST_COLOR: null,
        ONE_MINUS_DST_COLOR: null,
        SRC_ALPHA_SATURATE: null,
        FUNC_ADD: null,
        BLEND_EQUATION: null,
        BLEND_EQUATION_RGB: null,
        BLEND_EQUATION_ALPHA: null,
        FUNC_SUBTRACT: null,
        FUNC_REVERSE_SUBTRACT: null,
        BLEND_DST_RGB: null,
        BLEND_SRC_RGB: null,
        BLEND_DST_ALPHA: null,
        BLEND_SRC_ALPHA: null,
        CONSTANT_COLOR: null,
        ONE_MINUS_CONSTANT_COLOR: null,
        CONSTANT_ALPHA: null,
        ONE_MINUS_CONSTANT_ALPHA: null,
        BLEND_COLOR: null,
        ARRAY_BUFFER: null,
        ELEMENT_ARRAY_BUFFER: null,
        ARRAY_BUFFER_BINDING: null,
        ELEMENT_ARRAY_BUFFER_BINDING: null,
        STREAM_DRAW: null,
        STATIC_DRAW: null,
        DYNAMIC_DRAW: null,
        BUFFER_SIZE: null,
        BUFFER_USAGE: null,
        CURRENT_VERTEX_ATTRIB: null,
        FRONT: null,
        BACK: null,
        FRONT_AND_BACK: null,
        CULL_FACE: null,
        BLEND: null,
        DITHER: null,
        STENCIL_TEST: null,
        DEPTH_TEST: null,
        SCISSOR_TEST: null,
        POLYGON_OFFSET_FILL: null,
        SAMPLE_ALPHA_TO_COVERAGE: null,
        SAMPLE_COVERAGE: null,
        NO_ERROR: null,
        INVALID_ENUM: null,
        INVALID_VALUE: null,
        INVALID_OPERATION: null,
        OUT_OF_MEMORY: null,
        CW: null,
        CCW: null,
        LINE_WIDTH: null,
        ALIASED_POINT_SIZE_RANGE: null,
        ALIASED_LINE_WIDTH_RANGE: null,
        CULL_FACE_MODE: null,
        FRONT_FACE: null,
        DEPTH_RANGE: null,
        DEPTH_WRITEMASK: null,
        DEPTH_CLEAR_VALUE: null,
        DEPTH_FUNC: null,
        STENCIL_CLEAR_VALUE: null,
        STENCIL_FUNC: null,
        STENCIL_FAIL: null,
        STENCIL_PASS_DEPTH_FAIL: null,
        STENCIL_PASS_DEPTH_PASS: null,
        STENCIL_REF: null,
        STENCIL_VALUE_MASK: null,
        STENCIL_WRITEMASK: null,
        STENCIL_BACK_FUNC: null,
        STENCIL_BACK_FAIL: null,
        STENCIL_BACK_PASS_DEPTH_FAIL: null,
        STENCIL_BACK_PASS_DEPTH_PASS: null,
        STENCIL_BACK_REF: null,
        STENCIL_BACK_VALUE_MASK: null,
        STENCIL_BACK_WRITEMASK: null,
        VIEWPORT: null,
        SCISSOR_BOX: null,
        COLOR_CLEAR_VALUE: null,
        COLOR_WRITEMASK: null,
        UNPACK_ALIGNMENT: null,
        PACK_ALIGNMENT: null,
        MAX_TEXTURE_SIZE: null,
        MAX_VIEWPORT_DIMS: null,
        SUBPIXEL_BITS: null,
        RED_BITS: null,
        GREEN_BITS: null,
        BLUE_BITS: null,
        ALPHA_BITS: null,
        DEPTH_BITS: null,
        STENCIL_BITS: null,
        POLYGON_OFFSET_UNITS: null,
        POLYGON_OFFSET_FACTOR: null,
        TEXTURE_BINDING_2D: null,
        SAMPLE_BUFFERS: null,
        SAMPLES: null,
        SAMPLE_COVERAGE_VALUE: null,
        SAMPLE_COVERAGE_INVERT: null,
        COMPRESSED_TEXTURE_FORMATS: null,
        DONT_CARE: null,
        FASTEST: null,
        NICEST: null,
        GENERATE_MIPMAP_HINT: null,
        BYTE: null,
        UNSIGNED_BYTE: null,
        SHORT: null,
        UNSIGNED_SHORT: null,
        INT: null,
        UNSIGNED_INT: null,
        FLOAT: null,
        DEPTH_COMPONENT: null,
        ALPHA: null,
        RGB: null,
        RGBA: null,
        LUMINANCE: null,
        LUMINANCE_ALPHA: null,
        UNSIGNED_SHORT_4_4_4_4: null,
        UNSIGNED_SHORT_5_5_5_1: null,
        UNSIGNED_SHORT_5_6_5: null,
        FRAGMENT_SHADER: null,
        VERTEX_SHADER: null,
        MAX_VERTEX_ATTRIBS: null,
        MAX_VERTEX_UNIFORM_VECTORS: null,
        MAX_VARYING_VECTORS: null,
        MAX_COMBINED_TEXTURE_IMAGE_UNITS: null,
        MAX_VERTEX_TEXTURE_IMAGE_UNITS: null,
        MAX_TEXTURE_IMAGE_UNITS: null,
        MAX_FRAGMENT_UNIFORM_VECTORS: null,
        SHADER_TYPE: null,
        DELETE_STATUS: null,
        LINK_STATUS: null,
        VALIDATE_STATUS: null,
        ATTACHED_SHADERS: null,
        ACTIVE_UNIFORMS: null,
        ACTIVE_ATTRIBUTES: null,
        SHADING_LANGUAGE_VERSION: null,
        CURRENT_PROGRAM: null,
        NEVER: null,
        LESS: null,
        EQUAL: null,
        LEQUAL: null,
        GREATER: null,
        NOTEQUAL: null,
        GEQUAL: null,
        ALWAYS: null,
        KEEP: null,
        REPLACE: null,
        INCR: null,
        DECR: null,
        INVERT: null,
        INCR_WRAP: null,
        DECR_WRAP: null,
        VENDOR: null,
        RENDERER: null,
        VERSION: null,
        NEAREST: null,
        LINEAR: null,
        NEAREST_MIPMAP_NEAREST: null,
        LINEAR_MIPMAP_NEAREST: null,
        NEAREST_MIPMAP_LINEAR: null,
        LINEAR_MIPMAP_LINEAR: null,
        TEXTURE_MAG_FILTER: null,
        TEXTURE_MIN_FILTER: null,
        TEXTURE_WRAP_S: null,
        TEXTURE_WRAP_T: null,
        TEXTURE_2D: null,
        TEXTURE: null,
        TEXTURE_CUBE_MAP: null,
        TEXTURE_BINDING_CUBE_MAP: null,
        TEXTURE_CUBE_MAP_POSITIVE_X: null,
        TEXTURE_CUBE_MAP_NEGATIVE_X: null,
        TEXTURE_CUBE_MAP_POSITIVE_Y: null,
        TEXTURE_CUBE_MAP_NEGATIVE_Y: null,
        TEXTURE_CUBE_MAP_POSITIVE_Z: null,
        TEXTURE_CUBE_MAP_NEGATIVE_Z: null,
        MAX_CUBE_MAP_TEXTURE_SIZE: null,
        TEXTURE0: null,
        TEXTURE1: null,
        TEXTURE2: null,
        TEXTURE3: null,
        TEXTURE4: null,
        TEXTURE5: null,
        TEXTURE6: null,
        TEXTURE7: null,
        TEXTURE8: null,
        TEXTURE9: null,
        TEXTURE10: null,
        TEXTURE11: null,
        TEXTURE12: null,
        TEXTURE13: null,
        TEXTURE14: null,
        TEXTURE15: null,
        TEXTURE16: null,
        TEXTURE17: null,
        TEXTURE18: null,
        TEXTURE19: null,
        TEXTURE20: null,
        TEXTURE21: null,
        TEXTURE22: null,
        TEXTURE23: null,
        TEXTURE24: null,
        TEXTURE25: null,
        TEXTURE26: null,
        TEXTURE27: null,
        TEXTURE28: null,
        TEXTURE29: null,
        TEXTURE30: null,
        TEXTURE31: null,
        ACTIVE_TEXTURE: null,
        REPEAT: null,
        CLAMP_TO_EDGE: null,
        MIRRORED_REPEAT: null,
        FLOAT_VEC2: null,
        FLOAT_VEC3: null,
        FLOAT_VEC4: null,
        INT_VEC2: null,
        INT_VEC3: null,
        INT_VEC4: null,
        BOOL: null,
        BOOL_VEC2: null,
        BOOL_VEC3: null,
        BOOL_VEC4: null,
        FLOAT_MAT2: null,
        FLOAT_MAT3: null,
        FLOAT_MAT4: null,
        SAMPLER_2D: null,
        SAMPLER_CUBE: null,
        VERTEX_ATTRIB_ARRAY_ENABLED: null,
        VERTEX_ATTRIB_ARRAY_SIZE: null,
        VERTEX_ATTRIB_ARRAY_STRIDE: null,
        VERTEX_ATTRIB_ARRAY_TYPE: null,
        VERTEX_ATTRIB_ARRAY_NORMALIZED: null,
        VERTEX_ATTRIB_ARRAY_POINTER: null,
        VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: null,
        VERTEX_PROGRAM_POINT_SIZE: null,
        POINT_SPRITE: null,
        COMPILE_STATUS: null,
        LOW_FLOAT: null,
        MEDIUM_FLOAT: null,
        HIGH_FLOAT: null,
        LOW_INT: null,
        MEDIUM_INT: null,
        HIGH_INT: null,
        FRAMEBUFFER: null,
        RENDERBUFFER: null,
        RGBA4: null,
        RGB5_A1: null,
        RGB565: null,
        DEPTH_COMPONENT16: null,
        STENCIL_INDEX: null,
        STENCIL_INDEX8: null,
        DEPTH_STENCIL: null,
        RENDERBUFFER_WIDTH: null,
        RENDERBUFFER_HEIGHT: null,
        RENDERBUFFER_INTERNAL_FORMAT: null,
        RENDERBUFFER_RED_SIZE: null,
        RENDERBUFFER_GREEN_SIZE: null,
        RENDERBUFFER_BLUE_SIZE: null,
        RENDERBUFFER_ALPHA_SIZE: null,
        RENDERBUFFER_DEPTH_SIZE: null,
        RENDERBUFFER_STENCIL_SIZE: null,
        FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: null,
        FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: null,
        FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: null,
        FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: null,
        COLOR_ATTACHMENT0: null,
        DEPTH_ATTACHMENT: null,
        STENCIL_ATTACHMENT: null,
        DEPTH_STENCIL_ATTACHMENT: null,
        NONE: null,
        FRAMEBUFFER_COMPLETE: null,
        FRAMEBUFFER_INCOMPLETE_ATTACHMENT: null,
        FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: null,
        FRAMEBUFFER_INCOMPLETE_DIMENSIONS: null,
        FRAMEBUFFER_UNSUPPORTED: null,
        FRAMEBUFFER_BINDING: null,
        RENDERBUFFER_BINDING: null,
        MAX_RENDERBUFFER_SIZE: null,
        INVALID_FRAMEBUFFER_OPERATION: null,
        UNPACK_FLIP_Y_WEBGL: null,
        UNPACK_PREMULTIPLY_ALPHA_WEBGL: null,
        CONTEXT_LOST_WEBGL: null,
        UNPACK_COLORSPACE_CONVERSION_WEBGL: null,
        BROWSER_DEFAULT_WEBGL: null,
        READ_BUFFER: null,
        UNPACK_ROW_LENGTH: null,
        UNPACK_SKIP_ROWS: null,
        UNPACK_SKIP_PIXELS: null,
        PACK_ROW_LENGTH: null,
        PACK_SKIP_ROWS: null,
        PACK_SKIP_PIXELS: null,
        TEXTURE_BINDING_3D: null,
        UNPACK_SKIP_IMAGES: null,
        UNPACK_IMAGE_HEIGHT: null,
        MAX_3D_TEXTURE_SIZE: null,
        MAX_ELEMENTS_VERTICES: null,
        MAX_ELEMENTS_INDICES: null,
        MAX_TEXTURE_LOD_BIAS: null,
        MAX_FRAGMENT_UNIFORM_COMPONENTS: null,
        MAX_VERTEX_UNIFORM_COMPONENTS: null,
        MAX_ARRAY_TEXTURE_LAYERS: null,
        MIN_PROGRAM_TEXEL_OFFSET: null,
        MAX_PROGRAM_TEXEL_OFFSET: null,
        MAX_VARYING_COMPONENTS: null,
        FRAGMENT_SHADER_DERIVATIVE_HINT: null,
        RASTERIZER_DISCARD: null,
        VERTEX_ARRAY_BINDING: null,
        MAX_VERTEX_OUTPUT_COMPONENTS: null,
        MAX_FRAGMENT_INPUT_COMPONENTS: null,
        MAX_SERVER_WAIT_TIMEOUT: null,
        MAX_ELEMENT_INDEX: null,
        RED: null,
        RGB8: null,
        RGBA8: null,
        RGB10_A2: null,
        TEXTURE_3D: null,
        TEXTURE_WRAP_R: null,
        TEXTURE_MIN_LOD: null,
        TEXTURE_MAX_LOD: null,
        TEXTURE_BASE_LEVEL: null,
        TEXTURE_MAX_LEVEL: null,
        TEXTURE_COMPARE_MODE: null,
        TEXTURE_COMPARE_FUNC: null,
        SRGB: null,
        SRGB8: null,
        SRGB8_ALPHA8: null,
        COMPARE_REF_TO_TEXTURE: null,
        RGBA32F: null,
        RGB32F: null,
        RGBA16F: null,
        RGB16F: null,
        TEXTURE_2D_ARRAY: null,
        TEXTURE_BINDING_2D_ARRAY: null,
        R11F_G11F_B10F: null,
        RGB9_E5: null,
        RGBA32UI: null,
        RGB32UI: null,
        RGBA16UI: null,
        RGB16UI: null,
        RGBA8UI: null,
        RGB8UI: null,
        RGBA32I: null,
        RGB32I: null,
        RGBA16I: null,
        RGB16I: null,
        RGBA8I: null,
        RGB8I: null,
        RED_INTEGER: null,
        RGB_INTEGER: null,
        RGBA_INTEGER: null,
        R8: null,
        RG8: null,
        R16F: null,
        R32F: null,
        RG16F: null,
        RG32F: null,
        R8I: null,
        R8UI: null,
        R16I: null,
        R16UI: null,
        R32I: null,
        R32UI: null,
        RG8I: null,
        RG8UI: null,
        RG16I: null,
        RG16UI: null,
        RG32I: null,
        RG32UI: null,
        R8_SNORM: null,
        RG8_SNORM: null,
        RGB8_SNORM: null,
        RGBA8_SNORM: null,
        RGB10_A2UI: null,
        TEXTURE_IMMUTABLE_FORMAT: null,
        TEXTURE_IMMUTABLE_LEVELS: null,
        UNSIGNED_INT_2_10_10_10_REV: null,
        UNSIGNED_INT_10F_11F_11F_REV: null,
        UNSIGNED_INT_5_9_9_9_REV: null,
        FLOAT_32_UNSIGNED_INT_24_8_REV: null,
        UNSIGNED_INT_24_8: null,
        HALF_FLOAT: null,
        RG: null,
        RG_INTEGER: null,
        INT_2_10_10_10_REV: null,
        CURRENT_QUERY: null,
        QUERY_RESULT: null,
        QUERY_RESULT_AVAILABLE: null,
        ANY_SAMPLES_PASSED: null,
        ANY_SAMPLES_PASSED_CONSERVATIVE: null,
        MAX_DRAW_BUFFERS: null,
        DRAW_BUFFER0: null,
        DRAW_BUFFER1: null,
        DRAW_BUFFER2: null,
        DRAW_BUFFER3: null,
        DRAW_BUFFER4: null,
        DRAW_BUFFER5: null,
        DRAW_BUFFER6: null,
        DRAW_BUFFER7: null,
        DRAW_BUFFER8: null,
        DRAW_BUFFER9: null,
        DRAW_BUFFER10: null,
        DRAW_BUFFER11: null,
        DRAW_BUFFER12: null,
        DRAW_BUFFER13: null,
        DRAW_BUFFER14: null,
        DRAW_BUFFER15: null,
        MAX_COLOR_ATTACHMENTS: null,
        COLOR_ATTACHMENT1: null,
        COLOR_ATTACHMENT2: null,
        COLOR_ATTACHMENT3: null,
        COLOR_ATTACHMENT4: null,
        COLOR_ATTACHMENT5: null,
        COLOR_ATTACHMENT6: null,
        COLOR_ATTACHMENT7: null,
        COLOR_ATTACHMENT8: null,
        COLOR_ATTACHMENT9: null,
        COLOR_ATTACHMENT10: null,
        COLOR_ATTACHMENT11: null,
        COLOR_ATTACHMENT12: null,
        COLOR_ATTACHMENT13: null,
        COLOR_ATTACHMENT14: null,
        COLOR_ATTACHMENT15: null,
        SAMPLER_3D: null,
        SAMPLER_2D_SHADOW: null,
        SAMPLER_2D_ARRAY: null,
        SAMPLER_2D_ARRAY_SHADOW: null,
        SAMPLER_CUBE_SHADOW: null,
        INT_SAMPLER_2D: null,
        INT_SAMPLER_3D: null,
        INT_SAMPLER_CUBE: null,
        INT_SAMPLER_2D_ARRAY: null,
        UNSIGNED_INT_SAMPLER_2D: null,
        UNSIGNED_INT_SAMPLER_3D: null,
        UNSIGNED_INT_SAMPLER_CUBE: null,
        UNSIGNED_INT_SAMPLER_2D_ARRAY: null,
        MAX_SAMPLES: null,
        SAMPLER_BINDING: null,
        PIXEL_PACK_BUFFER: null,
        PIXEL_UNPACK_BUFFER: null,
        PIXEL_PACK_BUFFER_BINDING: null,
        PIXEL_UNPACK_BUFFER_BINDING: null,
        COPY_READ_BUFFER: null,
        COPY_WRITE_BUFFER: null,
        COPY_READ_BUFFER_BINDING: null,
        COPY_WRITE_BUFFER_BINDING: null,
        FLOAT_MAT2x3: null,
        FLOAT_MAT2x4: null,
        FLOAT_MAT3x2: null,
        FLOAT_MAT3x4: null,
        FLOAT_MAT4x2: null,
        FLOAT_MAT4x3: null,
        UNSIGNED_INT_VEC2: null,
        UNSIGNED_INT_VEC3: null,
        UNSIGNED_INT_VEC4: null,
        UNSIGNED_NORMALIZED: null,
        SIGNED_NORMALIZED: null,
        VERTEX_ATTRIB_ARRAY_INTEGER: null,
        VERTEX_ATTRIB_ARRAY_DIVISOR: null,
        TRANSFORM_FEEDBACK_BUFFER_MODE: null,
        MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: null,
        TRANSFORM_FEEDBACK_VARYINGS: null,
        TRANSFORM_FEEDBACK_BUFFER_START: null,
        TRANSFORM_FEEDBACK_BUFFER_SIZE: null,
        TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: null,
        MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: null,
        MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: null,
        INTERLEAVED_ATTRIBS: null,
        SEPARATE_ATTRIBS: null,
        TRANSFORM_FEEDBACK_BUFFER: null,
        TRANSFORM_FEEDBACK_BUFFER_BINDING: null,
        TRANSFORM_FEEDBACK: null,
        TRANSFORM_FEEDBACK_PAUSED: null,
        TRANSFORM_FEEDBACK_ACTIVE: null,
        TRANSFORM_FEEDBACK_BINDING: null,
        FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: null,
        FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: null,
        FRAMEBUFFER_ATTACHMENT_RED_SIZE: null,
        FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: null,
        FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: null,
        FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: null,
        FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: null,
        FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: null,
        FRAMEBUFFER_DEFAULT: null,
        DEPTH24_STENCIL8: null,
        DRAW_FRAMEBUFFER_BINDING: null,
        READ_FRAMEBUFFER: null,
        DRAW_FRAMEBUFFER: null,
        READ_FRAMEBUFFER_BINDING: null,
        RENDERBUFFER_SAMPLES: null,
        FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: null,
        FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: null,
        UNIFORM_BUFFER: null,
        UNIFORM_BUFFER_BINDING: null,
        UNIFORM_BUFFER_START: null,
        UNIFORM_BUFFER_SIZE: null,
        MAX_VERTEX_UNIFORM_BLOCKS: null,
        MAX_FRAGMENT_UNIFORM_BLOCKS: null,
        MAX_COMBINED_UNIFORM_BLOCKS: null,
        MAX_UNIFORM_BUFFER_BINDINGS: null,
        MAX_UNIFORM_BLOCK_SIZE: null,
        MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: null,
        MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: null,
        UNIFORM_BUFFER_OFFSET_ALIGNMENT: null,
        ACTIVE_UNIFORM_BLOCKS: null,
        UNIFORM_TYPE: null,
        UNIFORM_SIZE: null,
        UNIFORM_BLOCK_INDEX: null,
        UNIFORM_OFFSET: null,
        UNIFORM_ARRAY_STRIDE: null,
        UNIFORM_MATRIX_STRIDE: null,
        UNIFORM_IS_ROW_MAJOR: null,
        UNIFORM_BLOCK_BINDING: null,
        UNIFORM_BLOCK_DATA_SIZE: null,
        UNIFORM_BLOCK_ACTIVE_UNIFORMS: null,
        UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: null,
        UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: null,
        UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: null,
        OBJECT_TYPE: null,
        SYNC_CONDITION: null,
        SYNC_STATUS: null,
        SYNC_FLAGS: null,
        SYNC_FENCE: null,
        SYNC_GPU_COMMANDS_COMPLETE: null,
        UNSIGNALED: null,
        SIGNALED: null,
        ALREADY_SIGNALED: null,
        TIMEOUT_EXPIRED: null,
        CONDITION_SATISFIED: null,
        WAIT_FAILED: null,
        SYNC_FLUSH_COMMANDS_BIT: null,
        COLOR: null,
        DEPTH: null,
        STENCIL: null,
        MIN: null,
        MAX: null,
        DEPTH_COMPONENT24: null,
        STREAM_READ: null,
        STREAM_COPY: null,
        STATIC_READ: null,
        STATIC_COPY: null,
        DYNAMIC_READ: null,
        DYNAMIC_COPY: null,
        DEPTH_COMPONENT32F: null,
        DEPTH32F_STENCIL8: null,
        INVALID_INDEX: null,
        TIMEOUT_IGNORED: null,
        MAX_CLIENT_WAIT_TIMEOUT_WEBGL: null,
        type: null,
        version: null,
        __context: null,
        __contextLost: null,
        activeTexture: function(texture) {
            this.__context.activeTexture(texture)
        },
        attachShader: function(program, shader) {
            this.__context.attachShader(program, shader)
        },
        beginQuery: function(target, query) {
            this.__context.beginQuery(target, query)
        },
        beginTransformFeedback: function(primitiveNode) {
            this.__context.beginTransformFeedback(primitiveNode)
        },
        bindAttribLocation: function(program, index, name) {
            this.__context.bindAttribLocation(program, index, name)
        },
        bindBuffer: function(target, buffer) {
            this.__context.bindBuffer(target, buffer)
        },
        bindBufferBase: function(target, index, buffer) {
            this.__context.bindBufferBase(target, index, buffer)
        },
        bindBufferRange: function(target, index, buffer, offset, size) {
            this.__context.bindBufferRange(target, index, buffer, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size))
        },
        bindFramebuffer: function(target, framebuffer) {
            this.__context.bindFramebuffer(target, framebuffer)
        },
        bindRenderbuffer: function(target, renderbuffer) {
            this.__context.bindRenderbuffer(target, renderbuffer)
        },
        bindSampler: function(unit, sampler) {
            this.__context.bindSampler(unit, sampler)
        },
        bindTexture: function(target, texture) {
            this.__context.bindTexture(target, texture)
        },
        bindTransformFeedback: function(target, transformFeedback) {
            this.__context.bindTransformFeedback(target, transformFeedback)
        },
        bindVertexArray: function(vertexArray) {
            this.__context.bindVertexArray(vertexArray)
        },
        blendColor: function(red, green, blue, alpha) {
            this.__context.blendColor(red, green, blue, alpha)
        },
        blendEquation: function(mode) {
            this.__context.blendEquation(mode)
        },
        blendEquationSeparate: function(modeRGB, modeAlpha) {
            this.__context.blendEquationSeparate(modeRGB, modeAlpha)
        },
        blendFunc: function(sfactor, dfactor) {
            this.__context.blendFunc(sfactor, dfactor)
        },
        blendFuncSeparate: function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
            this.__context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
        },
        blitFramebuffer: function(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) {
            this.__context.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
        },
        bufferData: function(target, size, data, usage) {
            this.__context.bufferData(target, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, size), usage)
        },
        bufferDataWEBGL: function(target, srcData, usage, srcOffset, length) {
            if (srcOffset != null) {
                this.__context.bufferData(target, srcData, usage, srcOffset, length)
            } else {
                this.__context.bufferData(target, srcData, usage)
            }
        },
        bufferSubData: function(target, dstByteOffset, size, data) {
            this.__context.bufferSubData(target, dstByteOffset, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, size))
        },
        bufferSubDataWEBGL: function(target, dstByteOffset, srcData, srcOffset, length) {
            if (srcOffset != null) {
                this.__context.bufferSubData(target, dstByteOffset, srcData, srcOffset, length)
            } else {
                this.__context.bufferSubData(target, dstByteOffset, srcData)
            }
        },
        checkFramebufferStatus: function(target) {
            return this.__context.checkFramebufferStatus(target)
        },
        clear: function(mask) {
            this.__context.clear(mask)
        },
        clearBufferfi: function(buffer, drawbuffer, depth, stencil) {
            this.__context.clearBufferfi(buffer, drawbuffer, depth, stencil)
        },
        clearBufferfv: function(buffer, drawbuffer, values) {
            this.__context.clearBufferfv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values))
        },
        clearBufferfvWEBGL: function(buffer, drawbuffer, values, srcOffset) {
            this.__context.clearBufferfv(buffer, drawbuffer, values, srcOffset)
        },
        clearBufferiv: function(buffer, drawbuffer, values) {
            this.__context.clearBufferiv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(values))
        },
        clearBufferivWEBGL: function(buffer, drawbuffer, values, srcOffset) {
            this.__context.clearBufferiv(buffer, drawbuffer, values, srcOffset)
        },
        clearBufferuiv: function(buffer, drawbuffer, values) {
            this.__context.clearBufferuiv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(values))
        },
        clearBufferuivWEBGL: function(buffer, drawbuffer, values, srcOffset) {
            this.__context.clearBufferuiv(buffer, drawbuffer, values, srcOffset)
        },
        clearColor: function(red, green, blue, alpha) {
            this.__context.clearColor(red, green, blue, alpha)
        },
        clearDepth: function(depth) {
            this.__context.clearDepth(depth)
        },
        clearDepthf: function(depth) {
            this.__context.clearDepth(depth)
        },
        clearStencil: function(s) {
            this.__context.clearStencil(s)
        },
        clientWaitSync: function(sync, flags, timeout) {
            return this.__context.clientWaitSync(sync, flags, timeout)
        },
        copyBufferSubData: function(readTarget, writeTarget, readOffset, writeOffset, size) {},
        colorMask: function(red, green, blue, alpha) {
            this.__context.colorMask(red, green, blue, alpha)
        },
        compileShader: function(shader) {
            this.__context.compileShader(shader)
        },
        compressedTexImage2D: function(target, level, internalformat, width, height, border, imageSize, data) {
            this.__context.compressedTexImage2D(target, level, internalformat, width, height, border, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
        },
        compressedTexImage2DWEBGL: function(target, level, internalformat, width, height, border, srcData, srcOffset, srcLengthOverride) {
            if (srcOffset != null) {
                this.__context.compressedTexImage2D(target, level, internalformat, width, height, border, srcData, srcOffset, srcLengthOverride)
            } else {
                this.__context.compressedTexImage2D(target, level, internalformat, width, height, border, srcData)
            }
        },
        compressedTexImage3D: function(target, level, internalformat, width, height, depth, border, imageSize, data) {
            this.__context.compressedTexImage3D(target, level, internalformat, width, height, depth, border, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
        },
        compressedTexImage3DWEBGL: function(target, level, internalformat, width, height, depth, border, srcData, srcOffset, srcLengthOverride) {
            this.__context.compressedTexImage3D(target, level, internalformat, width, height, depth, border, srcData, srcOffset, srcLengthOverride)
        },
        compressedTexSubImage2D: function(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
            this.__context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
        },
        compressedTexSubImage2DWEBGL: function(target, level, xoffset, yoffset, width, height, format, srcData, srcOffset, srcLengthOverride) {
            if (srcOffset != null) {
                this.__context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, srcData, srcOffset, srcLengthOverride)
            } else {
                this.__context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, srcData)
            }
        },
        compressedTexSubImage3D: function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) {
            this.__context.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
        },
        compressedTexSubImage3DWEBGL: function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset, srcLengthOverride) {
            this.__context.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset, srcLengthOverride)
        },
        copySubBufferData: function(readTarget, writeTarget, readOffset, writeOffset, size) {
            this.__context.copySubBufferData(readTarget, writeTarget, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(readOffset)), lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(writeOffset)), size)
        },
        copyTexImage2D: function(target, level, internalformat, x, y, width, height, border) {
            this.__context.copyTexImage2D(target, level, internalformat, x, y, width, height, border)
        },
        copyTexSubImage2D: function(target, level, xoffset, yoffset, x, y, width, height) {
            this.__context.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
        },
        copyTexSubImage3D: function(target, level, xoffset, yoffset, zoffset, x, y, width, height) {
            this.__context.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
        },
        createBuffer: function() {
            return this.__context.createBuffer()
        },
        createFramebuffer: function() {
            return this.__context.createFramebuffer()
        },
        createProgram: function() {
            return this.__context.createProgram()
        },
        createQuery: function() {
            return this.__context.createQuery()
        },
        createRenderbuffer: function() {
            return this.__context.createRenderbuffer()
        },
        createSampler: function() {
            return this.__context.createSampler()
        },
        createShader: function(type) {
            return this.__context.createShader(type)
        },
        createTexture: function() {
            return this.__context.createTexture()
        },
        createTransformFeedback: function() {
            return this.__context.createTransformFeedback()
        },
        createVertexArray: function() {
            return this.__context.createVertexArray()
        },
        cullFace: function(mode) {
            this.__context.cullFace(mode)
        },
        deleteBuffer: function(buffer) {
            this.__context.deleteBuffer(buffer)
        },
        deleteFramebuffer: function(framebuffer) {
            this.__context.deleteFramebuffer(framebuffer)
        },
        deleteProgram: function(program) {
            this.__context.deleteProgram(program)
        },
        deleteQuery: function(query) {
            this.__context.deleteQuery(query)
        },
        deleteRenderbuffer: function(renderbuffer) {
            this.__context.deleteRenderbuffer(renderbuffer)
        },
        deleteSampler: function(sampler) {
            this.__context.deleteSampler(sampler)
        },
        deleteShader: function(shader) {
            this.__context.deleteShader(shader)
        },
        deleteSync: function(sync) {
            this.__context.deleteSync(sync)
        },
        deleteTexture: function(texture) {
            this.__context.deleteTexture(texture)
        },
        deleteTransformFeedback: function(transformFeedback) {
            this.__context.deleteTransformFeedback(transformFeedback)
        },
        deleteVertexArray: function(vertexArray) {
            this.__context.deleteVertexArray(vertexArray)
        },
        depthFunc: function(func) {
            this.__context.depthFunc(func)
        },
        depthMask: function(flag) {
            this.__context.depthMask(flag)
        },
        depthRange: function(zNear, zFar) {
            this.__context.depthRange(zNear, zFar)
        },
        depthRangef: function(zNear, zFar) {
            this.__context.depthRange(zNear, zFar)
        },
        detachShader: function(program, shader) {
            this.__context.detachShader(program, shader)
        },
        disable: function(cap) {
            this.__context.disable(cap)
        },
        disableVertexAttribArray: function(index) {
            this.__context.disableVertexAttribArray(index)
        },
        drawArrays: function(mode, first, count) {
            this.__context.drawArrays(mode, first, count)
        },
        drawArraysInstanced: function(mode, first, count, instanceCount) {
            this.__context.drawArraysInstanced(mode, first, count, instanceCount)
        },
        drawBuffers: function(buffers) {
            this.__context.drawBuffers(buffers)
        },
        drawElements: function(mode, count, type, offset) {
            this.__context.drawElements(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset))
        },
        drawElementsInstanced: function(mode, count, type, offset, instanceCount) {
            this.__context.drawElementsInstanced(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), instanceCount)
        },
        drawRangeElements: function(mode, start, end, count, type, offset) {
            this.__context.drawRangeElements(mode, start, end, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)))
        },
        enable: function(cap) {
            this.__context.enable(cap)
        },
        enableVertexAttribArray: function(index) {
            this.__context.enableVertexAttribArray(index)
        },
        endQuery: function(target) {
            this.__context.endQuery(target)
        },
        endTransformFeedback: function() {
            this.__context.endTransformFeedback()
        },
        fenceSync: function(condition, flags) {
            return this.__context.fenceSync(condition, flags)
        },
        finish: function() {
            this.__context.finish()
        },
        flush: function() {
            this.__context.flush()
        },
        framebufferRenderbuffer: function(target, attachment, renderbuffertarget, renderbuffer) {
            this.__context.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer)
        },
        framebufferTexture2D: function(target, attachment, textarget, texture, level) {
            this.__context.framebufferTexture2D(target, attachment, textarget, texture, level)
        },
        framebufferTextureLayer: function(target, attachment, texture, level, layer) {
            this.__context.framebufferTextureLayer(target, attachment, texture, level, layer)
        },
        frontFace: function(mode) {
            this.__context.frontFace(mode)
        },
        generateMipmap: function(target) {
            this.__context.generateMipmap(target)
        },
        getActiveAttrib: function(program, index) {
            return this.__context.getActiveAttrib(program, index)
        },
        getActiveUniform: function(program, index) {
            return this.__context.getActiveUniform(program, index)
        },
        getActiveUniformBlocki: function(program, uniformBlockIndex, pname) {
            return this.__context.getActiveUniformBlockParameter(program, uniformBlockIndex, pname)
        },
        getActiveUniformBlockiv: function(program, uniformBlockIndex, pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            var val = this.__context.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);
            view[0] = val
        },
        getActiveUniformBlockName: function(program, uniformBlockIndex) {
            return this.__context.getActiveUniformBlockName(program, uniformBlockIndex)
        },
        getActiveUniformBlockParameter: function(program, uniformBlockIndex, pname) {
            return this.__context.getActiveUniformBlockParameter(program, uniformBlockIndex, pname)
        },
        getActiveUniforms: function(program, uniformIndices, pname) {
            return this.__context.getActiveUniforms(program, uniformIndices, pname)
        },
        getActiveUniformsiv: function(program, uniformIndices, pname, params) {},
        getAttachedShaders: function(program) {
            return this.__context.getAttachedShaders(program)
        },
        getAttribLocation: function(program, name) {
            return this.__context.getAttribLocation(program, name)
        },
        getBoolean: function(pname) {
            return this.__context.getParameter(pname)
        },
        getBooleanv: function(pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt8Array(params);
            var result = this.__context.getParameter(pname);
            if ((result instanceof Array) && result.__enum__ == null) {
                var data = result;
                var _g1 = 0;
                var _g = data.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    if (data[i]) {
                        view[i] = 1
                    } else {
                        view[i] = 0
                    }
                }
            } else {
                var val;
                if (js_Boot.__cast(result, Bool)) {
                    val = 1
                } else {
                    val = 0
                }
                view[0] = val
            }
        },
        getBufferParameter: function(target, pname) {
            return this.__context.getBufferParameter(target, pname)
        },
        getBufferParameteri: function(target, pname) {
            return this.__context.getBufferParameter(target, pname)
        },
        getBufferParameteri64v: function(target, pname, params) {},
        getBufferParameteriv: function(target, pname, data) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(data);
            var val = this.__context.getBufferParameter(target, pname);
            view[0] = val
        },
        getBufferPointerv: function(target, pname) {
            return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)
        },
        getBufferSubData: function(target, offset, size, data) {
            this.__context.getBufferSubData(target, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, size))
        },
        getBufferSubDataWEBGL: function(target, srcByteOffset, dstData, srcOffset, length) {
            if (srcOffset != null) {
                this.__context.getBufferSubData(target, srcByteOffset, dstData, srcOffset, length)
            } else {
                this.__context.getBufferSubData(target, srcByteOffset, dstData)
            }
        },
        getContextAttributes: function() {
            return this.__context.getContextAttributes()
        },
        getError: function() {
            return this.__context.getError()
        },
        getExtension: function(name) {
            return this.__context.getExtension(name)
        },
        getFloat: function(pname) {
            return this.__context.getParameter(pname)
        },
        getFloatv: function(pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
            var result = this.__context.getParameter(pname);
            if (js_Boot.__instanceof(result, ArrayBufferView)) {
                var data = result;
                var _g1 = 0;
                var _g = data.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    view[i] = data[i]
                }
            } else {
                var val;
                val = js_Boot.__cast(result, Float);
                view[0] = val
            }
        },
        getFragDataLocation: function(program, name) {
            return this.__context.getFragDataLocation(program, name)
        },
        getFramebufferAttachmentParameter: function(target, attachment, pname) {
            return this.__context.getFramebufferAttachmentParameter(target, attachment, pname)
        },
        getFramebufferAttachmentParameteri: function(target, attachment, pname) {
            return this.__context.getFramebufferAttachmentParameter(target, attachment, pname)
        },
        getFramebufferAttachmentParameteriv: function(target, attachment, pname, params) {
            var value = this.__context.getFramebufferAttachmentParameter(target, attachment, pname);
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            view[0] = value
        },
        getIndexedParameter: function(target, index) {
            return this.__context.getIndexedParameter(target, index)
        },
        getInteger: function(pname) {
            return this.__context.getParameter(pname)
        },
        getInteger64: function(pname) {
            var x = new haxe__$Int64__$_$_$Int64(0, 0);
            return x
        },
        getInteger64i: function(pname) {
            var x = new haxe__$Int64__$_$_$Int64(0, 0);
            return x
        },
        getInteger64i_v: function(pname, params) {},
        getInteger64v: function(pname, params) {},
        getIntegeri: function(pname) {
            return 0
        },
        getIntegeri_v: function(pname, params) {},
        getIntegerv: function(pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            var result = this.__context.getParameter(pname);
            if (js_Boot.__instanceof(result, ArrayBufferView)) {
                var data = result;
                var _g1 = 0;
                var _g = data.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    view[i] = data[i]
                }
            } else {
                var val;
                val = js_Boot.__cast(result, Int);
                view[0] = val
            }
        },
        getInternalformati: function(target, internalformat, pname) {
            return 0
        },
        getInternalformativ: function(target, internalformat, pname, params) {},
        getInternalformatParameter: function(target, internalformat, pname) {
            return this.__context.getInternalformatParameter(target, internalformat, pname)
        },
        getParameter: function(pname) {
            return this.__context.getParameter(pname)
        },
        getProgramBinary: function(program, binaryFormat) {
            return null
        },
        getProgrami: function(program, pname) {
            return this.__context.getProgramParameter(program, pname)
        },
        getProgramiv: function(program, pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            var val = this.__context.getProgramParameter(program, pname);
            view[0] = val
        },
        getProgramInfoLog: function(program) {
            return this.__context.getProgramInfoLog(program)
        },
        getProgramParameter: function(program, pname) {
            return this.__context.getProgramParameter(program, pname)
        },
        getQuery: function(target, pname) {
            return this.__context.getQuery(target, pname)
        },
        getQueryi: function(target, pname) {
            return 0
        },
        getQueryiv: function(target, pname, params) {},
        getQueryObjectui: function(query, pname) {
            return 0
        },
        getQueryObjectuiv: function(query, pname, params) {},
        getQueryParameter: function(query, pname) {
            return this.__context.getQueryParameter(query, pname)
        },
        getRenderbufferParameter: function(target, pname) {
            return this.__context.getRenderbufferParameter(target, pname)
        },
        getRenderbufferParameteri: function(target, pname) {
            return this.__context.getRenderbufferParameter(target, pname)
        },
        getRenderbufferParameteriv: function(target, pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            var val = this.__context.getRenderbufferParameter(target, pname);
            view[0] = val
        },
        getSamplerParameter: function(sampler, pname) {
            return this.__context.getSamplerParameter(sampler, pname)
        },
        getSamplerParameterf: function(sampler, pname) {
            return 0
        },
        getSamplerParameterfv: function(sampler, pname, params) {},
        getSamplerParameteri: function(sampler, pname) {
            return 0
        },
        getSamplerParameteriv: function(sampler, pname, params) {},
        getShaderi: function(shader, pname) {
            return this.__context.getShaderParameter(shader, pname)
        },
        getShaderiv: function(shader, pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            var val = this.__context.getShaderParameter(shader, pname);
            view[0] = val
        },
        getShaderInfoLog: function(shader) {
            return this.__context.getShaderInfoLog(shader)
        },
        getShaderParameter: function(shader, pname) {
            return this.__context.getShaderParameter(shader, pname)
        },
        getShaderPrecisionFormat: function(shadertype, precisiontype) {
            return this.__context.getShaderPrecisionFormat(shadertype, precisiontype)
        },
        getShaderSource: function(shader) {
            return this.__context.getShaderSource(shader)
        },
        getString: function(pname) {
            if (pname == 7939) {
                return this.__context.getSupportedExtensions().join(" ")
            } else {
                return this.__context.getParameter(pname)
            }
        },
        getStringi: function(name, index) {
            return null
        },
        getSupportedExtensions: function() {
            return this.__context.getSupportedExtensions()
        },
        getSyncParameter: function(sync, pname) {
            return this.__context.getSyncParameter(sync, pname)
        },
        getSyncParameteri: function(sync, pname) {
            return 0
        },
        getSyncParameteriv: function(sync, pname, params) {},
        getTexParameter: function(target, pname) {
            return this.__context.getTexParameter(target, pname)
        },
        getTexParameterf: function(target, pname) {
            return this.__context.getTexParameter(target, pname)
        },
        getTexParameterfv: function(target, pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
            var val = this.__context.getTexParameter(target, pname);
            view[0] = val
        },
        getTexParameteri: function(target, pname) {
            return this.__context.getTexParameter(target, pname)
        },
        getTexParameteriv: function(target, pname, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            var val = this.__context.getTexParameter(target, pname);
            view[0] = val
        },
        getTransformFeedbackVarying: function(program, index) {
            return this.__context.getTransformFeedbackVarying(program, index)
        },
        getUniform: function(program, location) {
            return this.__context.getUniform(program, location)
        },
        getUniformf: function(program, location) {
            return this.__context.getUniform(program, location)
        },
        getUniformfv: function(program, location, params) {
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(params);
            var val = this.__context.getUniform(program, location);
            view[0] = val
        },
        getUniformi: function(program, location) {
            return this.__context.getUniform(program, location)
        },
        getUniformiv: function(program, location, params) {
            var value = this.__context.getUniform(program, location);
            var view = lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(params);
            view[0] = value
        },
        getUniformui: function(program, location) {
            return 0
        },
        getUniformuiv: function(program, location, params) {},
        getUniformBlockIndex: function(program, uniformBlockName) {
            return this.__context.getUniformBlockIndex(program, uniformBlockName)
        },
        getUniformIndices: function(program, uniformNames) {
            return this.__context.getUniformIndices(program, uniformNames)
        },
        getUniformLocation: function(program, name) {
            return this.__context.getUniformLocation(program, name)
        },
        getVertexAttrib: function(index, pname) {
            return this.__context.getVertexAttrib(index, pname)
        },
        getVertexAttribf: function(index, pname) {
            return 0
        },
        getVertexAttribfv: function(index, pname, params) {},
        getVertexAttribi: function(index, pname) {
            return 0
        },
        getVertexAttribIi: function(index, pname) {
            return 0
        },
        getVertexAttribIiv: function(index, pname, params) {},
        getVertexAttribIui: function(index, pname) {
            return 0
        },
        getVertexAttribIuiv: function(index, pname, params) {},
        getVertexAttribiv: function(index, pname, params) {},
        getVertexAttribOffset: function(index, pname) {
            return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this.__context.getVertexAttribOffset(index, pname))
        },
        getVertexAttribPointerv: function(index, pname) {
            return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this.__context.getVertexAttribOffset(index, pname))
        },
        hint: function(target, mode) {
            this.__context.hint(target, mode)
        },
        invalidateFramebuffer: function(target, attachments) {
            this.__context.invalidateFramebuffer(target, attachments)
        },
        invalidateSubFramebuffer: function(target, attachments, x, y, width, height) {
            this.__context.invalidateSubFramebuffer(target, attachments, x, y, width, height)
        },
        isBuffer: function(buffer) {
            return this.__context.isBuffer(buffer)
        },
        isContextLost: function() {
            return this.__contextLost || this.__context.isContextLost()
        },
        isEnabled: function(cap) {
            return this.__context.isEnabled(cap)
        },
        isFramebuffer: function(framebuffer) {
            return this.__context.isFramebuffer(framebuffer)
        },
        isProgram: function(program) {
            return this.__context.isProgram(program)
        },
        isQuery: function(query) {
            return this.__context.isQuery(query)
        },
        isRenderbuffer: function(renderbuffer) {
            return this.__context.isRenderbuffer(renderbuffer)
        },
        isSampler: function(sampler) {
            return this.__context.isSampler(sampler)
        },
        isShader: function(shader) {
            return this.__context.isShader(shader)
        },
        isSync: function(sync) {
            return this.__context.isSync(sync)
        },
        isTexture: function(texture) {
            return this.__context.isTexture(texture)
        },
        isTransformFeedback: function(transformFeedback) {
            return this.__context.isTransformFeedback(transformFeedback)
        },
        isVertexArray: function(vertexArray) {
            return this.__context.isVertexArray(vertexArray)
        },
        lineWidth: function(width) {
            this.__context.lineWidth(width)
        },
        linkProgram: function(program) {
            this.__context.linkProgram(program)
        },
        mapBufferRange: function(target, offset, length, access) {},
        pauseTransformFeedback: function() {
            this.__context.pauseTransformFeedback()
        },
        pixelStorei: function(pname, param) {
            this.__context.pixelStorei(pname, param)
        },
        polygonOffset: function(factor, units) {
            this.__context.polygonOffset(factor, units)
        },
        programBinary: function(program, binaryFormat, binary, length) {},
        programParameteri: function(program, pname, value) {},
        readBuffer: function(src) {
            this.__context.readBuffer(src)
        },
        readPixels: function(x, y, width, height, format, type, pixels) {
            this.__context.readPixels(x, y, width, height, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(pixels))
        },
        readPixelsWEBGL: function(x, y, width, height, format, type, pixels, dstOffset) {
            if (dstOffset != null) {
                this.__context.readPixels(x, y, width, height, format, type, pixels, dstOffset)
            } else {
                this.__context.readPixels(x, y, width, height, format, type, pixels)
            }
        },
        releaseShaderCompiler: function() {},
        renderbufferStorage: function(target, internalformat, width, height) {
            this.__context.renderbufferStorage(target, internalformat, width, height)
        },
        renderbufferStorageMultisample: function(target, samples, internalFormat, width, height) {
            this.__context.renderbufferStorageMultisample(target, samples, internalFormat, width, height)
        },
        resumeTransformFeedback: function() {
            this.__context.resumeTransformFeedback()
        },
        sampleCoverage: function(value, invert) {
            this.__context.sampleCoverage(value, invert)
        },
        samplerParameterf: function(sampler, pname, param) {
            this.__context.samplerParameterf(sampler, pname, param)
        },
        samplerParameteri: function(sampler, pname, param) {
            this.__context.samplerParameteri(sampler, pname, param)
        },
        scissor: function(x, y, width, height) {
            this.__context.scissor(x, y, width, height)
        },
        shaderBinary: function(shaders, binaryformat, binary, length) {},
        shaderSource: function(shader, source) {
            this.__context.shaderSource(shader, source)
        },
        stencilFunc: function(func, ref, mask) {
            this.__context.stencilFunc(func, ref, mask)
        },
        stencilFuncSeparate: function(face, func, ref, mask) {
            this.__context.stencilFuncSeparate(face, func, ref, mask)
        },
        stencilMask: function(mask) {
            this.__context.stencilMask(mask)
        },
        stencilMaskSeparate: function(face, mask) {
            this.__context.stencilMaskSeparate(face, mask)
        },
        stencilOp: function(fail, zfail, zpass) {
            this.__context.stencilOp(fail, zfail, zpass)
        },
        stencilOpSeparate: function(face, fail, zfail, zpass) {
            this.__context.stencilOpSeparate(face, fail, zfail, zpass)
        },
        texImage2D: function(target, level, internalformat, width, height, border, format, type, data) {
            this.__context.texImage2D(target, level, internalformat, width, height, border, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
        },
        texImage2DWEBGL: function(target, level, internalformat, width, height, border, format, type, srcData, srcOffset) {
            if (srcOffset != null) {
                this.__context.texImage2D(target, level, internalformat, width, height, border, format, type, srcData, srcOffset)
            } else {
                if (format != null) {
                    this.__context.texImage2D(target, level, internalformat, width, height, border, format, type, srcData)
                } else {
                    this.__context.texImage2D(target, level, internalformat, width, height, border)
                }
            }
        },
        texImage3D: function(target, level, internalformat, width, height, depth, border, format, type, data) {
            this.__context.texImage3D(target, level, internalformat, width, height, depth, border, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
        },
        texImage3DWEBGL: function(target, level, internalformat, width, height, depth, border, format, type, srcData, srcOffset) {
            this.__context.texImage3D(target, level, internalformat, width, height, depth, border, format, type, srcData, srcOffset)
        },
        texStorage2D: function(target, level, internalformat, width, height) {
            this.__context.texStorage2D(target, level, internalformat, width, height)
        },
        texStorage3D: function(target, level, internalformat, width, height, depth) {
            this.__context.texStorage3D(target, level, internalformat, width, height, depth)
        },
        texParameterf: function(target, pname, param) {
            this.__context.texParameterf(target, pname, param)
        },
        texParameteri: function(target, pname, param) {
            this.__context.texParameteri(target, pname, param)
        },
        texSubImage2D: function(target, level, xoffset, yoffset, width, height, format, type, data) {
            this.__context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
        },
        texSubImage2DWEBGL: function(target, level, xoffset, yoffset, width, height, format, type, srcData, srcOffset) {
            if (srcOffset != null) {
                this.__context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, srcData, srcOffset)
            } else {
                if (type != null) {
                    this.__context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, srcData)
                } else {
                    this.__context.texSubImage2D(target, level, xoffset, yoffset, width, height, format)
                }
            }
        },
        texSubImage3D: function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) {
            this.__context.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
        },
        texSubImage3DWEBGL: function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, source, srcOffset) {
            this.__context.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, source, srcOffset)
        },
        transformFeedbackVaryings: function(program, varyings, bufferMode) {
            this.__context.transformFeedbackVaryings(program, varyings, bufferMode)
        },
        uniform1f: function(location, v0) {
            this.__context.uniform1f(location, v0)
        },
        uniform1fv: function(location, count, v) {
            this.__context.uniform1fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4))
        },
        uniform1fvWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform1fv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform1fv(location, data)
            }
        },
        uniform1i: function(location, v0) {
            this.__context.uniform1i(location, v0)
        },
        uniform1iv: function(location, count, v) {
            this.__context.uniform1iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4))
        },
        uniform1ivWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform1iv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform1iv(location, data)
            }
        },
        uniform1ui: function(location, v0) {
            this.__context.uniform1ui(location, v0);
            return
        },
        uniform1uiv: function(location, count, v) {
            this.__context.uniform1uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4))
        },
        uniform1uivWEBGL: function(location, data, srcOffset, srcLength) {
            this.__context.uniform1uiv(location, data, srcOffset, srcLength)
        },
        uniform2f: function(location, v0, v1) {
            this.__context.uniform2f(location, v0, v1)
        },
        uniform2fv: function(location, count, v) {
            this.__context.uniform2fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 2))
        },
        uniform2fvWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform2fv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform2fv(location, data)
            }
        },
        uniform2i: function(location, x, y) {
            this.__context.uniform2i(location, x, y)
        },
        uniform2iv: function(location, count, v) {
            this.__context.uniform2iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 2))
        },
        uniform2ivWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform2iv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform2iv(location, data)
            }
        },
        uniform2ui: function(location, v0, v1) {
            this.__context.uniform2ui(location, v0, v1)
        },
        uniform2uiv: function(location, count, v) {
            this.__context.uniform2uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 2))
        },
        uniform2uivWEBGL: function(location, data, srcOffset, srcLength) {
            this.__context.uniform2uiv(location, data, srcOffset, srcLength)
        },
        uniform3f: function(location, v0, v1, v2) {
            this.__context.uniform3f(location, v0, v1, v2)
        },
        uniform3fv: function(location, count, v) {
            this.__context.uniform3fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 3))
        },
        uniform3fvWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform3fv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform3fv(location, data)
            }
        },
        uniform3i: function(location, x, y, z) {
            this.__context.uniform3i(location, x, y, z)
        },
        uniform3iv: function(location, count, v) {
            this.__context.uniform3iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 3))
        },
        uniform3ivWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform3iv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform3iv(location, data)
            }
        },
        uniform3ui: function(location, v0, v1, v2) {
            this.__context.uniform3ui(location, v0, v1, v2)
        },
        uniform3uiv: function(location, count, v) {
            this.__context.uniform3uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 3))
        },
        uniform3uivWEBGL: function(location, data, srcOffset, srcLength) {
            this.__context.uniform3uiv(location, data, srcOffset, srcLength)
        },
        uniform4f: function(location, v0, v1, v2, v3) {
            this.__context.uniform4f(location, v0, v1, v2, v3)
        },
        uniform4fv: function(location, count, v) {
            this.__context.uniform4fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 4))
        },
        uniform4fvWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform4fv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform4fv(location, data)
            }
        },
        uniform4i: function(location, v0, v1, v2, v3) {
            this.__context.uniform4i(location, v0, v1, v2, v3)
        },
        uniform4iv: function(location, count, v) {
            this.__context.uniform4iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 4))
        },
        uniform4ivWEBGL: function(location, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniform4iv(location, data, srcOffset, srcLength)
            } else {
                this.__context.uniform4iv(location, data)
            }
        },
        uniform4ui: function(location, v0, v1, v2, v3) {
            this.__context.uniform4ui(location, v0, v1, v2, v3)
        },
        uniform4uiv: function(location, count, v) {
            this.__context.uniform4uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 4))
        },
        uniform4uivWEBGL: function(location, data, srcOffset, srcLength) {
            this.__context.uniform4uiv(location, data, srcOffset, srcLength)
        },
        uniformBlockBinding: function(program, uniformBlockIndex, uniformBlockBinding) {
            this.__context.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding)
        },
        uniformMatrix2fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 4))
        },
        uniformMatrix2fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniformMatrix2fv(location, transpose, data, srcOffset, srcLength)
            } else {
                this.__context.uniformMatrix2fv(location, transpose, data)
            }
        },
        uniformMatrix2x3fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix2x3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 6))
        },
        uniformMatrix2x3fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            this.__context.uniformMatrix2x3fv(location, transpose, data, srcOffset, srcLength)
        },
        uniformMatrix2x4fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix2x4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 8))
        },
        uniformMatrix2x4fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            this.__context.uniformMatrix2x4fv(location, transpose, data, srcOffset, srcLength)
        },
        uniformMatrix3fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 9))
        },
        uniformMatrix3fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniformMatrix3fv(location, transpose, data, srcOffset, srcLength)
            } else {
                this.__context.uniformMatrix3fv(location, transpose, data)
            }
        },
        uniformMatrix3x2fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix3x2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 6))
        },
        uniformMatrix3x2fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            this.__context.uniformMatrix3x2fv(location, transpose, data, srcOffset, srcLength)
        },
        uniformMatrix3x4fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix3x4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 12))
        },
        uniformMatrix3x4fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            this.__context.uniformMatrix3x4fv(location, transpose, data, srcOffset, srcLength)
        },
        uniformMatrix4fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 16))
        },
        uniformMatrix4fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniformMatrix4fv(location, transpose, data, srcOffset, srcLength)
            } else {
                this.__context.uniformMatrix4fv(location, transpose, data)
            }
        },
        uniformMatrix4x2fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix4x2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 8))
        },
        uniformMatrix4x2fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            if (srcOffset != null) {
                this.__context.uniformMatrix4x2fv(location, transpose, data, srcOffset, srcLength)
            } else {
                this.__context.uniformMatrix4x2fv(location, transpose, data)
            }
        },
        uniformMatrix4x3fv: function(location, count, transpose, v) {
            this.__context.uniformMatrix4x3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 12))
        },
        uniformMatrix4x3fvWEBGL: function(location, transpose, data, srcOffset, srcLength) {
            this.__context.uniformMatrix4x3fv(location, transpose, data, srcOffset, srcLength)
        },
        unmapBuffer: function(target) {
            return false
        },
        useProgram: function(program) {
            this.__context.useProgram(program)
        },
        validateProgram: function(program) {
            this.__context.validateProgram(program)
        },
        vertexAttrib1f: function(index, v0) {
            this.__context.vertexAttrib1f(index, v0)
        },
        vertexAttrib1fv: function(index, v) {
            this.__context.vertexAttrib1fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
        },
        vertexAttrib1fvWEBGL: function(index, v) {
            this.__context.vertexAttrib1fv(index, v)
        },
        vertexAttrib2f: function(index, v0, v1) {
            this.__context.vertexAttrib2f(index, v0, v1)
        },
        vertexAttrib2fv: function(index, v) {
            this.__context.vertexAttrib2fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
        },
        vertexAttrib2fvWEBGL: function(index, v) {
            this.__context.vertexAttrib2fv(index, v)
        },
        vertexAttrib3f: function(index, v0, v1, v2) {
            this.__context.vertexAttrib3f(index, v0, v1, v2)
        },
        vertexAttrib3fv: function(index, v) {
            this.__context.vertexAttrib3fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
        },
        vertexAttrib3fvWEBGL: function(index, v) {
            this.__context.vertexAttrib3fv(index, v)
        },
        vertexAttrib4f: function(index, v0, v1, v2, v3) {
            this.__context.vertexAttrib4f(index, v0, v1, v2, v3)
        },
        vertexAttrib4fv: function(index, v) {
            this.__context.vertexAttrib4fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
        },
        vertexAttrib4fvWEBGL: function(index, v) {
            this.__context.vertexAttrib4fv(index, v)
        },
        vertexAttribDivisor: function(index, divisor) {
            this.__context.vertexAttribDivisor(index, divisor)
        },
        vertexAttribI4i: function(index, v0, v1, v2, v3) {
            this.__context.vertexAttribI4i(index, v0, v1, v2, v3)
        },
        vertexAttribI4iv: function(index, v) {
            this.__context.vertexAttribI4iv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v))
        },
        vertexAttribI4ivWEBGL: function(index, v) {
            this.__context.vertexAttribI4iv(index, v)
        },
        vertexAttribI4ui: function(index, v0, v1, v2, v3) {
            this.__context.vertexAttribI4ui(index, v0, v1, v2, v3)
        },
        vertexAttribI4uiv: function(index, v) {
            this.__context.vertexAttribI4uiv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v))
        },
        vertexAttribI4uivWEBGL: function(index, v) {
            this.__context.vertexAttribI4uiv(index, v)
        },
        vertexAttribIPointer: function(index, size, type, stride, offset) {
            this.__context.vertexAttribIPointer(index, size, type, stride, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)))
        },
        vertexAttribPointer: function(index, size, type, normalized, stride, offset) {
            this.__context.vertexAttribPointer(index, size, type, normalized, stride, lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset))
        },
        viewport: function(x, y, width, height) {
            this.__context.viewport(x, y, width, height)
        },
        waitSync: function(sync, flags, timeout) {
            this.__context.waitSync(sync, flags, timeout)
        },
        get_canvas: function() {
            return this.__context.canvas
        },
        get_drawingBufferHeight: function() {
            return this.__context.drawingBufferHeight
        },
        get_drawingBufferWidth: function() {
            return this.__context.drawingBufferWidth
        },
        __class__: lime__$backend_html5_HTML5GLRenderContext,
        __properties__: {
            get_drawingBufferWidth: "get_drawingBufferWidth",
            get_drawingBufferHeight: "get_drawingBufferHeight",
            get_canvas: "get_canvas"
        }
    };
    var lime__$backend_html5_HTML5HTTPRequest = function() {};
    $hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
    lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime", "_backend", "html5", "HTML5HTTPRequest"];
    lime__$backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
        var promise = new lime_app_Promise();
        if (lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
            lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
            lime__$backend_html5_HTML5HTTPRequest.__loadImage(uri, promise)
        } else {
            lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({
                instance: null,
                uri: uri,
                promise: promise,
                type: "IMAGE"
            })
        }
        return promise.future
    };
    lime__$backend_html5_HTML5HTTPRequest.processQueue = function() {
        if (lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit && lime__$backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
            lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
            var queueItem = lime__$backend_html5_HTML5HTTPRequest.requestQueue.pop();
            var _g = queueItem.type;
            switch (_g) {
                case "IMAGE":
                    lime__$backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri, queueItem.promise);
                    break;
                case "TEXT":
                    queueItem.instance.__loadText(queueItem.uri, queueItem.promise);
                    break;
                case "BINARY":
                    queueItem.instance.__loadData(queueItem.uri, queueItem.promise);
                    break;
                default:
                    lime__$backend_html5_HTML5HTTPRequest.activeRequests--
            }
        }
    };
    lime__$backend_html5_HTML5HTTPRequest.__loadImage = function(uri, promise) {
        var image = new Image();
        image.crossOrigin = "Anonymous";
        image.addEventListener("load", function(event) {
            var buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
            buffer.__srcImage = image;
            lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
            lime__$backend_html5_HTML5HTTPRequest.processQueue();
            promise.complete(new lime_graphics_Image(buffer))
        }, false);
        image.addEventListener("progress", function(event1) {
            promise.progress(event1.loaded, event1.total)
        }, false);
        image.addEventListener("error", function(event2) {
            lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
            lime__$backend_html5_HTML5HTTPRequest.processQueue();
            promise.error(event2.detail)
        }, false);
        image.src = uri
    };
    lime__$backend_html5_HTML5HTTPRequest.prototype = {
        binary: null,
        parent: null,
        request: null,
        cancel: function() {
            if (this.request != null) {
                this.request.abort()
            }
        },
        init: function(parent) {
            this.parent = parent
        },
        load: function(uri, progress, readyStateChange) {
            this.request = new XMLHttpRequest();
            this.request.addEventListener("progress", progress, false);
            this.request.onreadystatechange = readyStateChange;
            var query = "";
            if (this.parent.data == null) {
                var $it0 = this.parent.formData.keys();
                while ($it0.hasNext()) {
                    var key = $it0.next();
                    if (query.length > 0) {
                        query += "&"
                    }
                    query += encodeURIComponent(key) + "=" + StringTools.urlEncode(Std.string(this.parent.formData.get(key)))
                }
                if (this.parent.method == "GET" && query != "") {
                    if (uri.indexOf("?") > -1) {
                        uri += "&" + query
                    } else {
                        uri += "?" + query
                    }
                    query = ""
                }
            }
            this.request.open(Std.string(this.parent.method), uri, true);
            if (this.parent.timeout > 0) {
                this.request.timeout = this.parent.timeout
            }
            if (this.binary) {
                this.request.responseType = "arraybuffer"
            }
            var hasContentType = false;
            var _g = 0;
            var _g1 = this.parent.headers;
            while (_g < _g1.length) {
                var header = _g1[_g];
                ++_g;
                if (header.name == "Content-Type") {
                    hasContentType = true
                }
                this.request.setRequestHeader(header.name, header.value)
            }
            if (!hasContentType && this.parent.contentType != null) {
                this.request.setRequestHeader("Content-Type", this.parent.contentType)
            }
            if (this.parent.data != null) {
                this.request.send(this.parent.data.b.bufferValue)
            } else {
                this.request.send(query)
            }
        },
        loadData: function(uri) {
            var promise = new lime_app_Promise();
            if (lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
                lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
                this.__loadData(uri, promise)
            } else {
                lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({
                    instance: this,
                    uri: uri,
                    promise: promise,
                    type: "BINARY"
                })
            }
            return promise.future
        },
        loadText: function(uri) {
            var promise = new lime_app_Promise();
            if (lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
                lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
                this.__loadText(uri, promise)
            } else {
                lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({
                    instance: this,
                    uri: uri,
                    promise: promise,
                    type: "TEXT"
                })
            }
            return promise.future
        },
        processResponse: function() {
            if (this.parent.enableResponseHeaders) {
                this.parent.responseHeaders = [];
                var name;
                var value;
                var _g = 0;
                var _g1 = this.request.getAllResponseHeaders().split("\n");
                while (_g < _g1.length) {
                    var line = _g1[_g];
                    ++_g;
                    name = StringTools.trim((function($this) {
                        var $r;
                        var len = line.indexOf(":");
                        $r = HxOverrides.substr(line, 0, len);
                        return $r
                    }(this)));
                    value = StringTools.trim((function($this) {
                        var $r;
                        var pos = line.indexOf(":") + 1;
                        $r = HxOverrides.substr(line, pos, null);
                        return $r
                    }(this)));
                    if (name != "") {
                        this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name, value))
                    }
                }
            }
            this.parent.responseStatus = this.request.status
        },
        __loadData: function(uri, promise) {
            var _g = this;
            var progress = function(event) {
                promise.progress(event.loaded, event.total)
            };
            var readyStateChange = function(event1) {
                if (_g.request.readyState != 4) {
                    return
                }
                if (_g.request.status != null && _g.request.status >= 200 && _g.request.status <= 400) {
                    var bytes;
                    if (_g.request.responseType == "") {
                        bytes = haxe_io_Bytes.ofString(_g.request.responseText)
                    } else {
                        bytes = haxe_io_Bytes.ofData(_g.request.response)
                    }
                    _g.processResponse();
                    promise.complete(bytes)
                } else {
                    _g.processResponse();
                    promise.error(_g.request.status)
                }
                _g.request = null;
                lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
                lime__$backend_html5_HTML5HTTPRequest.processQueue()
            };
            this.binary = true;
            this.load(uri, progress, readyStateChange)
        },
        __loadText: function(uri, promise) {
            var _g = this;
            var progress = function(event) {
                promise.progress(event.loaded, event.total)
            };
            var readyStateChange = function(event1) {
                if (_g.request.readyState != 4) {
                    return
                }
                if (_g.request.status != null && _g.request.status >= 200 && _g.request.status <= 400) {
                    _g.processResponse();
                    promise.complete(_g.request.responseText)
                } else {
                    _g.processResponse();
                    promise.error(_g.request.status)
                }
                _g.request = null;
                lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
                lime__$backend_html5_HTML5HTTPRequest.processQueue()
            };
            this.binary = false;
            this.load(uri, progress, readyStateChange)
        },
        __class__: lime__$backend_html5_HTML5HTTPRequest
    };
    var lime__$backend_html5_HTML5Mouse = function() {};
    $hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
    lime__$backend_html5_HTML5Mouse.__name__ = ["lime", "_backend", "html5", "HTML5Mouse"];
    lime__$backend_html5_HTML5Mouse.hide = function() {
        if (!lime__$backend_html5_HTML5Mouse.__hidden) {
            lime__$backend_html5_HTML5Mouse.__hidden = true;
            var _g = 0;
            var _g1 = lime_app_Application.current.__windows;
            while (_g < _g1.length) {
                var $window = _g1[_g];
                ++_g;
                $window.backend.element.style.cursor = "none"
            }
        }
    };
    lime__$backend_html5_HTML5Mouse.show = function() {
        if (lime__$backend_html5_HTML5Mouse.__hidden) {
            lime__$backend_html5_HTML5Mouse.__hidden = false;
            var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
            lime__$backend_html5_HTML5Mouse.__cursor = null;
            lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue)
        }
    };
    lime__$backend_html5_HTML5Mouse.warp = function(x, y, window) {};
    lime__$backend_html5_HTML5Mouse.get_cursor = function() {
        if (lime__$backend_html5_HTML5Mouse.__cursor == null) {
            return lime_ui_MouseCursor.DEFAULT
        }
        return lime__$backend_html5_HTML5Mouse.__cursor
    };
    lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
        if (lime__$backend_html5_HTML5Mouse.__cursor != value) {
            if (!lime__$backend_html5_HTML5Mouse.__hidden) {
                var _g = 0;
                var _g1 = lime_app_Application.current.__windows;
                while (_g < _g1.length) {
                    var $window = _g1[_g];
                    ++_g;
                    switch (value[1]) {
                        case 0:
                            $window.backend.element.style.cursor = "default";
                            break;
                        case 1:
                            $window.backend.element.style.cursor = "crosshair";
                            break;
                        case 3:
                            $window.backend.element.style.cursor = "move";
                            break;
                        case 4:
                            $window.backend.element.style.cursor = "pointer";
                            break;
                        case 5:
                            $window.backend.element.style.cursor = "nesw-resize";
                            break;
                        case 6:
                            $window.backend.element.style.cursor = "ns-resize";
                            break;
                        case 7:
                            $window.backend.element.style.cursor = "nwse-resize";
                            break;
                        case 8:
                            $window.backend.element.style.cursor = "ew-resize";
                            break;
                        case 9:
                            $window.backend.element.style.cursor = "text";
                            break;
                        case 10:
                            $window.backend.element.style.cursor = "wait";
                            break;
                        case 11:
                            $window.backend.element.style.cursor = "wait";
                            break;
                        default:
                            $window.backend.element.style.cursor = "auto"
                    }
                }
            }
            lime__$backend_html5_HTML5Mouse.__cursor = value
        }
        return lime__$backend_html5_HTML5Mouse.__cursor
    };
    lime__$backend_html5_HTML5Mouse.get_lock = function() {
        return false
    };
    lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
        return value
    };
    var lime__$backend_html5_HTML5Renderer = function(parent) {
        this.parent = parent
    };
    $hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
    lime__$backend_html5_HTML5Renderer.__name__ = ["lime", "_backend", "html5", "HTML5Renderer"];
    lime__$backend_html5_HTML5Renderer.prototype = {
        parent: null,
        create: function() {
            this.createContext();
            var _g = this.parent.context;
            switch (_g[1]) {
                case 0:
                    this.parent.window.backend.canvas.addEventListener("webglcontextlost", $bind(this, this.handleEvent), false);
                    this.parent.window.backend.canvas.addEventListener("webglcontextrestored", $bind(this, this.handleEvent), false);
                    break;
                default:
            }
        },
        createContext: function() {
            if (this.parent.window.backend.div != null) {
                this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
                this.parent.type = lime_graphics_RendererType.DOM
            } else {
                if (this.parent.window.backend.canvas != null) {
                    var webgl = null;
                    if (!Object.prototype.hasOwnProperty.call(this.parent.window.config, "hardware") || this.parent.window.config.hardware) {
                        var options = {
                            alpha: Object.prototype.hasOwnProperty.call(this.parent.window.config, "background") && this.parent.window.config.background == null ? true : false,
                            antialias: Object.prototype.hasOwnProperty.call(this.parent.window.config, "antialiasing") ? this.parent.window.config.antialiasing > 0 : false,
                            depth: Object.prototype.hasOwnProperty.call(this.parent.window.config, "depthBuffer") ? this.parent.window.config.depthBuffer : true,
                            premultipliedAlpha: true,
                            stencil: Object.prototype.hasOwnProperty.call(this.parent.window.config, "stencilBuffer") ? this.parent.window.config.stencilBuffer : false,
                            preserveDrawingBuffer: false
                        };
                        var _g = 0;
                        var _g1 = ["webgl2", "webgl", "experimental-webgl"];
                        while (_g < _g1.length) {
                            var name = _g1[_g];
                            ++_g;
                            webgl = this.parent.window.backend.canvas.getContext(name, options);
                            if (webgl != null) {
                                break
                            }
                        }
                    }
                    if (webgl == null) {
                        this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
                        this.parent.type = lime_graphics_RendererType.CANVAS
                    } else {
                        lime_graphics_opengl_GL.context = new lime__$backend_html5_HTML5GLRenderContext(webgl);
                        this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
                        this.parent.type = lime_graphics_RendererType.OPENGL
                    }
                }
            }
        },
        flip: function() {},
        handleEvent: function(event) {
            var _g = event.type;
            switch (_g) {
                case "webglcontextlost":
                    event.preventDefault();
                    if (lime_graphics_opengl_GL.context != null) {
                        lime_graphics_opengl_GL.context.__contextLost = true
                    }
                    this.parent.context = null;
                    this.parent.onContextLost.dispatch();
                    break;
                case "webglcontextrestored":
                    this.createContext();
                    this.parent.onContextRestored.dispatch(this.parent.context);
                    break;
                default:
            }
        },
        readPixels: function(rect) {
            if (this.parent.window.backend.canvas != null) {
                if (rect == null) {
                    rect = new lime_math_Rectangle(0, 0, this.parent.window.backend.canvas.width, this.parent.window.backend.canvas.height)
                } else {
                    rect.__contract(0, 0, this.parent.window.backend.canvas.width, this.parent.window.backend.canvas.height)
                }
                if (rect.width > 0 && rect.height > 0) {
                    var canvas = window.document.createElement("canvas");
                    canvas.width = rect.width | 0;
                    canvas.height = rect.height | 0;
                    var context = canvas.getContext("2d");
                    context.drawImage(this.parent.window.backend.canvas, -rect.x, -rect.y);
                    return lime_graphics_Image.fromCanvas(canvas)
                }
            }
            return null
        },
        render: function() {},
        __class__: lime__$backend_html5_HTML5Renderer
    };
    var lime__$backend_html5_HTML5Window = function(parent) {
        this.unusedTouchesPool = new List();
        this.scale = 1;
        this.currentTouches = new haxe_ds_IntMap();
        this.parent = parent;
        if (parent.config != null && Object.prototype.hasOwnProperty.call(parent.config, "element")) {
            this.element = parent.config.element
        }
        if (parent.config != null && Object.prototype.hasOwnProperty.call(parent.config, "allowHighDPI") && parent.config.allowHighDPI) {
            this.scale = window.devicePixelRatio
        }
        parent.__scale = this.scale;
        this.cacheMouseX = 0;
        this.cacheMouseY = 0
    };
    $hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
    lime__$backend_html5_HTML5Window.__name__ = ["lime", "_backend", "html5", "HTML5Window"];
    lime__$backend_html5_HTML5Window.prototype = {
        canvas: null,
        div: null,
        element: null,
        cacheElementHeight: null,
        cacheElementWidth: null,
        cacheMouseX: null,
        cacheMouseY: null,
        currentTouches: null,
        enableTextEvents: null,
        parent: null,
        primaryTouch: null,
        scale: null,
        setHeight: null,
        setWidth: null,
        unusedTouchesPool: null,
        alert: function(message, title) {
            if (message != null) {
                js_Browser.alert(message)
            }
        },
        close: function() {
            this.parent.application.removeWindow(this.parent)
        },
        create: function(application) {
            this.setWidth = this.parent.__width;
            this.setHeight = this.parent.__height;
            this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
            if (js_Boot.__instanceof(this.element, HTMLCanvasElement)) {
                this.canvas = this.element
            } else {
                this.canvas = window.document.createElement("canvas")
            }
            if (this.canvas != null) {
                var style = this.canvas.style;
                style.setProperty("-webkit-transform", "translateZ(0)", null);
                style.setProperty("transform", "translateZ(0)", null)
            } else {
                if (this.div != null) {
                    var style1 = this.div.style;
                    style1.setProperty("-webkit-transform", "translate3D(0,0,0)", null);
                    style1.setProperty("transform", "translate3D(0,0,0)", null);
                    style1.position = "relative";
                    style1.overflow = "hidden";
                    style1.setProperty("-webkit-user-select", "none", null);
                    style1.setProperty("-moz-user-select", "none", null);
                    style1.setProperty("-ms-user-select", "none", null);
                    style1.setProperty("-o-user-select", "none", null)
                }
            }
            if (this.parent.__width == 0 && this.parent.__height == 0) {
                if (this.element != null) {
                    this.parent.set_width(this.element.clientWidth);
                    this.parent.set_height(this.element.clientHeight)
                } else {
                    this.parent.set_width(window.innerWidth);
                    this.parent.set_height(window.innerHeight)
                }
                this.cacheElementWidth = this.parent.__width;
                this.cacheElementHeight = this.parent.__height;
                this.parent.set_fullscreen(true)
            }
            if (this.canvas != null) {
                this.canvas.width = Math.round(this.parent.__width * this.scale);
                this.canvas.height = Math.round(this.parent.__height * this.scale);
                this.canvas.style.width = this.parent.__width + "px";
                this.canvas.style.height = this.parent.__height + "px"
            } else {
                this.div.style.width = this.parent.__width + "px";
                this.div.style.height = this.parent.__height + "px"
            }
            this.updateSize();
            if (this.element != null) {
                if (this.canvas != null) {
                    if (this.element != this.canvas) {
                        this.element.appendChild(this.canvas)
                    }
                } else {
                    this.element.appendChild(this.div)
                }
                var events = ["mousedown", "mouseenter", "mouseleave", "mousemove", "mouseup", "wheel"];
                var _g = 0;
                while (_g < events.length) {
                    var event = events[_g];
                    ++_g;
                    this.element.addEventListener(event, $bind(this, this.handleMouseEvent), true)
                }
                window.document.addEventListener("dragstart", function(e) {
                    if (e.target.nodeName.toLowerCase() == "img") {
                        e.preventDefault();
                        return false
                    }
                    return true
                }, false);
                this.element.addEventListener("contextmenu", $bind(this, this.handleContextMenuEvent), true);
                this.element.addEventListener("touchstart", $bind(this, this.handleTouchEvent), true);
                this.element.addEventListener("touchmove", $bind(this, this.handleTouchEvent), true);
                this.element.addEventListener("touchend", $bind(this, this.handleTouchEvent), true);
                this.element.addEventListener("gamepadconnected", $bind(this, this.handleGamepadEvent), true);
                this.element.addEventListener("gamepaddisconnected", $bind(this, this.handleGamepadEvent), true)
            }
        },
        focus: function() {},
        getDisplay: function() {
            return lime_system_System.getDisplay(0)
        },
        getDisplayMode: function() {
            return lime_system_System.getDisplay(0).currentMode
        },
        setDisplayMode: function(value) {
            return value
        },
        getEnableTextEvents: function() {
            return this.enableTextEvents
        },
        handleContextMenuEvent: function(event) {
            if (this.parent.onMouseUp.canceled) {
                event.preventDefault()
            }
        },
        handleFocusEvent: function(event) {
            if (this.enableTextEvents) {
                haxe_Timer.delay(function() {
                    lime__$backend_html5_HTML5Window.textInput.focus()
                }, 20)
            }
        },
        handleGamepadEvent: function(event) {
            var _g = event.type;
            switch (_g) {
                case "gamepadconnected":
                    lime_ui_Joystick.__connect(event.gamepad.index);
                    if (event.gamepad.mapping == "standard") {
                        lime_ui_Gamepad.__connect(event.gamepad.index)
                    }
                    break;
                case "gamepaddisconnected":
                    lime_ui_Joystick.__disconnect(event.gamepad.index);
                    lime_ui_Gamepad.__disconnect(event.gamepad.index);
                    break;
                default:
            }
        },
        handleCutOrCopyEvent: function(event) {
            event.clipboardData.setData("text/plain", lime_system_Clipboard.get_text());
            event.preventDefault()
        },
        handlePasteEvent: function(event) {
            if (event.clipboardData.types.indexOf("text/plain") > -1) {
                var text = lime_system_Clipboard.set_text(event.clipboardData.getData("text/plain"));
                this.parent.onTextInput.dispatch(text);
                event.preventDefault()
            }
        },
        handleInputEvent: function(event) {
            if (lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
                if (lime__$backend_html5_HTML5Window.textInput.value.charAt(0) == lime__$backend_html5_HTML5Window.dummyCharacter) {
                    this.parent.onTextInput.dispatch(HxOverrides.substr(lime__$backend_html5_HTML5Window.textInput.value, 1, null))
                } else {
                    this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value)
                }
                lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter
            }
        },
        handleMouseEvent: function(event) {
            var x = 0;
            var y = 0;
            if (event.type != "wheel") {
                if (this.element != null) {
                    if (this.canvas != null) {
                        var rect = this.canvas.getBoundingClientRect();
                        x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
                        y = (event.clientY - rect.top) * (this.parent.__height / rect.height)
                    } else {
                        if (this.div != null) {
                            var rect1 = this.div.getBoundingClientRect();
                            x = event.clientX - rect1.left;
                            y = event.clientY - rect1.top
                        } else {
                            var rect2 = this.element.getBoundingClientRect();
                            x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
                            y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height)
                        }
                    }
                } else {
                    x = event.clientX;
                    y = event.clientY
                }
                var _g = event.type;
                switch (_g) {
                    case "mousedown":
                        this.parent.onMouseDown.dispatch(x, y, event.button);
                        if (this.parent.onMouseDown.canceled) {
                            event.preventDefault()
                        }
                        break;
                    case "mouseenter":
                        if (event.target == this.element) {
                            this.parent.onEnter.dispatch();
                            if (this.parent.onEnter.canceled) {
                                event.preventDefault()
                            }
                        }
                        break;
                    case "mouseleave":
                        if (event.target == this.element) {
                            this.parent.onLeave.dispatch();
                            if (this.parent.onLeave.canceled) {
                                event.preventDefault()
                            }
                        }
                        break;
                    case "mouseup":
                        this.parent.onMouseUp.dispatch(x, y, event.button);
                        if (this.parent.onMouseUp.canceled) {
                            event.preventDefault()
                        }
                        break;
                    case "mousemove":
                        if (x != this.cacheMouseX || y != this.cacheMouseY) {
                            this.parent.onMouseMove.dispatch(x, y);
                            this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX, y - this.cacheMouseY);
                            if (this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) {
                                event.preventDefault()
                            }
                        }
                        break;
                    default:
                }
                this.cacheMouseX = x;
                this.cacheMouseY = y
            } else {
                this.parent.onMouseWheel.dispatch(event.deltaX, -event.deltaY);
                if (this.parent.onMouseWheel.canceled) {
                    event.preventDefault()
                }
            }
        },
        handleResizeEvent: function(event) {
            this.primaryTouch = null;
            this.updateSize()
        },
        handleTouchEvent: function(event) {
            event.preventDefault();
            var rect = null;
            if (this.element != null) {
                if (this.canvas != null) {
                    rect = this.canvas.getBoundingClientRect()
                } else {
                    if (this.div != null) {
                        rect = this.div.getBoundingClientRect()
                    } else {
                        rect = this.element.getBoundingClientRect()
                    }
                }
            }
            var windowWidth = this.setWidth;
            var windowHeight = this.setHeight;
            if (windowWidth == 0 || windowHeight == 0) {
                if (rect != null) {
                    windowWidth = rect.width;
                    windowHeight = rect.height
                } else {
                    windowWidth = 1;
                    windowHeight = 1
                }
            }
            var _g = 0;
            var _g1 = event.changedTouches;
            while (_g < _g1.length) {
                var data = _g1[_g];
                ++_g;
                var x = 0;
                var y = 0;
                if (rect != null) {
                    x = (data.clientX - rect.left) * (windowWidth / rect.width);
                    y = (data.clientY - rect.top) * (windowHeight / rect.height)
                } else {
                    x = data.clientX;
                    y = data.clientY
                }
                var _g2 = event.type;
                switch (_g2) {
                    case "touchstart":
                        var touch = this.unusedTouchesPool.pop();
                        if (touch == null) {
                            touch = new lime_ui_Touch(x / windowWidth, y / windowHeight, data.identifier, 0, 0, data.force, this.parent.id)
                        } else {
                            touch.x = x / windowWidth;
                            touch.y = y / windowHeight;
                            touch.id = data.identifier;
                            touch.dx = 0;
                            touch.dy = 0;
                            touch.pressure = data.force;
                            touch.device = this.parent.id
                        }
                        this.currentTouches.h[data.identifier] = touch;
                        lime_ui_Touch.onStart.dispatch(touch);
                        if (this.primaryTouch == null) {
                            this.primaryTouch = touch
                        }
                        if (touch == this.primaryTouch) {
                            this.parent.onMouseDown.dispatch(x, y, 0)
                        }
                        break;
                    case "touchend":
                        var touch1 = this.currentTouches.h[data.identifier];
                        if (touch1 != null) {
                            var cacheX = touch1.x;
                            var cacheY = touch1.y;
                            touch1.x = x / windowWidth;
                            touch1.y = y / windowHeight;
                            touch1.dx = touch1.x - cacheX;
                            touch1.dy = touch1.y - cacheY;
                            touch1.pressure = data.force;
                            lime_ui_Touch.onEnd.dispatch(touch1);
                            this.currentTouches.remove(data.identifier);
                            this.unusedTouchesPool.add(touch1);
                            if (touch1 == this.primaryTouch) {
                                this.parent.onMouseUp.dispatch(x, y, 0);
                                this.primaryTouch = null
                            }
                        }
                        break;
                    case "touchmove":
                        var touch2 = this.currentTouches.h[data.identifier];
                        if (touch2 != null) {
                            var cacheX1 = touch2.x;
                            var cacheY1 = touch2.y;
                            touch2.x = x / windowWidth;
                            touch2.y = y / windowHeight;
                            touch2.dx = touch2.x - cacheX1;
                            touch2.dy = touch2.y - cacheY1;
                            touch2.pressure = data.force;
                            lime_ui_Touch.onMove.dispatch(touch2);
                            if (touch2 == this.primaryTouch) {
                                this.parent.onMouseMove.dispatch(x, y)
                            }
                        }
                        break;
                    default:
                }
            }
        },
        move: function(x, y) {},
        resize: function(width, height) {},
        setBorderless: function(value) {
            return value
        },
        setClipboard: function(value) {
            if (window.document.queryCommandEnabled("copy")) {
                var inputEnabled = this.enableTextEvents;
                this.setEnableTextEvents(true);
                this.setEnableTextEvents(false);
                var cacheText = lime__$backend_html5_HTML5Window.textInput.value;
                lime__$backend_html5_HTML5Window.textInput.value = value;
                window.document.execCommand("copy");
                lime__$backend_html5_HTML5Window.textInput.value = cacheText;
                this.setEnableTextEvents(inputEnabled)
            }
        },
        setEnableTextEvents: function(value) {
            if (value) {
                if (lime__$backend_html5_HTML5Window.textInput == null) {
                    lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
                    lime__$backend_html5_HTML5Window.textInput.type = "text";
                    lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
                    lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
                    lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
                    lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
                    lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
                    lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
                    lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
                    lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
                    lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
                    if (new EReg("(iPad|iPhone|iPod).*OS 8_", "gi").match(window.navigator.userAgent)) {
                        lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
                        lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
                        lime__$backend_html5_HTML5Window.textInput.style.height = "0px"
                    } else {
                        lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
                        lime__$backend_html5_HTML5Window.textInput.style.height = "1px"
                    }
                    lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
                    lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
                    window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput)
                }
                if (!this.enableTextEvents) {
                    lime__$backend_html5_HTML5Window.textInput.addEventListener("input", $bind(this, this.handleInputEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.addEventListener("blur", $bind(this, this.handleFocusEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.addEventListener("cut", $bind(this, this.handleCutOrCopyEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.addEventListener("copy", $bind(this, this.handleCutOrCopyEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.addEventListener("paste", $bind(this, this.handlePasteEvent), true)
                }
                lime__$backend_html5_HTML5Window.textInput.focus();
                lime__$backend_html5_HTML5Window.textInput.select()
            } else {
                if (lime__$backend_html5_HTML5Window.textInput != null) {
                    lime__$backend_html5_HTML5Window.textInput.removeEventListener("input", $bind(this, this.handleInputEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur", $bind(this, this.handleFocusEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut", $bind(this, this.handleCutOrCopyEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy", $bind(this, this.handleCutOrCopyEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste", $bind(this, this.handlePasteEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.blur()
                }
            }
            return this.enableTextEvents = value
        },
        setFullscreen: function(value) {
            return value
        },
        setIcon: function(image) {},
        setMaximized: function(value) {
            return false
        },
        setMinimized: function(value) {
            return false
        },
        setResizable: function(value) {
            return value
        },
        setTitle: function(value) {
            return value
        },
        updateSize: function() {
            var elementWidth;
            var elementHeight;
            if (this.element != null) {
                elementWidth = this.element.clientWidth;
                elementHeight = this.element.clientHeight
            } else {
                elementWidth = window.innerWidth;
                elementHeight = window.innerHeight
            }
            if (elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
                this.cacheElementWidth = elementWidth;
                this.cacheElementHeight = elementHeight;
                var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
                if (this.element != null && (this.div == null || this.div != null && stretch)) {
                    if (stretch) {
                        if (this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
                            this.parent.set_width(elementWidth);
                            this.parent.set_height(elementHeight);
                            if (this.canvas != null) {
                                if (this.element != this.canvas) {
                                    this.canvas.width = Math.round(elementWidth * this.scale);
                                    this.canvas.height = Math.round(elementHeight * this.scale);
                                    this.canvas.style.width = elementWidth + "px";
                                    this.canvas.style.height = elementHeight + "px"
                                }
                            } else {
                                this.div.style.width = elementWidth + "px";
                                this.div.style.height = elementHeight + "px"
                            }
                            this.parent.onResize.dispatch(elementWidth, elementHeight)
                        }
                    } else {
                        var scaleX;
                        if (this.setWidth != 0) {
                            scaleX = elementWidth / this.setWidth
                        } else {
                            scaleX = 1
                        }
                        var scaleY;
                        if (this.setHeight != 0) {
                            scaleY = elementHeight / this.setHeight
                        } else {
                            scaleY = 1
                        }
                        var targetWidth = elementWidth;
                        var targetHeight = elementHeight;
                        var marginLeft = 0;
                        var marginTop = 0;
                        if (scaleX < scaleY) {
                            targetHeight = Math.floor(this.setHeight * scaleX);
                            marginTop = Math.floor((elementHeight - targetHeight) / 2)
                        } else {
                            targetWidth = Math.floor(this.setWidth * scaleY);
                            marginLeft = Math.floor((elementWidth - targetWidth) / 2)
                        }
                        if (this.canvas != null) {
                            if (this.element != this.canvas) {
                                this.canvas.style.width = targetWidth + "px";
                                this.canvas.style.height = targetHeight + "px";
                                this.canvas.style.marginLeft = marginLeft + "px";
                                this.canvas.style.marginTop = marginTop + "px"
                            }
                        } else {
                            this.div.style.width = targetWidth + "px";
                            this.div.style.height = targetHeight + "px";
                            this.div.style.marginLeft = marginLeft + "px";
                            this.div.style.marginTop = marginTop + "px"
                        }
                    }
                }
            }
        },
        __class__: lime__$backend_html5_HTML5Window
    };
    var lime__$backend_native_NativeCFFI = function() {};
    $hxClasses["lime._backend.native.NativeCFFI"] = lime__$backend_native_NativeCFFI;
    lime__$backend_native_NativeCFFI.__name__ = ["lime", "_backend", "native", "NativeCFFI"];
    var lime__$macros_AssetsMacro = function() {};
    $hxClasses["lime._macros.AssetsMacro"] = lime__$macros_AssetsMacro;
    lime__$macros_AssetsMacro.__name__ = ["lime", "_macros", "AssetsMacro"];
    var lime_app_Event = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app.Event"] = lime_app_Event;
    lime_app_Event.__name__ = ["lime", "app", "Event"];
    lime_app_Event.prototype = {
        canceled: null,
        __listeners: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        dispatch: null,
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __class__: lime_app_Event
    };
    var lime_app_Future = function(work, async) {
        if (async == null) {
            async = false
        }
        if (work != null) {
            if (async) {
                var promise = new lime_app_Promise();
                promise.future = this;
                lime_app__$Future_FutureWork.queue({
                    promise: promise,
                    work: work
                })
            } else {
                try {
                    this.value = work();
                    this.isComplete = true
                } catch (e) {
                    haxe_CallStack.lastException = e;
                    if (e instanceof js__$Boot_HaxeError) {
                        e = e.val
                    }
                    this.error = e;
                    this.isError = true
                }
            }
        }
    };
    $hxClasses["lime.app.Future"] = lime_app_Future;
    lime_app_Future.__name__ = ["lime", "app", "Future"];
    lime_app_Future.ofEvents = function(onComplete, onError, onProgress) {
        var promise = new lime_app_Promise();
        onComplete.add(function(data) {
            promise.complete(data)
        }, true);
        if (onError != null) {
            onError.add(function(error) {
                promise.error(error)
            }, true)
        }
        if (onProgress != null) {
            onProgress.add(function(progress, total) {
                promise.progress(progress, total)
            }, true)
        }
        return promise.future
    };
    lime_app_Future.withError = function(error) {
        var future = new lime_app_Future();
        future.isError = true;
        future.error = error;
        return future
    };
    lime_app_Future.withValue = function(value) {
        var future = new lime_app_Future();
        future.isComplete = true;
        future.value = value;
        return future
    };
    lime_app_Future.prototype = {
        error: null,
        isComplete: null,
        isError: null,
        value: null,
        __completeListeners: null,
        __errorListeners: null,
        __progressListeners: null,
        onComplete: function(listener) {
            if (listener != null) {
                if (this.isComplete) {
                    listener(this.value)
                } else {
                    if (!this.isError) {
                        if (this.__completeListeners == null) {
                            this.__completeListeners = []
                        }
                        this.__completeListeners.push(listener)
                    }
                }
            }
            return this
        },
        onError: function(listener) {
            if (listener != null) {
                if (this.isError) {
                    listener(this.error)
                } else {
                    if (!this.isComplete) {
                        if (this.__errorListeners == null) {
                            this.__errorListeners = []
                        }
                        this.__errorListeners.push(listener)
                    }
                }
            }
            return this
        },
        onProgress: function(listener) {
            if (listener != null) {
                if (this.__progressListeners == null) {
                    this.__progressListeners = []
                }
                this.__progressListeners.push(listener)
            }
            return this
        },
        ready: function(waitTime) {
            if (waitTime == null) {
                waitTime = -1
            }
            if (this.isComplete || this.isError) {
                return this
            } else {
                lime_utils_Log.warn("Cannot block thread in JavaScript", {
                    fileName: "Future.hx",
                    lineNumber: 157,
                    className: "lime.app.Future",
                    methodName: "ready"
                });
                return this
            }
        },
        result: function(waitTime) {
            if (waitTime == null) {
                waitTime = -1
            }
            this.ready(waitTime);
            if (this.isComplete) {
                return this.value
            } else {
                return null
            }
        },
        then: function(next) {
            if (this.isComplete) {
                return next(this.value)
            } else {
                if (this.isError) {
                    var future = new lime_app_Future();
                    future.onError(this.error);
                    return future
                } else {
                    var promise = new lime_app_Promise();
                    this.onError($bind(promise, promise.error));
                    this.onProgress($bind(promise, promise.progress));
                    this.onComplete(function(val) {
                        var future1 = next(val);
                        future1.onError($bind(promise, promise.error));
                        future1.onComplete($bind(promise, promise.complete))
                    });
                    return promise.future
                }
            }
        },
        __class__: lime_app_Future
    };
    var lime_app__$Future_FutureWork = function() {};
    $hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
    lime_app__$Future_FutureWork.__name__ = ["lime", "app", "_Future", "FutureWork"];
    lime_app__$Future_FutureWork.queue = function(state) {
        if (lime_app__$Future_FutureWork.threadPool == null) {
            lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
            lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
            lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
            lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError)
        }
        lime_app__$Future_FutureWork.threadPool.queue(state)
    };
    lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
        try {
            var result = state.work();
            lime_app__$Future_FutureWork.threadPool.sendComplete({
                promise: state.promise,
                result: result
            })
        } catch (e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) {
                e = e.val
            }
            lime_app__$Future_FutureWork.threadPool.sendError({
                promise: state.promise,
                error: e
            })
        }
    };
    lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
        state.promise.complete(state.result)
    };
    lime_app__$Future_FutureWork.threadPool_onError = function(state) {
        state.promise.error(state.error)
    };
    var lime_app_Preloader = function() {
        this.bytesTotalCache = new haxe_ds_StringMap();
        this.bytesLoadedCache2 = new haxe_ds_StringMap();
        this.bytesLoadedCache = new haxe_ds_ObjectMap();
        this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
        this.onComplete = new lime_app__$Event_$Void_$Void();
        this.bytesLoaded = 0;
        this.bytesTotal = 0;
        this.libraries = [];
        this.libraryNames = [];
        this.onProgress.add($bind(this, this.update))
    };
    $hxClasses["lime.app.Preloader"] = lime_app_Preloader;
    lime_app_Preloader.__name__ = ["lime", "app", "Preloader"];
    lime_app_Preloader.prototype = {
        complete: null,
        onComplete: null,
        onProgress: null,
        bytesLoaded: null,
        bytesLoadedCache: null,
        bytesLoadedCache2: null,
        bytesTotal: null,
        bytesTotalCache: null,
        initLibraryNames: null,
        libraries: null,
        libraryNames: null,
        loadedLibraries: null,
        loadedStage: null,
        preloadComplete: null,
        preloadStarted: null,
        simulateProgress: null,
        addLibrary: function(library) {
            this.libraries.push(library)
        },
        addLibraryName: function(name) {
            if (HxOverrides.indexOf(this.libraryNames, name, 0) == -1) {
                this.libraryNames.push(name)
            }
        },
        create: function(config) {},
        load: function() {
            var _g2 = this;
            var _g = 0;
            var _g1 = this.libraries;
            while (_g < _g1.length) {
                var library = _g1[_g];
                ++_g;
                this.bytesTotal += library.bytesTotal
            }
            this.loadedLibraries = -1;
            this.preloadStarted = false;
            var _g3 = 0;
            var _g11 = this.libraries;
            while (_g3 < _g11.length) {
                var library1 = [_g11[_g3]];
                ++_g3;
                lime_utils_Log.verbose("Preloading asset library", {
                    fileName: "Preloader.hx",
                    lineNumber: 153,
                    className: "lime.app.Preloader",
                    methodName: "load"
                });
                library1[0].load().onProgress((function(library1) {
                    return function(loaded, total) {
                        if (!(_g2.bytesLoadedCache.h.__keys__[library1[0].__id__] != null)) {
                            _g2.bytesLoaded += loaded
                        } else {
                            _g2.bytesLoaded += loaded - _g2.bytesLoadedCache.h[library1[0].__id__]
                        }
                        _g2.bytesLoadedCache.set(library1[0], loaded);
                        if (!_g2.simulateProgress) {
                            _g2.onProgress.dispatch(_g2.bytesLoaded, _g2.bytesTotal)
                        }
                    }
                })(library1)).onComplete((function(library1) {
                    return function(_) {
                        if (!(_g2.bytesLoadedCache.h.__keys__[library1[0].__id__] != null)) {
                            _g2.bytesLoaded += library1[0].bytesTotal
                        } else {
                            _g2.bytesLoaded += library1[0].bytesTotal - _g2.bytesLoadedCache.h[library1[0].__id__]
                        }
                        _g2.loadedAssetLibrary()
                    }
                })(library1)).onError((function() {
                    return function(e) {
                        lime_utils_Log.error(e, {
                            fileName: "Preloader.hx",
                            lineNumber: 191,
                            className: "lime.app.Preloader",
                            methodName: "load"
                        })
                    }
                })())
            }
            var _g4 = 0;
            var _g12 = this.libraryNames;
            while (_g4 < _g12.length) {
                var name = _g12[_g4];
                ++_g4;
                this.bytesTotal += 200
            }
            this.loadedLibraries++;
            this.preloadStarted = true;
            this.updateProgress()
        },
        loadedAssetLibrary: function(name) {
            this.loadedLibraries++;
            var current = this.loadedLibraries;
            if (!this.preloadStarted) {
                current++
            }
            var totalLibraries = this.libraries.length + this.libraryNames.length;
            if (name != null) {
                lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]", {
                    fileName: "Preloader.hx",
                    lineNumber: 223,
                    className: "lime.app.Preloader",
                    methodName: "loadedAssetLibrary"
                })
            } else {
                lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]", {
                    fileName: "Preloader.hx",
                    lineNumber: 227,
                    className: "lime.app.Preloader",
                    methodName: "loadedAssetLibrary"
                })
            }
            this.updateProgress()
        },
        start: function() {
            if (this.complete) {
                return
            }
            this.complete = true;
            this.onComplete.dispatch()
        },
        update: function(loaded, total) {},
        updateProgress: function() {
            var _g2 = this;
            if (!this.simulateProgress) {
                this.onProgress.dispatch(this.bytesLoaded, this.bytesTotal)
            }
            if (this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
                this.initLibraryNames = true;
                var _g = 0;
                var _g1 = this.libraryNames;
                while (_g < _g1.length) {
                    var name = [_g1[_g]];
                    ++_g;
                    lime_utils_Log.verbose("Preloading asset library: " + name[0], {
                        fileName: "Preloader.hx",
                        lineNumber: 276,
                        className: "lime.app.Preloader",
                        methodName: "updateProgress"
                    });
                    lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
                        return function(loaded, total) {
                            if (total > 0) {
                                if (!_g2.bytesTotalCache.exists(name[0])) {
                                    _g2.bytesTotalCache.set(name[0], total);
                                    _g2.bytesTotal += total - 200
                                }
                                if (loaded > total) {
                                    loaded = total
                                }
                                if (!_g2.bytesLoadedCache2.exists(name[0])) {
                                    _g2.bytesLoaded += loaded
                                } else {
                                    _g2.bytesLoaded += loaded - _g2.bytesLoadedCache2.get(name[0])
                                }
                                _g2.bytesLoadedCache2.set(name[0], loaded);
                                if (!_g2.simulateProgress) {
                                    _g2.onProgress.dispatch(_g2.bytesLoaded, _g2.bytesTotal)
                                }
                            }
                        }
                    })(name)).onComplete((function(name) {
                        return function(library) {
                            var total1 = 200;
                            if (_g2.bytesTotalCache.exists(name[0])) {
                                total1 = _g2.bytesTotalCache.get(name[0])
                            }
                            if (!_g2.bytesLoadedCache2.exists(name[0])) {
                                _g2.bytesLoaded += total1
                            } else {
                                _g2.bytesLoaded += total1 - _g2.bytesLoadedCache2.get(name[0])
                            }
                            _g2.loadedAssetLibrary(name[0])
                        }
                    })(name)).onError((function() {
                        return function(e) {
                            lime_utils_Log.error(e, {
                                fileName: "Preloader.hx",
                                lineNumber: 335,
                                className: "lime.app.Preloader",
                                methodName: "updateProgress"
                            })
                        }
                    })())
                }
            }
            if (!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
                if (!this.preloadComplete) {
                    this.preloadComplete = true;
                    lime_utils_Log.verbose("Preload complete", {
                        fileName: "Preloader.hx",
                        lineNumber: 349,
                        className: "lime.app.Preloader",
                        methodName: "updateProgress"
                    })
                }
                this.start()
            }
        },
        __class__: lime_app_Preloader
    };
    var lime_app_Promise = function() {
        this.future = new lime_app_Future()
    };
    $hxClasses["lime.app.Promise"] = lime_app_Promise;
    lime_app_Promise.__name__ = ["lime", "app", "Promise"];
    lime_app_Promise.prototype = {
        future: null,
        isComplete: null,
        isError: null,
        complete: function(data) {
            if (!this.future.isError) {
                this.future.isComplete = true;
                this.future.value = data;
                if (this.future.__completeListeners != null) {
                    var _g = 0;
                    var _g1 = this.future.__completeListeners;
                    while (_g < _g1.length) {
                        var listener = _g1[_g];
                        ++_g;
                        listener(data)
                    }
                    this.future.__completeListeners = null
                }
            }
            return this
        },
        completeWith: function(future) {
            future.onComplete($bind(this, this.complete));
            future.onError($bind(this, this.error));
            future.onProgress($bind(this, this.progress));
            return this
        },
        error: function(msg) {
            if (!this.future.isComplete) {
                this.future.isError = true;
                this.future.error = msg;
                if (this.future.__errorListeners != null) {
                    var _g = 0;
                    var _g1 = this.future.__errorListeners;
                    while (_g < _g1.length) {
                        var listener = _g1[_g];
                        ++_g;
                        listener(msg)
                    }
                    this.future.__errorListeners = null
                }
            }
            return this
        },
        progress: function(progress, total) {
            if (!this.future.isError && !this.future.isComplete) {
                if (this.future.__progressListeners != null) {
                    var _g = 0;
                    var _g1 = this.future.__progressListeners;
                    while (_g < _g1.length) {
                        var listener = _g1[_g];
                        ++_g;
                        listener(progress, total)
                    }
                }
            }
            return this
        },
        get_isComplete: function() {
            return this.future.isComplete
        },
        get_isError: function() {
            return this.future.isError
        },
        __class__: lime_app_Promise,
        __properties__: {
            get_isError: "get_isError",
            get_isComplete: "get_isComplete"
        }
    };
    var lime_app__$Event_$Dynamic_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
    lime_app__$Event_$Dynamic_$Void.__name__ = ["lime", "app", "_Event_Dynamic_Void"];
    lime_app__$Event_$Dynamic_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Dynamic_$Void
    };
    var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
    lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime", "app", "_Event_Float_Float_Int_Void"];
    lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1, a2) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1, a2);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Float_$Float_$Int_$Void
    };
    var lime_app__$Event_$Float_$Float_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
    lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime", "app", "_Event_Float_Float_Void"];
    lime_app__$Event_$Float_$Float_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Float_$Float_$Void
    };
    var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
    lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime", "app", "_Event_Int_Float_Float_Void"];
    lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1, a2) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1, a2);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Int_$Float_$Float_$Void
    };
    var lime_app__$Event_$Int_$Float_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
    lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime", "app", "_Event_Int_Float_Void"];
    lime_app__$Event_$Int_$Float_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Int_$Float_$Void
    };
    var lime_app__$Event_$Int_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
    lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime", "app", "_Event_Int_Int_Void"];
    lime_app__$Event_$Int_$Int_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Int_$Int_$Void
    };
    var lime_app__$Event_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
    lime_app__$Event_$Int_$Void.__name__ = ["lime", "app", "_Event_Int_Void"];
    lime_app__$Event_$Int_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Int_$Void
    };
    var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
    lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime", "app", "_Event_Int_lime_ui_JoystickHatPosition_Void"];
    lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
    };
    var lime_app__$Event_$String_$Int_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
    lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime", "app", "_Event_String_Int_Int_Void"];
    lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1, a2) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1, a2);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$String_$Int_$Int_$Void
    };
    var lime_app__$Event_$String_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
    lime_app__$Event_$String_$Void.__name__ = ["lime", "app", "_Event_String_Void"];
    lime_app__$Event_$String_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$String_$Void
    };
    var lime_app__$Event_$Void_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
    lime_app__$Event_$Void_$Void.__name__ = ["lime", "app", "_Event_Void_Void"];
    lime_app__$Event_$Void_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function() {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i]();
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$Void_$Void
    };
    var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
    lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime", "app", "_Event_lime_graphics_RenderContext_Void"];
    lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
    };
    var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
    lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime", "app", "_Event_lime_ui_GamepadAxis_Float_Void"];
    lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
    };
    var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
    lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime", "app", "_Event_lime_ui_GamepadButton_Void"];
    lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
    };
    var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
    lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime", "app", "_Event_lime_ui_Gamepad_Void"];
    lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
    };
    var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
    lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime", "app", "_Event_lime_ui_Joystick_Void"];
    lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
    };
    var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
    lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime", "app", "_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
    lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
    };
    var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
    lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime", "app", "_Event_lime_ui_Touch_Void"];
    lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$lime_$ui_$Touch_$Void
    };
    var lime_app__$Event_$ofEvents_$T_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = []
    };
    $hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
    lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime", "app", "_Event_ofEvents_T_Void"];
    lime_app__$Event_$ofEvents_$T_$Void.prototype = {
        canceled: null,
        __repeat: null,
        __priorities: null,
        add: function(listener, once, priority) {
            if (priority == null) {
                priority = 0
            }
            if (once == null) {
                once = false
            }
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once)
        },
        cancel: function() {
            this.canceled = true
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g];
                ++_g;
                if (Reflect.compareMethods(l, listener)) {
                    return true
                }
            }
            return false
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) {
                if (Reflect.compareMethods(this.__listeners[i], listener)) {
                    this.__listeners.splice(i, 1);
                    this.__priorities.splice(i, 1);
                    this.__repeat.splice(i, 1)
                }
            }
        },
        __listeners: null,
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) {
                    this.remove(listeners[i])
                } else {
                    i++
                }
                if (this.canceled) {
                    break
                }
            }
        },
        __class__: lime_app__$Event_$ofEvents_$T_$Void
    };
    var lime_graphics_ConsoleRenderContext = function() {};
    $hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
    lime_graphics_ConsoleRenderContext.__name__ = ["lime", "graphics", "ConsoleRenderContext"];
    lime_graphics_ConsoleRenderContext.prototype = {
        createIndexBuffer: function(indices, count) {
            return new lime_graphics_console_IndexBuffer()
        },
        createVertexBuffer: function(decl, count) {
            return new lime_graphics_console_VertexBuffer()
        },
        lookupShader: function(name) {
            return new lime_graphics_console_Shader()
        },
        clear: function(r, g, b, a, depth, stencil) {
            if (stencil == null) {
                stencil = 0
            }
            if (depth == null) {
                depth = 1
            }
        },
        bindShader: function(shader) {},
        setViewport: function(x, y, width, height, nearPlane, farPlane) {
            if (farPlane == null) {
                farPlane = 1
            }
            if (nearPlane == null) {
                nearPlane = 0
            }
        },
        setVertexShaderConstantF: function(startRegister, vec4, vec4count) {},
        setVertexSource: function(vb) {},
        setIndexSource: function(ib) {},
        draw: function(primitive, startVertex, primitiveCount) {},
        drawIndexed: function(primitive, vertexCount, startIndex, primitiveCount) {},
        get_width: function() {
            return 0
        },
        get_height: function() {
            return 0
        },
        __class__: lime_graphics_ConsoleRenderContext,
        __properties__: {
            get_height: "get_height",
            get_width: "get_width"
        }
    };
    var lime_graphics_FlashRenderContext = function() {};
    $hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
    lime_graphics_FlashRenderContext.__name__ = ["lime", "graphics", "FlashRenderContext"];
    lime_graphics_FlashRenderContext.prototype = {
        accessibilityImplementation: null,
        accessibilityProperties: null,
        alpha: null,
        blendMode: null,
        blendShader: null,
        buttonMode: null,
        cacheAsBitmap: null,
        contextMenu: null,
        doubleClickEnabled: null,
        dropTarget: null,
        filters: null,
        focusRect: null,
        graphics: null,
        height: null,
        hitArea: null,
        loaderInfo: null,
        mask: null,
        mouseChildren: null,
        mouseEnabled: null,
        mouseX: null,
        mouseY: null,
        name: null,
        needsSoftKeyboard: null,
        numChildren: null,
        opaqueBackground: null,
        parent: null,
        root: null,
        rotation: null,
        rotationX: null,
        rotationY: null,
        rotationZ: null,
        scale9Grid: null,
        scaleX: null,
        scaleY: null,
        scaleZ: null,
        scrollRect: null,
        softKeyboardInputAreaOfInterest: null,
        soundTransform: null,
        stage: null,
        tabChildren: null,
        tabEnabled: null,
        tabIndex: null,
        textSnapshot: null,
        transform: null,
        useHandCursor: null,
        visible: null,
        width: null,
        x: null,
        y: null,
        z: null,
        addChild: function(child) {
            return null
        },
        addChildAt: function(child, index) {
            return null
        },
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) {
                useWeakReference = false
            }
            if (priority == null) {
                priority = 0
            }
            if (useCapture == null) {
                useCapture = false
            }
        },
        areInaccessibleObjectsUnderPoint: function(point) {
            return false
        },
        contains: function(child) {
            return false
        },
        dispatchEvent: function(event) {
            return false
        },
        getBounds: function(targetCoordinateSpace) {
            return null
        },
        getChildAt: function(index) {
            return null
        },
        getChildByName: function(name) {
            return null
        },
        getChildIndex: function(child) {
            return 0
        },
        getObjectsUnderPoint: function(point) {
            return null
        },
        getRect: function(targetCoordinateSpace) {
            return null
        },
        globalToLocal: function(point) {
            return null
        },
        globalToLocal3D: function(point) {
            return null
        },
        hasEventListener: function(type) {
            return false
        },
        hitTestObject: function(obj) {
            return false
        },
        hitTestPoint: function(x, y, shapeFlag) {
            if (shapeFlag == null) {
                shapeFlag = false
            }
            return false
        },
        local3DToGlobal: function(point3d) {
            return null
        },
        localToGlobal: function(point) {
            return null
        },
        removeChild: function(child) {
            return null
        },
        removeChildAt: function(index) {
            return null
        },
        removeChildren: function(beginIndex, endIndex) {
            if (endIndex == null) {
                endIndex = 2147483647
            }
            if (beginIndex == null) {
                beginIndex = 0
            }
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) {
                useCapture = false
            }
        },
        requestSoftKeyboard: function() {
            return false
        },
        setChildIndex: function(child, index) {},
        startDrag: function(lockCenter, bounds) {
            if (lockCenter == null) {
                lockCenter = false
            }
        },
        startTouchDrag: function(touchPointID, lockCenter, bounds) {
            if (lockCenter == null) {
                lockCenter = false
            }
        },
        stopAllMovieClips: function() {},
        stopDrag: function() {},
        stopTouchDrag: function(touchPointID) {},
        swapChildren: function(child1, child2) {},
        swapChildrenAt: function(index1, index2) {},
        toString: function() {
            return null
        },
        willTrigger: function(type) {
            return false
        },
        __class__: lime_graphics_FlashRenderContext
    };
    var lime_graphics_Image = function(buffer, offsetX, offsetY, width, height, color, type) {
        if (height == null) {
            height = -1
        }
        if (width == null) {
            width = -1
        }
        if (offsetY == null) {
            offsetY = 0
        }
        if (offsetX == null) {
            offsetX = 0
        }
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.width = width;
        this.height = height;
        this.version = 0;
        if (type == null) {
            if (lime_app_Application.current != null && lime_app_Application.current.__renderers[0] != null) {
                var _g = lime_app_Application.current.__renderers[0].context;
                switch (_g[1]) {
                    case 2:
                    case 1:
                        this.type = lime_graphics_ImageType.CANVAS;
                        break;
                    case 3:
                        this.type = lime_graphics_ImageType.FLASH;
                        break;
                    default:
                        this.type = lime_graphics_ImageType.DATA
                }
            } else {
                this.type = lime_graphics_ImageType.DATA
            }
        } else {
            this.type = type
        }
        if (buffer == null) {
            if (width > 0 && height > 0) {
                var _g1 = this.type;
                switch (_g1[1]) {
                    case 0:
                        this.buffer = new lime_graphics_ImageBuffer(null, width, height);
                        lime_graphics_utils_ImageCanvasUtil.createCanvas(this, width, height);
                        if (color != null) {
                            this.fillRect(new lime_math_Rectangle(0, 0, width, height), color)
                        }
                        break;
                    case 1:
                        this.buffer = new lime_graphics_ImageBuffer((function($this) {
                            var $r;
                            var elements = width * height * 4;
                            var this1;
                            if (elements != null) {
                                this1 = new Uint8Array(elements)
                            } else {
                                this1 = null
                            }
                            $r = this1;
                            return $r
                        }(this)), width, height);
                        if (color != null) {
                            this.fillRect(new lime_math_Rectangle(0, 0, width, height), color)
                        }
                        break;
                    case 2:
                        break;
                    default:
                }
            }
        } else {
            this.__fromImageBuffer(buffer)
        }
    };
    $hxClasses["lime.graphics.Image"] = lime_graphics_Image;
    lime_graphics_Image.__name__ = ["lime", "graphics", "Image"];
    lime_graphics_Image.fromBase64 = function(base64, type) {
        if (base64 == null) {
            return null
        }
        var image = new lime_graphics_Image();
        image.__fromBase64(base64, type);
        return image
    };
    lime_graphics_Image.fromBitmapData = function(bitmapData) {
        if (bitmapData == null) {
            return null
        }
        return bitmapData.image
    };
    lime_graphics_Image.fromBytes = function(bytes) {
        if (bytes == null) {
            return null
        }
        var image = new lime_graphics_Image();
        image.__fromBytes(bytes);
        return image
    };
    lime_graphics_Image.fromCanvas = function(canvas) {
        if (canvas == null) {
            return null
        }
        var buffer = new lime_graphics_ImageBuffer(null, canvas.width, canvas.height);
        buffer.set_src(canvas);
        var image = new lime_graphics_Image(buffer);
        image.type = lime_graphics_ImageType.CANVAS;
        return image
    };
    lime_graphics_Image.fromFile = function(path) {
        if (path == null) {
            return null
        }
        var image = new lime_graphics_Image();
        image.__fromFile(path);
        return image
    };
    lime_graphics_Image.fromImageElement = function(image) {
        if (image == null) {
            return null
        }
        var buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
        buffer.set_src(image);
        var _image = new lime_graphics_Image(buffer);
        _image.type = lime_graphics_ImageType.CANVAS;
        return _image
    };
    lime_graphics_Image.loadFromBase64 = function(base64, type) {
        if (base64 == null || type == null) {
            return lime_app_Future.withValue(null)
        }
        return lime__$backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64)
    };
    lime_graphics_Image.loadFromBytes = function(bytes) {
        if (bytes == null) {
            return lime_app_Future.withValue(null)
        }
        var type = "";
        if (lime_graphics_Image.__isPNG(bytes)) {
            type = "image/png"
        } else {
            if (lime_graphics_Image.__isJPG(bytes)) {
                type = "image/jpeg"
            } else {
                if (lime_graphics_Image.__isGIF(bytes)) {
                    type = "image/gif"
                } else {
                    if (lime_graphics_Image.__isWebP(bytes)) {
                        type = "image/webp"
                    } else {
                        return lime_app_Future.withValue(null)
                    }
                }
            }
        }
        return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes), type)
    };
    lime_graphics_Image.loadFromFile = function(path) {
        if (path == null) {
            return lime_app_Future.withValue(null)
        }
        return lime__$backend_html5_HTML5HTTPRequest.loadImage(path)
    };
    lime_graphics_Image.__base64Encode = function(bytes) {
        var extension;
        var _g = bytes.length % 3;
        switch (_g) {
            case 1:
                extension = "==";
                break;
            case 2:
                extension = "=";
                break;
            default:
                extension = ""
        }
        if (lime_graphics_Image.__base64Encoder == null) {
            lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars))
        }
        return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension
    };
    lime_graphics_Image.__isGIF = function(bytes) {
        if (bytes == null || bytes.length < 6) {
            return false
        }
        var header = bytes.getString(0, 6);
        return header == "GIF87a" || header == "GIF89a"
    };
    lime_graphics_Image.__isJPG = function(bytes) {
        if (bytes == null || bytes.length < 4) {
            return false
        }
        return bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255 && bytes.b[bytes.length - 1] == 217
    };
    lime_graphics_Image.__isPNG = function(bytes) {
        if (bytes == null || bytes.length < 8) {
            return false
        }
        return bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10
    };
    lime_graphics_Image.__isWebP = function(bytes) {
        if (bytes == null || bytes.length < 16) {
            return false
        }
        return bytes.getString(0, 4) == "RIFF" && bytes.getString(8, 4) == "WEBP"
    };
    lime_graphics_Image.prototype = {
        buffer: null,
        dirty: null,
        height: null,
        offsetX: null,
        offsetY: null,
        rect: null,
        type: null,
        version: null,
        width: null,
        x: null,
        y: null,
        clone: function() {
            if (this.buffer != null) {
                if (this.type == lime_graphics_ImageType.CANVAS) {
                    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this)
                } else {
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this)
                }
                var image = new lime_graphics_Image(this.buffer.clone(), this.offsetX, this.offsetY, this.width, this.height, null, this.type);
                image.version = this.version;
                return image
            } else {
                return new lime_graphics_Image(null, this.offsetX, this.offsetY, this.width, this.height, null, this.type)
            }
        },
        colorTransform: function(rect, colorMatrix) {
            rect = this.__clipRect(rect);
            if (this.buffer == null || rect == null) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.colorTransform(this, rect, colorMatrix);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageDataUtil.colorTransform(this, rect, colorMatrix);
                    break;
                case 2:
                    rect.offset(this.offsetX, this.offsetY);
                    this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(), lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
                    break;
                default:
            }
        },
        copyChannel: function(sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
            sourceRect = this.__clipRect(sourceRect);
            if (this.buffer == null || sourceRect == null) {
                return
            }
            if (destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
                return
            }
            if (sourceRect.width <= 0 || sourceRect.height <= 0) {
                return
            }
            if (sourceRect.x + sourceRect.width > sourceImage.width) {
                sourceRect.width = sourceImage.width - sourceRect.x
            }
            if (sourceRect.y + sourceRect.height > sourceImage.height) {
                sourceRect.height = sourceImage.height - sourceRect.y
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.copyChannel(this, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
                    lime_graphics_utils_ImageDataUtil.copyChannel(this, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
                    break;
                case 2:
                    var srcChannel;
                    switch (sourceChannel[1]) {
                        case 0:
                            srcChannel = 1;
                            break;
                        case 1:
                            srcChannel = 2;
                            break;
                        case 2:
                            srcChannel = 4;
                            break;
                        case 3:
                            srcChannel = 8;
                            break
                    }
                    var dstChannel;
                    switch (destChannel[1]) {
                        case 0:
                            dstChannel = 1;
                            break;
                        case 1:
                            dstChannel = 2;
                            break;
                        case 2:
                            dstChannel = 4;
                            break;
                        case 3:
                            dstChannel = 8;
                            break
                    }
                    sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
                    destPoint.offset(this.offsetX, this.offsetY);
                    this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(), sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), srcChannel, dstChannel);
                    break;
                default:
            }
        },
        copyPixels: function(sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
            if (mergeAlpha == null) {
                mergeAlpha = false
            }
            if (this.buffer == null || sourceImage == null) {
                return
            }
            if (sourceRect.width <= 0 || sourceRect.height <= 0) {
                return
            }
            if (this.width <= 0 || this.height <= 0) {
                return
            }
            if (sourceRect.x + sourceRect.width > sourceImage.width) {
                sourceRect.width = sourceImage.width - sourceRect.x
            }
            if (sourceRect.y + sourceRect.height > sourceImage.height) {
                sourceRect.height = sourceImage.height - sourceRect.y
            }
            if (sourceRect.x < 0) {
                sourceRect.width += sourceRect.x;
                sourceRect.x = 0
            }
            if (sourceRect.y < 0) {
                sourceRect.height += sourceRect.y;
                sourceRect.y = 0
            }
            if (destPoint.x + sourceRect.width > this.width) {
                sourceRect.width = this.width - destPoint.x
            }
            if (destPoint.y + sourceRect.height > this.height) {
                sourceRect.height = this.height - destPoint.y
            }
            if (destPoint.x < 0) {
                sourceRect.width += destPoint.x;
                sourceRect.x -= destPoint.x;
                destPoint.x = 0
            }
            if (destPoint.y < 0) {
                sourceRect.height += destPoint.y;
                sourceRect.y -= destPoint.y;
                destPoint.y = 0
            }
            if (sourceImage == this) {
                sourceImage = this.clone()
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
                    lime_graphics_utils_ImageCanvasUtil.copyPixels(this, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
                    lime_graphics_utils_ImageDataUtil.copyPixels(this, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha);
                    break;
                case 2:
                    sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
                    destPoint.offset(this.offsetX, this.offsetY);
                    if (alphaImage != null && alphaPoint != null) {
                        alphaPoint.offset(alphaImage.offsetX, alphaImage.offsetY)
                    }
                    this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData, sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), alphaImage != null ? alphaImage.buffer.get_src() : null, alphaPoint != null ? alphaPoint.__toFlashPoint() : null, mergeAlpha);
                    break;
                default:
            }
        },
        encode: function(format, quality) {
            if (quality == null) {
                quality = 90
            }
            if (format == null) {
                format = "png"
            }
            switch (format) {
                case "png":
                    return lime_graphics_format_PNG.encode(this);
                case "jpg":
                case "jpeg":
                    return lime_graphics_format_JPEG.encode(this, quality);
                case "bmp":
                    return lime_graphics_format_BMP.encode(this);
                default:
            }
            return null
        },
        fillRect: function(rect, color, format) {
            rect = this.__clipRect(rect);
            if (this.buffer == null || rect == null) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.fillRect(this, rect, color, format);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    if (this.buffer.data.length == 0) {
                        return
                    }
                    lime_graphics_utils_ImageDataUtil.fillRect(this, rect, color, format);
                    break;
                case 2:
                    rect.offset(this.offsetX, this.offsetY);
                    var argb;
                    if (format != null) {
                        switch (format) {
                            case 1:
                                argb = color;
                                break;
                            case 2:
                                var bgra = color;
                                var argb1 = 0;
                                argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                                argb = argb1;
                                break;
                            default:
                                var rgba = color;
                                var argb2 = 0;
                                argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                                argb = argb2
                        }
                    } else {
                        var rgba1 = color;
                        var argb3 = 0;
                        argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                        argb = argb3
                    }
                    this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(), argb);
                    break;
                default:
            }
        },
        floodFill: function(x, y, color, format) {
            if (this.buffer == null) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.floodFill(this, x, y, color, format);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageDataUtil.floodFill(this, x, y, color, format);
                    break;
                case 2:
                    var argb;
                    if (format != null) {
                        switch (format) {
                            case 1:
                                argb = color;
                                break;
                            case 2:
                                var bgra = color;
                                var argb1 = 0;
                                argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                                argb = argb1;
                                break;
                            default:
                                var rgba = color;
                                var argb2 = 0;
                                argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                                argb = argb2
                        }
                    } else {
                        var rgba1 = color;
                        var argb3 = 0;
                        argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                        argb = argb3
                    }
                    this.buffer.__srcBitmapData.floodFill(x + this.offsetX, y + this.offsetY, argb);
                    break;
                default:
            }
        },
        getColorBoundsRect: function(mask, color, findColor, format) {
            if (findColor == null) {
                findColor = true
            }
            if (this.buffer == null) {
                return null
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this, mask, color, findColor, format);
                case 1:
                    return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this, mask, color, findColor, format);
                case 2:
                    var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask, color, findColor);
                    return new lime_math_Rectangle(rect.x, rect.y, rect.width, rect.height);
                default:
                    return null
            }
        },
        getPixel: function(x, y, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
                return 0
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    return lime_graphics_utils_ImageCanvasUtil.getPixel(this, x, y, format);
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    return lime_graphics_utils_ImageDataUtil.getPixel(this, x, y, format);
                case 2:
                    var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX, y + this.offsetY);
                    if (format != null) {
                        switch (format) {
                            case 1:
                                return color;
                            case 2:
                                var bgra;
                                var bgra1 = 0;
                                bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
                                bgra = bgra1;
                                return bgra;
                            default:
                                var rgba;
                                var rgba1 = 0;
                                rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                                rgba = rgba1;
                                return rgba
                        }
                    } else {
                        var rgba2;
                        var rgba3 = 0;
                        rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        rgba2 = rgba3;
                        return rgba2
                    }
                    break;
                default:
                    return 0
            }
        },
        getPixel32: function(x, y, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
                return 0
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    return lime_graphics_utils_ImageCanvasUtil.getPixel32(this, x, y, format);
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    return lime_graphics_utils_ImageDataUtil.getPixel32(this, x, y, format);
                case 2:
                    var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX, y + this.offsetY);
                    if (format != null) {
                        switch (format) {
                            case 1:
                                return color;
                            case 2:
                                var bgra;
                                var bgra1 = 0;
                                bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
                                bgra = bgra1;
                                return bgra;
                            default:
                                var rgba;
                                var rgba1 = 0;
                                rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                                rgba = rgba1;
                                return rgba
                        }
                    } else {
                        var rgba2;
                        var rgba3 = 0;
                        rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        rgba2 = rgba3;
                        return rgba2
                    }
                    break;
                default:
                    return 0
            }
        },
        getPixels: function(rect, format) {
            if (this.buffer == null) {
                return null
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    return lime_graphics_utils_ImageCanvasUtil.getPixels(this, rect, format);
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    return lime_graphics_utils_ImageDataUtil.getPixels(this, rect, format);
                case 2:
                    return null;
                default:
                    return null
            }
        },
        merge: function(sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
            if (this.buffer == null || sourceImage == null) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
                    lime_graphics_utils_ImageCanvasUtil.merge(this, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
                    lime_graphics_utils_ImageDataUtil.merge(this, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
                    break;
                case 2:
                    sourceRect.offset(this.offsetX, this.offsetY);
                    this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData, sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
                    break;
                default:
                    return
            }
        },
        resize: function(newWidth, newHeight) {
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.resize(this, newWidth, newHeight);
                    break;
                case 1:
                    lime_graphics_utils_ImageDataUtil.resize(this, newWidth, newHeight);
                    break;
                case 2:
                    break;
                default:
            }
            this.buffer.width = newWidth;
            this.buffer.height = newHeight;
            this.offsetX = 0;
            this.offsetY = 0;
            this.width = newWidth;
            this.height = newHeight
        },
        scroll: function(x, y) {
            if (this.buffer == null) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.scroll(this, x, y);
                    break;
                case 1:
                    this.copyPixels(this, this.get_rect(), new lime_math_Vector2(x, y));
                    break;
                case 2:
                    this.buffer.__srcBitmapData.scroll(x + this.offsetX, y + this.offsetX);
                    break;
                default:
            }
        },
        setPixel: function(x, y, color, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.setPixel(this, x, y, color, format);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageDataUtil.setPixel(this, x, y, color, format);
                    break;
                case 2:
                    var argb;
                    if (format != null) {
                        switch (format) {
                            case 1:
                                argb = color;
                                break;
                            case 2:
                                var bgra = color;
                                var argb1 = 0;
                                argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                                argb = argb1;
                                break;
                            default:
                                var rgba = color;
                                var argb2 = 0;
                                argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                                argb = argb2
                        }
                    } else {
                        var rgba1 = color;
                        var argb3 = 0;
                        argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                        argb = argb3
                    }
                    this.buffer.__srcBitmapData.setPixel(x + this.offsetX, y + this.offsetX, argb);
                    break;
                default:
            }
        },
        setPixel32: function(x, y, color, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.setPixel32(this, x, y, color, format);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageDataUtil.setPixel32(this, x, y, color, format);
                    break;
                case 2:
                    var argb;
                    if (format != null) {
                        switch (format) {
                            case 1:
                                argb = color;
                                break;
                            case 2:
                                var bgra = color;
                                var argb1 = 0;
                                argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                                argb = argb1;
                                break;
                            default:
                                var rgba = color;
                                var argb2 = 0;
                                argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                                argb = argb2
                        }
                    } else {
                        var rgba1 = color;
                        var argb3 = 0;
                        argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                        argb = argb3
                    }
                    this.buffer.__srcBitmapData.setPixel32(x + this.offsetX, y + this.offsetY, argb);
                    break;
                default:
            }
        },
        setPixels: function(rect, bytes, format) {
            rect = this.__clipRect(rect);
            if (this.buffer == null || rect == null) {
                return
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                    lime_graphics_utils_ImageCanvasUtil.setPixels(this, rect, bytes, format);
                    break;
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageDataUtil.setPixels(this, rect, bytes, format);
                    break;
                case 2:
                    break;
                default:
            }
        },
        threshold: function(sourceImage, sourceRect, destPoint, operation, threshold, color, mask, copySource, format) {
            if (copySource == null) {
                copySource = false
            }
            if (mask == null) {
                mask = -1
            }
            if (color == null) {
                color = 0
            }
            if (this.buffer == null || sourceImage == null || sourceRect == null) {
                return 0
            }
            var _g = this.type;
            switch (_g[1]) {
                case 0:
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
                    return lime_graphics_utils_ImageDataUtil.threshold(this, sourceImage, sourceRect, destPoint, operation, threshold, color, mask, copySource, format);
                case 2:
                    var _color;
                    if (format != null) {
                        switch (format) {
                            case 1:
                                _color = color;
                                break;
                            case 2:
                                var bgra = color;
                                var argb = 0;
                                argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                                _color = argb;
                                break;
                            default:
                                var rgba = color;
                                var argb1 = 0;
                                argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                                _color = argb1
                        }
                    } else {
                        var rgba1 = color;
                        var argb2 = 0;
                        argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                        _color = argb2
                    }
                    var _mask;
                    if (format != null) {
                        switch (format) {
                            case 1:
                                _mask = mask;
                                break;
                            case 2:
                                var bgra1 = mask;
                                var argb3 = 0;
                                argb3 = (bgra1 & 255 & 255) << 24 | (bgra1 >> 8 & 255 & 255) << 16 | (bgra1 >> 16 & 255 & 255) << 8 | bgra1 >> 24 & 255 & 255;
                                _mask = argb3;
                                break;
                            default:
                                var rgba2 = mask;
                                var argb4 = 0;
                                argb4 = (rgba2 & 255 & 255) << 24 | (rgba2 >> 24 & 255 & 255) << 16 | (rgba2 >> 16 & 255 & 255) << 8 | rgba2 >> 8 & 255 & 255;
                                _mask = argb4
                        }
                    } else {
                        var rgba3 = mask;
                        var argb5 = 0;
                        argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >> 24 & 255 & 255) << 16 | (rgba3 >> 16 & 255 & 255) << 8 | rgba3 >> 8 & 255 & 255;
                        _mask = argb5
                    }
                    sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
                    destPoint.offset(this.offsetX, this.offsetY);
                    return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(), sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), operation, threshold, _color, _mask, copySource);
                default:
            }
            return 0
        },
        __clipRect: function(r) {
            if (r == null) {
                return null
            }
            if (r.x < 0) {
                r.width -= -r.x;
                r.x = 0;
                if (r.x + r.width <= 0) {
                    return null
                }
            }
            if (r.y < 0) {
                r.height -= -r.y;
                r.y = 0;
                if (r.y + r.height <= 0) {
                    return null
                }
            }
            if (r.x + r.width >= this.width) {
                r.width -= r.x + r.width - this.width;
                if (r.width <= 0) {
                    return null
                }
            }
            if (r.y + r.height >= this.height) {
                r.height -= r.y + r.height - this.height;
                if (r.height <= 0) {
                    return null
                }
            }
            return r
        },
        __fromBase64: function(base64, type, onload) {
            var _g = this;
            var image = new Image();
            var image_onLoaded = function(event) {
                _g.buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
                _g.buffer.__srcImage = image;
                _g.offsetX = 0;
                _g.offsetY = 0;
                _g.width = _g.buffer.width;
                _g.height = _g.buffer.height;
                if (onload != null) {
                    onload(_g)
                }
            };
            image.addEventListener("load", image_onLoaded, false);
            image.src = "data:" + type + ";base64," + base64
        },
        __fromBytes: function(bytes, onload) {
            var type = "";
            if (lime_graphics_Image.__isPNG(bytes)) {
                type = "image/png"
            } else {
                if (lime_graphics_Image.__isJPG(bytes)) {
                    type = "image/jpeg"
                } else {
                    if (lime_graphics_Image.__isGIF(bytes)) {
                        type = "image/gif"
                    } else {
                        return
                    }
                }
            }
            this.__fromBase64(lime_graphics_Image.__base64Encode(bytes), type, onload)
        },
        __fromFile: function(path, onload, onerror) {
            var _g = this;
            var image = new Image();
            image.crossOrigin = "Anonymous";
            image.onload = function(_) {
                _g.buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
                _g.buffer.__srcImage = image;
                _g.width = image.width;
                _g.height = image.height;
                if (onload != null) {
                    onload(_g)
                }
            };
            image.onerror = function(_1) {
                if (onerror != null) {
                    onerror()
                }
            };
            image.src = path;
            if (image.complete) {}
        },
        __fromImageBuffer: function(buffer) {
            this.buffer = buffer;
            if (buffer != null) {
                if (this.width == -1) {
                    this.width = buffer.width
                }
                if (this.height == -1) {
                    this.height = buffer.height
                }
            }
        },
        get_data: function() {
            if (this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
                lime_graphics_utils_ImageCanvasUtil.convertToData(this)
            }
            return this.buffer.data
        },
        set_data: function(value) {
            return this.buffer.data = value
        },
        get_format: function() {
            return this.buffer.format
        },
        set_format: function(value) {
            if (this.buffer.format != value) {
                var _g = this.type;
                switch (_g[1]) {
                    case 1:
                        lime_graphics_utils_ImageDataUtil.setFormat(this, value);
                        break;
                    default:
                }
            }
            return this.buffer.format = value
        },
        get_powerOfTwo: function() {
            return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height)
        },
        set_powerOfTwo: function(value) {
            if (value != this.get_powerOfTwo()) {
                var newWidth = 1;
                var newHeight = 1;
                while (newWidth < this.buffer.width) {
                    newWidth <<= 1
                }
                while (newHeight < this.buffer.height) {
                    newHeight <<= 1
                }
                var _g = this.type;
                switch (_g[1]) {
                    case 0:
                        break;
                    case 1:
                        lime_graphics_utils_ImageDataUtil.resizeBuffer(this, newWidth, newHeight);
                        break;
                    case 2:
                        break;
                    default:
                }
            }
            return value
        },
        get_premultiplied: function() {
            return this.buffer.premultiplied
        },
        set_premultiplied: function(value) {
            if (value && !this.buffer.premultiplied) {
                var _g = this.type;
                switch (_g[1]) {
                    case 0:
                    case 1:
                        lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                        lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
                        break;
                    default:
                }
            } else {
                if (!value && this.buffer.premultiplied) {
                    var _g1 = this.type;
                    switch (_g1[1]) {
                        case 1:
                            lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                            lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
                            break;
                        default:
                    }
                }
            }
            return value
        },
        get_rect: function() {
            return new lime_math_Rectangle(0, 0, this.width, this.height)
        },
        get_src: function() {
            if (this.buffer.__srcCanvas == null) {
                lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this)
            }
            return this.buffer.get_src()
        },
        set_src: function(value) {
            return this.buffer.set_src(value)
        },
        get_transparent: function() {
            if (this.buffer == null) {
                return false
            }
            return this.buffer.transparent
        },
        set_transparent: function(value) {
            if (this.buffer == null) {
                return false
            }
            return this.buffer.transparent = value
        },
        __class__: lime_graphics_Image,
        __properties__: {
            set_transparent: "set_transparent",
            get_transparent: "get_transparent",
            set_src: "set_src",
            get_src: "get_src",
            get_rect: "get_rect",
            set_premultiplied: "set_premultiplied",
            get_premultiplied: "get_premultiplied",
            set_powerOfTwo: "set_powerOfTwo",
            get_powerOfTwo: "get_powerOfTwo",
            set_format: "set_format",
            get_format: "get_format",
            set_data: "set_data",
            get_data: "get_data"
        }
    };
    var lime_graphics_ImageBuffer = function(data, width, height, bitsPerPixel, format) {
        if (bitsPerPixel == null) {
            bitsPerPixel = 32
        }
        if (height == null) {
            height = 0
        }
        if (width == null) {
            width = 0
        }
        this.data = data;
        this.width = width;
        this.height = height;
        this.bitsPerPixel = bitsPerPixel;
        if (format == null) {
            this.format = 0
        } else {
            this.format = format
        }
        this.premultiplied = false;
        this.transparent = true
    };
    $hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
    lime_graphics_ImageBuffer.__name__ = ["lime", "graphics", "ImageBuffer"];
    lime_graphics_ImageBuffer.prototype = {
        bitsPerPixel: null,
        data: null,
        format: null,
        height: null,
        premultiplied: null,
        transparent: null,
        width: null,
        __srcBitmapData: null,
        __srcCanvas: null,
        __srcContext: null,
        __srcCustom: null,
        __srcImage: null,
        __srcImageData: null,
        clone: function() {
            var buffer = new lime_graphics_ImageBuffer(this.data, this.width, this.height, this.bitsPerPixel);
            if (this.data != null) {
                var elements = this.data.byteLength;
                var this1;
                if (elements != null) {
                    this1 = new Uint8Array(elements)
                } else {
                    this1 = null
                }
                buffer.data = this1;
                var copy;
                var view = this.data;
                var this2;
                if (view != null) {
                    this2 = new Uint8Array(view)
                } else {
                    this2 = null
                }
                copy = this2;
                buffer.data.set(copy)
            } else {
                if (this.__srcImageData != null) {
                    buffer.__srcCanvas = window.document.createElement("canvas");
                    buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
                    buffer.__srcCanvas.width = this.__srcImageData.width;
                    buffer.__srcCanvas.height = this.__srcImageData.height;
                    buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width, this.__srcImageData.height);
                    var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
                    buffer.__srcImageData.data.set(copy1)
                } else {
                    if (this.__srcCanvas != null) {
                        buffer.__srcCanvas = window.document.createElement("canvas");
                        buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
                        buffer.__srcCanvas.width = this.__srcCanvas.width;
                        buffer.__srcCanvas.height = this.__srcCanvas.height;
                        buffer.__srcContext.drawImage(this.__srcCanvas, 0, 0)
                    } else {
                        buffer.__srcImage = this.__srcImage
                    }
                }
            }
            buffer.bitsPerPixel = this.bitsPerPixel;
            buffer.format = this.format;
            buffer.premultiplied = this.premultiplied;
            buffer.transparent = this.transparent;
            return buffer
        },
        get_src: function() {
            if (this.__srcImage != null) {
                return this.__srcImage
            }
            return this.__srcCanvas
        },
        set_src: function(value) {
            if (js_Boot.__instanceof(value, Image)) {
                this.__srcImage = value
            } else {
                if (js_Boot.__instanceof(value, HTMLCanvasElement)) {
                    this.__srcCanvas = value;
                    this.__srcContext = this.__srcCanvas.getContext("2d")
                }
            }
            return value
        },
        get_stride: function() {
            return this.width * 4
        },
        __class__: lime_graphics_ImageBuffer,
        __properties__: {
            get_stride: "get_stride",
            set_src: "set_src",
            get_src: "get_src"
        }
    };
    var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = {
        __ename__: ["lime", "graphics", "ImageChannel"],
        __constructs__: ["RED", "GREEN", "BLUE", "ALPHA"]
    };
    lime_graphics_ImageChannel.RED = ["RED", 0];
    lime_graphics_ImageChannel.RED.toString = $estr;
    lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
    lime_graphics_ImageChannel.GREEN = ["GREEN", 1];
    lime_graphics_ImageChannel.GREEN.toString = $estr;
    lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
    lime_graphics_ImageChannel.BLUE = ["BLUE", 2];
    lime_graphics_ImageChannel.BLUE.toString = $estr;
    lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
    lime_graphics_ImageChannel.ALPHA = ["ALPHA", 3];
    lime_graphics_ImageChannel.ALPHA.toString = $estr;
    lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
    var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = {
        __ename__: ["lime", "graphics", "ImageType"],
        __constructs__: ["CANVAS", "DATA", "FLASH", "CUSTOM"]
    };
    lime_graphics_ImageType.CANVAS = ["CANVAS", 0];
    lime_graphics_ImageType.CANVAS.toString = $estr;
    lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
    lime_graphics_ImageType.DATA = ["DATA", 1];
    lime_graphics_ImageType.DATA.toString = $estr;
    lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
    lime_graphics_ImageType.FLASH = ["FLASH", 2];
    lime_graphics_ImageType.FLASH.toString = $estr;
    lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
    lime_graphics_ImageType.CUSTOM = ["CUSTOM", 3];
    lime_graphics_ImageType.CUSTOM.toString = $estr;
    lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
    var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = {
        __ename__: ["lime", "graphics", "RenderContext"],
        __constructs__: ["OPENGL", "CANVAS", "DOM", "FLASH", "CAIRO", "CONSOLE", "CUSTOM", "NONE"]
    };
    lime_graphics_RenderContext.OPENGL = function(gl) {
        var $x = ["OPENGL", 0, gl];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x
    };
    lime_graphics_RenderContext.CANVAS = function(context) {
        var $x = ["CANVAS", 1, context];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x
    };
    lime_graphics_RenderContext.DOM = function(element) {
        var $x = ["DOM", 2, element];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x
    };
    lime_graphics_RenderContext.FLASH = function(stage) {
        var $x = ["FLASH", 3, stage];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x
    };
    lime_graphics_RenderContext.CAIRO = function(cairo) {
        var $x = ["CAIRO", 4, cairo];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x
    };
    lime_graphics_RenderContext.CONSOLE = function(context) {
        var $x = ["CONSOLE", 5, context];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x
    };
    lime_graphics_RenderContext.CUSTOM = function(data) {
        var $x = ["CUSTOM", 6, data];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x
    };
    lime_graphics_RenderContext.NONE = ["NONE", 7];
    lime_graphics_RenderContext.NONE.toString = $estr;
    lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
    var lime_graphics_Renderer = function(window) {
        this.onRender = new lime_app__$Event_$Void_$Void();
        this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
        this.onContextLost = new lime_app__$Event_$Void_$Void();
        this.window = window;
        this.backend = new lime__$backend_html5_HTML5Renderer(this);
        this.window.renderer = this
    };
    $hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
    lime_graphics_Renderer.__name__ = ["lime", "graphics", "Renderer"];
    lime_graphics_Renderer.prototype = {
        context: null,
        onContextLost: null,
        onContextRestored: null,
        onRender: null,
        type: null,
        window: null,
        backend: null,
        create: function() {
            this.backend.create()
        },
        flip: function() {
            this.backend.flip()
        },
        readPixels: function(rect) {
            return this.backend.readPixels(rect)
        },
        render: function() {
            this.backend.render()
        },
        __class__: lime_graphics_Renderer
    };
    var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = {
        __ename__: ["lime", "graphics", "RendererType"],
        __constructs__: ["OPENGL", "CANVAS", "DOM", "FLASH", "CAIRO", "CONSOLE", "CUSTOM"]
    };
    lime_graphics_RendererType.OPENGL = ["OPENGL", 0];
    lime_graphics_RendererType.OPENGL.toString = $estr;
    lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CANVAS = ["CANVAS", 1];
    lime_graphics_RendererType.CANVAS.toString = $estr;
    lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.DOM = ["DOM", 2];
    lime_graphics_RendererType.DOM.toString = $estr;
    lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.FLASH = ["FLASH", 3];
    lime_graphics_RendererType.FLASH.toString = $estr;
    lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CAIRO = ["CAIRO", 4];
    lime_graphics_RendererType.CAIRO.toString = $estr;
    lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CONSOLE = ["CONSOLE", 5];
    lime_graphics_RendererType.CONSOLE.toString = $estr;
    lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CUSTOM = ["CUSTOM", 6];
    lime_graphics_RendererType.CUSTOM.toString = $estr;
    lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
    var lime_graphics_cairo_Cairo = function(surface) {
        if (surface != null) {}
    };
    $hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
    lime_graphics_cairo_Cairo.__name__ = ["lime", "graphics", "cairo", "Cairo"];
    lime_graphics_cairo_Cairo.__properties__ = {
        get_versionString: "get_versionString",
        get_version: "get_version"
    };
    lime_graphics_cairo_Cairo.get_version = function() {
        return 0
    };
    lime_graphics_cairo_Cairo.get_versionString = function() {
        return ""
    };
    lime_graphics_cairo_Cairo.prototype = {
        target: null,
        userData: null,
        handle: null,
        arc: function(xc, yc, radius, angle1, angle2) {},
        arcNegative: function(xc, yc, radius, angle1, angle2) {},
        clip: function() {},
        clipExtents: function(x1, y1, x2, y2) {},
        clipPreserve: function() {},
        closePath: function() {},
        copyPage: function() {},
        curveTo: function(x1, y1, x2, y2, x3, y3) {},
        fill: function() {},
        fillExtents: function(x1, y1, x2, y2) {},
        fillPreserve: function() {},
        identityMatrix: function() {},
        inClip: function(x, y) {
            return false
        },
        inFill: function(x, y) {
            return false
        },
        inStroke: function(x, y) {
            return false
        },
        lineTo: function(x, y) {},
        moveTo: function(x, y) {},
        mask: function(pattern) {},
        maskSurface: function(surface, x, y) {},
        newPath: function() {},
        paint: function() {},
        paintWithAlpha: function(alpha) {},
        popGroup: function() {
            return null
        },
        popGroupToSource: function() {},
        pushGroup: function() {},
        pushGroupWithContent: function(content) {},
        recreate: function(surface) {},
        rectangle: function(x, y, width, height) {},
        relCurveTo: function(dx1, dy1, dx2, dy2, dx3, dy3) {},
        relLineTo: function(dx, dy) {},
        relMoveTo: function(dx, dy) {},
        resetClip: function() {},
        restore: function() {},
        save: function() {},
        setFontSize: function(size) {},
        setSourceRGB: function(r, g, b) {},
        setSourceRGBA: function(r, g, b, a) {},
        setSourceSurface: function(surface, x, y) {},
        showGlyphs: function(glyphs) {},
        showPage: function() {},
        showText: function(utf8) {},
        status: function() {
            return 0
        },
        stroke: function() {},
        strokeExtents: function(x1, y1, x2, y2) {},
        strokePreserve: function() {},
        textPath: function(utf8) {},
        transform: function(matrix) {},
        rotate: function(amount) {},
        scale: function(x, y) {},
        translate: function(x, y) {},
        get_antialias: function() {
            return 0
        },
        set_antialias: function(value) {
            return value
        },
        get_currentPoint: function() {
            return null
        },
        get_dash: function() {
            return []
        },
        set_dash: function(value) {
            return value
        },
        get_dashCount: function() {
            return 0
        },
        get_fillRule: function() {
            return 0
        },
        set_fillRule: function(value) {
            return value
        },
        get_fontFace: function() {
            return 0
        },
        set_fontFace: function(value) {
            return value
        },
        get_fontOptions: function() {
            return null
        },
        set_fontOptions: function(value) {
            return value
        },
        get_groupTarget: function() {
            return 0
        },
        get_hasCurrentPoint: function() {
            return false
        },
        get_lineCap: function() {
            return 0
        },
        set_lineCap: function(value) {
            return value
        },
        get_lineJoin: function() {
            return 0
        },
        set_lineJoin: function(value) {
            return value
        },
        get_lineWidth: function() {
            return 0
        },
        set_lineWidth: function(value) {
            return value
        },
        get_matrix: function() {
            return null
        },
        set_matrix: function(value) {
            return value
        },
        get_miterLimit: function() {
            return 0
        },
        set_miterLimit: function(value) {
            return value
        },
        get_operator: function() {
            return 0
        },
        set_operator: function(value) {
            return value
        },
        get_source: function() {
            return 0
        },
        set_source: function(value) {
            return value
        },
        get_target: function() {
            return 0
        },
        get_tolerance: function() {
            return 0
        },
        set_tolerance: function(value) {
            return value
        },
        __class__: lime_graphics_cairo_Cairo,
        __properties__: {
            set_tolerance: "set_tolerance",
            get_tolerance: "get_tolerance",
            get_target: "get_target",
            set_source: "set_source",
            get_source: "get_source",
            set_operator: "set_operator",
            get_operator: "get_operator",
            set_miterLimit: "set_miterLimit",
            get_miterLimit: "get_miterLimit",
            set_matrix: "set_matrix",
            get_matrix: "get_matrix",
            set_lineWidth: "set_lineWidth",
            get_lineWidth: "get_lineWidth",
            set_lineJoin: "set_lineJoin",
            get_lineJoin: "get_lineJoin",
            set_lineCap: "set_lineCap",
            get_lineCap: "get_lineCap",
            get_hasCurrentPoint: "get_hasCurrentPoint",
            get_groupTarget: "get_groupTarget",
            set_fontOptions: "set_fontOptions",
            get_fontOptions: "get_fontOptions",
            set_fontFace: "set_fontFace",
            get_fontFace: "get_fontFace",
            set_fillRule: "set_fillRule",
            get_fillRule: "get_fillRule",
            get_dashCount: "get_dashCount",
            set_dash: "set_dash",
            get_dash: "get_dash",
            get_currentPoint: "get_currentPoint",
            set_antialias: "set_antialias",
            get_antialias: "get_antialias"
        }
    };
    var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFTFontFace", "CairoFTFontFace_Impl_"];
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
        return 0
    };
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face, loadFlags) {
        return 0
    };
    var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
    lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFontFace", "CairoFontFace_Impl_"];
    lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
        return null
    };
    lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
        return 0
    };
    var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFontOptions", "CairoFontOptions_Impl_"];
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {
        set_subpixelOrder: "set_subpixelOrder",
        get_subpixelOrder: "get_subpixelOrder",
        set_hintStyle: "set_hintStyle",
        get_hintStyle: "get_hintStyle",
        set_hintMetrics: "set_hintMetrics",
        get_hintMetrics: "get_hintMetrics",
        set_antialias: "set_antialias",
        get_antialias: "get_antialias"
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
        return null
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1, value) {
        return value
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1, value) {
        return value
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1, value) {
        return value
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1, value) {
        return value
    };
    var lime_graphics_cairo_CairoGlyph = function(index, x, y) {
        if (y == null) {
            y = 0
        }
        if (x == null) {
            x = 0
        }
        this.index = index;
        this.x = x;
        this.y = y
    };
    $hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
    lime_graphics_cairo_CairoGlyph.__name__ = ["lime", "graphics", "cairo", "CairoGlyph"];
    lime_graphics_cairo_CairoGlyph.prototype = {
        index: null,
        x: null,
        y: null,
        __class__: lime_graphics_cairo_CairoGlyph
    };
    var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoImageSurface", "CairoImageSurface_Impl_"];
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {
        get_width: "get_width",
        get_stride: "get_stride",
        get_height: "get_height",
        get_format: "get_format",
        get_data: "get_data"
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format, width, height) {
        return 0
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data, format, width, height, stride) {
        return 0
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
        return null
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
        return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
        return 0
    };
    var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoPattern", "CairoPattern_Impl_"];
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {
        set_matrix: "set_matrix",
        get_matrix: "get_matrix",
        set_filter: "set_filter",
        get_filter: "get_filter",
        set_extend: "set_extend",
        get_extend: "get_extend",
        get_colorStopCount: "get_colorStopCount"
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
        return handle
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1, offset, r, g, b) {};
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1, offset, r, g, b, a) {};
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0, y0, x1, y1) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0, cy0, radius0, cx1, cy1, radius1) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r, g, b) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r, g, b, a) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1, value) {
        return value
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
        return 0
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1, value) {
        return value
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
        return null
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1, value) {
        return value
    };
    var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
    lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoSurface", "CairoSurface_Impl_"];
    lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {};
    var lime_graphics_console_IndexBuffer = function() {};
    $hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
    lime_graphics_console_IndexBuffer.__name__ = ["lime", "graphics", "console", "IndexBuffer"];
    lime_graphics_console_IndexBuffer.prototype = {
        __class__: lime_graphics_console_IndexBuffer
    };
    var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = {
        __ename__: ["lime", "graphics", "console", "Primitive"],
        __constructs__: ["Point", "Line", "LineStrip", "Triangle", "TriangleStrip"]
    };
    lime_graphics_console_Primitive.Point = ["Point", 0];
    lime_graphics_console_Primitive.Point.toString = $estr;
    lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.Line = ["Line", 1];
    lime_graphics_console_Primitive.Line.toString = $estr;
    lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.LineStrip = ["LineStrip", 2];
    lime_graphics_console_Primitive.LineStrip.toString = $estr;
    lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.Triangle = ["Triangle", 3];
    lime_graphics_console_Primitive.Triangle.toString = $estr;
    lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip", 4];
    lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
    lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
    var lime_graphics_console_Shader = function() {};
    $hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
    lime_graphics_console_Shader.__name__ = ["lime", "graphics", "console", "Shader"];
    lime_graphics_console_Shader.prototype = {
        __class__: lime_graphics_console_Shader
    };
    var lime_graphics_console_VertexBuffer = function() {};
    $hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
    lime_graphics_console_VertexBuffer.__name__ = ["lime", "graphics", "console", "VertexBuffer"];
    lime_graphics_console_VertexBuffer.prototype = {
        lock: function() {
            return new lime_graphics_console_VertexOutput()
        },
        unlock: function() {},
        __class__: lime_graphics_console_VertexBuffer
    };
    var lime_graphics_console_VertexOutput = function() {};
    $hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
    lime_graphics_console_VertexOutput.__name__ = ["lime", "graphics", "console", "VertexOutput"];
    lime_graphics_console_VertexOutput.prototype = {
        vec2: function(x, y) {},
        vec3: function(x, y, z) {},
        color: function(r, g, b, a) {},
        __class__: lime_graphics_console_VertexOutput
    };
    var lime_graphics_format_BMP = function() {};
    $hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
    lime_graphics_format_BMP.__name__ = ["lime", "graphics", "format", "BMP"];
    lime_graphics_format_BMP.encode = function(image, type) {
        if (image.get_premultiplied() || image.get_format() != 0) {
            image = image.clone();
            image.set_premultiplied(false);
            image.set_format(0)
        }
        if (type == null) {
            type = lime_graphics_format_BMPType.RGB
        }
        var fileHeaderLength = 14;
        var infoHeaderLength = 40;
        var pixelValuesLength = image.width * image.height * 4;
        if (type != null) {
            switch (type[1]) {
                case 1:
                    infoHeaderLength = 108;
                    break;
                case 2:
                    fileHeaderLength = 0;
                    pixelValuesLength += image.width * image.height;
                    break;
                case 0:
                    pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
                    break;
                default:
            }
        } else {}
        var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
        var position = 0;
        if (fileHeaderLength > 0) {
            data.set(position++, 66);
            data.set(position++, 77);
            data.setInt32(position, data.length);
            position += 4;
            data.setUInt16(position, 0);
            position += 2;
            data.setUInt16(position, 0);
            position += 2;
            data.setInt32(position, fileHeaderLength + infoHeaderLength);
            position += 4
        }
        data.setInt32(position, infoHeaderLength);
        position += 4;
        data.setInt32(position, image.width);
        position += 4;
        data.setInt32(position, type == lime_graphics_format_BMPType.ICO ? image.height * 2 : image.height);
        position += 4;
        data.setUInt16(position, 1);
        position += 2;
        data.setUInt16(position, type == lime_graphics_format_BMPType.RGB ? 24 : 32);
        position += 2;
        data.setInt32(position, type == lime_graphics_format_BMPType.BITFIELD ? 3 : 0);
        position += 4;
        data.setInt32(position, pixelValuesLength);
        position += 4;
        data.setInt32(position, 11824);
        position += 4;
        data.setInt32(position, 11824);
        position += 4;
        data.setInt32(position, 0);
        position += 4;
        data.setInt32(position, 0);
        position += 4;
        if (type == lime_graphics_format_BMPType.BITFIELD) {
            data.setInt32(position, 16711680);
            position += 4;
            data.setInt32(position, 65280);
            position += 4;
            data.setInt32(position, 255);
            position += 4;
            data.setInt32(position, -16777216);
            position += 4;
            data.set(position++, 32);
            data.set(position++, 110);
            data.set(position++, 105);
            data.set(position++, 87);
            var _g = 0;
            while (_g < 48) {
                var i = _g++;
                data.set(position++, 0)
            }
        }
        var pixels = image.getPixels(new lime_math_Rectangle(0, 0, image.width, image.height), 1);
        var readPosition = 0;
        var a;
        var r;
        var g;
        var b;
        if (type != null) {
            switch (type[1]) {
                case 1:
                    var _g1 = 0;
                    var _g2 = image.height;
                    while (_g1 < _g2) {
                        var y = _g1++;
                        readPosition = (image.height - 1 - y) * 4 * image.width;
                        var _g3 = 0;
                        var _g21 = image.width;
                        while (_g3 < _g21) {
                            var x = _g3++;
                            a = pixels.get(readPosition++);
                            r = pixels.get(readPosition++);
                            g = pixels.get(readPosition++);
                            b = pixels.get(readPosition++);
                            data.set(position++, b);
                            data.set(position++, g);
                            data.set(position++, r);
                            data.set(position++, a)
                        }
                    }
                    break;
                case 2:
                    var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
                    var maskPosition = 0;
                    var _g11 = 0;
                    var _g4 = image.height;
                    while (_g11 < _g4) {
                        var y1 = _g11++;
                        readPosition = (image.height - 1 - y1) * 4 * image.width;
                        var _g31 = 0;
                        var _g22 = image.width;
                        while (_g31 < _g22) {
                            var x1 = _g31++;
                            a = pixels.get(readPosition++);
                            r = pixels.get(readPosition++);
                            g = pixels.get(readPosition++);
                            b = pixels.get(readPosition++);
                            data.set(position++, b);
                            data.set(position++, g);
                            data.set(position++, r);
                            data.set(position++, a);
                            andMask.set(maskPosition++, 0)
                        }
                    }
                    data.blit(position, andMask, 0, image.width * image.height);
                    break;
                case 0:
                    var _g12 = 0;
                    var _g5 = image.height;
                    while (_g12 < _g5) {
                        var y2 = _g12++;
                        readPosition = (image.height - 1 - y2) * 4 * image.width;
                        var _g32 = 0;
                        var _g23 = image.width;
                        while (_g32 < _g23) {
                            var x2 = _g32++;
                            a = pixels.get(readPosition++);
                            r = pixels.get(readPosition++);
                            g = pixels.get(readPosition++);
                            b = pixels.get(readPosition++);
                            data.set(position++, b);
                            data.set(position++, g);
                            data.set(position++, r)
                        }
                        var _g33 = 0;
                        var _g24 = image.width * 3 % 4;
                        while (_g33 < _g24) {
                            var i1 = _g33++;
                            data.set(position++, 0)
                        }
                    }
                    break;
                default:
            }
        } else {}
        return data
    };
    var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = {
        __ename__: ["lime", "graphics", "format", "BMPType"],
        __constructs__: ["RGB", "BITFIELD", "ICO"]
    };
    lime_graphics_format_BMPType.RGB = ["RGB", 0];
    lime_graphics_format_BMPType.RGB.toString = $estr;
    lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
    lime_graphics_format_BMPType.BITFIELD = ["BITFIELD", 1];
    lime_graphics_format_BMPType.BITFIELD.toString = $estr;
    lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
    lime_graphics_format_BMPType.ICO = ["ICO", 2];
    lime_graphics_format_BMPType.ICO.toString = $estr;
    lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
    var lime_graphics_format_JPEG = function() {};
    $hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
    lime_graphics_format_JPEG.__name__ = ["lime", "graphics", "format", "JPEG"];
    lime_graphics_format_JPEG.decodeBytes = function(bytes, decodeData) {
        if (decodeData == null) {
            decodeData = true
        }
        return null
    };
    lime_graphics_format_JPEG.decodeFile = function(path, decodeData) {
        if (decodeData == null) {
            decodeData = true
        }
        return null
    };
    lime_graphics_format_JPEG.encode = function(image, quality) {
        if (image.get_premultiplied() || image.get_format() != 0) {
            image = image.clone();
            image.set_premultiplied(false);
            image.set_format(0)
        }
        lime_graphics_utils_ImageCanvasUtil.sync(image, false);
        if (image.buffer.__srcCanvas != null) {
            var data = image.buffer.__srcCanvas.toDataURL("image/jpeg", quality / 100);
            var buffer = window.atob(data.split(";base64,")[1]);
            var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
            var _g1 = 0;
            var _g = buffer.length;
            while (_g1 < _g) {
                var i = _g1++;
                bytes.set(i, HxOverrides.cca(buffer, i))
            }
            return bytes
        }
        return null
    };
    var lime_graphics_format_PNG = function() {};
    $hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
    lime_graphics_format_PNG.__name__ = ["lime", "graphics", "format", "PNG"];
    lime_graphics_format_PNG.decodeBytes = function(bytes, decodeData) {
        if (decodeData == null) {
            decodeData = true
        }
        return null
    };
    lime_graphics_format_PNG.decodeFile = function(path, decodeData) {
        if (decodeData == null) {
            decodeData = true
        }
        return null
    };
    lime_graphics_format_PNG.encode = function(image) {
        if (image.get_premultiplied() || image.get_format() != 0) {
            image = image.clone();
            image.set_premultiplied(false);
            image.set_format(0)
        }
        lime_graphics_utils_ImageCanvasUtil.sync(image, false);
        if (image.buffer.__srcCanvas != null) {
            var data = image.buffer.__srcCanvas.toDataURL("image/png");
            var buffer = window.atob(data.split(";base64,")[1]);
            var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
            var _g1 = 0;
            var _g = buffer.length;
            while (_g1 < _g) {
                var i = _g1++;
                bytes.set(i, HxOverrides.cca(buffer, i))
            }
            return bytes
        }
        return null
    };
    var lime_graphics_opengl_GL = function() {};
    $hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
    lime_graphics_opengl_GL.__name__ = ["lime", "graphics", "opengl", "GL"];
    lime_graphics_opengl_GL.__properties__ = {
        get_version: "get_version",
        get_type: "get_type"
    };
    lime_graphics_opengl_GL.activeTexture = function(texture) {
        lime_graphics_opengl_GL.context.__context.activeTexture(texture)
    };
    lime_graphics_opengl_GL.attachShader = function(program, shader) {
        lime_graphics_opengl_GL.context.__context.attachShader(program, shader)
    };
    lime_graphics_opengl_GL.beginQuery = function(target, query) {
        lime_graphics_opengl_GL.context.__context.beginQuery(target, query)
    };
    lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
        lime_graphics_opengl_GL.context.__context.beginTransformFeedback(primitiveNode)
    };
    lime_graphics_opengl_GL.bindAttribLocation = function(program, index, name) {
        lime_graphics_opengl_GL.context.__context.bindAttribLocation(program, index, name)
    };
    lime_graphics_opengl_GL.bindBuffer = function(target, buffer) {
        lime_graphics_opengl_GL.context.__context.bindBuffer(target, buffer)
    };
    lime_graphics_opengl_GL.bindBufferBase = function(target, index, buffer) {
        lime_graphics_opengl_GL.context.__context.bindBufferBase(target, index, buffer)
    };
    lime_graphics_opengl_GL.bindBufferRange = function(target, index, buffer, offset, size) {
        lime_graphics_opengl_GL.context.__context.bindBufferRange(target, index, buffer, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size))
    };
    lime_graphics_opengl_GL.bindFramebuffer = function(target, framebuffer) {
        lime_graphics_opengl_GL.context.__context.bindFramebuffer(target, framebuffer)
    };
    lime_graphics_opengl_GL.bindRenderbuffer = function(target, renderbuffer) {
        lime_graphics_opengl_GL.context.__context.bindRenderbuffer(target, renderbuffer)
    };
    lime_graphics_opengl_GL.bindSampler = function(unit, sampler) {
        lime_graphics_opengl_GL.context.__context.bindSampler(unit, sampler)
    };
    lime_graphics_opengl_GL.bindTexture = function(target, texture) {
        lime_graphics_opengl_GL.context.__context.bindTexture(target, texture)
    };
    lime_graphics_opengl_GL.bindTransformFeedback = function(target, transformFeedback) {
        lime_graphics_opengl_GL.context.__context.bindTransformFeedback(target, transformFeedback)
    };
    lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
        lime_graphics_opengl_GL.context.__context.bindVertexArray(vertexArray)
    };
    lime_graphics_opengl_GL.blitFramebuffer = function(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) {
        lime_graphics_opengl_GL.context.__context.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
    };
    lime_graphics_opengl_GL.blendColor = function(red, green, blue, alpha) {
        lime_graphics_opengl_GL.context.__context.blendColor(red, green, blue, alpha)
    };
    lime_graphics_opengl_GL.blendEquation = function(mode) {
        lime_graphics_opengl_GL.context.__context.blendEquation(mode)
    };
    lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB, modeAlpha) {
        lime_graphics_opengl_GL.context.__context.blendEquationSeparate(modeRGB, modeAlpha)
    };
    lime_graphics_opengl_GL.blendFunc = function(sfactor, dfactor) {
        lime_graphics_opengl_GL.context.__context.blendFunc(sfactor, dfactor)
    };
    lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
        lime_graphics_opengl_GL.context.__context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
    };
    lime_graphics_opengl_GL.bufferData = function(target, size, srcData, usage) {
        lime_graphics_opengl_GL.context.__context.bufferData(target, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData, size), usage)
    };
    lime_graphics_opengl_GL.bufferDataWEBGL = function(target, srcData, usage, srcOffset, length) {
        lime_graphics_opengl_GL.context.bufferDataWEBGL(target, srcData, usage, srcOffset, length)
    };
    lime_graphics_opengl_GL.bufferSubData = function(target, dstByteOffset, size, srcData) {
        lime_graphics_opengl_GL.context.__context.bufferSubData(target, dstByteOffset, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(srcData, size))
    };
    lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target, dstByteOffset, srcData, srcOffset, length) {
        lime_graphics_opengl_GL.context.bufferSubDataWEBGL(target, dstByteOffset, srcData, srcOffset, length)
    };
    lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
        return lime_graphics_opengl_GL.context.__context.checkFramebufferStatus(target)
    };
    lime_graphics_opengl_GL.clear = function(mask) {
        lime_graphics_opengl_GL.context.__context.clear(mask)
    };
    lime_graphics_opengl_GL.clearBufferfi = function(buffer, drawbuffer, depth, stencil) {
        lime_graphics_opengl_GL.context.__context.clearBufferfi(buffer, drawbuffer, depth, stencil)
    };
    lime_graphics_opengl_GL.clearBufferfv = function(buffer, drawbuffer, value) {
        lime_graphics_opengl_GL.context.__context.clearBufferfv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(value))
    };
    lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer, drawbuffer, values, srcOffset) {
        lime_graphics_opengl_GL.context.__context.clearBufferfv(buffer, drawbuffer, values, srcOffset)
    };
    lime_graphics_opengl_GL.clearBufferiv = function(buffer, drawbuffer, value) {
        lime_graphics_opengl_GL.context.__context.clearBufferiv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(value))
    };
    lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer, drawbuffer, values, srcOffset) {
        lime_graphics_opengl_GL.context.__context.clearBufferiv(buffer, drawbuffer, values, srcOffset)
    };
    lime_graphics_opengl_GL.clearBufferuiv = function(buffer, drawbuffer, value) {
        lime_graphics_opengl_GL.context.__context.clearBufferuiv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(value))
    };
    lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer, drawbuffer, values, srcOffset) {
        lime_graphics_opengl_GL.context.__context.clearBufferuiv(buffer, drawbuffer, values, srcOffset)
    };
    lime_graphics_opengl_GL.clearColor = function(red, green, blue, alpha) {
        lime_graphics_opengl_GL.context.__context.clearColor(red, green, blue, alpha)
    };
    lime_graphics_opengl_GL.clearDepth = function(depth) {
        lime_graphics_opengl_GL.context.__context.clearDepth(depth)
    };
    lime_graphics_opengl_GL.clearDepthf = function(depth) {
        lime_graphics_opengl_GL.context.__context.clearDepth(depth)
    };
    lime_graphics_opengl_GL.clearStencil = function(s) {
        lime_graphics_opengl_GL.context.__context.clearStencil(s)
    };
    lime_graphics_opengl_GL.clientWaitSync = function(sync, flags, timeout) {
        return lime_graphics_opengl_GL.context.__context.clientWaitSync(sync, flags, timeout)
    };
    lime_graphics_opengl_GL.colorMask = function(red, green, blue, alpha) {
        lime_graphics_opengl_GL.context.__context.colorMask(red, green, blue, alpha)
    };
    lime_graphics_opengl_GL.compileShader = function(shader) {
        lime_graphics_opengl_GL.context.__context.compileShader(shader)
    };
    lime_graphics_opengl_GL.compressedTexImage2D = function(target, level, internalformat, width, height, border, imageSize, data) {
        lime_graphics_opengl_GL.context.__context.compressedTexImage2D(target, level, internalformat, width, height, border, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target, level, internalformat, width, height, border, srcData, srcOffset, srcLengthOverride) {
        lime_graphics_opengl_GL.context.compressedTexImage2DWEBGL(target, level, internalformat, width, height, border, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl_GL.compressedTexImage3D = function(target, level, internalformat, width, height, depth, border, imageSize, data) {
        lime_graphics_opengl_GL.context.__context.compressedTexImage3D(target, level, internalformat, width, height, depth, border, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target, level, internalformat, width, height, depth, border, srcData, srcOffset, srcLengthOverride) {
        lime_graphics_opengl_GL.context.__context.compressedTexImage3D(target, level, internalformat, width, height, depth, border, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl_GL.compressedTexSubImage2D = function(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
        lime_graphics_opengl_GL.context.__context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target, level, xoffset, yoffset, width, height, format, srcData, srcOffset, srcLengthOverride) {
        lime_graphics_opengl_GL.context.compressedTexSubImage2DWEBGL(target, level, xoffset, yoffset, width, height, format, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl_GL.compressedTexSubImage3D = function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) {
        lime_graphics_opengl_GL.context.__context.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset, srcLengthOverride) {
        lime_graphics_opengl_GL.context.compressedTexSubImage3DWEBGL(target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl_GL.copyBufferSubData = function(readTarget, writeTarget, readOffset, writeOffset, size) {
        null
    };
    lime_graphics_opengl_GL.copyTexImage2D = function(target, level, internalformat, x, y, width, height, border) {
        lime_graphics_opengl_GL.context.__context.copyTexImage2D(target, level, internalformat, x, y, width, height, border)
    };
    lime_graphics_opengl_GL.copyTexSubImage2D = function(target, level, xoffset, yoffset, x, y, width, height) {
        lime_graphics_opengl_GL.context.__context.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
    };
    lime_graphics_opengl_GL.copyTexSubImage3D = function(target, level, xoffset, yoffset, zoffset, x, y, width, height) {
        lime_graphics_opengl_GL.context.__context.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
    };
    lime_graphics_opengl_GL.createBuffer = function() {
        return lime_graphics_opengl_GL.context.__context.createBuffer()
    };
    lime_graphics_opengl_GL.createFramebuffer = function() {
        return lime_graphics_opengl_GL.context.__context.createFramebuffer()
    };
    lime_graphics_opengl_GL.createProgram = function() {
        return lime_graphics_opengl_GL.context.__context.createProgram()
    };
    lime_graphics_opengl_GL.createQuery = function() {
        return lime_graphics_opengl_GL.context.__context.createQuery()
    };
    lime_graphics_opengl_GL.createRenderbuffer = function() {
        return lime_graphics_opengl_GL.context.__context.createRenderbuffer()
    };
    lime_graphics_opengl_GL.createSampler = function() {
        return lime_graphics_opengl_GL.context.__context.createSampler()
    };
    lime_graphics_opengl_GL.createShader = function(type) {
        return lime_graphics_opengl_GL.context.__context.createShader(type)
    };
    lime_graphics_opengl_GL.createTexture = function() {
        return lime_graphics_opengl_GL.context.__context.createTexture()
    };
    lime_graphics_opengl_GL.createTransformFeedback = function() {
        return lime_graphics_opengl_GL.context.__context.createTransformFeedback()
    };
    lime_graphics_opengl_GL.createVertexArray = function() {
        return lime_graphics_opengl_GL.context.__context.createVertexArray()
    };
    lime_graphics_opengl_GL.cullFace = function(mode) {
        lime_graphics_opengl_GL.context.__context.cullFace(mode)
    };
    lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
        lime_graphics_opengl_GL.context.__context.deleteBuffer(buffer)
    };
    lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
        lime_graphics_opengl_GL.context.__context.deleteFramebuffer(framebuffer)
    };
    lime_graphics_opengl_GL.deleteProgram = function(program) {
        lime_graphics_opengl_GL.context.__context.deleteProgram(program)
    };
    lime_graphics_opengl_GL.deleteQuery = function(query) {
        lime_graphics_opengl_GL.context.__context.deleteQuery(query)
    };
    lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
        lime_graphics_opengl_GL.context.__context.deleteRenderbuffer(renderbuffer)
    };
    lime_graphics_opengl_GL.deleteSampler = function(sampler) {
        lime_graphics_opengl_GL.context.__context.deleteSampler(sampler)
    };
    lime_graphics_opengl_GL.deleteShader = function(shader) {
        lime_graphics_opengl_GL.context.__context.deleteShader(shader)
    };
    lime_graphics_opengl_GL.deleteSync = function(sync) {
        lime_graphics_opengl_GL.context.__context.deleteSync(sync)
    };
    lime_graphics_opengl_GL.deleteTexture = function(texture) {
        lime_graphics_opengl_GL.context.__context.deleteTexture(texture)
    };
    lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
        lime_graphics_opengl_GL.context.__context.deleteTransformFeedback(transformFeedback)
    };
    lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
        lime_graphics_opengl_GL.context.__context.deleteVertexArray(vertexArray)
    };
    lime_graphics_opengl_GL.depthFunc = function(func) {
        lime_graphics_opengl_GL.context.__context.depthFunc(func)
    };
    lime_graphics_opengl_GL.depthMask = function(flag) {
        lime_graphics_opengl_GL.context.__context.depthMask(flag)
    };
    lime_graphics_opengl_GL.depthRange = function(zNear, zFar) {
        lime_graphics_opengl_GL.context.__context.depthRange(zNear, zFar)
    };
    lime_graphics_opengl_GL.depthRangef = function(zNear, zFar) {
        lime_graphics_opengl_GL.context.__context.depthRange(zNear, zFar)
    };
    lime_graphics_opengl_GL.detachShader = function(program, shader) {
        lime_graphics_opengl_GL.context.__context.detachShader(program, shader)
    };
    lime_graphics_opengl_GL.disable = function(cap) {
        lime_graphics_opengl_GL.context.__context.disable(cap)
    };
    lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
        lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(index)
    };
    lime_graphics_opengl_GL.drawArrays = function(mode, first, count) {
        lime_graphics_opengl_GL.context.__context.drawArrays(mode, first, count)
    };
    lime_graphics_opengl_GL.drawArraysInstanced = function(mode, first, count, instanceCount) {
        lime_graphics_opengl_GL.context.__context.drawArraysInstanced(mode, first, count, instanceCount)
    };
    lime_graphics_opengl_GL.drawBuffers = function(buffers) {
        lime_graphics_opengl_GL.context.__context.drawBuffers(buffers)
    };
    lime_graphics_opengl_GL.drawElements = function(mode, count, type, offset) {
        lime_graphics_opengl_GL.context.drawElements(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset))
    };
    lime_graphics_opengl_GL.drawElementsInstanced = function(mode, count, type, offset, instanceCount) {
        lime_graphics_opengl_GL.context.__context.drawElementsInstanced(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), instanceCount)
    };
    lime_graphics_opengl_GL.drawRangeElements = function(mode, start, end, count, type, offset) {
        lime_graphics_opengl_GL.context.__context.drawRangeElements(mode, start, end, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)))
    };
    lime_graphics_opengl_GL.enable = function(cap) {
        lime_graphics_opengl_GL.context.__context.enable(cap)
    };
    lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
        lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(index)
    };
    lime_graphics_opengl_GL.endQuery = function(target) {
        lime_graphics_opengl_GL.context.__context.endQuery(target)
    };
    lime_graphics_opengl_GL.endTransformFeedback = function() {
        lime_graphics_opengl_GL.context.__context.endTransformFeedback()
    };
    lime_graphics_opengl_GL.fenceSync = function(condition, flags) {
        return lime_graphics_opengl_GL.context.__context.fenceSync(condition, flags)
    };
    lime_graphics_opengl_GL.finish = function() {
        lime_graphics_opengl_GL.context.__context.finish()
    };
    lime_graphics_opengl_GL.flush = function() {
        lime_graphics_opengl_GL.context.__context.flush()
    };
    lime_graphics_opengl_GL.framebufferRenderbuffer = function(target, attachment, renderbuffertarget, renderbuffer) {
        lime_graphics_opengl_GL.context.__context.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer)
    };
    lime_graphics_opengl_GL.framebufferTexture2D = function(target, attachment, textarget, texture, level) {
        lime_graphics_opengl_GL.context.__context.framebufferTexture2D(target, attachment, textarget, texture, level)
    };
    lime_graphics_opengl_GL.framebufferTextureLayer = function(target, attachment, texture, level, layer) {
        lime_graphics_opengl_GL.context.__context.framebufferTextureLayer(target, attachment, texture, level, layer)
    };
    lime_graphics_opengl_GL.frontFace = function(mode) {
        lime_graphics_opengl_GL.context.__context.frontFace(mode)
    };
    lime_graphics_opengl_GL.generateMipmap = function(target) {
        lime_graphics_opengl_GL.context.__context.generateMipmap(target)
    };
    lime_graphics_opengl_GL.getActiveAttrib = function(program, index) {
        return lime_graphics_opengl_GL.context.__context.getActiveAttrib(program, index)
    };
    lime_graphics_opengl_GL.getActiveUniform = function(program, index) {
        return lime_graphics_opengl_GL.context.__context.getActiveUniform(program, index)
    };
    lime_graphics_opengl_GL.getActiveUniformBlocki = function(program, uniformBlockIndex, pname) {
        return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(program, uniformBlockIndex, pname)
    };
    lime_graphics_opengl_GL.getActiveUniformBlockiv = function(program, uniformBlockIndex, pname, params) {
        lime_graphics_opengl_GL.context.getActiveUniformBlockiv(program, uniformBlockIndex, pname, params)
    };
    lime_graphics_opengl_GL.getActiveUniformBlockName = function(program, uniformBlockIndex) {
        return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockName(program, uniformBlockIndex)
    };
    lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program, uniformBlockIndex, pname) {
        return lime_graphics_opengl_GL.context.__context.getActiveUniformBlockParameter(program, uniformBlockIndex, pname)
    };
    lime_graphics_opengl_GL.getActiveUniforms = function(program, uniformIndices, pname) {
        return lime_graphics_opengl_GL.context.__context.getActiveUniforms(program, uniformIndices, pname)
    };
    lime_graphics_opengl_GL.getActiveUniformsiv = function(program, uniformIndices, pname, params) {
        null
    };
    lime_graphics_opengl_GL.getAttachedShaders = function(program) {
        return lime_graphics_opengl_GL.context.__context.getAttachedShaders(program)
    };
    lime_graphics_opengl_GL.getAttribLocation = function(program, name) {
        return lime_graphics_opengl_GL.context.__context.getAttribLocation(program, name)
    };
    lime_graphics_opengl_GL.getBoolean = function(pname) {
        return lime_graphics_opengl_GL.context.__context.getParameter(pname)
    };
    lime_graphics_opengl_GL.getBooleanv = function(pname, params) {
        lime_graphics_opengl_GL.context.getBooleanv(pname, params)
    };
    lime_graphics_opengl_GL.getBufferParameter = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getBufferParameter(target, pname)
    };
    lime_graphics_opengl_GL.getBufferParameteri = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getBufferParameter(target, pname)
    };
    lime_graphics_opengl_GL.getBufferParameteri64v = function(target, pname, params) {
        lime_graphics_opengl_GL.context.getBufferParameteri64v(target, pname, params);
        return
    };
    lime_graphics_opengl_GL.getBufferParameteriv = function(target, pname, data) {
        lime_graphics_opengl_GL.context.getBufferParameteriv(target, pname, data);
        return
    };
    lime_graphics_opengl_GL.getBufferPointerv = function(target, pname) {
        return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)
    };
    lime_graphics_opengl_GL.getBufferSubData = function(target, offset, size, data) {
        lime_graphics_opengl_GL.context.__context.getBufferSubData(target, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, size))
    };
    lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target, srcByteOffset, dstData, srcOffset, length) {
        lime_graphics_opengl_GL.context.getBufferSubDataWEBGL(target, srcByteOffset, dstData, srcOffset, length)
    };
    lime_graphics_opengl_GL.getContextAttributes = function() {
        return lime_graphics_opengl_GL.context.__context.getContextAttributes()
    };
    lime_graphics_opengl_GL.getError = function() {
        return lime_graphics_opengl_GL.context.__context.getError()
    };
    lime_graphics_opengl_GL.getExtension = function(name) {
        return lime_graphics_opengl_GL.context.__context.getExtension(name)
    };
    lime_graphics_opengl_GL.getFloat = function(pname) {
        return lime_graphics_opengl_GL.context.__context.getParameter(pname)
    };
    lime_graphics_opengl_GL.getFloatv = function(pname, params) {
        lime_graphics_opengl_GL.context.getFloatv(pname, params)
    };
    lime_graphics_opengl_GL.getFragDataLocation = function(program, name) {
        return lime_graphics_opengl_GL.context.__context.getFragDataLocation(program, name)
    };
    lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target, attachment, pname) {
        return lime_graphics_opengl_GL.context.__context.getFramebufferAttachmentParameter(target, attachment, pname)
    };
    lime_graphics_opengl_GL.getFramebufferAttachmentParameteri = function(target, attachment, pname) {
        return lime_graphics_opengl_GL.context.__context.getFramebufferAttachmentParameter(target, attachment, pname)
    };
    lime_graphics_opengl_GL.getFramebufferAttachmentParameteriv = function(target, attachment, pname, params) {
        lime_graphics_opengl_GL.context.getFramebufferAttachmentParameteriv(target, attachment, pname, params)
    };
    lime_graphics_opengl_GL.getIndexedParameter = function(target, index) {
        return lime_graphics_opengl_GL.context.__context.getIndexedParameter(target, index)
    };
    lime_graphics_opengl_GL.getInteger = function(pname) {
        return lime_graphics_opengl_GL.context.__context.getParameter(pname)
    };
    lime_graphics_opengl_GL.getInteger64 = function(pname) {
        return lime_graphics_opengl_GL.context.getInteger64(pname)
    };
    lime_graphics_opengl_GL.getInteger64i = function(pname) {
        return lime_graphics_opengl_GL.context.getInteger64i(pname)
    };
    lime_graphics_opengl_GL.getInteger64i_v = function(pname, params) {
        return null
    };
    lime_graphics_opengl_GL.getInteger64v = function(pname, params) {
        lime_graphics_opengl_GL.context.getInteger64v(pname, params);
        return
    };
    lime_graphics_opengl_GL.getIntegeri = function(pname) {
        return 0
    };
    lime_graphics_opengl_GL.getIntegeri_v = function(pname, params) {
        return null
    };
    lime_graphics_opengl_GL.getIntegerv = function(pname, params) {
        lime_graphics_opengl_GL.context.getIntegerv(pname, params)
    };
    lime_graphics_opengl_GL.getInternalformati = function(target, internalformat, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getInternalformativ = function(target, internalformat, pname, params) {
        lime_graphics_opengl_GL.context.getInternalformativ(target, internalformat, pname, params)
    };
    lime_graphics_opengl_GL.getInternalformatParameter = function(target, internalformat, pname) {
        return lime_graphics_opengl_GL.context.__context.getInternalformatParameter(target, internalformat, pname)
    };
    lime_graphics_opengl_GL.getParameter = function(pname) {
        return lime_graphics_opengl_GL.context.__context.getParameter(pname)
    };
    lime_graphics_opengl_GL.getProgrami = function(program, pname) {
        return lime_graphics_opengl_GL.context.__context.getProgramParameter(program, pname)
    };
    lime_graphics_opengl_GL.getProgramiv = function(program, pname, params) {
        lime_graphics_opengl_GL.context.getProgramiv(program, pname, params)
    };
    lime_graphics_opengl_GL.getProgramBinary = function(program, binaryFormat) {
        return null
    };
    lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
        return lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program)
    };
    lime_graphics_opengl_GL.getProgramParameter = function(program, pname) {
        return lime_graphics_opengl_GL.context.__context.getProgramParameter(program, pname)
    };
    lime_graphics_opengl_GL.getQuery = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getQuery(target, pname)
    };
    lime_graphics_opengl_GL.getQueryi = function(target, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getQueryiv = function(target, pname, params) {
        lime_graphics_opengl_GL.context.getQueryiv(target, pname, params)
    };
    lime_graphics_opengl_GL.getQueryObjectui = function(query, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getQueryObjectuiv = function(query, pname, params) {
        lime_graphics_opengl_GL.context.getQueryObjectuiv(query, pname, params)
    };
    lime_graphics_opengl_GL.getQueryParameter = function(query, pname) {
        return lime_graphics_opengl_GL.context.__context.getQueryParameter(query, pname)
    };
    lime_graphics_opengl_GL.getRenderbufferParameter = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(target, pname)
    };
    lime_graphics_opengl_GL.getRenderbufferParameteri = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getRenderbufferParameter(target, pname)
    };
    lime_graphics_opengl_GL.getRenderbufferParameteriv = function(target, pname, params) {
        lime_graphics_opengl_GL.context.getRenderbufferParameteriv(target, pname, params)
    };
    lime_graphics_opengl_GL.getSamplerParameter = function(sampler, pname) {
        return lime_graphics_opengl_GL.context.__context.getSamplerParameter(sampler, pname)
    };
    lime_graphics_opengl_GL.getSamplerParameterf = function(sampler, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getSamplerParameterfv = function(sampler, pname, params) {
        lime_graphics_opengl_GL.context.getSamplerParameterfv(sampler, pname, params)
    };
    lime_graphics_opengl_GL.getSamplerParameteri = function(sampler, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getSamplerParameteriv = function(sampler, pname, params) {
        lime_graphics_opengl_GL.context.getSamplerParameteriv(sampler, pname, params)
    };
    lime_graphics_opengl_GL.getShaderi = function(shader, pname) {
        return lime_graphics_opengl_GL.context.__context.getShaderParameter(shader, pname)
    };
    lime_graphics_opengl_GL.getShaderiv = function(shader, pname, params) {
        lime_graphics_opengl_GL.context.getShaderiv(shader, pname, params)
    };
    lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
        return lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader)
    };
    lime_graphics_opengl_GL.getShaderParameter = function(shader, pname) {
        return lime_graphics_opengl_GL.context.__context.getShaderParameter(shader, pname)
    };
    lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype, precisiontype) {
        return lime_graphics_opengl_GL.context.__context.getShaderPrecisionFormat(shadertype, precisiontype)
    };
    lime_graphics_opengl_GL.getShaderSource = function(shader) {
        return lime_graphics_opengl_GL.context.__context.getShaderSource(shader)
    };
    lime_graphics_opengl_GL.getString = function(pname) {
        return lime_graphics_opengl_GL.context.getString(pname)
    };
    lime_graphics_opengl_GL.getStringi = function(name, index) {
        return null
    };
    lime_graphics_opengl_GL.getSupportedExtensions = function() {
        return lime_graphics_opengl_GL.context.__context.getSupportedExtensions()
    };
    lime_graphics_opengl_GL.getSyncParameter = function(sync, pname) {
        return lime_graphics_opengl_GL.context.__context.getSyncParameter(sync, pname)
    };
    lime_graphics_opengl_GL.getSyncParameteri = function(sync, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getSyncParameteriv = function(sync, pname, params) {
        lime_graphics_opengl_GL.context.getSyncParameteriv(sync, pname, params)
    };
    lime_graphics_opengl_GL.getTexParameter = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getTexParameter(target, pname)
    };
    lime_graphics_opengl_GL.getTexParameterf = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getTexParameter(target, pname)
    };
    lime_graphics_opengl_GL.getTexParameterfv = function(target, pname, params) {
        lime_graphics_opengl_GL.context.getTexParameterfv(target, pname, params)
    };
    lime_graphics_opengl_GL.getTexParameteri = function(target, pname) {
        return lime_graphics_opengl_GL.context.__context.getTexParameter(target, pname)
    };
    lime_graphics_opengl_GL.getTexParameteriv = function(target, pname, params) {
        lime_graphics_opengl_GL.context.getTexParameteriv(target, pname, params)
    };
    lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program, index) {
        return lime_graphics_opengl_GL.context.__context.getTransformFeedbackVarying(program, index)
    };
    lime_graphics_opengl_GL.getUniform = function(program, location) {
        return lime_graphics_opengl_GL.context.__context.getUniform(program, location)
    };
    lime_graphics_opengl_GL.getUniformf = function(program, location) {
        return lime_graphics_opengl_GL.context.__context.getUniform(program, location)
    };
    lime_graphics_opengl_GL.getUniformfv = function(program, location, params) {
        lime_graphics_opengl_GL.context.getUniformfv(program, location, params)
    };
    lime_graphics_opengl_GL.getUniformi = function(program, location) {
        return lime_graphics_opengl_GL.context.__context.getUniform(program, location)
    };
    lime_graphics_opengl_GL.getUniformiv = function(program, location, params) {
        lime_graphics_opengl_GL.context.getUniformiv(program, location, params)
    };
    lime_graphics_opengl_GL.getUniformui = function(program, location) {
        return 0
    };
    lime_graphics_opengl_GL.getUniformuiv = function(program, location, params) {
        lime_graphics_opengl_GL.context.getUniformuiv(program, location, params)
    };
    lime_graphics_opengl_GL.getUniformBlockIndex = function(program, uniformBlockName) {
        return lime_graphics_opengl_GL.context.__context.getUniformBlockIndex(program, uniformBlockName)
    };
    lime_graphics_opengl_GL.getUniformIndices = function(program, uniformNames) {
        return lime_graphics_opengl_GL.context.__context.getUniformIndices(program, uniformNames)
    };
    lime_graphics_opengl_GL.getUniformLocation = function(program, name) {
        return lime_graphics_opengl_GL.context.__context.getUniformLocation(program, name)
    };
    lime_graphics_opengl_GL.getVertexAttrib = function(index, pname) {
        return lime_graphics_opengl_GL.context.__context.getVertexAttrib(index, pname)
    };
    lime_graphics_opengl_GL.getVertexAttribf = function(index, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getVertexAttribfv = function(index, pname, params) {
        lime_graphics_opengl_GL.context.getVertexAttribfv(index, pname, params)
    };
    lime_graphics_opengl_GL.getVertexAttribi = function(index, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getVertexAttribIi = function(index, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getVertexAttribIiv = function(index, pname, params) {
        null
    };
    lime_graphics_opengl_GL.getVertexAttribIui = function(index, pname) {
        return 0
    };
    lime_graphics_opengl_GL.getVertexAttribIuiv = function(index, pname, params) {
        null
    };
    lime_graphics_opengl_GL.getVertexAttribiv = function(index, pname, params) {
        lime_graphics_opengl_GL.context.getVertexAttribiv(index, pname, params)
    };
    lime_graphics_opengl_GL.getVertexAttribOffset = function(index, pname) {
        return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(index, pname))
    };
    lime_graphics_opengl_GL.getVertexAttribPointerv = function(index, pname) {
        return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_graphics_opengl_GL.context.__context.getVertexAttribOffset(index, pname))
    };
    lime_graphics_opengl_GL.hint = function(target, mode) {
        lime_graphics_opengl_GL.context.__context.hint(target, mode)
    };
    lime_graphics_opengl_GL.invalidateFramebuffer = function(target, attachments) {
        lime_graphics_opengl_GL.context.__context.invalidateFramebuffer(target, attachments)
    };
    lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target, attachments, x, y, width, height) {
        lime_graphics_opengl_GL.context.__context.invalidateSubFramebuffer(target, attachments, x, y, width, height)
    };
    lime_graphics_opengl_GL.isBuffer = function(buffer) {
        return lime_graphics_opengl_GL.context.__context.isBuffer(buffer)
    };
    lime_graphics_opengl_GL.isContextLost = function() {
        return lime_graphics_opengl_GL.context.isContextLost()
    };
    lime_graphics_opengl_GL.isEnabled = function(cap) {
        return lime_graphics_opengl_GL.context.__context.isEnabled(cap)
    };
    lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
        return lime_graphics_opengl_GL.context.__context.isFramebuffer(framebuffer)
    };
    lime_graphics_opengl_GL.isProgram = function(program) {
        return lime_graphics_opengl_GL.context.__context.isProgram(program)
    };
    lime_graphics_opengl_GL.isQuery = function(query) {
        return lime_graphics_opengl_GL.context.__context.isQuery(query)
    };
    lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
        return lime_graphics_opengl_GL.context.__context.isRenderbuffer(renderbuffer)
    };
    lime_graphics_opengl_GL.isSampler = function(sampler) {
        return lime_graphics_opengl_GL.context.__context.isSampler(sampler)
    };
    lime_graphics_opengl_GL.isShader = function(shader) {
        return lime_graphics_opengl_GL.context.__context.isShader(shader)
    };
    lime_graphics_opengl_GL.isSync = function(sync) {
        return lime_graphics_opengl_GL.context.__context.isSync(sync)
    };
    lime_graphics_opengl_GL.isTexture = function(texture) {
        return lime_graphics_opengl_GL.context.__context.isTexture(texture)
    };
    lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
        return lime_graphics_opengl_GL.context.__context.isTransformFeedback(transformFeedback)
    };
    lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
        return lime_graphics_opengl_GL.context.__context.isVertexArray(vertexArray)
    };
    lime_graphics_opengl_GL.lineWidth = function(width) {
        lime_graphics_opengl_GL.context.__context.lineWidth(width)
    };
    lime_graphics_opengl_GL.linkProgram = function(program) {
        lime_graphics_opengl_GL.context.__context.linkProgram(program)
    };
    lime_graphics_opengl_GL.mapBufferRange = function(target, offset, length, access) {
        null
    };
    lime_graphics_opengl_GL.pauseTransformFeedback = function() {
        lime_graphics_opengl_GL.context.__context.pauseTransformFeedback()
    };
    lime_graphics_opengl_GL.pixelStorei = function(pname, param) {
        lime_graphics_opengl_GL.context.__context.pixelStorei(pname, param)
    };
    lime_graphics_opengl_GL.polygonOffset = function(factor, units) {
        lime_graphics_opengl_GL.context.__context.polygonOffset(factor, units)
    };
    lime_graphics_opengl_GL.programBinary = function(program, binaryFormat, binary, length) {
        null
    };
    lime_graphics_opengl_GL.programParameteri = function(program, pname, value) {
        null
    };
    lime_graphics_opengl_GL.readBuffer = function(src) {
        lime_graphics_opengl_GL.context.__context.readBuffer(src)
    };
    lime_graphics_opengl_GL.readPixels = function(x, y, width, height, format, type, pixels) {
        lime_graphics_opengl_GL.context.readPixels(x, y, width, height, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer(pixels))
    };
    lime_graphics_opengl_GL.readPixelsWEBGL = function(x, y, width, height, format, type, pixels, dstOffset) {
        lime_graphics_opengl_GL.context.readPixelsWEBGL(x, y, width, height, format, type, pixels, dstOffset)
    };
    lime_graphics_opengl_GL.releaseShaderCompiler = function() {
        null
    };
    lime_graphics_opengl_GL.renderbufferStorage = function(target, internalformat, width, height) {
        lime_graphics_opengl_GL.context.__context.renderbufferStorage(target, internalformat, width, height)
    };
    lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target, samples, internalFormat, width, height) {
        lime_graphics_opengl_GL.context.__context.renderbufferStorageMultisample(target, samples, internalFormat, width, height)
    };
    lime_graphics_opengl_GL.resumeTransformFeedback = function() {
        lime_graphics_opengl_GL.context.__context.resumeTransformFeedback()
    };
    lime_graphics_opengl_GL.sampleCoverage = function(value, invert) {
        lime_graphics_opengl_GL.context.__context.sampleCoverage(value, invert)
    };
    lime_graphics_opengl_GL.samplerParameterf = function(sampler, pname, param) {
        lime_graphics_opengl_GL.context.__context.samplerParameterf(sampler, pname, param)
    };
    lime_graphics_opengl_GL.samplerParameteri = function(sampler, pname, param) {
        lime_graphics_opengl_GL.context.__context.samplerParameteri(sampler, pname, param)
    };
    lime_graphics_opengl_GL.scissor = function(x, y, width, height) {
        lime_graphics_opengl_GL.context.__context.scissor(x, y, width, height)
    };
    lime_graphics_opengl_GL.shaderBinary = function(shaders, binaryformat, binary, length) {
        null
    };
    lime_graphics_opengl_GL.shaderSource = function(shader, source) {
        lime_graphics_opengl_GL.context.__context.shaderSource(shader, source)
    };
    lime_graphics_opengl_GL.stencilFunc = function(func, ref, mask) {
        lime_graphics_opengl_GL.context.__context.stencilFunc(func, ref, mask)
    };
    lime_graphics_opengl_GL.stencilFuncSeparate = function(face, func, ref, mask) {
        lime_graphics_opengl_GL.context.__context.stencilFuncSeparate(face, func, ref, mask)
    };
    lime_graphics_opengl_GL.stencilMask = function(mask) {
        lime_graphics_opengl_GL.context.__context.stencilMask(mask)
    };
    lime_graphics_opengl_GL.stencilMaskSeparate = function(face, mask) {
        lime_graphics_opengl_GL.context.__context.stencilMaskSeparate(face, mask)
    };
    lime_graphics_opengl_GL.stencilOp = function(fail, zfail, zpass) {
        lime_graphics_opengl_GL.context.__context.stencilOp(fail, zfail, zpass)
    };
    lime_graphics_opengl_GL.stencilOpSeparate = function(face, fail, zfail, zpass) {
        lime_graphics_opengl_GL.context.__context.stencilOpSeparate(face, fail, zfail, zpass)
    };
    lime_graphics_opengl_GL.texImage2D = function(target, level, internalformat, width, height, border, format, type, data) {
        lime_graphics_opengl_GL.context.__context.texImage2D(target, level, internalformat, width, height, border, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl_GL.texImage2DWEBGL = function(target, level, internalformat, width, height, border, format, type, srcData, srcOffset) {
        lime_graphics_opengl_GL.context.texImage2DWEBGL(target, level, internalformat, width, height, border, format, type, srcData, srcOffset)
    };
    lime_graphics_opengl_GL.texImage3D = function(target, level, internalformat, width, height, depth, border, format, type, data) {
        lime_graphics_opengl_GL.context.__context.texImage3D(target, level, internalformat, width, height, depth, border, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl_GL.texImage3DWEBGL = function(target, level, internalformat, width, height, depth, border, format, type, srcData, srcOffset) {
        lime_graphics_opengl_GL.context.__context.texImage3D(target, level, internalformat, width, height, depth, border, format, type, srcData, srcOffset)
    };
    lime_graphics_opengl_GL.texStorage2D = function(target, level, internalformat, width, height) {
        lime_graphics_opengl_GL.context.__context.texStorage2D(target, level, internalformat, width, height)
    };
    lime_graphics_opengl_GL.texStorage3D = function(target, level, internalformat, width, height, depth) {
        lime_graphics_opengl_GL.context.__context.texStorage3D(target, level, internalformat, width, height, depth)
    };
    lime_graphics_opengl_GL.texParameterf = function(target, pname, param) {
        lime_graphics_opengl_GL.context.__context.texParameterf(target, pname, param)
    };
    lime_graphics_opengl_GL.texParameteri = function(target, pname, param) {
        lime_graphics_opengl_GL.context.__context.texParameteri(target, pname, param)
    };
    lime_graphics_opengl_GL.texSubImage2D = function(target, level, xoffset, yoffset, width, height, format, type, pixels) {
        lime_graphics_opengl_GL.context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(pixels))
    };
    lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target, level, xoffset, yoffset, width, height, format, type, srcData, srcOffset) {
        lime_graphics_opengl_GL.context.texSubImage2DWEBGL(target, level, xoffset, yoffset, width, height, format, type, srcData, srcOffset)
    };
    lime_graphics_opengl_GL.texSubImage3D = function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) {
        lime_graphics_opengl_GL.context.__context.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, source, srcOffset) {
        lime_graphics_opengl_GL.context.__context.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, source, srcOffset)
    };
    lime_graphics_opengl_GL.transformFeedbackVaryings = function(program, varyings, bufferMode) {
        lime_graphics_opengl_GL.context.__context.transformFeedbackVaryings(program, varyings, bufferMode)
    };
    lime_graphics_opengl_GL.uniform1f = function(location, v0) {
        lime_graphics_opengl_GL.context.__context.uniform1f(location, v0)
    };
    lime_graphics_opengl_GL.uniform1fv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform1fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4))
    };
    lime_graphics_opengl_GL.uniform1fvWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform1fvWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform1i = function(location, v0) {
        lime_graphics_opengl_GL.context.__context.uniform1i(location, v0)
    };
    lime_graphics_opengl_GL.uniform1iv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform1iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4))
    };
    lime_graphics_opengl_GL.uniform1ivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform1ivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform1ui = function(location, v0) {
        lime_graphics_opengl_GL.context.__context.uniform1ui(location, v0)
    };
    lime_graphics_opengl_GL.uniform1uiv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform1uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4))
    };
    lime_graphics_opengl_GL.uniform1uivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform1uivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform2f = function(location, v0, v1) {
        lime_graphics_opengl_GL.context.__context.uniform2f(location, v0, v1)
    };
    lime_graphics_opengl_GL.uniform2fv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform2fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 2))
    };
    lime_graphics_opengl_GL.uniform2fvWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform2fvWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform2i = function(location, x, y) {
        lime_graphics_opengl_GL.context.__context.uniform2i(location, x, y)
    };
    lime_graphics_opengl_GL.uniform2iv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform2iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 2))
    };
    lime_graphics_opengl_GL.uniform2ivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform2ivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform2ui = function(location, x, y) {
        lime_graphics_opengl_GL.context.__context.uniform2ui(location, x, y)
    };
    lime_graphics_opengl_GL.uniform2uiv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform2uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 2))
    };
    lime_graphics_opengl_GL.uniform2uivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform2uivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform3f = function(location, v0, v1, v2) {
        lime_graphics_opengl_GL.context.__context.uniform3f(location, v0, v1, v2)
    };
    lime_graphics_opengl_GL.uniform3fv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform3fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 3))
    };
    lime_graphics_opengl_GL.uniform3fvWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform3fvWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform3i = function(location, v0, v1, v2) {
        lime_graphics_opengl_GL.context.__context.uniform3i(location, v0, v1, v2)
    };
    lime_graphics_opengl_GL.uniform3iv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform3iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 3))
    };
    lime_graphics_opengl_GL.uniform3ivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform3ivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform3ui = function(location, v0, v1, v2) {
        lime_graphics_opengl_GL.context.__context.uniform3ui(location, v0, v1, v2)
    };
    lime_graphics_opengl_GL.uniform3uiv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform3uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 3))
    };
    lime_graphics_opengl_GL.uniform3uivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform3uivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform4f = function(location, v0, v1, v2, v3) {
        lime_graphics_opengl_GL.context.__context.uniform4f(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl_GL.uniform4fv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform4fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl_GL.uniform4fvWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform4fvWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform4i = function(location, v0, v1, v2, v3) {
        lime_graphics_opengl_GL.context.__context.uniform4i(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl_GL.uniform4iv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform4iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl_GL.uniform4ivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform4ivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniform4ui = function(location, v0, v1, v2, v3) {
        lime_graphics_opengl_GL.context.__context.uniform4ui(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl_GL.uniform4uiv = function(location, count, v) {
        lime_graphics_opengl_GL.context.__context.uniform4uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl_GL.uniform4uivWEBGL = function(location, data, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniform4uivWEBGL(location, data, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformBlockBinding = function(program, uniformBlockIndex, uniformBlockBinding) {
        lime_graphics_opengl_GL.context.__context.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding)
    };
    lime_graphics_opengl_GL.uniformMatrix2fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix2fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix2x3fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix2x3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 6))
    };
    lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix2x3fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix2x4fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix2x4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 8))
    };
    lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix2x4fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix3fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 9))
    };
    lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix3fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix3x2fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix3x2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 6))
    };
    lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix3x2fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix3x4fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix3x4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 12))
    };
    lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix3x4fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix4fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 16))
    };
    lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix4fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix4x2fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix4x2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 8))
    };
    lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix4x2fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.uniformMatrix4x3fv = function(location, count, transpose, v) {
        lime_graphics_opengl_GL.context.__context.uniformMatrix4x3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 12))
    };
    lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location, transpose, v, srcOffset, srcLength) {
        lime_graphics_opengl_GL.context.uniformMatrix4x3fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl_GL.unmapBuffer = function(target) {
        return false
    };
    lime_graphics_opengl_GL.useProgram = function(program) {
        lime_graphics_opengl_GL.__currentProgram = program;
        lime_graphics_opengl_GL.context.__context.useProgram(program)
    };
    lime_graphics_opengl_GL.validateProgram = function(program) {
        lime_graphics_opengl_GL.context.__context.validateProgram(program)
    };
    lime_graphics_opengl_GL.vertexAttrib1f = function(index, v0) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib1f(index, v0)
    };
    lime_graphics_opengl_GL.vertexAttrib1fv = function(index, v) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib1fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
    };
    lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index, v) {
        lime_graphics_opengl_GL.context.vertexAttrib1fv(index, v)
    };
    lime_graphics_opengl_GL.vertexAttrib2f = function(index, v0, v1) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib2f(index, v0, v1)
    };
    lime_graphics_opengl_GL.vertexAttrib2fv = function(index, v) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib2fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
    };
    lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index, v) {
        lime_graphics_opengl_GL.context.vertexAttrib2fv(index, v)
    };
    lime_graphics_opengl_GL.vertexAttrib3f = function(index, v0, v1, v2) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib3f(index, v0, v1, v2)
    };
    lime_graphics_opengl_GL.vertexAttrib3fv = function(index, v) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib3fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
    };
    lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index, v) {
        lime_graphics_opengl_GL.context.vertexAttrib3fv(index, v)
    };
    lime_graphics_opengl_GL.vertexAttrib4f = function(index, v0, v1, v2, v3) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib4f(index, v0, v1, v2, v3)
    };
    lime_graphics_opengl_GL.vertexAttrib4fv = function(index, v) {
        lime_graphics_opengl_GL.context.__context.vertexAttrib4fv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v))
    };
    lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index, v) {
        lime_graphics_opengl_GL.context.vertexAttrib4fv(index, v)
    };
    lime_graphics_opengl_GL.vertexAttribDivisor = function(index, divisor) {
        lime_graphics_opengl_GL.context.__context.vertexAttribDivisor(index, divisor)
    };
    lime_graphics_opengl_GL.vertexAttribI4i = function(index, v0, v1, v2, v3) {
        lime_graphics_opengl_GL.context.__context.vertexAttribI4i(index, v0, v1, v2, v3)
    };
    lime_graphics_opengl_GL.vertexAttribI4iv = function(index, v) {
        lime_graphics_opengl_GL.context.__context.vertexAttribI4iv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v))
    };
    lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index, v) {
        lime_graphics_opengl_GL.context.vertexAttribI4iv(index, v)
    };
    lime_graphics_opengl_GL.vertexAttribI4ui = function(index, v0, v1, v2, v3) {
        lime_graphics_opengl_GL.context.__context.vertexAttribI4ui(index, v0, v1, v2, v3)
    };
    lime_graphics_opengl_GL.vertexAttribI4uiv = function(index, v) {
        lime_graphics_opengl_GL.context.__context.vertexAttribI4uiv(index, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v))
    };
    lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index, v) {
        lime_graphics_opengl_GL.context.vertexAttribI4uiv(index, v)
    };
    lime_graphics_opengl_GL.vertexAttribIPointer = function(index, size, type, stride, offset) {
        lime_graphics_opengl_GL.context.__context.vertexAttribIPointer(index, size, type, stride, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)))
    };
    lime_graphics_opengl_GL.vertexAttribPointer = function(index, size, type, normalized, stride, offset) {
        lime_graphics_opengl_GL.context.__context.vertexAttribPointer(index, size, type, normalized, stride, lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset))
    };
    lime_graphics_opengl_GL.viewport = function(x, y, width, height) {
        lime_graphics_opengl_GL.context.__context.viewport(x, y, width, height)
    };
    lime_graphics_opengl_GL.waitSync = function(sync, flags, timeout) {
        lime_graphics_opengl_GL.context.__context.waitSync(sync, flags, timeout)
    };
    lime_graphics_opengl_GL.get_type = function() {
        return lime_graphics_opengl_GL.context.type
    };
    lime_graphics_opengl_GL.get_version = function() {
        return lime_graphics_opengl_GL.context.version
    };
    lime_graphics_opengl_GL.__getObjectID = function(object) {
        if (object == null) {
            return 0
        } else {
            return object.id
        }
    };
    var lime_graphics_opengl_GLContextType = $hxClasses["lime.graphics.opengl.GLContextType"] = {
        __ename__: ["lime", "graphics", "opengl", "GLContextType"],
        __constructs__: ["OPENGL", "GLES", "WEBGL"]
    };
    lime_graphics_opengl_GLContextType.OPENGL = ["OPENGL", 0];
    lime_graphics_opengl_GLContextType.OPENGL.toString = $estr;
    lime_graphics_opengl_GLContextType.OPENGL.__enum__ = lime_graphics_opengl_GLContextType;
    lime_graphics_opengl_GLContextType.GLES = ["GLES", 1];
    lime_graphics_opengl_GLContextType.GLES.toString = $estr;
    lime_graphics_opengl_GLContextType.GLES.__enum__ = lime_graphics_opengl_GLContextType;
    lime_graphics_opengl_GLContextType.WEBGL = ["WEBGL", 2];
    lime_graphics_opengl_GLContextType.WEBGL.toString = $estr;
    lime_graphics_opengl_GLContextType.WEBGL.__enum__ = lime_graphics_opengl_GLContextType;
    var lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$ = {};
    $hxClasses["lime.graphics.opengl._GLES2Context.GLES2Context_Impl_"] = lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$;
    lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$.__name__ = ["lime", "graphics", "opengl", "_GLES2Context", "GLES2Context_Impl_"];
    lime_graphics_opengl__$GLES2Context_GLES2Context_$Impl_$.fromGL = function(gl) {
        return lime_graphics_opengl_GL.context
    };
    var lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$ = {};
    $hxClasses["lime.graphics.opengl._GLES3Context.GLES3Context_Impl_"] = lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$;
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.__name__ = ["lime", "graphics", "opengl", "_GLES3Context", "GLES3Context_Impl_"];
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.__properties__ = {
        get_version: "get_version",
        get_type: "get_type",
        get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL: "get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
        get_TIMEOUT_IGNORED: "get_TIMEOUT_IGNORED",
        get_INVALID_INDEX: "get_INVALID_INDEX",
        get_DEPTH32F_STENCIL8: "get_DEPTH32F_STENCIL8",
        get_DEPTH_COMPONENT32F: "get_DEPTH_COMPONENT32F",
        get_DYNAMIC_COPY: "get_DYNAMIC_COPY",
        get_DYNAMIC_READ: "get_DYNAMIC_READ",
        get_STATIC_COPY: "get_STATIC_COPY",
        get_STATIC_READ: "get_STATIC_READ",
        get_STREAM_COPY: "get_STREAM_COPY",
        get_STREAM_READ: "get_STREAM_READ",
        get_DEPTH_COMPONENT24: "get_DEPTH_COMPONENT24",
        get_MAX: "get_MAX",
        get_MIN: "get_MIN",
        get_STENCIL: "get_STENCIL",
        get_DEPTH: "get_DEPTH",
        get_COLOR: "get_COLOR",
        get_SYNC_FLUSH_COMMANDS_BIT: "get_SYNC_FLUSH_COMMANDS_BIT",
        get_WAIT_FAILED: "get_WAIT_FAILED",
        get_CONDITION_SATISFIED: "get_CONDITION_SATISFIED",
        get_TIMEOUT_EXPIRED: "get_TIMEOUT_EXPIRED",
        get_ALREADY_SIGNALED: "get_ALREADY_SIGNALED",
        get_SIGNALED: "get_SIGNALED",
        get_UNSIGNALED: "get_UNSIGNALED",
        get_SYNC_GPU_COMMANDS_COMPLETE: "get_SYNC_GPU_COMMANDS_COMPLETE",
        get_SYNC_FENCE: "get_SYNC_FENCE",
        get_SYNC_FLAGS: "get_SYNC_FLAGS",
        get_SYNC_STATUS: "get_SYNC_STATUS",
        get_SYNC_CONDITION: "get_SYNC_CONDITION",
        get_OBJECT_TYPE: "get_OBJECT_TYPE",
        get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: "get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
        get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: "get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
        get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: "get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
        get_UNIFORM_BLOCK_ACTIVE_UNIFORMS: "get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",
        get_UNIFORM_BLOCK_DATA_SIZE: "get_UNIFORM_BLOCK_DATA_SIZE",
        get_UNIFORM_BLOCK_BINDING: "get_UNIFORM_BLOCK_BINDING",
        get_UNIFORM_IS_ROW_MAJOR: "get_UNIFORM_IS_ROW_MAJOR",
        get_UNIFORM_MATRIX_STRIDE: "get_UNIFORM_MATRIX_STRIDE",
        get_UNIFORM_ARRAY_STRIDE: "get_UNIFORM_ARRAY_STRIDE",
        get_UNIFORM_OFFSET: "get_UNIFORM_OFFSET",
        get_UNIFORM_BLOCK_INDEX: "get_UNIFORM_BLOCK_INDEX",
        get_UNIFORM_SIZE: "get_UNIFORM_SIZE",
        get_UNIFORM_TYPE: "get_UNIFORM_TYPE",
        get_ACTIVE_UNIFORM_BLOCKS: "get_ACTIVE_UNIFORM_BLOCKS",
        get_UNIFORM_BUFFER_OFFSET_ALIGNMENT: "get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",
        get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: "get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
        get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: "get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
        get_MAX_UNIFORM_BLOCK_SIZE: "get_MAX_UNIFORM_BLOCK_SIZE",
        get_MAX_UNIFORM_BUFFER_BINDINGS: "get_MAX_UNIFORM_BUFFER_BINDINGS",
        get_MAX_COMBINED_UNIFORM_BLOCKS: "get_MAX_COMBINED_UNIFORM_BLOCKS",
        get_MAX_FRAGMENT_UNIFORM_BLOCKS: "get_MAX_FRAGMENT_UNIFORM_BLOCKS",
        get_MAX_VERTEX_UNIFORM_BLOCKS: "get_MAX_VERTEX_UNIFORM_BLOCKS",
        get_UNIFORM_BUFFER_SIZE: "get_UNIFORM_BUFFER_SIZE",
        get_UNIFORM_BUFFER_START: "get_UNIFORM_BUFFER_START",
        get_UNIFORM_BUFFER_BINDING: "get_UNIFORM_BUFFER_BINDING",
        get_UNIFORM_BUFFER: "get_UNIFORM_BUFFER",
        get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: "get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
        get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: "get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
        get_RENDERBUFFER_SAMPLES: "get_RENDERBUFFER_SAMPLES",
        get_READ_FRAMEBUFFER_BINDING: "get_READ_FRAMEBUFFER_BINDING",
        get_DRAW_FRAMEBUFFER: "get_DRAW_FRAMEBUFFER",
        get_READ_FRAMEBUFFER: "get_READ_FRAMEBUFFER",
        get_DRAW_FRAMEBUFFER_BINDING: "get_DRAW_FRAMEBUFFER_BINDING",
        get_DEPTH24_STENCIL8: "get_DEPTH24_STENCIL8",
        get_FRAMEBUFFER_DEFAULT: "get_FRAMEBUFFER_DEFAULT",
        get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: "get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: "get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: "get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: "get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: "get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_RED_SIZE: "get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: "get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
        get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: "get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
        get_TRANSFORM_FEEDBACK_BINDING: "get_TRANSFORM_FEEDBACK_BINDING",
        get_TRANSFORM_FEEDBACK_ACTIVE: "get_TRANSFORM_FEEDBACK_ACTIVE",
        get_TRANSFORM_FEEDBACK_PAUSED: "get_TRANSFORM_FEEDBACK_PAUSED",
        get_TRANSFORM_FEEDBACK: "get_TRANSFORM_FEEDBACK",
        get_TRANSFORM_FEEDBACK_BUFFER_BINDING: "get_TRANSFORM_FEEDBACK_BUFFER_BINDING",
        get_TRANSFORM_FEEDBACK_BUFFER: "get_TRANSFORM_FEEDBACK_BUFFER",
        get_SEPARATE_ATTRIBS: "get_SEPARATE_ATTRIBS",
        get_INTERLEAVED_ATTRIBS: "get_INTERLEAVED_ATTRIBS",
        get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: "get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
        get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: "get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
        get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: "get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
        get_TRANSFORM_FEEDBACK_BUFFER_SIZE: "get_TRANSFORM_FEEDBACK_BUFFER_SIZE",
        get_TRANSFORM_FEEDBACK_BUFFER_START: "get_TRANSFORM_FEEDBACK_BUFFER_START",
        get_TRANSFORM_FEEDBACK_VARYINGS: "get_TRANSFORM_FEEDBACK_VARYINGS",
        get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: "get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
        get_TRANSFORM_FEEDBACK_BUFFER_MODE: "get_TRANSFORM_FEEDBACK_BUFFER_MODE",
        get_VERTEX_ATTRIB_ARRAY_DIVISOR: "get_VERTEX_ATTRIB_ARRAY_DIVISOR",
        get_VERTEX_ATTRIB_ARRAY_INTEGER: "get_VERTEX_ATTRIB_ARRAY_INTEGER",
        get_SIGNED_NORMALIZED: "get_SIGNED_NORMALIZED",
        get_UNSIGNED_NORMALIZED: "get_UNSIGNED_NORMALIZED",
        get_UNSIGNED_INT_VEC4: "get_UNSIGNED_INT_VEC4",
        get_UNSIGNED_INT_VEC3: "get_UNSIGNED_INT_VEC3",
        get_UNSIGNED_INT_VEC2: "get_UNSIGNED_INT_VEC2",
        get_FLOAT_MAT4x3: "get_FLOAT_MAT4x3",
        get_FLOAT_MAT4x2: "get_FLOAT_MAT4x2",
        get_FLOAT_MAT3x4: "get_FLOAT_MAT3x4",
        get_FLOAT_MAT3x2: "get_FLOAT_MAT3x2",
        get_FLOAT_MAT2x4: "get_FLOAT_MAT2x4",
        get_FLOAT_MAT2x3: "get_FLOAT_MAT2x3",
        get_COPY_WRITE_BUFFER_BINDING: "get_COPY_WRITE_BUFFER_BINDING",
        get_COPY_READ_BUFFER_BINDING: "get_COPY_READ_BUFFER_BINDING",
        get_COPY_WRITE_BUFFER: "get_COPY_WRITE_BUFFER",
        get_COPY_READ_BUFFER: "get_COPY_READ_BUFFER",
        get_PIXEL_UNPACK_BUFFER_BINDING: "get_PIXEL_UNPACK_BUFFER_BINDING",
        get_PIXEL_PACK_BUFFER_BINDING: "get_PIXEL_PACK_BUFFER_BINDING",
        get_PIXEL_UNPACK_BUFFER: "get_PIXEL_UNPACK_BUFFER",
        get_PIXEL_PACK_BUFFER: "get_PIXEL_PACK_BUFFER",
        get_SAMPLER_BINDING: "get_SAMPLER_BINDING",
        get_MAX_SAMPLES: "get_MAX_SAMPLES",
        get_UNSIGNED_INT_SAMPLER_2D_ARRAY: "get_UNSIGNED_INT_SAMPLER_2D_ARRAY",
        get_UNSIGNED_INT_SAMPLER_CUBE: "get_UNSIGNED_INT_SAMPLER_CUBE",
        get_UNSIGNED_INT_SAMPLER_3D: "get_UNSIGNED_INT_SAMPLER_3D",
        get_UNSIGNED_INT_SAMPLER_2D: "get_UNSIGNED_INT_SAMPLER_2D",
        get_INT_SAMPLER_2D_ARRAY: "get_INT_SAMPLER_2D_ARRAY",
        get_INT_SAMPLER_CUBE: "get_INT_SAMPLER_CUBE",
        get_INT_SAMPLER_3D: "get_INT_SAMPLER_3D",
        get_INT_SAMPLER_2D: "get_INT_SAMPLER_2D",
        get_SAMPLER_CUBE_SHADOW: "get_SAMPLER_CUBE_SHADOW",
        get_SAMPLER_2D_ARRAY_SHADOW: "get_SAMPLER_2D_ARRAY_SHADOW",
        get_SAMPLER_2D_ARRAY: "get_SAMPLER_2D_ARRAY",
        get_SAMPLER_2D_SHADOW: "get_SAMPLER_2D_SHADOW",
        get_SAMPLER_3D: "get_SAMPLER_3D",
        get_COLOR_ATTACHMENT15: "get_COLOR_ATTACHMENT15",
        get_COLOR_ATTACHMENT14: "get_COLOR_ATTACHMENT14",
        get_COLOR_ATTACHMENT13: "get_COLOR_ATTACHMENT13",
        get_COLOR_ATTACHMENT12: "get_COLOR_ATTACHMENT12",
        get_COLOR_ATTACHMENT11: "get_COLOR_ATTACHMENT11",
        get_COLOR_ATTACHMENT10: "get_COLOR_ATTACHMENT10",
        get_COLOR_ATTACHMENT9: "get_COLOR_ATTACHMENT9",
        get_COLOR_ATTACHMENT8: "get_COLOR_ATTACHMENT8",
        get_COLOR_ATTACHMENT7: "get_COLOR_ATTACHMENT7",
        get_COLOR_ATTACHMENT6: "get_COLOR_ATTACHMENT6",
        get_COLOR_ATTACHMENT5: "get_COLOR_ATTACHMENT5",
        get_COLOR_ATTACHMENT4: "get_COLOR_ATTACHMENT4",
        get_COLOR_ATTACHMENT3: "get_COLOR_ATTACHMENT3",
        get_COLOR_ATTACHMENT2: "get_COLOR_ATTACHMENT2",
        get_COLOR_ATTACHMENT1: "get_COLOR_ATTACHMENT1",
        get_MAX_COLOR_ATTACHMENTS: "get_MAX_COLOR_ATTACHMENTS",
        get_DRAW_BUFFER15: "get_DRAW_BUFFER15",
        get_DRAW_BUFFER14: "get_DRAW_BUFFER14",
        get_DRAW_BUFFER13: "get_DRAW_BUFFER13",
        get_DRAW_BUFFER12: "get_DRAW_BUFFER12",
        get_DRAW_BUFFER11: "get_DRAW_BUFFER11",
        get_DRAW_BUFFER10: "get_DRAW_BUFFER10",
        get_DRAW_BUFFER9: "get_DRAW_BUFFER9",
        get_DRAW_BUFFER8: "get_DRAW_BUFFER8",
        get_DRAW_BUFFER7: "get_DRAW_BUFFER7",
        get_DRAW_BUFFER6: "get_DRAW_BUFFER6",
        get_DRAW_BUFFER5: "get_DRAW_BUFFER5",
        get_DRAW_BUFFER4: "get_DRAW_BUFFER4",
        get_DRAW_BUFFER3: "get_DRAW_BUFFER3",
        get_DRAW_BUFFER2: "get_DRAW_BUFFER2",
        get_DRAW_BUFFER1: "get_DRAW_BUFFER1",
        get_DRAW_BUFFER0: "get_DRAW_BUFFER0",
        get_MAX_DRAW_BUFFERS: "get_MAX_DRAW_BUFFERS",
        get_ANY_SAMPLES_PASSED_CONSERVATIVE: "get_ANY_SAMPLES_PASSED_CONSERVATIVE",
        get_ANY_SAMPLES_PASSED: "get_ANY_SAMPLES_PASSED",
        get_QUERY_RESULT_AVAILABLE: "get_QUERY_RESULT_AVAILABLE",
        get_QUERY_RESULT: "get_QUERY_RESULT",
        get_CURRENT_QUERY: "get_CURRENT_QUERY",
        get_INT_2_10_10_10_REV: "get_INT_2_10_10_10_REV",
        get_RG_INTEGER: "get_RG_INTEGER",
        get_RG: "get_RG",
        get_HALF_FLOAT: "get_HALF_FLOAT",
        get_UNSIGNED_INT_24_8: "get_UNSIGNED_INT_24_8",
        get_FLOAT_32_UNSIGNED_INT_24_8_REV: "get_FLOAT_32_UNSIGNED_INT_24_8_REV",
        get_UNSIGNED_INT_5_9_9_9_REV: "get_UNSIGNED_INT_5_9_9_9_REV",
        get_UNSIGNED_INT_10F_11F_11F_REV: "get_UNSIGNED_INT_10F_11F_11F_REV",
        get_UNSIGNED_INT_2_10_10_10_REV: "get_UNSIGNED_INT_2_10_10_10_REV",
        get_TEXTURE_IMMUTABLE_LEVELS: "get_TEXTURE_IMMUTABLE_LEVELS",
        get_TEXTURE_IMMUTABLE_FORMAT: "get_TEXTURE_IMMUTABLE_FORMAT",
        get_RGB10_A2UI: "get_RGB10_A2UI",
        get_RGBA8_SNORM: "get_RGBA8_SNORM",
        get_RGB8_SNORM: "get_RGB8_SNORM",
        get_RG8_SNORM: "get_RG8_SNORM",
        get_R8_SNORM: "get_R8_SNORM",
        get_RG32UI: "get_RG32UI",
        get_RG32I: "get_RG32I",
        get_RG16UI: "get_RG16UI",
        get_RG16I: "get_RG16I",
        get_RG8UI: "get_RG8UI",
        get_RG8I: "get_RG8I",
        get_R32UI: "get_R32UI",
        get_R32I: "get_R32I",
        get_R16UI: "get_R16UI",
        get_R16I: "get_R16I",
        get_R8UI: "get_R8UI",
        get_R8I: "get_R8I",
        get_RG32F: "get_RG32F",
        get_RG16F: "get_RG16F",
        get_R32F: "get_R32F",
        get_R16F: "get_R16F",
        get_RG8: "get_RG8",
        get_R8: "get_R8",
        get_RGBA_INTEGER: "get_RGBA_INTEGER",
        get_RGB_INTEGER: "get_RGB_INTEGER",
        get_RED_INTEGER: "get_RED_INTEGER",
        get_RGB8I: "get_RGB8I",
        get_RGBA8I: "get_RGBA8I",
        get_RGB16I: "get_RGB16I",
        get_RGBA16I: "get_RGBA16I",
        get_RGB32I: "get_RGB32I",
        get_RGBA32I: "get_RGBA32I",
        get_RGB8UI: "get_RGB8UI",
        get_RGBA8UI: "get_RGBA8UI",
        get_RGB16UI: "get_RGB16UI",
        get_RGBA16UI: "get_RGBA16UI",
        get_RGB32UI: "get_RGB32UI",
        get_RGBA32UI: "get_RGBA32UI",
        get_RGB9_E5: "get_RGB9_E5",
        get_R11F_G11F_B10F: "get_R11F_G11F_B10F",
        get_TEXTURE_BINDING_2D_ARRAY: "get_TEXTURE_BINDING_2D_ARRAY",
        get_TEXTURE_2D_ARRAY: "get_TEXTURE_2D_ARRAY",
        get_RGB16F: "get_RGB16F",
        get_RGBA16F: "get_RGBA16F",
        get_RGB32F: "get_RGB32F",
        get_RGBA32F: "get_RGBA32F",
        get_COMPARE_REF_TO_TEXTURE: "get_COMPARE_REF_TO_TEXTURE",
        get_SRGB8_ALPHA8: "get_SRGB8_ALPHA8",
        get_SRGB8: "get_SRGB8",
        get_SRGB: "get_SRGB",
        get_TEXTURE_COMPARE_FUNC: "get_TEXTURE_COMPARE_FUNC",
        get_TEXTURE_COMPARE_MODE: "get_TEXTURE_COMPARE_MODE",
        get_TEXTURE_MAX_LEVEL: "get_TEXTURE_MAX_LEVEL",
        get_TEXTURE_BASE_LEVEL: "get_TEXTURE_BASE_LEVEL",
        get_TEXTURE_MAX_LOD: "get_TEXTURE_MAX_LOD",
        get_TEXTURE_MIN_LOD: "get_TEXTURE_MIN_LOD",
        get_TEXTURE_WRAP_R: "get_TEXTURE_WRAP_R",
        get_TEXTURE_3D: "get_TEXTURE_3D",
        get_RGB10_A2: "get_RGB10_A2",
        get_RGBA8: "get_RGBA8",
        get_RGB8: "get_RGB8",
        get_RED: "get_RED",
        get_MAX_ELEMENT_INDEX: "get_MAX_ELEMENT_INDEX",
        get_MAX_SERVER_WAIT_TIMEOUT: "get_MAX_SERVER_WAIT_TIMEOUT",
        get_MAX_FRAGMENT_INPUT_COMPONENTS: "get_MAX_FRAGMENT_INPUT_COMPONENTS",
        get_MAX_VERTEX_OUTPUT_COMPONENTS: "get_MAX_VERTEX_OUTPUT_COMPONENTS",
        get_VERTEX_ARRAY_BINDING: "get_VERTEX_ARRAY_BINDING",
        get_RASTERIZER_DISCARD: "get_RASTERIZER_DISCARD",
        get_FRAGMENT_SHADER_DERIVATIVE_HINT: "get_FRAGMENT_SHADER_DERIVATIVE_HINT",
        get_MAX_VARYING_COMPONENTS: "get_MAX_VARYING_COMPONENTS",
        get_MAX_PROGRAM_TEXEL_OFFSET: "get_MAX_PROGRAM_TEXEL_OFFSET",
        get_MIN_PROGRAM_TEXEL_OFFSET: "get_MIN_PROGRAM_TEXEL_OFFSET",
        get_MAX_ARRAY_TEXTURE_LAYERS: "get_MAX_ARRAY_TEXTURE_LAYERS",
        get_MAX_VERTEX_UNIFORM_COMPONENTS: "get_MAX_VERTEX_UNIFORM_COMPONENTS",
        get_MAX_FRAGMENT_UNIFORM_COMPONENTS: "get_MAX_FRAGMENT_UNIFORM_COMPONENTS",
        get_MAX_TEXTURE_LOD_BIAS: "get_MAX_TEXTURE_LOD_BIAS",
        get_MAX_ELEMENTS_INDICES: "get_MAX_ELEMENTS_INDICES",
        get_MAX_ELEMENTS_VERTICES: "get_MAX_ELEMENTS_VERTICES",
        get_MAX_3D_TEXTURE_SIZE: "get_MAX_3D_TEXTURE_SIZE",
        get_UNPACK_IMAGE_HEIGHT: "get_UNPACK_IMAGE_HEIGHT",
        get_UNPACK_SKIP_IMAGES: "get_UNPACK_SKIP_IMAGES",
        get_TEXTURE_BINDING_3D: "get_TEXTURE_BINDING_3D",
        get_PACK_SKIP_PIXELS: "get_PACK_SKIP_PIXELS",
        get_PACK_SKIP_ROWS: "get_PACK_SKIP_ROWS",
        get_PACK_ROW_LENGTH: "get_PACK_ROW_LENGTH",
        get_UNPACK_SKIP_PIXELS: "get_UNPACK_SKIP_PIXELS",
        get_UNPACK_SKIP_ROWS: "get_UNPACK_SKIP_ROWS",
        get_UNPACK_ROW_LENGTH: "get_UNPACK_ROW_LENGTH",
        get_READ_BUFFER: "get_READ_BUFFER",
        get_BROWSER_DEFAULT_WEBGL: "get_BROWSER_DEFAULT_WEBGL",
        get_UNPACK_COLORSPACE_CONVERSION_WEBGL: "get_UNPACK_COLORSPACE_CONVERSION_WEBGL",
        get_CONTEXT_LOST_WEBGL: "get_CONTEXT_LOST_WEBGL",
        get_UNPACK_PREMULTIPLY_ALPHA_WEBGL: "get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        get_UNPACK_FLIP_Y_WEBGL: "get_UNPACK_FLIP_Y_WEBGL",
        get_INVALID_FRAMEBUFFER_OPERATION: "get_INVALID_FRAMEBUFFER_OPERATION",
        get_MAX_RENDERBUFFER_SIZE: "get_MAX_RENDERBUFFER_SIZE",
        get_RENDERBUFFER_BINDING: "get_RENDERBUFFER_BINDING",
        get_FRAMEBUFFER_BINDING: "get_FRAMEBUFFER_BINDING",
        get_FRAMEBUFFER_UNSUPPORTED: "get_FRAMEBUFFER_UNSUPPORTED",
        get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: "get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: "get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: "get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        get_FRAMEBUFFER_COMPLETE: "get_FRAMEBUFFER_COMPLETE",
        get_NONE: "get_NONE",
        get_DEPTH_STENCIL_ATTACHMENT: "get_DEPTH_STENCIL_ATTACHMENT",
        get_STENCIL_ATTACHMENT: "get_STENCIL_ATTACHMENT",
        get_DEPTH_ATTACHMENT: "get_DEPTH_ATTACHMENT",
        get_COLOR_ATTACHMENT0: "get_COLOR_ATTACHMENT0",
        get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: "get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: "get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: "get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: "get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        get_RENDERBUFFER_STENCIL_SIZE: "get_RENDERBUFFER_STENCIL_SIZE",
        get_RENDERBUFFER_DEPTH_SIZE: "get_RENDERBUFFER_DEPTH_SIZE",
        get_RENDERBUFFER_ALPHA_SIZE: "get_RENDERBUFFER_ALPHA_SIZE",
        get_RENDERBUFFER_BLUE_SIZE: "get_RENDERBUFFER_BLUE_SIZE",
        get_RENDERBUFFER_GREEN_SIZE: "get_RENDERBUFFER_GREEN_SIZE",
        get_RENDERBUFFER_RED_SIZE: "get_RENDERBUFFER_RED_SIZE",
        get_RENDERBUFFER_INTERNAL_FORMAT: "get_RENDERBUFFER_INTERNAL_FORMAT",
        get_RENDERBUFFER_HEIGHT: "get_RENDERBUFFER_HEIGHT",
        get_RENDERBUFFER_WIDTH: "get_RENDERBUFFER_WIDTH",
        get_DEPTH_STENCIL: "get_DEPTH_STENCIL",
        get_STENCIL_INDEX8: "get_STENCIL_INDEX8",
        get_STENCIL_INDEX: "get_STENCIL_INDEX",
        get_DEPTH_COMPONENT16: "get_DEPTH_COMPONENT16",
        get_RGB565: "get_RGB565",
        get_RGB5_A1: "get_RGB5_A1",
        get_RGBA4: "get_RGBA4",
        get_RENDERBUFFER: "get_RENDERBUFFER",
        get_FRAMEBUFFER: "get_FRAMEBUFFER",
        get_HIGH_INT: "get_HIGH_INT",
        get_MEDIUM_INT: "get_MEDIUM_INT",
        get_LOW_INT: "get_LOW_INT",
        get_HIGH_FLOAT: "get_HIGH_FLOAT",
        get_MEDIUM_FLOAT: "get_MEDIUM_FLOAT",
        get_LOW_FLOAT: "get_LOW_FLOAT",
        get_COMPILE_STATUS: "get_COMPILE_STATUS",
        get_POINT_SPRITE: "get_POINT_SPRITE",
        get_VERTEX_PROGRAM_POINT_SIZE: "get_VERTEX_PROGRAM_POINT_SIZE",
        get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: "get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        get_VERTEX_ATTRIB_ARRAY_POINTER: "get_VERTEX_ATTRIB_ARRAY_POINTER",
        get_VERTEX_ATTRIB_ARRAY_NORMALIZED: "get_VERTEX_ATTRIB_ARRAY_NORMALIZED",
        get_VERTEX_ATTRIB_ARRAY_TYPE: "get_VERTEX_ATTRIB_ARRAY_TYPE",
        get_VERTEX_ATTRIB_ARRAY_STRIDE: "get_VERTEX_ATTRIB_ARRAY_STRIDE",
        get_VERTEX_ATTRIB_ARRAY_SIZE: "get_VERTEX_ATTRIB_ARRAY_SIZE",
        get_VERTEX_ATTRIB_ARRAY_ENABLED: "get_VERTEX_ATTRIB_ARRAY_ENABLED",
        get_SAMPLER_CUBE: "get_SAMPLER_CUBE",
        get_SAMPLER_2D: "get_SAMPLER_2D",
        get_FLOAT_MAT4: "get_FLOAT_MAT4",
        get_FLOAT_MAT3: "get_FLOAT_MAT3",
        get_FLOAT_MAT2: "get_FLOAT_MAT2",
        get_BOOL_VEC4: "get_BOOL_VEC4",
        get_BOOL_VEC3: "get_BOOL_VEC3",
        get_BOOL_VEC2: "get_BOOL_VEC2",
        get_BOOL: "get_BOOL",
        get_INT_VEC4: "get_INT_VEC4",
        get_INT_VEC3: "get_INT_VEC3",
        get_INT_VEC2: "get_INT_VEC2",
        get_FLOAT_VEC4: "get_FLOAT_VEC4",
        get_FLOAT_VEC3: "get_FLOAT_VEC3",
        get_FLOAT_VEC2: "get_FLOAT_VEC2",
        get_MIRRORED_REPEAT: "get_MIRRORED_REPEAT",
        get_CLAMP_TO_EDGE: "get_CLAMP_TO_EDGE",
        get_REPEAT: "get_REPEAT",
        get_ACTIVE_TEXTURE: "get_ACTIVE_TEXTURE",
        get_TEXTURE31: "get_TEXTURE31",
        get_TEXTURE30: "get_TEXTURE30",
        get_TEXTURE29: "get_TEXTURE29",
        get_TEXTURE28: "get_TEXTURE28",
        get_TEXTURE27: "get_TEXTURE27",
        get_TEXTURE26: "get_TEXTURE26",
        get_TEXTURE25: "get_TEXTURE25",
        get_TEXTURE24: "get_TEXTURE24",
        get_TEXTURE23: "get_TEXTURE23",
        get_TEXTURE22: "get_TEXTURE22",
        get_TEXTURE21: "get_TEXTURE21",
        get_TEXTURE20: "get_TEXTURE20",
        get_TEXTURE19: "get_TEXTURE19",
        get_TEXTURE18: "get_TEXTURE18",
        get_TEXTURE17: "get_TEXTURE17",
        get_TEXTURE16: "get_TEXTURE16",
        get_TEXTURE15: "get_TEXTURE15",
        get_TEXTURE14: "get_TEXTURE14",
        get_TEXTURE13: "get_TEXTURE13",
        get_TEXTURE12: "get_TEXTURE12",
        get_TEXTURE11: "get_TEXTURE11",
        get_TEXTURE10: "get_TEXTURE10",
        get_TEXTURE9: "get_TEXTURE9",
        get_TEXTURE8: "get_TEXTURE8",
        get_TEXTURE7: "get_TEXTURE7",
        get_TEXTURE6: "get_TEXTURE6",
        get_TEXTURE5: "get_TEXTURE5",
        get_TEXTURE4: "get_TEXTURE4",
        get_TEXTURE3: "get_TEXTURE3",
        get_TEXTURE2: "get_TEXTURE2",
        get_TEXTURE1: "get_TEXTURE1",
        get_TEXTURE0: "get_TEXTURE0",
        get_MAX_CUBE_MAP_TEXTURE_SIZE: "get_MAX_CUBE_MAP_TEXTURE_SIZE",
        get_TEXTURE_CUBE_MAP_NEGATIVE_Z: "get_TEXTURE_CUBE_MAP_NEGATIVE_Z",
        get_TEXTURE_CUBE_MAP_POSITIVE_Z: "get_TEXTURE_CUBE_MAP_POSITIVE_Z",
        get_TEXTURE_CUBE_MAP_NEGATIVE_Y: "get_TEXTURE_CUBE_MAP_NEGATIVE_Y",
        get_TEXTURE_CUBE_MAP_POSITIVE_Y: "get_TEXTURE_CUBE_MAP_POSITIVE_Y",
        get_TEXTURE_CUBE_MAP_NEGATIVE_X: "get_TEXTURE_CUBE_MAP_NEGATIVE_X",
        get_TEXTURE_CUBE_MAP_POSITIVE_X: "get_TEXTURE_CUBE_MAP_POSITIVE_X",
        get_TEXTURE_BINDING_CUBE_MAP: "get_TEXTURE_BINDING_CUBE_MAP",
        get_TEXTURE_CUBE_MAP: "get_TEXTURE_CUBE_MAP",
        get_TEXTURE: "get_TEXTURE",
        get_TEXTURE_2D: "get_TEXTURE_2D",
        get_TEXTURE_WRAP_T: "get_TEXTURE_WRAP_T",
        get_TEXTURE_WRAP_S: "get_TEXTURE_WRAP_S",
        get_TEXTURE_MIN_FILTER: "get_TEXTURE_MIN_FILTER",
        get_TEXTURE_MAG_FILTER: "get_TEXTURE_MAG_FILTER",
        get_LINEAR_MIPMAP_LINEAR: "get_LINEAR_MIPMAP_LINEAR",
        get_NEAREST_MIPMAP_LINEAR: "get_NEAREST_MIPMAP_LINEAR",
        get_LINEAR_MIPMAP_NEAREST: "get_LINEAR_MIPMAP_NEAREST",
        get_NEAREST_MIPMAP_NEAREST: "get_NEAREST_MIPMAP_NEAREST",
        get_LINEAR: "get_LINEAR",
        get_NEAREST: "get_NEAREST",
        get_VERSION: "get_VERSION",
        get_RENDERER: "get_RENDERER",
        get_VENDOR: "get_VENDOR",
        get_DECR_WRAP: "get_DECR_WRAP",
        get_INCR_WRAP: "get_INCR_WRAP",
        get_INVERT: "get_INVERT",
        get_DECR: "get_DECR",
        get_INCR: "get_INCR",
        get_REPLACE: "get_REPLACE",
        get_KEEP: "get_KEEP",
        get_ALWAYS: "get_ALWAYS",
        get_GEQUAL: "get_GEQUAL",
        get_NOTEQUAL: "get_NOTEQUAL",
        get_GREATER: "get_GREATER",
        get_LEQUAL: "get_LEQUAL",
        get_EQUAL: "get_EQUAL",
        get_LESS: "get_LESS",
        get_NEVER: "get_NEVER",
        get_CURRENT_PROGRAM: "get_CURRENT_PROGRAM",
        get_SHADING_LANGUAGE_VERSION: "get_SHADING_LANGUAGE_VERSION",
        get_ACTIVE_ATTRIBUTES: "get_ACTIVE_ATTRIBUTES",
        get_ACTIVE_UNIFORMS: "get_ACTIVE_UNIFORMS",
        get_ATTACHED_SHADERS: "get_ATTACHED_SHADERS",
        get_VALIDATE_STATUS: "get_VALIDATE_STATUS",
        get_LINK_STATUS: "get_LINK_STATUS",
        get_DELETE_STATUS: "get_DELETE_STATUS",
        get_SHADER_TYPE: "get_SHADER_TYPE",
        get_MAX_FRAGMENT_UNIFORM_VECTORS: "get_MAX_FRAGMENT_UNIFORM_VECTORS",
        get_MAX_TEXTURE_IMAGE_UNITS: "get_MAX_TEXTURE_IMAGE_UNITS",
        get_MAX_VERTEX_TEXTURE_IMAGE_UNITS: "get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        get_MAX_COMBINED_TEXTURE_IMAGE_UNITS: "get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        get_MAX_VARYING_VECTORS: "get_MAX_VARYING_VECTORS",
        get_MAX_VERTEX_UNIFORM_VECTORS: "get_MAX_VERTEX_UNIFORM_VECTORS",
        get_MAX_VERTEX_ATTRIBS: "get_MAX_VERTEX_ATTRIBS",
        get_VERTEX_SHADER: "get_VERTEX_SHADER",
        get_FRAGMENT_SHADER: "get_FRAGMENT_SHADER",
        get_UNSIGNED_SHORT_5_6_5: "get_UNSIGNED_SHORT_5_6_5",
        get_UNSIGNED_SHORT_5_5_5_1: "get_UNSIGNED_SHORT_5_5_5_1",
        get_UNSIGNED_SHORT_4_4_4_4: "get_UNSIGNED_SHORT_4_4_4_4",
        get_LUMINANCE_ALPHA: "get_LUMINANCE_ALPHA",
        get_LUMINANCE: "get_LUMINANCE",
        get_RGBA: "get_RGBA",
        get_RGB: "get_RGB",
        get_ALPHA: "get_ALPHA",
        get_DEPTH_COMPONENT: "get_DEPTH_COMPONENT",
        get_FLOAT: "get_FLOAT",
        get_UNSIGNED_INT: "get_UNSIGNED_INT",
        get_INT: "get_INT",
        get_UNSIGNED_SHORT: "get_UNSIGNED_SHORT",
        get_SHORT: "get_SHORT",
        get_UNSIGNED_BYTE: "get_UNSIGNED_BYTE",
        get_BYTE: "get_BYTE",
        get_GENERATE_MIPMAP_HINT: "get_GENERATE_MIPMAP_HINT",
        get_NICEST: "get_NICEST",
        get_FASTEST: "get_FASTEST",
        get_DONT_CARE: "get_DONT_CARE",
        get_COMPRESSED_TEXTURE_FORMATS: "get_COMPRESSED_TEXTURE_FORMATS",
        get_SAMPLE_COVERAGE_INVERT: "get_SAMPLE_COVERAGE_INVERT",
        get_SAMPLE_COVERAGE_VALUE: "get_SAMPLE_COVERAGE_VALUE",
        get_SAMPLES: "get_SAMPLES",
        get_SAMPLE_BUFFERS: "get_SAMPLE_BUFFERS",
        get_TEXTURE_BINDING_2D: "get_TEXTURE_BINDING_2D",
        get_POLYGON_OFFSET_FACTOR: "get_POLYGON_OFFSET_FACTOR",
        get_POLYGON_OFFSET_UNITS: "get_POLYGON_OFFSET_UNITS",
        get_STENCIL_BITS: "get_STENCIL_BITS",
        get_DEPTH_BITS: "get_DEPTH_BITS",
        get_ALPHA_BITS: "get_ALPHA_BITS",
        get_BLUE_BITS: "get_BLUE_BITS",
        get_GREEN_BITS: "get_GREEN_BITS",
        get_RED_BITS: "get_RED_BITS",
        get_SUBPIXEL_BITS: "get_SUBPIXEL_BITS",
        get_MAX_VIEWPORT_DIMS: "get_MAX_VIEWPORT_DIMS",
        get_MAX_TEXTURE_SIZE: "get_MAX_TEXTURE_SIZE",
        get_PACK_ALIGNMENT: "get_PACK_ALIGNMENT",
        get_UNPACK_ALIGNMENT: "get_UNPACK_ALIGNMENT",
        get_COLOR_WRITEMASK: "get_COLOR_WRITEMASK",
        get_COLOR_CLEAR_VALUE: "get_COLOR_CLEAR_VALUE",
        get_SCISSOR_BOX: "get_SCISSOR_BOX",
        get_VIEWPORT: "get_VIEWPORT",
        get_STENCIL_BACK_WRITEMASK: "get_STENCIL_BACK_WRITEMASK",
        get_STENCIL_BACK_VALUE_MASK: "get_STENCIL_BACK_VALUE_MASK",
        get_STENCIL_BACK_REF: "get_STENCIL_BACK_REF",
        get_STENCIL_BACK_PASS_DEPTH_PASS: "get_STENCIL_BACK_PASS_DEPTH_PASS",
        get_STENCIL_BACK_PASS_DEPTH_FAIL: "get_STENCIL_BACK_PASS_DEPTH_FAIL",
        get_STENCIL_BACK_FAIL: "get_STENCIL_BACK_FAIL",
        get_STENCIL_BACK_FUNC: "get_STENCIL_BACK_FUNC",
        get_STENCIL_WRITEMASK: "get_STENCIL_WRITEMASK",
        get_STENCIL_VALUE_MASK: "get_STENCIL_VALUE_MASK",
        get_STENCIL_REF: "get_STENCIL_REF",
        get_STENCIL_PASS_DEPTH_PASS: "get_STENCIL_PASS_DEPTH_PASS",
        get_STENCIL_PASS_DEPTH_FAIL: "get_STENCIL_PASS_DEPTH_FAIL",
        get_STENCIL_FAIL: "get_STENCIL_FAIL",
        get_STENCIL_FUNC: "get_STENCIL_FUNC",
        get_STENCIL_CLEAR_VALUE: "get_STENCIL_CLEAR_VALUE",
        get_DEPTH_FUNC: "get_DEPTH_FUNC",
        get_DEPTH_CLEAR_VALUE: "get_DEPTH_CLEAR_VALUE",
        get_DEPTH_WRITEMASK: "get_DEPTH_WRITEMASK",
        get_DEPTH_RANGE: "get_DEPTH_RANGE",
        get_FRONT_FACE: "get_FRONT_FACE",
        get_CULL_FACE_MODE: "get_CULL_FACE_MODE",
        get_ALIASED_LINE_WIDTH_RANGE: "get_ALIASED_LINE_WIDTH_RANGE",
        get_ALIASED_POINT_SIZE_RANGE: "get_ALIASED_POINT_SIZE_RANGE",
        get_LINE_WIDTH: "get_LINE_WIDTH",
        get_CCW: "get_CCW",
        get_CW: "get_CW",
        get_OUT_OF_MEMORY: "get_OUT_OF_MEMORY",
        get_INVALID_OPERATION: "get_INVALID_OPERATION",
        get_INVALID_VALUE: "get_INVALID_VALUE",
        get_INVALID_ENUM: "get_INVALID_ENUM",
        get_NO_ERROR: "get_NO_ERROR",
        get_SAMPLE_COVERAGE: "get_SAMPLE_COVERAGE",
        get_SAMPLE_ALPHA_TO_COVERAGE: "get_SAMPLE_ALPHA_TO_COVERAGE",
        get_POLYGON_OFFSET_FILL: "get_POLYGON_OFFSET_FILL",
        get_SCISSOR_TEST: "get_SCISSOR_TEST",
        get_DEPTH_TEST: "get_DEPTH_TEST",
        get_STENCIL_TEST: "get_STENCIL_TEST",
        get_DITHER: "get_DITHER",
        get_BLEND: "get_BLEND",
        get_CULL_FACE: "get_CULL_FACE",
        get_FRONT_AND_BACK: "get_FRONT_AND_BACK",
        get_BACK: "get_BACK",
        get_FRONT: "get_FRONT",
        get_CURRENT_VERTEX_ATTRIB: "get_CURRENT_VERTEX_ATTRIB",
        get_BUFFER_USAGE: "get_BUFFER_USAGE",
        get_BUFFER_SIZE: "get_BUFFER_SIZE",
        get_DYNAMIC_DRAW: "get_DYNAMIC_DRAW",
        get_STATIC_DRAW: "get_STATIC_DRAW",
        get_STREAM_DRAW: "get_STREAM_DRAW",
        get_ELEMENT_ARRAY_BUFFER_BINDING: "get_ELEMENT_ARRAY_BUFFER_BINDING",
        get_ARRAY_BUFFER_BINDING: "get_ARRAY_BUFFER_BINDING",
        get_ELEMENT_ARRAY_BUFFER: "get_ELEMENT_ARRAY_BUFFER",
        get_ARRAY_BUFFER: "get_ARRAY_BUFFER",
        get_BLEND_COLOR: "get_BLEND_COLOR",
        get_ONE_MINUS_CONSTANT_ALPHA: "get_ONE_MINUS_CONSTANT_ALPHA",
        get_CONSTANT_ALPHA: "get_CONSTANT_ALPHA",
        get_ONE_MINUS_CONSTANT_COLOR: "get_ONE_MINUS_CONSTANT_COLOR",
        get_CONSTANT_COLOR: "get_CONSTANT_COLOR",
        get_BLEND_SRC_ALPHA: "get_BLEND_SRC_ALPHA",
        get_BLEND_DST_ALPHA: "get_BLEND_DST_ALPHA",
        get_BLEND_SRC_RGB: "get_BLEND_SRC_RGB",
        get_BLEND_DST_RGB: "get_BLEND_DST_RGB",
        get_FUNC_REVERSE_SUBTRACT: "get_FUNC_REVERSE_SUBTRACT",
        get_FUNC_SUBTRACT: "get_FUNC_SUBTRACT",
        get_BLEND_EQUATION_ALPHA: "get_BLEND_EQUATION_ALPHA",
        get_BLEND_EQUATION_RGB: "get_BLEND_EQUATION_RGB",
        get_BLEND_EQUATION: "get_BLEND_EQUATION",
        get_FUNC_ADD: "get_FUNC_ADD",
        get_SRC_ALPHA_SATURATE: "get_SRC_ALPHA_SATURATE",
        get_ONE_MINUS_DST_COLOR: "get_ONE_MINUS_DST_COLOR",
        get_DST_COLOR: "get_DST_COLOR",
        get_ONE_MINUS_DST_ALPHA: "get_ONE_MINUS_DST_ALPHA",
        get_DST_ALPHA: "get_DST_ALPHA",
        get_ONE_MINUS_SRC_ALPHA: "get_ONE_MINUS_SRC_ALPHA",
        get_SRC_ALPHA: "get_SRC_ALPHA",
        get_ONE_MINUS_SRC_COLOR: "get_ONE_MINUS_SRC_COLOR",
        get_SRC_COLOR: "get_SRC_COLOR",
        get_ONE: "get_ONE",
        get_ZERO: "get_ZERO",
        get_TRIANGLE_FAN: "get_TRIANGLE_FAN",
        get_TRIANGLE_STRIP: "get_TRIANGLE_STRIP",
        get_TRIANGLES: "get_TRIANGLES",
        get_LINE_STRIP: "get_LINE_STRIP",
        get_LINE_LOOP: "get_LINE_LOOP",
        get_LINES: "get_LINES",
        get_POINTS: "get_POINTS",
        get_COLOR_BUFFER_BIT: "get_COLOR_BUFFER_BIT",
        get_STENCIL_BUFFER_BIT: "get_STENCIL_BUFFER_BIT",
        get_DEPTH_BUFFER_BIT: "get_DEPTH_BUFFER_BIT",
        get_EXTENSIONS: "get_EXTENSIONS"
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_EXTENSIONS = function(this1) {
        return 7939
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_BUFFER_BIT = function(this1) {
        return this1.DEPTH_BUFFER_BIT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BUFFER_BIT = function(this1) {
        return this1.STENCIL_BUFFER_BIT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_BUFFER_BIT = function(this1) {
        return this1.COLOR_BUFFER_BIT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POINTS = function(this1) {
        return this1.POINTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINES = function(this1) {
        return this1.LINES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_LOOP = function(this1) {
        return this1.LINE_LOOP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_STRIP = function(this1) {
        return this1.LINE_STRIP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLES = function(this1) {
        return this1.TRIANGLES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLE_STRIP = function(this1) {
        return this1.TRIANGLE_STRIP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRIANGLE_FAN = function(this1) {
        return this1.TRIANGLE_FAN
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ZERO = function(this1) {
        return this1.ZERO
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE = function(this1) {
        return this1.ONE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_COLOR = function(this1) {
        return this1.SRC_COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_SRC_COLOR = function(this1) {
        return this1.ONE_MINUS_SRC_COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_ALPHA = function(this1) {
        return this1.SRC_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_SRC_ALPHA = function(this1) {
        return this1.ONE_MINUS_SRC_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DST_ALPHA = function(this1) {
        return this1.DST_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_DST_ALPHA = function(this1) {
        return this1.ONE_MINUS_DST_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DST_COLOR = function(this1) {
        return this1.DST_COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_DST_COLOR = function(this1) {
        return this1.ONE_MINUS_DST_COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRC_ALPHA_SATURATE = function(this1) {
        return this1.SRC_ALPHA_SATURATE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_ADD = function(this1) {
        return this1.FUNC_ADD
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION = function(this1) {
        return this1.BLEND_EQUATION
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION_RGB = function(this1) {
        return this1.BLEND_EQUATION_RGB
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_EQUATION_ALPHA = function(this1) {
        return this1.BLEND_EQUATION_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_SUBTRACT = function(this1) {
        return this1.FUNC_SUBTRACT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FUNC_REVERSE_SUBTRACT = function(this1) {
        return this1.FUNC_REVERSE_SUBTRACT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_DST_RGB = function(this1) {
        return this1.BLEND_DST_RGB
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_SRC_RGB = function(this1) {
        return this1.BLEND_SRC_RGB
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_DST_ALPHA = function(this1) {
        return this1.BLEND_DST_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_SRC_ALPHA = function(this1) {
        return this1.BLEND_SRC_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONSTANT_COLOR = function(this1) {
        return this1.CONSTANT_COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
        return this1.ONE_MINUS_CONSTANT_COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONSTANT_ALPHA = function(this1) {
        return this1.CONSTANT_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
        return this1.ONE_MINUS_CONSTANT_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND_COLOR = function(this1) {
        return this1.BLEND_COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ARRAY_BUFFER = function(this1) {
        return this1.ARRAY_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER = function(this1) {
        return this1.ELEMENT_ARRAY_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ARRAY_BUFFER_BINDING = function(this1) {
        return this1.ARRAY_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
        return this1.ELEMENT_ARRAY_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_DRAW = function(this1) {
        return this1.STREAM_DRAW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_DRAW = function(this1) {
        return this1.STATIC_DRAW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_DRAW = function(this1) {
        return this1.DYNAMIC_DRAW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BUFFER_SIZE = function(this1) {
        return this1.BUFFER_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BUFFER_USAGE = function(this1) {
        return this1.BUFFER_USAGE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_VERTEX_ATTRIB = function(this1) {
        return this1.CURRENT_VERTEX_ATTRIB
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT = function(this1) {
        return this1.FRONT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BACK = function(this1) {
        return this1.BACK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT_AND_BACK = function(this1) {
        return this1.FRONT_AND_BACK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CULL_FACE = function(this1) {
        return this1.CULL_FACE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLEND = function(this1) {
        return this1.BLEND
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DITHER = function(this1) {
        return this1.DITHER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_TEST = function(this1) {
        return this1.STENCIL_TEST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_TEST = function(this1) {
        return this1.DEPTH_TEST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SCISSOR_TEST = function(this1) {
        return this1.SCISSOR_TEST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_FILL = function(this1) {
        return this1.POLYGON_OFFSET_FILL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
        return this1.SAMPLE_ALPHA_TO_COVERAGE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE = function(this1) {
        return this1.SAMPLE_COVERAGE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NO_ERROR = function(this1) {
        return this1.NO_ERROR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_ENUM = function(this1) {
        return this1.INVALID_ENUM
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_VALUE = function(this1) {
        return this1.INVALID_VALUE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_OPERATION = function(this1) {
        return this1.INVALID_OPERATION
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_OUT_OF_MEMORY = function(this1) {
        return this1.OUT_OF_MEMORY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CW = function(this1) {
        return this1.CW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CCW = function(this1) {
        return this1.CCW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINE_WIDTH = function(this1) {
        return this1.LINE_WIDTH
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
        return this1.ALIASED_POINT_SIZE_RANGE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
        return this1.ALIASED_LINE_WIDTH_RANGE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CULL_FACE_MODE = function(this1) {
        return this1.CULL_FACE_MODE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRONT_FACE = function(this1) {
        return this1.FRONT_FACE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_RANGE = function(this1) {
        return this1.DEPTH_RANGE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_WRITEMASK = function(this1) {
        return this1.DEPTH_WRITEMASK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_CLEAR_VALUE = function(this1) {
        return this1.DEPTH_CLEAR_VALUE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_FUNC = function(this1) {
        return this1.DEPTH_FUNC
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_CLEAR_VALUE = function(this1) {
        return this1.STENCIL_CLEAR_VALUE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_FUNC = function(this1) {
        return this1.STENCIL_FUNC
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_FAIL = function(this1) {
        return this1.STENCIL_FAIL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
        return this1.STENCIL_PASS_DEPTH_FAIL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
        return this1.STENCIL_PASS_DEPTH_PASS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_REF = function(this1) {
        return this1.STENCIL_REF
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_VALUE_MASK = function(this1) {
        return this1.STENCIL_VALUE_MASK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_WRITEMASK = function(this1) {
        return this1.STENCIL_WRITEMASK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_FUNC = function(this1) {
        return this1.STENCIL_BACK_FUNC
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_FAIL = function(this1) {
        return this1.STENCIL_BACK_FAIL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
        return this1.STENCIL_BACK_PASS_DEPTH_FAIL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
        return this1.STENCIL_BACK_PASS_DEPTH_PASS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_REF = function(this1) {
        return this1.STENCIL_BACK_REF
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_VALUE_MASK = function(this1) {
        return this1.STENCIL_BACK_VALUE_MASK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BACK_WRITEMASK = function(this1) {
        return this1.STENCIL_BACK_WRITEMASK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VIEWPORT = function(this1) {
        return this1.VIEWPORT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SCISSOR_BOX = function(this1) {
        return this1.SCISSOR_BOX
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_CLEAR_VALUE = function(this1) {
        return this1.COLOR_CLEAR_VALUE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_WRITEMASK = function(this1) {
        return this1.COLOR_WRITEMASK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_ALIGNMENT = function(this1) {
        return this1.UNPACK_ALIGNMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_ALIGNMENT = function(this1) {
        return this1.PACK_ALIGNMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_SIZE = function(this1) {
        return this1.MAX_TEXTURE_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VIEWPORT_DIMS = function(this1) {
        return this1.MAX_VIEWPORT_DIMS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SUBPIXEL_BITS = function(this1) {
        return this1.SUBPIXEL_BITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED_BITS = function(this1) {
        return this1.RED_BITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GREEN_BITS = function(this1) {
        return this1.GREEN_BITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BLUE_BITS = function(this1) {
        return this1.BLUE_BITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALPHA_BITS = function(this1) {
        return this1.ALPHA_BITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_BITS = function(this1) {
        return this1.DEPTH_BITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_BITS = function(this1) {
        return this1.STENCIL_BITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_UNITS = function(this1) {
        return this1.POLYGON_OFFSET_UNITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POLYGON_OFFSET_FACTOR = function(this1) {
        return this1.POLYGON_OFFSET_FACTOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_2D = function(this1) {
        return this1.TEXTURE_BINDING_2D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_BUFFERS = function(this1) {
        return this1.SAMPLE_BUFFERS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLES = function(this1) {
        return this1.SAMPLES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE_VALUE = function(this1) {
        return this1.SAMPLE_COVERAGE_VALUE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLE_COVERAGE_INVERT = function(this1) {
        return this1.SAMPLE_COVERAGE_INVERT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
        return this1.COMPRESSED_TEXTURE_FORMATS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DONT_CARE = function(this1) {
        return this1.DONT_CARE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FASTEST = function(this1) {
        return this1.FASTEST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NICEST = function(this1) {
        return this1.NICEST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GENERATE_MIPMAP_HINT = function(this1) {
        return this1.GENERATE_MIPMAP_HINT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BYTE = function(this1) {
        return this1.BYTE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_BYTE = function(this1) {
        return this1.UNSIGNED_BYTE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHORT = function(this1) {
        return this1.SHORT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT = function(this1) {
        return this1.UNSIGNED_SHORT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT = function(this1) {
        return this1.INT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT = function(this1) {
        return this1.UNSIGNED_INT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT = function(this1) {
        return this1.FLOAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT = function(this1) {
        return this1.DEPTH_COMPONENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALPHA = function(this1) {
        return this1.ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB = function(this1) {
        return this1.RGB
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA = function(this1) {
        return this1.RGBA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LUMINANCE = function(this1) {
        return this1.LUMINANCE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LUMINANCE_ALPHA = function(this1) {
        return this1.LUMINANCE_ALPHA
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
        return this1.UNSIGNED_SHORT_4_4_4_4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
        return this1.UNSIGNED_SHORT_5_5_5_1
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
        return this1.UNSIGNED_SHORT_5_6_5
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAGMENT_SHADER = function(this1) {
        return this1.FRAGMENT_SHADER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_SHADER = function(this1) {
        return this1.VERTEX_SHADER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_ATTRIBS = function(this1) {
        return this1.MAX_VERTEX_ATTRIBS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
        return this1.MAX_VERTEX_UNIFORM_VECTORS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VARYING_VECTORS = function(this1) {
        return this1.MAX_VARYING_VECTORS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
        return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
        return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
        return this1.MAX_TEXTURE_IMAGE_UNITS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
        return this1.MAX_FRAGMENT_UNIFORM_VECTORS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHADER_TYPE = function(this1) {
        return this1.SHADER_TYPE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DELETE_STATUS = function(this1) {
        return this1.DELETE_STATUS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINK_STATUS = function(this1) {
        return this1.LINK_STATUS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VALIDATE_STATUS = function(this1) {
        return this1.VALIDATE_STATUS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ATTACHED_SHADERS = function(this1) {
        return this1.ATTACHED_SHADERS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_UNIFORMS = function(this1) {
        return this1.ACTIVE_UNIFORMS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_ATTRIBUTES = function(this1) {
        return this1.ACTIVE_ATTRIBUTES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SHADING_LANGUAGE_VERSION = function(this1) {
        return this1.SHADING_LANGUAGE_VERSION
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_PROGRAM = function(this1) {
        return this1.CURRENT_PROGRAM
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEVER = function(this1) {
        return this1.NEVER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LESS = function(this1) {
        return this1.LESS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_EQUAL = function(this1) {
        return this1.EQUAL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LEQUAL = function(this1) {
        return this1.LEQUAL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GREATER = function(this1) {
        return this1.GREATER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NOTEQUAL = function(this1) {
        return this1.NOTEQUAL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_GEQUAL = function(this1) {
        return this1.GEQUAL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALWAYS = function(this1) {
        return this1.ALWAYS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_KEEP = function(this1) {
        return this1.KEEP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_REPLACE = function(this1) {
        return this1.REPLACE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INCR = function(this1) {
        return this1.INCR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DECR = function(this1) {
        return this1.DECR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVERT = function(this1) {
        return this1.INVERT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INCR_WRAP = function(this1) {
        return this1.INCR_WRAP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DECR_WRAP = function(this1) {
        return this1.DECR_WRAP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VENDOR = function(this1) {
        return this1.VENDOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERER = function(this1) {
        return this1.RENDERER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERSION = function(this1) {
        return this1.VERSION
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST = function(this1) {
        return this1.NEAREST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR = function(this1) {
        return this1.LINEAR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST_MIPMAP_NEAREST = function(this1) {
        return this1.NEAREST_MIPMAP_NEAREST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR_MIPMAP_NEAREST = function(this1) {
        return this1.LINEAR_MIPMAP_NEAREST
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NEAREST_MIPMAP_LINEAR = function(this1) {
        return this1.NEAREST_MIPMAP_LINEAR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LINEAR_MIPMAP_LINEAR = function(this1) {
        return this1.LINEAR_MIPMAP_LINEAR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAG_FILTER = function(this1) {
        return this1.TEXTURE_MAG_FILTER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MIN_FILTER = function(this1) {
        return this1.TEXTURE_MIN_FILTER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_S = function(this1) {
        return this1.TEXTURE_WRAP_S
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_T = function(this1) {
        return this1.TEXTURE_WRAP_T
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_2D = function(this1) {
        return this1.TEXTURE_2D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE = function(this1) {
        return this1.TEXTURE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP = function(this1) {
        return this1.TEXTURE_CUBE_MAP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
        return this1.TEXTURE_BINDING_CUBE_MAP
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
        return this1.TEXTURE_CUBE_MAP_POSITIVE_X
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
        return this1.TEXTURE_CUBE_MAP_NEGATIVE_X
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
        return this1.TEXTURE_CUBE_MAP_POSITIVE_Y
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
        return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
        return this1.TEXTURE_CUBE_MAP_POSITIVE_Z
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
        return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
        return this1.MAX_CUBE_MAP_TEXTURE_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE0 = function(this1) {
        return this1.TEXTURE0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE1 = function(this1) {
        return this1.TEXTURE1
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE2 = function(this1) {
        return this1.TEXTURE2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE3 = function(this1) {
        return this1.TEXTURE3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE4 = function(this1) {
        return this1.TEXTURE4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE5 = function(this1) {
        return this1.TEXTURE5
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE6 = function(this1) {
        return this1.TEXTURE6
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE7 = function(this1) {
        return this1.TEXTURE7
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE8 = function(this1) {
        return this1.TEXTURE8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE9 = function(this1) {
        return this1.TEXTURE9
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE10 = function(this1) {
        return this1.TEXTURE10
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE11 = function(this1) {
        return this1.TEXTURE11
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE12 = function(this1) {
        return this1.TEXTURE12
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE13 = function(this1) {
        return this1.TEXTURE13
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE14 = function(this1) {
        return this1.TEXTURE14
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE15 = function(this1) {
        return this1.TEXTURE15
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE16 = function(this1) {
        return this1.TEXTURE16
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE17 = function(this1) {
        return this1.TEXTURE17
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE18 = function(this1) {
        return this1.TEXTURE18
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE19 = function(this1) {
        return this1.TEXTURE19
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE20 = function(this1) {
        return this1.TEXTURE20
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE21 = function(this1) {
        return this1.TEXTURE21
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE22 = function(this1) {
        return this1.TEXTURE22
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE23 = function(this1) {
        return this1.TEXTURE23
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE24 = function(this1) {
        return this1.TEXTURE24
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE25 = function(this1) {
        return this1.TEXTURE25
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE26 = function(this1) {
        return this1.TEXTURE26
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE27 = function(this1) {
        return this1.TEXTURE27
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE28 = function(this1) {
        return this1.TEXTURE28
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE29 = function(this1) {
        return this1.TEXTURE29
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE30 = function(this1) {
        return this1.TEXTURE30
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE31 = function(this1) {
        return this1.TEXTURE31
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_TEXTURE = function(this1) {
        return this1.ACTIVE_TEXTURE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_REPEAT = function(this1) {
        return this1.REPEAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CLAMP_TO_EDGE = function(this1) {
        return this1.CLAMP_TO_EDGE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIRRORED_REPEAT = function(this1) {
        return this1.MIRRORED_REPEAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC2 = function(this1) {
        return this1.FLOAT_VEC2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC3 = function(this1) {
        return this1.FLOAT_VEC3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_VEC4 = function(this1) {
        return this1.FLOAT_VEC4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC2 = function(this1) {
        return this1.INT_VEC2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC3 = function(this1) {
        return this1.INT_VEC3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_VEC4 = function(this1) {
        return this1.INT_VEC4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL = function(this1) {
        return this1.BOOL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC2 = function(this1) {
        return this1.BOOL_VEC2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC3 = function(this1) {
        return this1.BOOL_VEC3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BOOL_VEC4 = function(this1) {
        return this1.BOOL_VEC4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2 = function(this1) {
        return this1.FLOAT_MAT2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3 = function(this1) {
        return this1.FLOAT_MAT3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4 = function(this1) {
        return this1.FLOAT_MAT4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D = function(this1) {
        return this1.SAMPLER_2D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_CUBE = function(this1) {
        return this1.SAMPLER_CUBE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_ENABLED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_STRIDE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_TYPE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_POINTER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_PROGRAM_POINT_SIZE = function(this1) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_POINT_SPRITE = function(this1) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPILE_STATUS = function(this1) {
        return this1.COMPILE_STATUS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LOW_FLOAT = function(this1) {
        return this1.LOW_FLOAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MEDIUM_FLOAT = function(this1) {
        return this1.MEDIUM_FLOAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HIGH_FLOAT = function(this1) {
        return this1.HIGH_FLOAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_LOW_INT = function(this1) {
        return this1.LOW_INT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MEDIUM_INT = function(this1) {
        return this1.MEDIUM_INT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HIGH_INT = function(this1) {
        return this1.HIGH_INT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER = function(this1) {
        return this1.FRAMEBUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER = function(this1) {
        return this1.RENDERBUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA4 = function(this1) {
        return this1.RGBA4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB5_A1 = function(this1) {
        return this1.RGB5_A1
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB565 = function(this1) {
        return this1.RGB565
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT16 = function(this1) {
        return this1.DEPTH_COMPONENT16
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_INDEX = function(this1) {
        return this1.STENCIL_INDEX
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_INDEX8 = function(this1) {
        return this1.STENCIL_INDEX8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_STENCIL = function(this1) {
        return this1.DEPTH_STENCIL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_WIDTH = function(this1) {
        return this1.RENDERBUFFER_WIDTH
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_HEIGHT = function(this1) {
        return this1.RENDERBUFFER_HEIGHT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
        return this1.RENDERBUFFER_INTERNAL_FORMAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_RED_SIZE = function(this1) {
        return this1.RENDERBUFFER_RED_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
        return this1.RENDERBUFFER_GREEN_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
        return this1.RENDERBUFFER_BLUE_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
        return this1.RENDERBUFFER_ALPHA_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
        return this1.RENDERBUFFER_DEPTH_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
        return this1.RENDERBUFFER_STENCIL_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT0 = function(this1) {
        return this1.COLOR_ATTACHMENT0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_ATTACHMENT = function(this1) {
        return this1.DEPTH_ATTACHMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL_ATTACHMENT = function(this1) {
        return this1.STENCIL_ATTACHMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
        return this1.DEPTH_STENCIL_ATTACHMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_NONE = function(this1) {
        return this1.NONE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_COMPLETE = function(this1) {
        return this1.FRAMEBUFFER_COMPLETE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
        return this1.FRAMEBUFFER_UNSUPPORTED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_BINDING = function(this1) {
        return this1.FRAMEBUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_BINDING = function(this1) {
        return this1.RENDERBUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_RENDERBUFFER_SIZE = function(this1) {
        return this1.MAX_RENDERBUFFER_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
        return this1.INVALID_FRAMEBUFFER_OPERATION
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
        return this1.UNPACK_FLIP_Y_WEBGL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
        return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONTEXT_LOST_WEBGL = function(this1) {
        return this1.CONTEXT_LOST_WEBGL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
        return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_BROWSER_DEFAULT_WEBGL = function(this1) {
        return this1.BROWSER_DEFAULT_WEBGL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_type = function(this1) {
        return this1.type
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_version = function(this1) {
        return this1.version
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_BUFFER = function(this1) {
        return this1.READ_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_ROW_LENGTH = function(this1) {
        return this1.UNPACK_ROW_LENGTH
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_ROWS = function(this1) {
        return this1.UNPACK_SKIP_ROWS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_PIXELS = function(this1) {
        return this1.UNPACK_SKIP_PIXELS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_ROW_LENGTH = function(this1) {
        return this1.PACK_ROW_LENGTH
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_SKIP_ROWS = function(this1) {
        return this1.PACK_SKIP_ROWS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PACK_SKIP_PIXELS = function(this1) {
        return this1.PACK_SKIP_PIXELS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_3D = function(this1) {
        return this1.TEXTURE_BINDING_3D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_SKIP_IMAGES = function(this1) {
        return this1.UNPACK_SKIP_IMAGES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNPACK_IMAGE_HEIGHT = function(this1) {
        return this1.UNPACK_IMAGE_HEIGHT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_3D_TEXTURE_SIZE = function(this1) {
        return this1.MAX_3D_TEXTURE_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENTS_VERTICES = function(this1) {
        return this1.MAX_ELEMENTS_VERTICES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENTS_INDICES = function(this1) {
        return this1.MAX_ELEMENTS_INDICES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
        return this1.MAX_TEXTURE_LOD_BIAS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_VERTEX_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
        return this1.MAX_ARRAY_TEXTURE_LAYERS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
        return this1.MIN_PROGRAM_TEXEL_OFFSET
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
        return this1.MAX_PROGRAM_TEXEL_OFFSET
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VARYING_COMPONENTS = function(this1) {
        return this1.MAX_VARYING_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
        return this1.FRAGMENT_SHADER_DERIVATIVE_HINT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RASTERIZER_DISCARD = function(this1) {
        return this1.RASTERIZER_DISCARD
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ARRAY_BINDING = function(this1) {
        return this1.VERTEX_ARRAY_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
        return this1.MAX_VERTEX_OUTPUT_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
        return this1.MAX_FRAGMENT_INPUT_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
        return this1.MAX_SERVER_WAIT_TIMEOUT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_ELEMENT_INDEX = function(this1) {
        return this1.MAX_ELEMENT_INDEX
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED = function(this1) {
        return this1.RED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8 = function(this1) {
        return this1.RGB8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8 = function(this1) {
        return this1.RGBA8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB10_A2 = function(this1) {
        return this1.RGB10_A2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_3D = function(this1) {
        return this1.TEXTURE_3D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_WRAP_R = function(this1) {
        return this1.TEXTURE_WRAP_R
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MIN_LOD = function(this1) {
        return this1.TEXTURE_MIN_LOD
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAX_LOD = function(this1) {
        return this1.TEXTURE_MAX_LOD
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BASE_LEVEL = function(this1) {
        return this1.TEXTURE_BASE_LEVEL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_MAX_LEVEL = function(this1) {
        return this1.TEXTURE_MAX_LEVEL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_COMPARE_MODE = function(this1) {
        return this1.TEXTURE_COMPARE_MODE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_COMPARE_FUNC = function(this1) {
        return this1.TEXTURE_COMPARE_FUNC
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB = function(this1) {
        return this1.SRGB
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB8 = function(this1) {
        return this1.SRGB8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SRGB8_ALPHA8 = function(this1) {
        return this1.SRGB8_ALPHA8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COMPARE_REF_TO_TEXTURE = function(this1) {
        return this1.COMPARE_REF_TO_TEXTURE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32F = function(this1) {
        return this1.RGBA32F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32F = function(this1) {
        return this1.RGB32F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16F = function(this1) {
        return this1.RGBA16F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16F = function(this1) {
        return this1.RGB16F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_2D_ARRAY = function(this1) {
        return this1.TEXTURE_2D_ARRAY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
        return this1.TEXTURE_BINDING_2D_ARRAY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R11F_G11F_B10F = function(this1) {
        return this1.R11F_G11F_B10F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB9_E5 = function(this1) {
        return this1.RGB9_E5
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32UI = function(this1) {
        return this1.RGBA32UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32UI = function(this1) {
        return this1.RGB32UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16UI = function(this1) {
        return this1.RGBA16UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16UI = function(this1) {
        return this1.RGB16UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8UI = function(this1) {
        return this1.RGBA8UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8UI = function(this1) {
        return this1.RGB8UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA32I = function(this1) {
        return this1.RGBA32I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB32I = function(this1) {
        return this1.RGB32I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA16I = function(this1) {
        return this1.RGBA16I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB16I = function(this1) {
        return this1.RGB16I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8I = function(this1) {
        return this1.RGBA8I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8I = function(this1) {
        return this1.RGB8I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RED_INTEGER = function(this1) {
        return this1.RED_INTEGER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB_INTEGER = function(this1) {
        return this1.RGB_INTEGER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA_INTEGER = function(this1) {
        return this1.RGBA_INTEGER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8 = function(this1) {
        return this1.R8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8 = function(this1) {
        return this1.RG8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16F = function(this1) {
        return this1.R16F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32F = function(this1) {
        return this1.R32F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16F = function(this1) {
        return this1.RG16F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32F = function(this1) {
        return this1.RG32F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8I = function(this1) {
        return this1.R8I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8UI = function(this1) {
        return this1.R8UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16I = function(this1) {
        return this1.R16I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R16UI = function(this1) {
        return this1.R16UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32I = function(this1) {
        return this1.R32I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R32UI = function(this1) {
        return this1.R32UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8I = function(this1) {
        return this1.RG8I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8UI = function(this1) {
        return this1.RG8UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16I = function(this1) {
        return this1.RG16I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG16UI = function(this1) {
        return this1.RG16UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32I = function(this1) {
        return this1.RG32I
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG32UI = function(this1) {
        return this1.RG32UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_R8_SNORM = function(this1) {
        return this1.R8_SNORM
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG8_SNORM = function(this1) {
        return this1.RG8_SNORM
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB8_SNORM = function(this1) {
        return this1.RGB8_SNORM
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGBA8_SNORM = function(this1) {
        return this1.RGBA8_SNORM
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RGB10_A2UI = function(this1) {
        return this1.RGB10_A2UI
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
        return this1.TEXTURE_IMMUTABLE_FORMAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
        return this1.TEXTURE_IMMUTABLE_LEVELS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
        return this1.UNSIGNED_INT_2_10_10_10_REV
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
        return this1.UNSIGNED_INT_10F_11F_11F_REV
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
        return this1.UNSIGNED_INT_5_9_9_9_REV
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
        return this1.FLOAT_32_UNSIGNED_INT_24_8_REV
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_24_8 = function(this1) {
        return this1.UNSIGNED_INT_24_8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_HALF_FLOAT = function(this1) {
        return this1.HALF_FLOAT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG = function(this1) {
        return this1.RG
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RG_INTEGER = function(this1) {
        return this1.RG_INTEGER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_2_10_10_10_REV = function(this1) {
        return this1.INT_2_10_10_10_REV
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CURRENT_QUERY = function(this1) {
        return this1.CURRENT_QUERY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_QUERY_RESULT = function(this1) {
        return this1.QUERY_RESULT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_QUERY_RESULT_AVAILABLE = function(this1) {
        return this1.QUERY_RESULT_AVAILABLE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ANY_SAMPLES_PASSED = function(this1) {
        return this1.ANY_SAMPLES_PASSED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
        return this1.ANY_SAMPLES_PASSED_CONSERVATIVE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_DRAW_BUFFERS = function(this1) {
        return this1.MAX_DRAW_BUFFERS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER0 = function(this1) {
        return this1.DRAW_BUFFER0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER1 = function(this1) {
        return this1.DRAW_BUFFER1
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER2 = function(this1) {
        return this1.DRAW_BUFFER2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER3 = function(this1) {
        return this1.DRAW_BUFFER3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER4 = function(this1) {
        return this1.DRAW_BUFFER4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER5 = function(this1) {
        return this1.DRAW_BUFFER5
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER6 = function(this1) {
        return this1.DRAW_BUFFER6
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER7 = function(this1) {
        return this1.DRAW_BUFFER7
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER8 = function(this1) {
        return this1.DRAW_BUFFER8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER9 = function(this1) {
        return this1.DRAW_BUFFER9
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER10 = function(this1) {
        return this1.DRAW_BUFFER10
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER11 = function(this1) {
        return this1.DRAW_BUFFER11
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER12 = function(this1) {
        return this1.DRAW_BUFFER12
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER13 = function(this1) {
        return this1.DRAW_BUFFER13
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER14 = function(this1) {
        return this1.DRAW_BUFFER14
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_BUFFER15 = function(this1) {
        return this1.DRAW_BUFFER15
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COLOR_ATTACHMENTS = function(this1) {
        return this1.MAX_COLOR_ATTACHMENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT1 = function(this1) {
        return this1.COLOR_ATTACHMENT1
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT2 = function(this1) {
        return this1.COLOR_ATTACHMENT2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT3 = function(this1) {
        return this1.COLOR_ATTACHMENT3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT4 = function(this1) {
        return this1.COLOR_ATTACHMENT4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT5 = function(this1) {
        return this1.COLOR_ATTACHMENT5
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT6 = function(this1) {
        return this1.COLOR_ATTACHMENT6
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT7 = function(this1) {
        return this1.COLOR_ATTACHMENT7
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT8 = function(this1) {
        return this1.COLOR_ATTACHMENT8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT9 = function(this1) {
        return this1.COLOR_ATTACHMENT9
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT10 = function(this1) {
        return this1.COLOR_ATTACHMENT10
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT11 = function(this1) {
        return this1.COLOR_ATTACHMENT11
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT12 = function(this1) {
        return this1.COLOR_ATTACHMENT12
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT13 = function(this1) {
        return this1.COLOR_ATTACHMENT13
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT14 = function(this1) {
        return this1.COLOR_ATTACHMENT14
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR_ATTACHMENT15 = function(this1) {
        return this1.COLOR_ATTACHMENT15
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_3D = function(this1) {
        return this1.SAMPLER_3D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_SHADOW = function(this1) {
        return this1.SAMPLER_2D_SHADOW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_ARRAY = function(this1) {
        return this1.SAMPLER_2D_ARRAY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
        return this1.SAMPLER_2D_ARRAY_SHADOW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_CUBE_SHADOW = function(this1) {
        return this1.SAMPLER_CUBE_SHADOW
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_2D = function(this1) {
        return this1.INT_SAMPLER_2D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_3D = function(this1) {
        return this1.INT_SAMPLER_3D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_CUBE = function(this1) {
        return this1.INT_SAMPLER_CUBE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INT_SAMPLER_2D_ARRAY = function(this1) {
        return this1.INT_SAMPLER_2D_ARRAY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_2D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_3D
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_CUBE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_SAMPLES = function(this1) {
        return this1.MAX_SAMPLES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SAMPLER_BINDING = function(this1) {
        return this1.SAMPLER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_PACK_BUFFER = function(this1) {
        return this1.PIXEL_PACK_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_UNPACK_BUFFER = function(this1) {
        return this1.PIXEL_UNPACK_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
        return this1.PIXEL_PACK_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
        return this1.PIXEL_UNPACK_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_READ_BUFFER = function(this1) {
        return this1.COPY_READ_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_WRITE_BUFFER = function(this1) {
        return this1.COPY_WRITE_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_READ_BUFFER_BINDING = function(this1) {
        return this1.COPY_READ_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
        return this1.COPY_WRITE_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2x3 = function(this1) {
        return this1.FLOAT_MAT2x3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT2x4 = function(this1) {
        return this1.FLOAT_MAT2x4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3x2 = function(this1) {
        return this1.FLOAT_MAT3x2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT3x4 = function(this1) {
        return this1.FLOAT_MAT3x4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4x2 = function(this1) {
        return this1.FLOAT_MAT4x2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FLOAT_MAT4x3 = function(this1) {
        return this1.FLOAT_MAT4x3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC2 = function(this1) {
        return this1.UNSIGNED_INT_VEC2
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC3 = function(this1) {
        return this1.UNSIGNED_INT_VEC3
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_INT_VEC4 = function(this1) {
        return this1.UNSIGNED_INT_VEC4
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNED_NORMALIZED = function(this1) {
        return this1.UNSIGNED_NORMALIZED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SIGNED_NORMALIZED = function(this1) {
        return this1.SIGNED_NORMALIZED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_INTEGER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_DIVISOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_MODE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
        return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
        return this1.TRANSFORM_FEEDBACK_VARYINGS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_START
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
        return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
        return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
        return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INTERLEAVED_ATTRIBS = function(this1) {
        return this1.INTERLEAVED_ATTRIBS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SEPARATE_ATTRIBS = function(this1) {
        return this1.SEPARATE_ATTRIBS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK = function(this1) {
        return this1.TRANSFORM_FEEDBACK
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
        return this1.TRANSFORM_FEEDBACK_PAUSED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
        return this1.TRANSFORM_FEEDBACK_ACTIVE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_DEFAULT = function(this1) {
        return this1.FRAMEBUFFER_DEFAULT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH24_STENCIL8 = function(this1) {
        return this1.DEPTH24_STENCIL8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
        return this1.DRAW_FRAMEBUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_FRAMEBUFFER = function(this1) {
        return this1.READ_FRAMEBUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DRAW_FRAMEBUFFER = function(this1) {
        return this1.DRAW_FRAMEBUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_READ_FRAMEBUFFER_BINDING = function(this1) {
        return this1.READ_FRAMEBUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_RENDERBUFFER_SAMPLES = function(this1) {
        return this1.RENDERBUFFER_SAMPLES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER = function(this1) {
        return this1.UNIFORM_BUFFER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_BINDING = function(this1) {
        return this1.UNIFORM_BUFFER_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_START = function(this1) {
        return this1.UNIFORM_BUFFER_START
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_SIZE = function(this1) {
        return this1.UNIFORM_BUFFER_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
        return this1.MAX_VERTEX_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
        return this1.MAX_FRAGMENT_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
        return this1.MAX_COMBINED_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
        return this1.MAX_UNIFORM_BUFFER_BINDINGS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
        return this1.MAX_UNIFORM_BLOCK_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
        return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
        return this1.ACTIVE_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_TYPE = function(this1) {
        return this1.UNIFORM_TYPE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_SIZE = function(this1) {
        return this1.UNIFORM_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_INDEX = function(this1) {
        return this1.UNIFORM_BLOCK_INDEX
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_OFFSET = function(this1) {
        return this1.UNIFORM_OFFSET
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_ARRAY_STRIDE = function(this1) {
        return this1.UNIFORM_ARRAY_STRIDE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_MATRIX_STRIDE = function(this1) {
        return this1.UNIFORM_MATRIX_STRIDE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
        return this1.UNIFORM_IS_ROW_MAJOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_BINDING = function(this1) {
        return this1.UNIFORM_BLOCK_BINDING
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
        return this1.UNIFORM_BLOCK_DATA_SIZE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
        return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
        return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
        return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
        return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_OBJECT_TYPE = function(this1) {
        return this1.OBJECT_TYPE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_CONDITION = function(this1) {
        return this1.SYNC_CONDITION
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_STATUS = function(this1) {
        return this1.SYNC_STATUS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FLAGS = function(this1) {
        return this1.SYNC_FLAGS
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FENCE = function(this1) {
        return this1.SYNC_FENCE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
        return this1.SYNC_GPU_COMMANDS_COMPLETE
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_UNSIGNALED = function(this1) {
        return this1.UNSIGNALED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SIGNALED = function(this1) {
        return this1.SIGNALED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_ALREADY_SIGNALED = function(this1) {
        return this1.ALREADY_SIGNALED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TIMEOUT_EXPIRED = function(this1) {
        return this1.TIMEOUT_EXPIRED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_CONDITION_SATISFIED = function(this1) {
        return this1.CONDITION_SATISFIED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_WAIT_FAILED = function(this1) {
        return this1.WAIT_FAILED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
        return this1.SYNC_FLUSH_COMMANDS_BIT
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_COLOR = function(this1) {
        return this1.COLOR
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH = function(this1) {
        return this1.DEPTH
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STENCIL = function(this1) {
        return this1.STENCIL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MIN = function(this1) {
        return this1.MIN
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX = function(this1) {
        return this1.MAX
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT24 = function(this1) {
        return this1.DEPTH_COMPONENT24
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_READ = function(this1) {
        return this1.STREAM_READ
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STREAM_COPY = function(this1) {
        return this1.STREAM_COPY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_READ = function(this1) {
        return this1.STATIC_READ
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_STATIC_COPY = function(this1) {
        return this1.STATIC_COPY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_READ = function(this1) {
        return this1.DYNAMIC_READ
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DYNAMIC_COPY = function(this1) {
        return this1.DYNAMIC_COPY
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH_COMPONENT32F = function(this1) {
        return this1.DEPTH_COMPONENT32F
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_DEPTH32F_STENCIL8 = function(this1) {
        return this1.DEPTH32F_STENCIL8
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_INVALID_INDEX = function(this1) {
        return this1.INVALID_INDEX
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_TIMEOUT_IGNORED = function(this1) {
        return this1.TIMEOUT_IGNORED
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
        return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.activeTexture = function(this1, texture) {
        this1.__context.activeTexture(texture)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.attachShader = function(this1, program, shader) {
        this1.__context.attachShader(program, shader)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.beginQuery = function(this1, target, query) {
        this1.__context.beginQuery(target, query)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.beginTransformFeedback = function(this1, primitiveNode) {
        this1.__context.beginTransformFeedback(primitiveNode)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindAttribLocation = function(this1, program, index, name) {
        this1.__context.bindAttribLocation(program, index, name)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBuffer = function(this1, target, buffer) {
        this1.__context.bindBuffer(target, buffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBufferBase = function(this1, target, index, buffer) {
        this1.__context.bindBufferBase(target, index, buffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindBufferRange = function(this1, target, index, buffer, offset, size) {
        this1.__context.bindBufferRange(target, index, buffer, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindFramebuffer = function(this1, target, framebuffer) {
        this1.__context.bindFramebuffer(target, framebuffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindRenderbuffer = function(this1, target, renderbuffer) {
        this1.__context.bindRenderbuffer(target, renderbuffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindSampler = function(this1, unit, sampler) {
        this1.__context.bindSampler(unit, sampler)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindTexture = function(this1, target, texture) {
        this1.__context.bindTexture(target, texture)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindTransformFeedback = function(this1, target, transformFeedback) {
        this1.__context.bindTransformFeedback(target, transformFeedback)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bindVertexArray = function(this1, vertexArray) {
        this1.__context.bindVertexArray(vertexArray)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendColor = function(this1, red, green, blue, alpha) {
        this1.__context.blendColor(red, green, blue, alpha)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendEquation = function(this1, mode) {
        this1.__context.blendEquation(mode)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendEquationSeparate = function(this1, modeRGB, modeAlpha) {
        this1.__context.blendEquationSeparate(modeRGB, modeAlpha)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendFunc = function(this1, sfactor, dfactor) {
        this1.__context.blendFunc(sfactor, dfactor)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blendFuncSeparate = function(this1, srcRGB, dstRGB, srcAlpha, dstAlpha) {
        this1.__context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.blitFramebuffer = function(this1, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) {
        this1.__context.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bufferData = function(this1, target, size, data, usage) {
        this1.__context.bufferData(target, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, size), usage)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.bufferSubData = function(this1, target, offset, size, data) {
        this1.__context.bufferSubData(target, offset, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, size))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.checkFramebufferStatus = function(this1, target) {
        return this1.__context.checkFramebufferStatus(target)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clear = function(this1, mask) {
        this1.__context.clear(mask)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferfi = function(this1, buffer, drawbuffer, depth, stencil) {
        this1.__context.clearBufferfi(buffer, drawbuffer, depth, stencil)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferfv = function(this1, buffer, drawbuffer, value) {
        this1.__context.clearBufferfv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(value))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferiv = function(this1, buffer, drawbuffer, value) {
        this1.__context.clearBufferiv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(value))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearBufferuiv = function(this1, buffer, drawbuffer, value) {
        this1.__context.clearBufferuiv(buffer, drawbuffer, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(value))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearColor = function(this1, red, green, blue, alpha) {
        this1.__context.clearColor(red, green, blue, alpha)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearDepthf = function(this1, depth) {
        this1.__context.clearDepth(depth)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clearStencil = function(this1, s) {
        this1.__context.clearStencil(s)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.clientWaitSync = function(this1, sync, flags, timeout) {
        return this1.__context.clientWaitSync(sync, flags, timeout)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.colorMask = function(this1, red, green, blue, alpha) {
        this1.__context.colorMask(red, green, blue, alpha)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compileShader = function(this1, shader) {
        this1.__context.compileShader(shader)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexImage2D = function(this1, target, level, internalformat, width, height, border, imageSize, data) {
        this1.__context.compressedTexImage2D(target, level, internalformat, width, height, border, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexImage3D = function(this1, target, level, internalformat, width, height, depth, border, imageSize, data) {
        this1.__context.compressedTexImage3D(target, level, internalformat, width, height, depth, border, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexSubImage2D = function(this1, target, level, xoffset, yoffset, width, height, format, imageSize, data) {
        this1.__context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.compressedTexSubImage3D = function(this1, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) {
        this1.__context.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data, imageSize))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyBufferSubData = function(this1, readTarget, writeTarget, readOffset, writeOffset, size) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexImage2D = function(this1, target, level, internalformat, x, y, width, height, border) {
        this1.__context.copyTexImage2D(target, level, internalformat, x, y, width, height, border)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexSubImage2D = function(this1, target, level, xoffset, yoffset, x, y, width, height) {
        this1.__context.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.copyTexSubImage3D = function(this1, target, level, xoffset, yoffset, zoffset, x, y, width, height) {
        this1.__context.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createBuffer = function(this1) {
        return this1.__context.createBuffer()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createFramebuffer = function(this1) {
        return this1.__context.createFramebuffer()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createProgram = function(this1) {
        return this1.__context.createProgram()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createQuery = function(this1) {
        return this1.__context.createQuery()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createRenderbuffer = function(this1) {
        return this1.__context.createRenderbuffer()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createSampler = function(this1) {
        return this1.__context.createSampler()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createShader = function(this1, type) {
        return this1.__context.createShader(type)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createTexture = function(this1) {
        return this1.__context.createTexture()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createTransformFeedback = function(this1) {
        return this1.__context.createTransformFeedback()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.createVertexArray = function(this1) {
        return this1.__context.createVertexArray()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.cullFace = function(this1, mode) {
        this1.__context.cullFace(mode)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteBuffer = function(this1, buffer) {
        this1.__context.deleteBuffer(buffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteFramebuffer = function(this1, framebuffer) {
        this1.__context.deleteFramebuffer(framebuffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteProgram = function(this1, program) {
        this1.__context.deleteProgram(program)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteQuery = function(this1, query) {
        this1.__context.deleteQuery(query)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteRenderbuffer = function(this1, renderbuffer) {
        this1.__context.deleteRenderbuffer(renderbuffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteSampler = function(this1, sampler) {
        this1.__context.deleteSampler(sampler)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteShader = function(this1, shader) {
        this1.__context.deleteShader(shader)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteSync = function(this1, sync) {
        this1.__context.deleteSync(sync)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteTexture = function(this1, texture) {
        this1.__context.deleteTexture(texture)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteTransformFeedback = function(this1, transformFeedback) {
        this1.__context.deleteTransformFeedback(transformFeedback)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.deleteVertexArray = function(this1, vertexArray) {
        this1.__context.deleteVertexArray(vertexArray)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthFunc = function(this1, func) {
        this1.__context.depthFunc(func)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthMask = function(this1, flag) {
        this1.__context.depthMask(flag)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.depthRangef = function(this1, zNear, zFar) {
        this1.__context.depthRange(zNear, zFar)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.detachShader = function(this1, program, shader) {
        this1.__context.detachShader(program, shader)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.disable = function(this1, cap) {
        this1.__context.disable(cap)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.disableVertexAttribArray = function(this1, index) {
        this1.__context.disableVertexAttribArray(index)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawArrays = function(this1, mode, first, count) {
        this1.__context.drawArrays(mode, first, count)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawArraysInstanced = function(this1, mode, first, count, instanceCount) {
        this1.__context.drawArraysInstanced(mode, first, count, instanceCount)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawBuffers = function(this1, buffers) {
        this1.__context.drawBuffers(buffers)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawElements = function(this1, mode, count, type, offset) {
        this1.__context.drawElements(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawElementsInstanced = function(this1, mode, count, type, offset, instanceCount) {
        this1.__context.drawElementsInstanced(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), instanceCount)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.drawRangeElements = function(this1, mode, start, end, count, type, offset) {
        this1.__context.drawRangeElements(mode, start, end, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.enable = function(this1, cap) {
        this1.__context.enable(cap)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.enableVertexAttribArray = function(this1, index) {
        this1.__context.enableVertexAttribArray(index)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.endQuery = function(this1, target) {
        this1.__context.endQuery(target)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.endTransformFeedback = function(this1) {
        this1.__context.endTransformFeedback()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.fenceSync = function(this1, condition, flags) {
        return this1.__context.fenceSync(condition, flags)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.finish = function(this1) {
        this1.__context.finish()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.flush = function(this1) {
        this1.__context.flush()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferRenderbuffer = function(this1, target, attachment, renderbuffertarget, renderbuffer) {
        this1.__context.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferTexture2D = function(this1, target, attachment, textarget, texture, level) {
        this1.__context.framebufferTexture2D(target, attachment, textarget, texture, level)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.framebufferTextureLayer = function(this1, target, attachment, texture, level, layer) {
        this1.__context.framebufferTextureLayer(target, attachment, texture, level, layer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.frontFace = function(this1, mode) {
        this1.__context.frontFace(mode)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genBuffers = function(this1, n, buffers) {
        if (buffers == null) {
            buffers = []
        }
        var _g = 0;
        while (_g < n) {
            var i = _g++;
            buffers[i] = this1.__context.createBuffer()
        }
        return buffers
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.generateMipmap = function(this1, target) {
        this1.__context.generateMipmap(target)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genFramebuffers = function(this1, n, framebuffers) {
        if (framebuffers == null) {
            framebuffers = []
        }
        var _g = 0;
        while (_g < n) {
            var i = _g++;
            framebuffers[i] = this1.__context.createFramebuffer()
        }
        return framebuffers
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genQueries = function(this1, n, queries) {
        if (queries == null) {
            queries = []
        }
        var _g = 0;
        while (_g < n) {
            var i = _g++;
            queries[i] = this1.__context.createQuery()
        }
        return queries
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genRenderbuffers = function(this1, n, renderbuffers) {
        if (renderbuffers == null) {
            renderbuffers = []
        }
        var _g = 0;
        while (_g < n) {
            var i = _g++;
            renderbuffers[i] = this1.__context.createRenderbuffer()
        }
        return renderbuffers
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genSamplers = function(this1, n, samplers) {
        if (samplers == null) {
            samplers = []
        }
        var _g = 0;
        while (_g < n) {
            var i = _g++;
            samplers[i] = this1.__context.createSampler()
        }
        return samplers
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genTextures = function(this1, n, textures) {
        if (textures == null) {
            textures = []
        }
        var _g = 0;
        while (_g < n) {
            var i = _g++;
            textures[i] = this1.__context.createTexture()
        }
        return textures
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.genTransformFeedbacks = function(this1, n, transformFeedbacks) {
        if (transformFeedbacks == null) {
            transformFeedbacks = []
        }
        var _g = 0;
        while (_g < n) {
            var i = _g++;
            transformFeedbacks[i] = this1.__context.createTransformFeedback()
        }
        return transformFeedbacks
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveAttrib = function(this1, program, index) {
        return this1.__context.getActiveAttrib(program, index)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniform = function(this1, program, index) {
        return this1.__context.getActiveUniform(program, index)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlocki = function(this1, program, uniformBlockIndex, pname) {
        return this1.__context.getActiveUniformBlockParameter(program, uniformBlockIndex, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlockiv = function(this1, program, uniformBlockIndex, pname, params) {
        this1.getActiveUniformBlockiv(program, uniformBlockIndex, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformBlockName = function(this1, program, uniformBlockIndex) {
        return this1.__context.getActiveUniformBlockName(program, uniformBlockIndex)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getActiveUniformsiv = function(this1, program, uniformIndices, pname, params) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getAttachedShaders = function(this1, program) {
        return this1.__context.getAttachedShaders(program)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getAttribLocation = function(this1, program, name) {
        return this1.__context.getAttribLocation(program, name)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBoolean = function(this1, pname) {
        return this1.__context.getParameter(pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBooleanv = function(this1, pname, params) {
        this1.getBooleanv(pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteri = function(this1, target, pname) {
        return this1.__context.getBufferParameter(target, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteri64v = function(this1, target, pname, params) {
        this1.getBufferParameteri64v(target, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferParameteriv = function(this1, target, pname, params) {
        this1.getBufferParameteriv(target, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getBufferPointerv = function(this1, target, pname) {
        return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getError = function(this1) {
        return this1.__context.getError()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFloat = function(this1, pname) {
        return this1.__context.getParameter(pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFloatv = function(this1, pname, params) {
        this1.getFloatv(pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getExtension = function(this1, name) {
        return this1.__context.getExtension(name)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFragDataLocation = function(this1, program, name) {
        return this1.__context.getFragDataLocation(program, name)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFramebufferAttachmentParameteri = function(this1, target, attachment, pname) {
        return this1.__context.getFramebufferAttachmentParameter(target, attachment, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getFramebufferAttachmentParameteriv = function(this1, target, attachment, pname, params) {
        this1.getFramebufferAttachmentParameteriv(target, attachment, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger = function(this1, pname) {
        return this1.__context.getParameter(pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64 = function(this1, pname) {
        return this1.getInteger64(pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64i = function(this1, pname) {
        return this1.getInteger64(pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64i_v = function(this1, pname, params) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInteger64v = function(this1, pname, params) {
        this1.getInteger64v(pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getIntegeri = function(this1, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getIntegeri_v = function(this1, pname, params) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getIntegerv = function(this1, pname, params) {
        this1.getIntegerv(pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInternalformati = function(this1, target, internalformat, pname) {
        return this1.__context.getInternalformatParameter(target, internalformat, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getInternalformativ = function(this1, target, internalformat, pname, params) {
        this1.getInternalformativ(target, internalformat, pname, params);
        return
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramBinary = function(this1, program, binaryFormat) {
        return null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgrami = function(this1, program, pname) {
        return this1.__context.getProgramParameter(program, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramInfoLog = function(this1, program) {
        return this1.__context.getProgramInfoLog(program)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getProgramiv = function(this1, program, pname, params) {
        this1.getProgramiv(program, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryi = function(this1, target, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryiv = function(this1, target, pname, params) {
        this1.getQueryiv(target, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryObjectui = function(this1, query, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getQueryObjectuiv = function(this1, query, pname, params) {
        this1.getQueryObjectuiv(query, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getRenderbufferParameteri = function(this1, target, pname) {
        return this1.__context.getRenderbufferParameter(target, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getRenderbufferParameteriv = function(this1, target, pname, params) {
        this1.getRenderbufferParameteriv(target, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameteri = function(this1, sampler, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameteriv = function(this1, sampler, pname, params) {
        this1.getSamplerParameteriv(sampler, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameterf = function(this1, sampler, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSamplerParameterfv = function(this1, sampler, pname, params) {
        this1.getSamplerParameterfv(sampler, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderInfoLog = function(this1, shader) {
        return this1.__context.getShaderInfoLog(shader)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderi = function(this1, shader, pname) {
        return this1.__context.getShaderParameter(shader, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderiv = function(this1, shader, pname, params) {
        this1.getShaderiv(shader, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderPrecisionFormat = function(this1, shadertype, precisiontype) {
        return this1.__context.getShaderPrecisionFormat(shadertype, precisiontype)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getShaderSource = function(this1, shader) {
        return this1.__context.getShaderSource(shader)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getString = function(this1, name) {
        return this1.getString(name)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getStringi = function(this1, name, index) {
        return null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSyncParameteri = function(this1, sync, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getSyncParameteriv = function(this1, sync, pname, params) {
        this1.getSyncParameteriv(sync, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameterf = function(this1, target, pname) {
        return this1.__context.getTexParameter(target, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameterfv = function(this1, target, pname, params) {
        this1.getTexParameterfv(target, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameteri = function(this1, target, pname) {
        return this1.__context.getTexParameter(target, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTexParameteriv = function(this1, target, pname, params) {
        this1.getTexParameteriv(target, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getTransformFeedbackVarying = function(this1, program, index) {
        return this1.__context.getTransformFeedbackVarying(program, index)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformf = function(this1, program, location) {
        return this1.__context.getUniform(program, location)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformfv = function(this1, program, location, params) {
        this1.getUniformfv(program, location, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformi = function(this1, program, location) {
        return this1.__context.getUniform(program, location)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformiv = function(this1, program, location, params) {
        this1.getUniformiv(program, location, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformui = function(this1, program, location) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformuiv = function(this1, program, location, params) {
        this1.getUniformuiv(program, location, params);
        return
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformBlockIndex = function(this1, program, uniformBlockName) {
        return this1.__context.getUniformBlockIndex(program, uniformBlockName)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformIndices = function(this1, program, uniformNames) {
        return this1.__context.getUniformIndices(program, uniformNames)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getUniformLocation = function(this1, program, name) {
        return this1.__context.getUniformLocation(program, name)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribf = function(this1, index, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribfv = function(this1, index, pname, params) {
        this1.getVertexAttribfv(index, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribi = function(this1, index, pname) {
        return this1.__context.getVertexAttrib(index, pname)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIi = function(this1, index, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIiv = function(this1, index, pname, params) {
        return null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIui = function(this1, index, pname) {
        return 0
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribIuiv = function(this1, index, pname, params) {
        return null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribiv = function(this1, index, pname, params) {
        this1.getVertexAttribiv(index, pname, params)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.getVertexAttribPointerv = function(this1, index, pname) {
        return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this1.__context.getVertexAttribOffset(index, pname))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.hint = function(this1, target, mode) {
        this1.__context.hint(target, mode)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.invalidateFramebuffer = function(this1, target, attachments) {
        this1.__context.invalidateFramebuffer(target, attachments)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.invalidateSubFramebuffer = function(this1, target, attachments, x, y, width, height) {
        this1.__context.invalidateSubFramebuffer(target, attachments, x, y, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isBuffer = function(this1, buffer) {
        return this1.__context.isBuffer(buffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isEnabled = function(this1, cap) {
        return this1.__context.isEnabled(cap)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isFramebuffer = function(this1, framebuffer) {
        return this1.__context.isFramebuffer(framebuffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isProgram = function(this1, program) {
        return this1.__context.isProgram(program)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isQuery = function(this1, query) {
        return this1.__context.isQuery(query)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isRenderbuffer = function(this1, renderbuffer) {
        return this1.__context.isRenderbuffer(renderbuffer)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isSampler = function(this1, sampler) {
        return this1.__context.isSampler(sampler)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isShader = function(this1, shader) {
        return this1.__context.isShader(shader)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isTexture = function(this1, texture) {
        return this1.__context.isTexture(texture)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isTransformFeedback = function(this1, transformFeedback) {
        return this1.__context.isTransformFeedback(transformFeedback)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.isVertexArray = function(this1, vertexArray) {
        return this1.__context.isVertexArray(vertexArray)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.lineWidth = function(this1, width) {
        this1.__context.lineWidth(width)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.linkProgram = function(this1, program) {
        this1.__context.linkProgram(program)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.mapBufferRange = function(this1, target, offset, length, access) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.pauseTransformFeedback = function(this1) {
        this1.__context.pauseTransformFeedback()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.pixelStorei = function(this1, pname, param) {
        this1.__context.pixelStorei(pname, param)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.polygonOffset = function(this1, factor, units) {
        this1.__context.polygonOffset(factor, units)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.programBinary = function(this1, program, binaryFormat, binary, length) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.programParameteri = function(this1, program, pname, value) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.readBuffer = function(this1, src) {
        this1.__context.readBuffer(src)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.readPixels = function(this1, x, y, width, height, format, type, data) {
        this1.__context.readPixels(x, y, width, height, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.releaseShaderCompiler = function(this1) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.renderbufferStorage = function(this1, target, internalformat, width, height) {
        this1.__context.renderbufferStorage(target, internalformat, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.renderbufferStorageMultisample = function(this1, target, samples, internalFormat, width, height) {
        this1.__context.renderbufferStorageMultisample(target, samples, internalFormat, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.resumeTransformFeedback = function(this1) {
        this1.__context.resumeTransformFeedback()
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.sampleCoverage = function(this1, value, invert) {
        this1.__context.sampleCoverage(value, invert)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.samplerParameterf = function(this1, sampler, pname, param) {
        this1.__context.samplerParameterf(sampler, pname, param)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.samplerParameteri = function(this1, sampler, pname, param) {
        this1.__context.samplerParameteri(sampler, pname, param)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.scissor = function(this1, x, y, width, height) {
        this1.__context.scissor(x, y, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.shaderBinary = function(this1, shaders, binaryformat, binary, length) {
        null
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.shaderSource = function(this1, shader, source) {
        this1.__context.shaderSource(shader, source)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilFunc = function(this1, func, ref, mask) {
        this1.__context.stencilFunc(func, ref, mask)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilFuncSeparate = function(this1, face, func, ref, mask) {
        this1.__context.stencilFuncSeparate(face, func, ref, mask)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilMask = function(this1, mask) {
        this1.__context.stencilMask(mask)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilMaskSeparate = function(this1, face, mask) {
        this1.__context.stencilMaskSeparate(face, mask)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilOp = function(this1, fail, zfail, zpass) {
        this1.__context.stencilOp(fail, zfail, zpass)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.stencilOpSeparate = function(this1, face, fail, zfail, zpass) {
        this1.__context.stencilOpSeparate(face, fail, zfail, zpass)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texImage2D = function(this1, target, level, internalformat, width, height, border, format, type, data) {
        this1.__context.texImage2D(target, level, internalformat, width, height, border, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texImage3D = function(this1, target, level, internalformat, width, height, depth, border, format, type, data) {
        this1.__context.texImage3D(target, level, internalformat, width, height, depth, border, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texStorage2D = function(this1, target, level, internalformat, width, height) {
        this1.__context.texStorage2D(target, level, internalformat, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texStorage3D = function(this1, target, level, internalformat, width, height, depth) {
        this1.__context.texStorage3D(target, level, internalformat, width, height, depth)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texParameterf = function(this1, target, pname, param) {
        this1.__context.texParameterf(target, pname, param)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texParameteri = function(this1, target, pname, param) {
        this1.__context.texParameteri(target, pname, param)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texSubImage2D = function(this1, target, level, xoffset, yoffset, width, height, format, type, data) {
        this1.__context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.texSubImage3D = function(this1, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) {
        this1.__context.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.transformFeedbackVaryings = function(this1, program, varyings, bufferMode) {
        this1.__context.transformFeedbackVaryings(program, varyings, bufferMode)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1f = function(this1, location, v0) {
        this1.__context.uniform1f(location, v0)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1fv = function(this1, location, count, v) {
        this1.__context.uniform1fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1i = function(this1, location, v0) {
        this1.__context.uniform1i(location, v0)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1iv = function(this1, location, count, v) {
        this1.__context.uniform1iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1ui = function(this1, location, v0) {
        this1.__context.uniform1ui(location, v0)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform1uiv = function(this1, location, count, v) {
        this1.__context.uniform1uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2f = function(this1, location, v0, v1) {
        this1.__context.uniform2f(location, v0, v1)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2fv = function(this1, location, count, v) {
        this1.__context.uniform2fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 2))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2i = function(this1, location, v0, v1) {
        this1.__context.uniform2i(location, v0, v1)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2iv = function(this1, location, count, v) {
        this1.__context.uniform2iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 2))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2ui = function(this1, location, v0, v1) {
        this1.__context.uniform2ui(location, v0, v1)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform2uiv = function(this1, location, count, v) {
        this1.__context.uniform2uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 2))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3f = function(this1, location, v0, v1, v2) {
        this1.__context.uniform3f(location, v0, v1, v2)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3fv = function(this1, location, count, v) {
        this1.__context.uniform3fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 3))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3i = function(this1, location, v0, v1, v2) {
        this1.__context.uniform3i(location, v0, v1, v2)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3iv = function(this1, location, count, v) {
        this1.__context.uniform3iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 3))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3ui = function(this1, location, v0, v1, v2) {
        this1.__context.uniform3ui(location, v0, v1, v2)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform3uiv = function(this1, location, count, v) {
        this1.__context.uniform3uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 3))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4f = function(this1, location, v0, v1, v2, v3) {
        this1.__context.uniform4f(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4fv = function(this1, location, count, v) {
        this1.__context.uniform4fv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4i = function(this1, location, v0, v1, v2, v3) {
        this1.__context.uniform4i(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4iv = function(this1, location, count, v) {
        this1.__context.uniform4iv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4ui = function(this1, location, v0, v1, v2, v3) {
        this1.__context.uniform4ui(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniform4uiv = function(this1, location, count, v) {
        this1.__context.uniform4uiv(location, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformBlockBinding = function(this1, program, uniformBlockIndex, uniformBlockBinding) {
        this1.__context.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 4))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2x3fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix2x3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 6))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix2x4fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix2x4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 8))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 9))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3x2fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix3x2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 6))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix3x4fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix3x4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 12))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix4fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 16))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4x2fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix4x2fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 8))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.uniformMatrix4x3fv = function(this1, location, count, transpose, v) {
        this1.__context.uniformMatrix4x3fv(location, transpose, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v, count * 4 * 12))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.unmapBuffer = function(this1, target) {
        return false
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.useProgram = function(this1, program) {
        this1.__context.useProgram(program)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.validateProgram = function(this1, program) {
        this1.__context.validateProgram(program)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib1f = function(this1, indx, x) {
        this1.__context.vertexAttrib1f(indx, x)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib1fv = function(this1, indx, values) {
        this1.__context.vertexAttrib1fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib2f = function(this1, indx, x, y) {
        this1.__context.vertexAttrib2f(indx, x, y)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib2fv = function(this1, indx, values) {
        this1.__context.vertexAttrib2fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib3f = function(this1, indx, x, y, z) {
        this1.__context.vertexAttrib3f(indx, x, y, z)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib3fv = function(this1, indx, values) {
        this1.__context.vertexAttrib3fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib4f = function(this1, indx, x, y, z, w) {
        this1.__context.vertexAttrib4f(indx, x, y, z, w)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttrib4fv = function(this1, indx, values) {
        this1.__context.vertexAttrib4fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(values))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribDivisor = function(this1, index, divisor) {
        this1.__context.vertexAttribDivisor(index, divisor)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4i = function(this1, indx, x, y, z, w) {
        this1.__context.vertexAttribI4i(indx, x, y, z, w)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4iv = function(this1, indx, values) {
        this1.__context.vertexAttribI4iv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array(values))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4ui = function(this1, indx, x, y, z, w) {
        this1.__context.vertexAttribI4ui(indx, x, y, z, w)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribI4uiv = function(this1, indx, values) {
        this1.__context.vertexAttribI4uiv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array(values))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribIPointer = function(this1, indx, size, type, stride, pointer) {
        this1.__context.vertexAttribIPointer(indx, size, type, stride, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(pointer)))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.vertexAttribPointer = function(this1, indx, size, type, normalized, stride, pointer) {
        this1.__context.vertexAttribPointer(indx, size, type, normalized, stride, lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(pointer))
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.viewport = function(this1, x, y, width, height) {
        this1.__context.viewport(x, y, width, height)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.waitSync = function(this1, sync, flags, timeout) {
        this1.__context.waitSync(sync, flags, timeout)
    };
    lime_graphics_opengl__$GLES3Context_GLES3Context_$Impl_$.fromGL = function(gl) {
        return lime_graphics_opengl_GL.context
    };
    var lime_utils_BytePointerData = function(bytes, offset) {
        this.bytes = bytes;
        this.offset = offset
    };
    $hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
    lime_utils_BytePointerData.__name__ = ["lime", "utils", "BytePointerData"];
    lime_utils_BytePointerData.prototype = {
        bytes: null,
        offset: null,
        __class__: lime_utils_BytePointerData
    };
    var lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$ = {};
    $hxClasses["lime.graphics.opengl._WebGL2Context.WebGL2Context_Impl_"] = lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$;
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__name__ = ["lime", "graphics", "opengl", "_WebGL2Context", "WebGL2Context_Impl_"];
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.__properties__ = {
        get_version: "get_version",
        get_type: "get_type",
        get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL: "get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
        get_TIMEOUT_IGNORED: "get_TIMEOUT_IGNORED",
        get_INVALID_INDEX: "get_INVALID_INDEX",
        get_DEPTH32F_STENCIL8: "get_DEPTH32F_STENCIL8",
        get_DEPTH_COMPONENT32F: "get_DEPTH_COMPONENT32F",
        get_DYNAMIC_COPY: "get_DYNAMIC_COPY",
        get_DYNAMIC_READ: "get_DYNAMIC_READ",
        get_STATIC_COPY: "get_STATIC_COPY",
        get_STATIC_READ: "get_STATIC_READ",
        get_STREAM_COPY: "get_STREAM_COPY",
        get_STREAM_READ: "get_STREAM_READ",
        get_DEPTH_COMPONENT24: "get_DEPTH_COMPONENT24",
        get_MAX: "get_MAX",
        get_MIN: "get_MIN",
        get_STENCIL: "get_STENCIL",
        get_DEPTH: "get_DEPTH",
        get_COLOR: "get_COLOR",
        get_SYNC_FLUSH_COMMANDS_BIT: "get_SYNC_FLUSH_COMMANDS_BIT",
        get_WAIT_FAILED: "get_WAIT_FAILED",
        get_CONDITION_SATISFIED: "get_CONDITION_SATISFIED",
        get_TIMEOUT_EXPIRED: "get_TIMEOUT_EXPIRED",
        get_ALREADY_SIGNALED: "get_ALREADY_SIGNALED",
        get_SIGNALED: "get_SIGNALED",
        get_UNSIGNALED: "get_UNSIGNALED",
        get_SYNC_GPU_COMMANDS_COMPLETE: "get_SYNC_GPU_COMMANDS_COMPLETE",
        get_SYNC_FENCE: "get_SYNC_FENCE",
        get_SYNC_FLAGS: "get_SYNC_FLAGS",
        get_SYNC_STATUS: "get_SYNC_STATUS",
        get_SYNC_CONDITION: "get_SYNC_CONDITION",
        get_OBJECT_TYPE: "get_OBJECT_TYPE",
        get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: "get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
        get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: "get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
        get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: "get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
        get_UNIFORM_BLOCK_ACTIVE_UNIFORMS: "get_UNIFORM_BLOCK_ACTIVE_UNIFORMS",
        get_UNIFORM_BLOCK_DATA_SIZE: "get_UNIFORM_BLOCK_DATA_SIZE",
        get_UNIFORM_BLOCK_BINDING: "get_UNIFORM_BLOCK_BINDING",
        get_UNIFORM_IS_ROW_MAJOR: "get_UNIFORM_IS_ROW_MAJOR",
        get_UNIFORM_MATRIX_STRIDE: "get_UNIFORM_MATRIX_STRIDE",
        get_UNIFORM_ARRAY_STRIDE: "get_UNIFORM_ARRAY_STRIDE",
        get_UNIFORM_OFFSET: "get_UNIFORM_OFFSET",
        get_UNIFORM_BLOCK_INDEX: "get_UNIFORM_BLOCK_INDEX",
        get_UNIFORM_SIZE: "get_UNIFORM_SIZE",
        get_UNIFORM_TYPE: "get_UNIFORM_TYPE",
        get_ACTIVE_UNIFORM_BLOCKS: "get_ACTIVE_UNIFORM_BLOCKS",
        get_UNIFORM_BUFFER_OFFSET_ALIGNMENT: "get_UNIFORM_BUFFER_OFFSET_ALIGNMENT",
        get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: "get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
        get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: "get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
        get_MAX_UNIFORM_BLOCK_SIZE: "get_MAX_UNIFORM_BLOCK_SIZE",
        get_MAX_UNIFORM_BUFFER_BINDINGS: "get_MAX_UNIFORM_BUFFER_BINDINGS",
        get_MAX_COMBINED_UNIFORM_BLOCKS: "get_MAX_COMBINED_UNIFORM_BLOCKS",
        get_MAX_FRAGMENT_UNIFORM_BLOCKS: "get_MAX_FRAGMENT_UNIFORM_BLOCKS",
        get_MAX_VERTEX_UNIFORM_BLOCKS: "get_MAX_VERTEX_UNIFORM_BLOCKS",
        get_UNIFORM_BUFFER_SIZE: "get_UNIFORM_BUFFER_SIZE",
        get_UNIFORM_BUFFER_START: "get_UNIFORM_BUFFER_START",
        get_UNIFORM_BUFFER_BINDING: "get_UNIFORM_BUFFER_BINDING",
        get_UNIFORM_BUFFER: "get_UNIFORM_BUFFER",
        get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: "get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
        get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: "get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
        get_RENDERBUFFER_SAMPLES: "get_RENDERBUFFER_SAMPLES",
        get_READ_FRAMEBUFFER_BINDING: "get_READ_FRAMEBUFFER_BINDING",
        get_DRAW_FRAMEBUFFER: "get_DRAW_FRAMEBUFFER",
        get_READ_FRAMEBUFFER: "get_READ_FRAMEBUFFER",
        get_DRAW_FRAMEBUFFER_BINDING: "get_DRAW_FRAMEBUFFER_BINDING",
        get_DEPTH24_STENCIL8: "get_DEPTH24_STENCIL8",
        get_FRAMEBUFFER_DEFAULT: "get_FRAMEBUFFER_DEFAULT",
        get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: "get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: "get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: "get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: "get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: "get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_RED_SIZE: "get_FRAMEBUFFER_ATTACHMENT_RED_SIZE",
        get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: "get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
        get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: "get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
        get_TRANSFORM_FEEDBACK_BINDING: "get_TRANSFORM_FEEDBACK_BINDING",
        get_TRANSFORM_FEEDBACK_ACTIVE: "get_TRANSFORM_FEEDBACK_ACTIVE",
        get_TRANSFORM_FEEDBACK_PAUSED: "get_TRANSFORM_FEEDBACK_PAUSED",
        get_TRANSFORM_FEEDBACK: "get_TRANSFORM_FEEDBACK",
        get_TRANSFORM_FEEDBACK_BUFFER_BINDING: "get_TRANSFORM_FEEDBACK_BUFFER_BINDING",
        get_TRANSFORM_FEEDBACK_BUFFER: "get_TRANSFORM_FEEDBACK_BUFFER",
        get_SEPARATE_ATTRIBS: "get_SEPARATE_ATTRIBS",
        get_INTERLEAVED_ATTRIBS: "get_INTERLEAVED_ATTRIBS",
        get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: "get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
        get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: "get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
        get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: "get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
        get_TRANSFORM_FEEDBACK_BUFFER_SIZE: "get_TRANSFORM_FEEDBACK_BUFFER_SIZE",
        get_TRANSFORM_FEEDBACK_BUFFER_START: "get_TRANSFORM_FEEDBACK_BUFFER_START",
        get_TRANSFORM_FEEDBACK_VARYINGS: "get_TRANSFORM_FEEDBACK_VARYINGS",
        get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: "get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
        get_TRANSFORM_FEEDBACK_BUFFER_MODE: "get_TRANSFORM_FEEDBACK_BUFFER_MODE",
        get_VERTEX_ATTRIB_ARRAY_DIVISOR: "get_VERTEX_ATTRIB_ARRAY_DIVISOR",
        get_VERTEX_ATTRIB_ARRAY_INTEGER: "get_VERTEX_ATTRIB_ARRAY_INTEGER",
        get_SIGNED_NORMALIZED: "get_SIGNED_NORMALIZED",
        get_UNSIGNED_NORMALIZED: "get_UNSIGNED_NORMALIZED",
        get_UNSIGNED_INT_VEC4: "get_UNSIGNED_INT_VEC4",
        get_UNSIGNED_INT_VEC3: "get_UNSIGNED_INT_VEC3",
        get_UNSIGNED_INT_VEC2: "get_UNSIGNED_INT_VEC2",
        get_FLOAT_MAT4x3: "get_FLOAT_MAT4x3",
        get_FLOAT_MAT4x2: "get_FLOAT_MAT4x2",
        get_FLOAT_MAT3x4: "get_FLOAT_MAT3x4",
        get_FLOAT_MAT3x2: "get_FLOAT_MAT3x2",
        get_FLOAT_MAT2x4: "get_FLOAT_MAT2x4",
        get_FLOAT_MAT2x3: "get_FLOAT_MAT2x3",
        get_COPY_WRITE_BUFFER_BINDING: "get_COPY_WRITE_BUFFER_BINDING",
        get_COPY_READ_BUFFER_BINDING: "get_COPY_READ_BUFFER_BINDING",
        get_COPY_WRITE_BUFFER: "get_COPY_WRITE_BUFFER",
        get_COPY_READ_BUFFER: "get_COPY_READ_BUFFER",
        get_PIXEL_UNPACK_BUFFER_BINDING: "get_PIXEL_UNPACK_BUFFER_BINDING",
        get_PIXEL_PACK_BUFFER_BINDING: "get_PIXEL_PACK_BUFFER_BINDING",
        get_PIXEL_UNPACK_BUFFER: "get_PIXEL_UNPACK_BUFFER",
        get_PIXEL_PACK_BUFFER: "get_PIXEL_PACK_BUFFER",
        get_SAMPLER_BINDING: "get_SAMPLER_BINDING",
        get_MAX_SAMPLES: "get_MAX_SAMPLES",
        get_UNSIGNED_INT_SAMPLER_2D_ARRAY: "get_UNSIGNED_INT_SAMPLER_2D_ARRAY",
        get_UNSIGNED_INT_SAMPLER_CUBE: "get_UNSIGNED_INT_SAMPLER_CUBE",
        get_UNSIGNED_INT_SAMPLER_3D: "get_UNSIGNED_INT_SAMPLER_3D",
        get_UNSIGNED_INT_SAMPLER_2D: "get_UNSIGNED_INT_SAMPLER_2D",
        get_INT_SAMPLER_2D_ARRAY: "get_INT_SAMPLER_2D_ARRAY",
        get_INT_SAMPLER_CUBE: "get_INT_SAMPLER_CUBE",
        get_INT_SAMPLER_3D: "get_INT_SAMPLER_3D",
        get_INT_SAMPLER_2D: "get_INT_SAMPLER_2D",
        get_SAMPLER_CUBE_SHADOW: "get_SAMPLER_CUBE_SHADOW",
        get_SAMPLER_2D_ARRAY_SHADOW: "get_SAMPLER_2D_ARRAY_SHADOW",
        get_SAMPLER_2D_ARRAY: "get_SAMPLER_2D_ARRAY",
        get_SAMPLER_2D_SHADOW: "get_SAMPLER_2D_SHADOW",
        get_SAMPLER_3D: "get_SAMPLER_3D",
        get_COLOR_ATTACHMENT15: "get_COLOR_ATTACHMENT15",
        get_COLOR_ATTACHMENT14: "get_COLOR_ATTACHMENT14",
        get_COLOR_ATTACHMENT13: "get_COLOR_ATTACHMENT13",
        get_COLOR_ATTACHMENT12: "get_COLOR_ATTACHMENT12",
        get_COLOR_ATTACHMENT11: "get_COLOR_ATTACHMENT11",
        get_COLOR_ATTACHMENT10: "get_COLOR_ATTACHMENT10",
        get_COLOR_ATTACHMENT9: "get_COLOR_ATTACHMENT9",
        get_COLOR_ATTACHMENT8: "get_COLOR_ATTACHMENT8",
        get_COLOR_ATTACHMENT7: "get_COLOR_ATTACHMENT7",
        get_COLOR_ATTACHMENT6: "get_COLOR_ATTACHMENT6",
        get_COLOR_ATTACHMENT5: "get_COLOR_ATTACHMENT5",
        get_COLOR_ATTACHMENT4: "get_COLOR_ATTACHMENT4",
        get_COLOR_ATTACHMENT3: "get_COLOR_ATTACHMENT3",
        get_COLOR_ATTACHMENT2: "get_COLOR_ATTACHMENT2",
        get_COLOR_ATTACHMENT1: "get_COLOR_ATTACHMENT1",
        get_MAX_COLOR_ATTACHMENTS: "get_MAX_COLOR_ATTACHMENTS",
        get_DRAW_BUFFER15: "get_DRAW_BUFFER15",
        get_DRAW_BUFFER14: "get_DRAW_BUFFER14",
        get_DRAW_BUFFER13: "get_DRAW_BUFFER13",
        get_DRAW_BUFFER12: "get_DRAW_BUFFER12",
        get_DRAW_BUFFER11: "get_DRAW_BUFFER11",
        get_DRAW_BUFFER10: "get_DRAW_BUFFER10",
        get_DRAW_BUFFER9: "get_DRAW_BUFFER9",
        get_DRAW_BUFFER8: "get_DRAW_BUFFER8",
        get_DRAW_BUFFER7: "get_DRAW_BUFFER7",
        get_DRAW_BUFFER6: "get_DRAW_BUFFER6",
        get_DRAW_BUFFER5: "get_DRAW_BUFFER5",
        get_DRAW_BUFFER4: "get_DRAW_BUFFER4",
        get_DRAW_BUFFER3: "get_DRAW_BUFFER3",
        get_DRAW_BUFFER2: "get_DRAW_BUFFER2",
        get_DRAW_BUFFER1: "get_DRAW_BUFFER1",
        get_DRAW_BUFFER0: "get_DRAW_BUFFER0",
        get_MAX_DRAW_BUFFERS: "get_MAX_DRAW_BUFFERS",
        get_ANY_SAMPLES_PASSED_CONSERVATIVE: "get_ANY_SAMPLES_PASSED_CONSERVATIVE",
        get_ANY_SAMPLES_PASSED: "get_ANY_SAMPLES_PASSED",
        get_QUERY_RESULT_AVAILABLE: "get_QUERY_RESULT_AVAILABLE",
        get_QUERY_RESULT: "get_QUERY_RESULT",
        get_CURRENT_QUERY: "get_CURRENT_QUERY",
        get_INT_2_10_10_10_REV: "get_INT_2_10_10_10_REV",
        get_RG_INTEGER: "get_RG_INTEGER",
        get_RG: "get_RG",
        get_HALF_FLOAT: "get_HALF_FLOAT",
        get_UNSIGNED_INT_24_8: "get_UNSIGNED_INT_24_8",
        get_FLOAT_32_UNSIGNED_INT_24_8_REV: "get_FLOAT_32_UNSIGNED_INT_24_8_REV",
        get_UNSIGNED_INT_5_9_9_9_REV: "get_UNSIGNED_INT_5_9_9_9_REV",
        get_UNSIGNED_INT_10F_11F_11F_REV: "get_UNSIGNED_INT_10F_11F_11F_REV",
        get_UNSIGNED_INT_2_10_10_10_REV: "get_UNSIGNED_INT_2_10_10_10_REV",
        get_TEXTURE_IMMUTABLE_LEVELS: "get_TEXTURE_IMMUTABLE_LEVELS",
        get_TEXTURE_IMMUTABLE_FORMAT: "get_TEXTURE_IMMUTABLE_FORMAT",
        get_RGB10_A2UI: "get_RGB10_A2UI",
        get_RGBA8_SNORM: "get_RGBA8_SNORM",
        get_RGB8_SNORM: "get_RGB8_SNORM",
        get_RG8_SNORM: "get_RG8_SNORM",
        get_R8_SNORM: "get_R8_SNORM",
        get_RG32UI: "get_RG32UI",
        get_RG32I: "get_RG32I",
        get_RG16UI: "get_RG16UI",
        get_RG16I: "get_RG16I",
        get_RG8UI: "get_RG8UI",
        get_RG8I: "get_RG8I",
        get_R32UI: "get_R32UI",
        get_R32I: "get_R32I",
        get_R16UI: "get_R16UI",
        get_R16I: "get_R16I",
        get_R8UI: "get_R8UI",
        get_R8I: "get_R8I",
        get_RG32F: "get_RG32F",
        get_RG16F: "get_RG16F",
        get_R32F: "get_R32F",
        get_R16F: "get_R16F",
        get_RG8: "get_RG8",
        get_R8: "get_R8",
        get_RGBA_INTEGER: "get_RGBA_INTEGER",
        get_RGB_INTEGER: "get_RGB_INTEGER",
        get_RED_INTEGER: "get_RED_INTEGER",
        get_RGB8I: "get_RGB8I",
        get_RGBA8I: "get_RGBA8I",
        get_RGB16I: "get_RGB16I",
        get_RGBA16I: "get_RGBA16I",
        get_RGB32I: "get_RGB32I",
        get_RGBA32I: "get_RGBA32I",
        get_RGB8UI: "get_RGB8UI",
        get_RGBA8UI: "get_RGBA8UI",
        get_RGB16UI: "get_RGB16UI",
        get_RGBA16UI: "get_RGBA16UI",
        get_RGB32UI: "get_RGB32UI",
        get_RGBA32UI: "get_RGBA32UI",
        get_RGB9_E5: "get_RGB9_E5",
        get_R11F_G11F_B10F: "get_R11F_G11F_B10F",
        get_TEXTURE_BINDING_2D_ARRAY: "get_TEXTURE_BINDING_2D_ARRAY",
        get_TEXTURE_2D_ARRAY: "get_TEXTURE_2D_ARRAY",
        get_RGB16F: "get_RGB16F",
        get_RGBA16F: "get_RGBA16F",
        get_RGB32F: "get_RGB32F",
        get_RGBA32F: "get_RGBA32F",
        get_COMPARE_REF_TO_TEXTURE: "get_COMPARE_REF_TO_TEXTURE",
        get_SRGB8_ALPHA8: "get_SRGB8_ALPHA8",
        get_SRGB8: "get_SRGB8",
        get_SRGB: "get_SRGB",
        get_TEXTURE_COMPARE_FUNC: "get_TEXTURE_COMPARE_FUNC",
        get_TEXTURE_COMPARE_MODE: "get_TEXTURE_COMPARE_MODE",
        get_TEXTURE_MAX_LEVEL: "get_TEXTURE_MAX_LEVEL",
        get_TEXTURE_BASE_LEVEL: "get_TEXTURE_BASE_LEVEL",
        get_TEXTURE_MAX_LOD: "get_TEXTURE_MAX_LOD",
        get_TEXTURE_MIN_LOD: "get_TEXTURE_MIN_LOD",
        get_TEXTURE_WRAP_R: "get_TEXTURE_WRAP_R",
        get_TEXTURE_3D: "get_TEXTURE_3D",
        get_RGB10_A2: "get_RGB10_A2",
        get_RGBA8: "get_RGBA8",
        get_RGB8: "get_RGB8",
        get_RED: "get_RED",
        get_MAX_ELEMENT_INDEX: "get_MAX_ELEMENT_INDEX",
        get_MAX_SERVER_WAIT_TIMEOUT: "get_MAX_SERVER_WAIT_TIMEOUT",
        get_MAX_FRAGMENT_INPUT_COMPONENTS: "get_MAX_FRAGMENT_INPUT_COMPONENTS",
        get_MAX_VERTEX_OUTPUT_COMPONENTS: "get_MAX_VERTEX_OUTPUT_COMPONENTS",
        get_VERTEX_ARRAY_BINDING: "get_VERTEX_ARRAY_BINDING",
        get_RASTERIZER_DISCARD: "get_RASTERIZER_DISCARD",
        get_FRAGMENT_SHADER_DERIVATIVE_HINT: "get_FRAGMENT_SHADER_DERIVATIVE_HINT",
        get_MAX_VARYING_COMPONENTS: "get_MAX_VARYING_COMPONENTS",
        get_MAX_PROGRAM_TEXEL_OFFSET: "get_MAX_PROGRAM_TEXEL_OFFSET",
        get_MIN_PROGRAM_TEXEL_OFFSET: "get_MIN_PROGRAM_TEXEL_OFFSET",
        get_MAX_ARRAY_TEXTURE_LAYERS: "get_MAX_ARRAY_TEXTURE_LAYERS",
        get_MAX_VERTEX_UNIFORM_COMPONENTS: "get_MAX_VERTEX_UNIFORM_COMPONENTS",
        get_MAX_FRAGMENT_UNIFORM_COMPONENTS: "get_MAX_FRAGMENT_UNIFORM_COMPONENTS",
        get_MAX_TEXTURE_LOD_BIAS: "get_MAX_TEXTURE_LOD_BIAS",
        get_MAX_ELEMENTS_INDICES: "get_MAX_ELEMENTS_INDICES",
        get_MAX_ELEMENTS_VERTICES: "get_MAX_ELEMENTS_VERTICES",
        get_MAX_3D_TEXTURE_SIZE: "get_MAX_3D_TEXTURE_SIZE",
        get_UNPACK_IMAGE_HEIGHT: "get_UNPACK_IMAGE_HEIGHT",
        get_UNPACK_SKIP_IMAGES: "get_UNPACK_SKIP_IMAGES",
        get_TEXTURE_BINDING_3D: "get_TEXTURE_BINDING_3D",
        get_PACK_SKIP_PIXELS: "get_PACK_SKIP_PIXELS",
        get_PACK_SKIP_ROWS: "get_PACK_SKIP_ROWS",
        get_PACK_ROW_LENGTH: "get_PACK_ROW_LENGTH",
        get_UNPACK_SKIP_PIXELS: "get_UNPACK_SKIP_PIXELS",
        get_UNPACK_SKIP_ROWS: "get_UNPACK_SKIP_ROWS",
        get_UNPACK_ROW_LENGTH: "get_UNPACK_ROW_LENGTH",
        get_READ_BUFFER: "get_READ_BUFFER",
        get_BROWSER_DEFAULT_WEBGL: "get_BROWSER_DEFAULT_WEBGL",
        get_UNPACK_COLORSPACE_CONVERSION_WEBGL: "get_UNPACK_COLORSPACE_CONVERSION_WEBGL",
        get_CONTEXT_LOST_WEBGL: "get_CONTEXT_LOST_WEBGL",
        get_UNPACK_PREMULTIPLY_ALPHA_WEBGL: "get_UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        get_UNPACK_FLIP_Y_WEBGL: "get_UNPACK_FLIP_Y_WEBGL",
        get_INVALID_FRAMEBUFFER_OPERATION: "get_INVALID_FRAMEBUFFER_OPERATION",
        get_MAX_RENDERBUFFER_SIZE: "get_MAX_RENDERBUFFER_SIZE",
        get_RENDERBUFFER_BINDING: "get_RENDERBUFFER_BINDING",
        get_FRAMEBUFFER_BINDING: "get_FRAMEBUFFER_BINDING",
        get_FRAMEBUFFER_UNSUPPORTED: "get_FRAMEBUFFER_UNSUPPORTED",
        get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: "get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: "get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: "get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        get_FRAMEBUFFER_COMPLETE: "get_FRAMEBUFFER_COMPLETE",
        get_NONE: "get_NONE",
        get_DEPTH_STENCIL_ATTACHMENT: "get_DEPTH_STENCIL_ATTACHMENT",
        get_STENCIL_ATTACHMENT: "get_STENCIL_ATTACHMENT",
        get_DEPTH_ATTACHMENT: "get_DEPTH_ATTACHMENT",
        get_COLOR_ATTACHMENT0: "get_COLOR_ATTACHMENT0",
        get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: "get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: "get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: "get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: "get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        get_RENDERBUFFER_STENCIL_SIZE: "get_RENDERBUFFER_STENCIL_SIZE",
        get_RENDERBUFFER_DEPTH_SIZE: "get_RENDERBUFFER_DEPTH_SIZE",
        get_RENDERBUFFER_ALPHA_SIZE: "get_RENDERBUFFER_ALPHA_SIZE",
        get_RENDERBUFFER_BLUE_SIZE: "get_RENDERBUFFER_BLUE_SIZE",
        get_RENDERBUFFER_GREEN_SIZE: "get_RENDERBUFFER_GREEN_SIZE",
        get_RENDERBUFFER_RED_SIZE: "get_RENDERBUFFER_RED_SIZE",
        get_RENDERBUFFER_INTERNAL_FORMAT: "get_RENDERBUFFER_INTERNAL_FORMAT",
        get_RENDERBUFFER_HEIGHT: "get_RENDERBUFFER_HEIGHT",
        get_RENDERBUFFER_WIDTH: "get_RENDERBUFFER_WIDTH",
        get_DEPTH_STENCIL: "get_DEPTH_STENCIL",
        get_STENCIL_INDEX8: "get_STENCIL_INDEX8",
        get_STENCIL_INDEX: "get_STENCIL_INDEX",
        get_DEPTH_COMPONENT16: "get_DEPTH_COMPONENT16",
        get_RGB565: "get_RGB565",
        get_RGB5_A1: "get_RGB5_A1",
        get_RGBA4: "get_RGBA4",
        get_RENDERBUFFER: "get_RENDERBUFFER",
        get_FRAMEBUFFER: "get_FRAMEBUFFER",
        get_HIGH_INT: "get_HIGH_INT",
        get_MEDIUM_INT: "get_MEDIUM_INT",
        get_LOW_INT: "get_LOW_INT",
        get_HIGH_FLOAT: "get_HIGH_FLOAT",
        get_MEDIUM_FLOAT: "get_MEDIUM_FLOAT",
        get_LOW_FLOAT: "get_LOW_FLOAT",
        get_COMPILE_STATUS: "get_COMPILE_STATUS",
        get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: "get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        get_VERTEX_ATTRIB_ARRAY_POINTER: "get_VERTEX_ATTRIB_ARRAY_POINTER",
        get_VERTEX_ATTRIB_ARRAY_NORMALIZED: "get_VERTEX_ATTRIB_ARRAY_NORMALIZED",
        get_VERTEX_ATTRIB_ARRAY_TYPE: "get_VERTEX_ATTRIB_ARRAY_TYPE",
        get_VERTEX_ATTRIB_ARRAY_STRIDE: "get_VERTEX_ATTRIB_ARRAY_STRIDE",
        get_VERTEX_ATTRIB_ARRAY_SIZE: "get_VERTEX_ATTRIB_ARRAY_SIZE",
        get_VERTEX_ATTRIB_ARRAY_ENABLED: "get_VERTEX_ATTRIB_ARRAY_ENABLED",
        get_SAMPLER_CUBE: "get_SAMPLER_CUBE",
        get_SAMPLER_2D: "get_SAMPLER_2D",
        get_FLOAT_MAT4: "get_FLOAT_MAT4",
        get_FLOAT_MAT3: "get_FLOAT_MAT3",
        get_FLOAT_MAT2: "get_FLOAT_MAT2",
        get_BOOL_VEC4: "get_BOOL_VEC4",
        get_BOOL_VEC3: "get_BOOL_VEC3",
        get_BOOL_VEC2: "get_BOOL_VEC2",
        get_BOOL: "get_BOOL",
        get_INT_VEC4: "get_INT_VEC4",
        get_INT_VEC3: "get_INT_VEC3",
        get_INT_VEC2: "get_INT_VEC2",
        get_FLOAT_VEC4: "get_FLOAT_VEC4",
        get_FLOAT_VEC3: "get_FLOAT_VEC3",
        get_FLOAT_VEC2: "get_FLOAT_VEC2",
        get_MIRRORED_REPEAT: "get_MIRRORED_REPEAT",
        get_CLAMP_TO_EDGE: "get_CLAMP_TO_EDGE",
        get_REPEAT: "get_REPEAT",
        get_ACTIVE_TEXTURE: "get_ACTIVE_TEXTURE",
        get_TEXTURE31: "get_TEXTURE31",
        get_TEXTURE30: "get_TEXTURE30",
        get_TEXTURE29: "get_TEXTURE29",
        get_TEXTURE28: "get_TEXTURE28",
        get_TEXTURE27: "get_TEXTURE27",
        get_TEXTURE26: "get_TEXTURE26",
        get_TEXTURE25: "get_TEXTURE25",
        get_TEXTURE24: "get_TEXTURE24",
        get_TEXTURE23: "get_TEXTURE23",
        get_TEXTURE22: "get_TEXTURE22",
        get_TEXTURE21: "get_TEXTURE21",
        get_TEXTURE20: "get_TEXTURE20",
        get_TEXTURE19: "get_TEXTURE19",
        get_TEXTURE18: "get_TEXTURE18",
        get_TEXTURE17: "get_TEXTURE17",
        get_TEXTURE16: "get_TEXTURE16",
        get_TEXTURE15: "get_TEXTURE15",
        get_TEXTURE14: "get_TEXTURE14",
        get_TEXTURE13: "get_TEXTURE13",
        get_TEXTURE12: "get_TEXTURE12",
        get_TEXTURE11: "get_TEXTURE11",
        get_TEXTURE10: "get_TEXTURE10",
        get_TEXTURE9: "get_TEXTURE9",
        get_TEXTURE8: "get_TEXTURE8",
        get_TEXTURE7: "get_TEXTURE7",
        get_TEXTURE6: "get_TEXTURE6",
        get_TEXTURE5: "get_TEXTURE5",
        get_TEXTURE4: "get_TEXTURE4",
        get_TEXTURE3: "get_TEXTURE3",
        get_TEXTURE2: "get_TEXTURE2",
        get_TEXTURE1: "get_TEXTURE1",
        get_TEXTURE0: "get_TEXTURE0",
        get_MAX_CUBE_MAP_TEXTURE_SIZE: "get_MAX_CUBE_MAP_TEXTURE_SIZE",
        get_TEXTURE_CUBE_MAP_NEGATIVE_Z: "get_TEXTURE_CUBE_MAP_NEGATIVE_Z",
        get_TEXTURE_CUBE_MAP_POSITIVE_Z: "get_TEXTURE_CUBE_MAP_POSITIVE_Z",
        get_TEXTURE_CUBE_MAP_NEGATIVE_Y: "get_TEXTURE_CUBE_MAP_NEGATIVE_Y",
        get_TEXTURE_CUBE_MAP_POSITIVE_Y: "get_TEXTURE_CUBE_MAP_POSITIVE_Y",
        get_TEXTURE_CUBE_MAP_NEGATIVE_X: "get_TEXTURE_CUBE_MAP_NEGATIVE_X",
        get_TEXTURE_CUBE_MAP_POSITIVE_X: "get_TEXTURE_CUBE_MAP_POSITIVE_X",
        get_TEXTURE_BINDING_CUBE_MAP: "get_TEXTURE_BINDING_CUBE_MAP",
        get_TEXTURE_CUBE_MAP: "get_TEXTURE_CUBE_MAP",
        get_TEXTURE: "get_TEXTURE",
        get_TEXTURE_2D: "get_TEXTURE_2D",
        get_TEXTURE_WRAP_T: "get_TEXTURE_WRAP_T",
        get_TEXTURE_WRAP_S: "get_TEXTURE_WRAP_S",
        get_TEXTURE_MIN_FILTER: "get_TEXTURE_MIN_FILTER",
        get_TEXTURE_MAG_FILTER: "get_TEXTURE_MAG_FILTER",
        get_LINEAR_MIPMAP_LINEAR: "get_LINEAR_MIPMAP_LINEAR",
        get_NEAREST_MIPMAP_LINEAR: "get_NEAREST_MIPMAP_LINEAR",
        get_LINEAR_MIPMAP_NEAREST: "get_LINEAR_MIPMAP_NEAREST",
        get_NEAREST_MIPMAP_NEAREST: "get_NEAREST_MIPMAP_NEAREST",
        get_LINEAR: "get_LINEAR",
        get_NEAREST: "get_NEAREST",
        get_VERSION: "get_VERSION",
        get_RENDERER: "get_RENDERER",
        get_VENDOR: "get_VENDOR",
        get_DECR_WRAP: "get_DECR_WRAP",
        get_INCR_WRAP: "get_INCR_WRAP",
        get_INVERT: "get_INVERT",
        get_DECR: "get_DECR",
        get_INCR: "get_INCR",
        get_REPLACE: "get_REPLACE",
        get_KEEP: "get_KEEP",
        get_ALWAYS: "get_ALWAYS",
        get_GEQUAL: "get_GEQUAL",
        get_NOTEQUAL: "get_NOTEQUAL",
        get_GREATER: "get_GREATER",
        get_LEQUAL: "get_LEQUAL",
        get_EQUAL: "get_EQUAL",
        get_LESS: "get_LESS",
        get_NEVER: "get_NEVER",
        get_CURRENT_PROGRAM: "get_CURRENT_PROGRAM",
        get_SHADING_LANGUAGE_VERSION: "get_SHADING_LANGUAGE_VERSION",
        get_ACTIVE_ATTRIBUTES: "get_ACTIVE_ATTRIBUTES",
        get_ACTIVE_UNIFORMS: "get_ACTIVE_UNIFORMS",
        get_ATTACHED_SHADERS: "get_ATTACHED_SHADERS",
        get_VALIDATE_STATUS: "get_VALIDATE_STATUS",
        get_LINK_STATUS: "get_LINK_STATUS",
        get_DELETE_STATUS: "get_DELETE_STATUS",
        get_SHADER_TYPE: "get_SHADER_TYPE",
        get_MAX_FRAGMENT_UNIFORM_VECTORS: "get_MAX_FRAGMENT_UNIFORM_VECTORS",
        get_MAX_TEXTURE_IMAGE_UNITS: "get_MAX_TEXTURE_IMAGE_UNITS",
        get_MAX_VERTEX_TEXTURE_IMAGE_UNITS: "get_MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        get_MAX_COMBINED_TEXTURE_IMAGE_UNITS: "get_MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        get_MAX_VARYING_VECTORS: "get_MAX_VARYING_VECTORS",
        get_MAX_VERTEX_UNIFORM_VECTORS: "get_MAX_VERTEX_UNIFORM_VECTORS",
        get_MAX_VERTEX_ATTRIBS: "get_MAX_VERTEX_ATTRIBS",
        get_VERTEX_SHADER: "get_VERTEX_SHADER",
        get_FRAGMENT_SHADER: "get_FRAGMENT_SHADER",
        get_UNSIGNED_SHORT_5_6_5: "get_UNSIGNED_SHORT_5_6_5",
        get_UNSIGNED_SHORT_5_5_5_1: "get_UNSIGNED_SHORT_5_5_5_1",
        get_UNSIGNED_SHORT_4_4_4_4: "get_UNSIGNED_SHORT_4_4_4_4",
        get_LUMINANCE_ALPHA: "get_LUMINANCE_ALPHA",
        get_LUMINANCE: "get_LUMINANCE",
        get_RGBA: "get_RGBA",
        get_RGB: "get_RGB",
        get_ALPHA: "get_ALPHA",
        get_DEPTH_COMPONENT: "get_DEPTH_COMPONENT",
        get_FLOAT: "get_FLOAT",
        get_UNSIGNED_INT: "get_UNSIGNED_INT",
        get_INT: "get_INT",
        get_UNSIGNED_SHORT: "get_UNSIGNED_SHORT",
        get_SHORT: "get_SHORT",
        get_UNSIGNED_BYTE: "get_UNSIGNED_BYTE",
        get_BYTE: "get_BYTE",
        get_GENERATE_MIPMAP_HINT: "get_GENERATE_MIPMAP_HINT",
        get_NICEST: "get_NICEST",
        get_FASTEST: "get_FASTEST",
        get_DONT_CARE: "get_DONT_CARE",
        get_COMPRESSED_TEXTURE_FORMATS: "get_COMPRESSED_TEXTURE_FORMATS",
        get_SAMPLE_COVERAGE_INVERT: "get_SAMPLE_COVERAGE_INVERT",
        get_SAMPLE_COVERAGE_VALUE: "get_SAMPLE_COVERAGE_VALUE",
        get_SAMPLES: "get_SAMPLES",
        get_SAMPLE_BUFFERS: "get_SAMPLE_BUFFERS",
        get_TEXTURE_BINDING_2D: "get_TEXTURE_BINDING_2D",
        get_POLYGON_OFFSET_FACTOR: "get_POLYGON_OFFSET_FACTOR",
        get_POLYGON_OFFSET_UNITS: "get_POLYGON_OFFSET_UNITS",
        get_STENCIL_BITS: "get_STENCIL_BITS",
        get_DEPTH_BITS: "get_DEPTH_BITS",
        get_ALPHA_BITS: "get_ALPHA_BITS",
        get_BLUE_BITS: "get_BLUE_BITS",
        get_GREEN_BITS: "get_GREEN_BITS",
        get_RED_BITS: "get_RED_BITS",
        get_SUBPIXEL_BITS: "get_SUBPIXEL_BITS",
        get_MAX_VIEWPORT_DIMS: "get_MAX_VIEWPORT_DIMS",
        get_MAX_TEXTURE_SIZE: "get_MAX_TEXTURE_SIZE",
        get_PACK_ALIGNMENT: "get_PACK_ALIGNMENT",
        get_UNPACK_ALIGNMENT: "get_UNPACK_ALIGNMENT",
        get_COLOR_WRITEMASK: "get_COLOR_WRITEMASK",
        get_COLOR_CLEAR_VALUE: "get_COLOR_CLEAR_VALUE",
        get_SCISSOR_BOX: "get_SCISSOR_BOX",
        get_VIEWPORT: "get_VIEWPORT",
        get_STENCIL_BACK_WRITEMASK: "get_STENCIL_BACK_WRITEMASK",
        get_STENCIL_BACK_VALUE_MASK: "get_STENCIL_BACK_VALUE_MASK",
        get_STENCIL_BACK_REF: "get_STENCIL_BACK_REF",
        get_STENCIL_BACK_PASS_DEPTH_PASS: "get_STENCIL_BACK_PASS_DEPTH_PASS",
        get_STENCIL_BACK_PASS_DEPTH_FAIL: "get_STENCIL_BACK_PASS_DEPTH_FAIL",
        get_STENCIL_BACK_FAIL: "get_STENCIL_BACK_FAIL",
        get_STENCIL_BACK_FUNC: "get_STENCIL_BACK_FUNC",
        get_STENCIL_WRITEMASK: "get_STENCIL_WRITEMASK",
        get_STENCIL_VALUE_MASK: "get_STENCIL_VALUE_MASK",
        get_STENCIL_REF: "get_STENCIL_REF",
        get_STENCIL_PASS_DEPTH_PASS: "get_STENCIL_PASS_DEPTH_PASS",
        get_STENCIL_PASS_DEPTH_FAIL: "get_STENCIL_PASS_DEPTH_FAIL",
        get_STENCIL_FAIL: "get_STENCIL_FAIL",
        get_STENCIL_FUNC: "get_STENCIL_FUNC",
        get_STENCIL_CLEAR_VALUE: "get_STENCIL_CLEAR_VALUE",
        get_DEPTH_FUNC: "get_DEPTH_FUNC",
        get_DEPTH_CLEAR_VALUE: "get_DEPTH_CLEAR_VALUE",
        get_DEPTH_WRITEMASK: "get_DEPTH_WRITEMASK",
        get_DEPTH_RANGE: "get_DEPTH_RANGE",
        get_FRONT_FACE: "get_FRONT_FACE",
        get_CULL_FACE_MODE: "get_CULL_FACE_MODE",
        get_ALIASED_LINE_WIDTH_RANGE: "get_ALIASED_LINE_WIDTH_RANGE",
        get_ALIASED_POINT_SIZE_RANGE: "get_ALIASED_POINT_SIZE_RANGE",
        get_LINE_WIDTH: "get_LINE_WIDTH",
        get_CCW: "get_CCW",
        get_CW: "get_CW",
        get_OUT_OF_MEMORY: "get_OUT_OF_MEMORY",
        get_INVALID_OPERATION: "get_INVALID_OPERATION",
        get_INVALID_VALUE: "get_INVALID_VALUE",
        get_INVALID_ENUM: "get_INVALID_ENUM",
        get_NO_ERROR: "get_NO_ERROR",
        get_SAMPLE_COVERAGE: "get_SAMPLE_COVERAGE",
        get_SAMPLE_ALPHA_TO_COVERAGE: "get_SAMPLE_ALPHA_TO_COVERAGE",
        get_POLYGON_OFFSET_FILL: "get_POLYGON_OFFSET_FILL",
        get_SCISSOR_TEST: "get_SCISSOR_TEST",
        get_DEPTH_TEST: "get_DEPTH_TEST",
        get_STENCIL_TEST: "get_STENCIL_TEST",
        get_DITHER: "get_DITHER",
        get_BLEND: "get_BLEND",
        get_CULL_FACE: "get_CULL_FACE",
        get_FRONT_AND_BACK: "get_FRONT_AND_BACK",
        get_BACK: "get_BACK",
        get_FRONT: "get_FRONT",
        get_CURRENT_VERTEX_ATTRIB: "get_CURRENT_VERTEX_ATTRIB",
        get_BUFFER_USAGE: "get_BUFFER_USAGE",
        get_BUFFER_SIZE: "get_BUFFER_SIZE",
        get_DYNAMIC_DRAW: "get_DYNAMIC_DRAW",
        get_STATIC_DRAW: "get_STATIC_DRAW",
        get_STREAM_DRAW: "get_STREAM_DRAW",
        get_ELEMENT_ARRAY_BUFFER_BINDING: "get_ELEMENT_ARRAY_BUFFER_BINDING",
        get_ARRAY_BUFFER_BINDING: "get_ARRAY_BUFFER_BINDING",
        get_ELEMENT_ARRAY_BUFFER: "get_ELEMENT_ARRAY_BUFFER",
        get_ARRAY_BUFFER: "get_ARRAY_BUFFER",
        get_BLEND_COLOR: "get_BLEND_COLOR",
        get_ONE_MINUS_CONSTANT_ALPHA: "get_ONE_MINUS_CONSTANT_ALPHA",
        get_CONSTANT_ALPHA: "get_CONSTANT_ALPHA",
        get_ONE_MINUS_CONSTANT_COLOR: "get_ONE_MINUS_CONSTANT_COLOR",
        get_CONSTANT_COLOR: "get_CONSTANT_COLOR",
        get_BLEND_SRC_ALPHA: "get_BLEND_SRC_ALPHA",
        get_BLEND_DST_ALPHA: "get_BLEND_DST_ALPHA",
        get_BLEND_SRC_RGB: "get_BLEND_SRC_RGB",
        get_BLEND_DST_RGB: "get_BLEND_DST_RGB",
        get_FUNC_REVERSE_SUBTRACT: "get_FUNC_REVERSE_SUBTRACT",
        get_FUNC_SUBTRACT: "get_FUNC_SUBTRACT",
        get_BLEND_EQUATION_ALPHA: "get_BLEND_EQUATION_ALPHA",
        get_BLEND_EQUATION_RGB: "get_BLEND_EQUATION_RGB",
        get_BLEND_EQUATION: "get_BLEND_EQUATION",
        get_FUNC_ADD: "get_FUNC_ADD",
        get_SRC_ALPHA_SATURATE: "get_SRC_ALPHA_SATURATE",
        get_ONE_MINUS_DST_COLOR: "get_ONE_MINUS_DST_COLOR",
        get_DST_COLOR: "get_DST_COLOR",
        get_ONE_MINUS_DST_ALPHA: "get_ONE_MINUS_DST_ALPHA",
        get_DST_ALPHA: "get_DST_ALPHA",
        get_ONE_MINUS_SRC_ALPHA: "get_ONE_MINUS_SRC_ALPHA",
        get_SRC_ALPHA: "get_SRC_ALPHA",
        get_ONE_MINUS_SRC_COLOR: "get_ONE_MINUS_SRC_COLOR",
        get_SRC_COLOR: "get_SRC_COLOR",
        get_ONE: "get_ONE",
        get_ZERO: "get_ZERO",
        get_TRIANGLE_FAN: "get_TRIANGLE_FAN",
        get_TRIANGLE_STRIP: "get_TRIANGLE_STRIP",
        get_TRIANGLES: "get_TRIANGLES",
        get_LINE_STRIP: "get_LINE_STRIP",
        get_LINE_LOOP: "get_LINE_LOOP",
        get_LINES: "get_LINES",
        get_POINTS: "get_POINTS",
        get_COLOR_BUFFER_BIT: "get_COLOR_BUFFER_BIT",
        get_STENCIL_BUFFER_BIT: "get_STENCIL_BUFFER_BIT",
        get_DEPTH_BUFFER_BIT: "get_DEPTH_BUFFER_BIT"
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_BUFFER_BIT = function(this1) {
        return this1.DEPTH_BUFFER_BIT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BUFFER_BIT = function(this1) {
        return this1.STENCIL_BUFFER_BIT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_BUFFER_BIT = function(this1) {
        return this1.COLOR_BUFFER_BIT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POINTS = function(this1) {
        return this1.POINTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINES = function(this1) {
        return this1.LINES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_LOOP = function(this1) {
        return this1.LINE_LOOP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_STRIP = function(this1) {
        return this1.LINE_STRIP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLES = function(this1) {
        return this1.TRIANGLES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLE_STRIP = function(this1) {
        return this1.TRIANGLE_STRIP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRIANGLE_FAN = function(this1) {
        return this1.TRIANGLE_FAN
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ZERO = function(this1) {
        return this1.ZERO
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE = function(this1) {
        return this1.ONE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_COLOR = function(this1) {
        return this1.SRC_COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_SRC_COLOR = function(this1) {
        return this1.ONE_MINUS_SRC_COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_ALPHA = function(this1) {
        return this1.SRC_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_SRC_ALPHA = function(this1) {
        return this1.ONE_MINUS_SRC_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DST_ALPHA = function(this1) {
        return this1.DST_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_DST_ALPHA = function(this1) {
        return this1.ONE_MINUS_DST_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DST_COLOR = function(this1) {
        return this1.DST_COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_DST_COLOR = function(this1) {
        return this1.ONE_MINUS_DST_COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRC_ALPHA_SATURATE = function(this1) {
        return this1.SRC_ALPHA_SATURATE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_ADD = function(this1) {
        return this1.FUNC_ADD
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION = function(this1) {
        return this1.BLEND_EQUATION
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION_RGB = function(this1) {
        return this1.BLEND_EQUATION_RGB
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_EQUATION_ALPHA = function(this1) {
        return this1.BLEND_EQUATION_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_SUBTRACT = function(this1) {
        return this1.FUNC_SUBTRACT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FUNC_REVERSE_SUBTRACT = function(this1) {
        return this1.FUNC_REVERSE_SUBTRACT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_DST_RGB = function(this1) {
        return this1.BLEND_DST_RGB
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_SRC_RGB = function(this1) {
        return this1.BLEND_SRC_RGB
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_DST_ALPHA = function(this1) {
        return this1.BLEND_DST_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_SRC_ALPHA = function(this1) {
        return this1.BLEND_SRC_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONSTANT_COLOR = function(this1) {
        return this1.CONSTANT_COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_CONSTANT_COLOR = function(this1) {
        return this1.ONE_MINUS_CONSTANT_COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONSTANT_ALPHA = function(this1) {
        return this1.CONSTANT_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ONE_MINUS_CONSTANT_ALPHA = function(this1) {
        return this1.ONE_MINUS_CONSTANT_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND_COLOR = function(this1) {
        return this1.BLEND_COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ARRAY_BUFFER = function(this1) {
        return this1.ARRAY_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER = function(this1) {
        return this1.ELEMENT_ARRAY_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ARRAY_BUFFER_BINDING = function(this1) {
        return this1.ARRAY_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ELEMENT_ARRAY_BUFFER_BINDING = function(this1) {
        return this1.ELEMENT_ARRAY_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_DRAW = function(this1) {
        return this1.STREAM_DRAW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_DRAW = function(this1) {
        return this1.STATIC_DRAW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_DRAW = function(this1) {
        return this1.DYNAMIC_DRAW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BUFFER_SIZE = function(this1) {
        return this1.BUFFER_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BUFFER_USAGE = function(this1) {
        return this1.BUFFER_USAGE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_VERTEX_ATTRIB = function(this1) {
        return this1.CURRENT_VERTEX_ATTRIB
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT = function(this1) {
        return this1.FRONT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BACK = function(this1) {
        return this1.BACK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT_AND_BACK = function(this1) {
        return this1.FRONT_AND_BACK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CULL_FACE = function(this1) {
        return this1.CULL_FACE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLEND = function(this1) {
        return this1.BLEND
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DITHER = function(this1) {
        return this1.DITHER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_TEST = function(this1) {
        return this1.STENCIL_TEST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_TEST = function(this1) {
        return this1.DEPTH_TEST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SCISSOR_TEST = function(this1) {
        return this1.SCISSOR_TEST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_FILL = function(this1) {
        return this1.POLYGON_OFFSET_FILL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_ALPHA_TO_COVERAGE = function(this1) {
        return this1.SAMPLE_ALPHA_TO_COVERAGE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE = function(this1) {
        return this1.SAMPLE_COVERAGE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NO_ERROR = function(this1) {
        return this1.NO_ERROR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_ENUM = function(this1) {
        return this1.INVALID_ENUM
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_VALUE = function(this1) {
        return this1.INVALID_VALUE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_OPERATION = function(this1) {
        return this1.INVALID_OPERATION
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_OUT_OF_MEMORY = function(this1) {
        return this1.OUT_OF_MEMORY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CW = function(this1) {
        return this1.CW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CCW = function(this1) {
        return this1.CCW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINE_WIDTH = function(this1) {
        return this1.LINE_WIDTH
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALIASED_POINT_SIZE_RANGE = function(this1) {
        return this1.ALIASED_POINT_SIZE_RANGE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALIASED_LINE_WIDTH_RANGE = function(this1) {
        return this1.ALIASED_LINE_WIDTH_RANGE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CULL_FACE_MODE = function(this1) {
        return this1.CULL_FACE_MODE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRONT_FACE = function(this1) {
        return this1.FRONT_FACE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_RANGE = function(this1) {
        return this1.DEPTH_RANGE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_WRITEMASK = function(this1) {
        return this1.DEPTH_WRITEMASK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_CLEAR_VALUE = function(this1) {
        return this1.DEPTH_CLEAR_VALUE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_FUNC = function(this1) {
        return this1.DEPTH_FUNC
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_CLEAR_VALUE = function(this1) {
        return this1.STENCIL_CLEAR_VALUE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_FUNC = function(this1) {
        return this1.STENCIL_FUNC
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_FAIL = function(this1) {
        return this1.STENCIL_FAIL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_PASS_DEPTH_FAIL = function(this1) {
        return this1.STENCIL_PASS_DEPTH_FAIL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_PASS_DEPTH_PASS = function(this1) {
        return this1.STENCIL_PASS_DEPTH_PASS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_REF = function(this1) {
        return this1.STENCIL_REF
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_VALUE_MASK = function(this1) {
        return this1.STENCIL_VALUE_MASK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_WRITEMASK = function(this1) {
        return this1.STENCIL_WRITEMASK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_FUNC = function(this1) {
        return this1.STENCIL_BACK_FUNC
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_FAIL = function(this1) {
        return this1.STENCIL_BACK_FAIL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_FAIL = function(this1) {
        return this1.STENCIL_BACK_PASS_DEPTH_FAIL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_PASS_DEPTH_PASS = function(this1) {
        return this1.STENCIL_BACK_PASS_DEPTH_PASS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_REF = function(this1) {
        return this1.STENCIL_BACK_REF
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_VALUE_MASK = function(this1) {
        return this1.STENCIL_BACK_VALUE_MASK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BACK_WRITEMASK = function(this1) {
        return this1.STENCIL_BACK_WRITEMASK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VIEWPORT = function(this1) {
        return this1.VIEWPORT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SCISSOR_BOX = function(this1) {
        return this1.SCISSOR_BOX
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_CLEAR_VALUE = function(this1) {
        return this1.COLOR_CLEAR_VALUE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_WRITEMASK = function(this1) {
        return this1.COLOR_WRITEMASK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_ALIGNMENT = function(this1) {
        return this1.UNPACK_ALIGNMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_ALIGNMENT = function(this1) {
        return this1.PACK_ALIGNMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_SIZE = function(this1) {
        return this1.MAX_TEXTURE_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VIEWPORT_DIMS = function(this1) {
        return this1.MAX_VIEWPORT_DIMS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SUBPIXEL_BITS = function(this1) {
        return this1.SUBPIXEL_BITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED_BITS = function(this1) {
        return this1.RED_BITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GREEN_BITS = function(this1) {
        return this1.GREEN_BITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BLUE_BITS = function(this1) {
        return this1.BLUE_BITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALPHA_BITS = function(this1) {
        return this1.ALPHA_BITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_BITS = function(this1) {
        return this1.DEPTH_BITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_BITS = function(this1) {
        return this1.STENCIL_BITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_UNITS = function(this1) {
        return this1.POLYGON_OFFSET_UNITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_POLYGON_OFFSET_FACTOR = function(this1) {
        return this1.POLYGON_OFFSET_FACTOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_2D = function(this1) {
        return this1.TEXTURE_BINDING_2D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_BUFFERS = function(this1) {
        return this1.SAMPLE_BUFFERS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLES = function(this1) {
        return this1.SAMPLES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE_VALUE = function(this1) {
        return this1.SAMPLE_COVERAGE_VALUE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLE_COVERAGE_INVERT = function(this1) {
        return this1.SAMPLE_COVERAGE_INVERT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPRESSED_TEXTURE_FORMATS = function(this1) {
        return this1.COMPRESSED_TEXTURE_FORMATS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DONT_CARE = function(this1) {
        return this1.DONT_CARE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FASTEST = function(this1) {
        return this1.FASTEST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NICEST = function(this1) {
        return this1.NICEST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GENERATE_MIPMAP_HINT = function(this1) {
        return this1.GENERATE_MIPMAP_HINT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BYTE = function(this1) {
        return this1.BYTE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_BYTE = function(this1) {
        return this1.UNSIGNED_BYTE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHORT = function(this1) {
        return this1.SHORT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT = function(this1) {
        return this1.UNSIGNED_SHORT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT = function(this1) {
        return this1.INT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT = function(this1) {
        return this1.UNSIGNED_INT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT = function(this1) {
        return this1.FLOAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT = function(this1) {
        return this1.DEPTH_COMPONENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALPHA = function(this1) {
        return this1.ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB = function(this1) {
        return this1.RGB
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA = function(this1) {
        return this1.RGBA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LUMINANCE = function(this1) {
        return this1.LUMINANCE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LUMINANCE_ALPHA = function(this1) {
        return this1.LUMINANCE_ALPHA
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_4_4_4_4 = function(this1) {
        return this1.UNSIGNED_SHORT_4_4_4_4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_5_5_5_1 = function(this1) {
        return this1.UNSIGNED_SHORT_5_5_5_1
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_SHORT_5_6_5 = function(this1) {
        return this1.UNSIGNED_SHORT_5_6_5
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAGMENT_SHADER = function(this1) {
        return this1.FRAGMENT_SHADER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_SHADER = function(this1) {
        return this1.VERTEX_SHADER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_ATTRIBS = function(this1) {
        return this1.MAX_VERTEX_ATTRIBS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_VECTORS = function(this1) {
        return this1.MAX_VERTEX_UNIFORM_VECTORS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VARYING_VECTORS = function(this1) {
        return this1.MAX_VARYING_VECTORS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_TEXTURE_IMAGE_UNITS = function(this1) {
        return this1.MAX_COMBINED_TEXTURE_IMAGE_UNITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_TEXTURE_IMAGE_UNITS = function(this1) {
        return this1.MAX_VERTEX_TEXTURE_IMAGE_UNITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_IMAGE_UNITS = function(this1) {
        return this1.MAX_TEXTURE_IMAGE_UNITS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_VECTORS = function(this1) {
        return this1.MAX_FRAGMENT_UNIFORM_VECTORS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHADER_TYPE = function(this1) {
        return this1.SHADER_TYPE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DELETE_STATUS = function(this1) {
        return this1.DELETE_STATUS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINK_STATUS = function(this1) {
        return this1.LINK_STATUS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VALIDATE_STATUS = function(this1) {
        return this1.VALIDATE_STATUS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ATTACHED_SHADERS = function(this1) {
        return this1.ATTACHED_SHADERS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_UNIFORMS = function(this1) {
        return this1.ACTIVE_UNIFORMS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_ATTRIBUTES = function(this1) {
        return this1.ACTIVE_ATTRIBUTES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SHADING_LANGUAGE_VERSION = function(this1) {
        return this1.SHADING_LANGUAGE_VERSION
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_PROGRAM = function(this1) {
        return this1.CURRENT_PROGRAM
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEVER = function(this1) {
        return this1.NEVER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LESS = function(this1) {
        return this1.LESS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_EQUAL = function(this1) {
        return this1.EQUAL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LEQUAL = function(this1) {
        return this1.LEQUAL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GREATER = function(this1) {
        return this1.GREATER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NOTEQUAL = function(this1) {
        return this1.NOTEQUAL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_GEQUAL = function(this1) {
        return this1.GEQUAL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALWAYS = function(this1) {
        return this1.ALWAYS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_KEEP = function(this1) {
        return this1.KEEP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_REPLACE = function(this1) {
        return this1.REPLACE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INCR = function(this1) {
        return this1.INCR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DECR = function(this1) {
        return this1.DECR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVERT = function(this1) {
        return this1.INVERT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INCR_WRAP = function(this1) {
        return this1.INCR_WRAP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DECR_WRAP = function(this1) {
        return this1.DECR_WRAP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VENDOR = function(this1) {
        return this1.VENDOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERER = function(this1) {
        return this1.RENDERER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERSION = function(this1) {
        return this1.VERSION
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST = function(this1) {
        return this1.NEAREST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR = function(this1) {
        return this1.LINEAR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST_MIPMAP_NEAREST = function(this1) {
        return this1.NEAREST_MIPMAP_NEAREST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR_MIPMAP_NEAREST = function(this1) {
        return this1.LINEAR_MIPMAP_NEAREST
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NEAREST_MIPMAP_LINEAR = function(this1) {
        return this1.NEAREST_MIPMAP_LINEAR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LINEAR_MIPMAP_LINEAR = function(this1) {
        return this1.LINEAR_MIPMAP_LINEAR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAG_FILTER = function(this1) {
        return this1.TEXTURE_MAG_FILTER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MIN_FILTER = function(this1) {
        return this1.TEXTURE_MIN_FILTER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_S = function(this1) {
        return this1.TEXTURE_WRAP_S
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_T = function(this1) {
        return this1.TEXTURE_WRAP_T
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_2D = function(this1) {
        return this1.TEXTURE_2D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE = function(this1) {
        return this1.TEXTURE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP = function(this1) {
        return this1.TEXTURE_CUBE_MAP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_CUBE_MAP = function(this1) {
        return this1.TEXTURE_BINDING_CUBE_MAP
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_X = function(this1) {
        return this1.TEXTURE_CUBE_MAP_POSITIVE_X
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_X = function(this1) {
        return this1.TEXTURE_CUBE_MAP_NEGATIVE_X
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Y = function(this1) {
        return this1.TEXTURE_CUBE_MAP_POSITIVE_Y
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Y = function(this1) {
        return this1.TEXTURE_CUBE_MAP_NEGATIVE_Y
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_POSITIVE_Z = function(this1) {
        return this1.TEXTURE_CUBE_MAP_POSITIVE_Z
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_CUBE_MAP_NEGATIVE_Z = function(this1) {
        return this1.TEXTURE_CUBE_MAP_NEGATIVE_Z
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_CUBE_MAP_TEXTURE_SIZE = function(this1) {
        return this1.MAX_CUBE_MAP_TEXTURE_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE0 = function(this1) {
        return this1.TEXTURE0
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE1 = function(this1) {
        return this1.TEXTURE1
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE2 = function(this1) {
        return this1.TEXTURE2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE3 = function(this1) {
        return this1.TEXTURE3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE4 = function(this1) {
        return this1.TEXTURE4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE5 = function(this1) {
        return this1.TEXTURE5
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE6 = function(this1) {
        return this1.TEXTURE6
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE7 = function(this1) {
        return this1.TEXTURE7
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE8 = function(this1) {
        return this1.TEXTURE8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE9 = function(this1) {
        return this1.TEXTURE9
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE10 = function(this1) {
        return this1.TEXTURE10
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE11 = function(this1) {
        return this1.TEXTURE11
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE12 = function(this1) {
        return this1.TEXTURE12
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE13 = function(this1) {
        return this1.TEXTURE13
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE14 = function(this1) {
        return this1.TEXTURE14
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE15 = function(this1) {
        return this1.TEXTURE15
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE16 = function(this1) {
        return this1.TEXTURE16
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE17 = function(this1) {
        return this1.TEXTURE17
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE18 = function(this1) {
        return this1.TEXTURE18
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE19 = function(this1) {
        return this1.TEXTURE19
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE20 = function(this1) {
        return this1.TEXTURE20
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE21 = function(this1) {
        return this1.TEXTURE21
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE22 = function(this1) {
        return this1.TEXTURE22
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE23 = function(this1) {
        return this1.TEXTURE23
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE24 = function(this1) {
        return this1.TEXTURE24
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE25 = function(this1) {
        return this1.TEXTURE25
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE26 = function(this1) {
        return this1.TEXTURE26
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE27 = function(this1) {
        return this1.TEXTURE27
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE28 = function(this1) {
        return this1.TEXTURE28
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE29 = function(this1) {
        return this1.TEXTURE29
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE30 = function(this1) {
        return this1.TEXTURE30
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE31 = function(this1) {
        return this1.TEXTURE31
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_TEXTURE = function(this1) {
        return this1.ACTIVE_TEXTURE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_REPEAT = function(this1) {
        return this1.REPEAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CLAMP_TO_EDGE = function(this1) {
        return this1.CLAMP_TO_EDGE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIRRORED_REPEAT = function(this1) {
        return this1.MIRRORED_REPEAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC2 = function(this1) {
        return this1.FLOAT_VEC2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC3 = function(this1) {
        return this1.FLOAT_VEC3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_VEC4 = function(this1) {
        return this1.FLOAT_VEC4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC2 = function(this1) {
        return this1.INT_VEC2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC3 = function(this1) {
        return this1.INT_VEC3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_VEC4 = function(this1) {
        return this1.INT_VEC4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL = function(this1) {
        return this1.BOOL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC2 = function(this1) {
        return this1.BOOL_VEC2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC3 = function(this1) {
        return this1.BOOL_VEC3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BOOL_VEC4 = function(this1) {
        return this1.BOOL_VEC4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2 = function(this1) {
        return this1.FLOAT_MAT2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3 = function(this1) {
        return this1.FLOAT_MAT3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4 = function(this1) {
        return this1.FLOAT_MAT4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D = function(this1) {
        return this1.SAMPLER_2D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_CUBE = function(this1) {
        return this1.SAMPLER_CUBE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_ENABLED = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_ENABLED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_SIZE = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_STRIDE = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_STRIDE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_TYPE = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_TYPE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_NORMALIZED = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_NORMALIZED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_POINTER = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_POINTER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPILE_STATUS = function(this1) {
        return this1.COMPILE_STATUS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LOW_FLOAT = function(this1) {
        return this1.LOW_FLOAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MEDIUM_FLOAT = function(this1) {
        return this1.MEDIUM_FLOAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HIGH_FLOAT = function(this1) {
        return this1.HIGH_FLOAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_LOW_INT = function(this1) {
        return this1.LOW_INT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MEDIUM_INT = function(this1) {
        return this1.MEDIUM_INT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HIGH_INT = function(this1) {
        return this1.HIGH_INT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER = function(this1) {
        return this1.FRAMEBUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER = function(this1) {
        return this1.RENDERBUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA4 = function(this1) {
        return this1.RGBA4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB5_A1 = function(this1) {
        return this1.RGB5_A1
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB565 = function(this1) {
        return this1.RGB565
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT16 = function(this1) {
        return this1.DEPTH_COMPONENT16
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_INDEX = function(this1) {
        return this1.STENCIL_INDEX
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_INDEX8 = function(this1) {
        return this1.STENCIL_INDEX8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_STENCIL = function(this1) {
        return this1.DEPTH_STENCIL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_WIDTH = function(this1) {
        return this1.RENDERBUFFER_WIDTH
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_HEIGHT = function(this1) {
        return this1.RENDERBUFFER_HEIGHT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_INTERNAL_FORMAT = function(this1) {
        return this1.RENDERBUFFER_INTERNAL_FORMAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_RED_SIZE = function(this1) {
        return this1.RENDERBUFFER_RED_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_GREEN_SIZE = function(this1) {
        return this1.RENDERBUFFER_GREEN_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_BLUE_SIZE = function(this1) {
        return this1.RENDERBUFFER_BLUE_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_ALPHA_SIZE = function(this1) {
        return this1.RENDERBUFFER_ALPHA_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_DEPTH_SIZE = function(this1) {
        return this1.RENDERBUFFER_DEPTH_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_STENCIL_SIZE = function(this1) {
        return this1.RENDERBUFFER_STENCIL_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT0 = function(this1) {
        return this1.COLOR_ATTACHMENT0
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_ATTACHMENT = function(this1) {
        return this1.DEPTH_ATTACHMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL_ATTACHMENT = function(this1) {
        return this1.STENCIL_ATTACHMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_STENCIL_ATTACHMENT = function(this1) {
        return this1.DEPTH_STENCIL_ATTACHMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_NONE = function(this1) {
        return this1.NONE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_COMPLETE = function(this1) {
        return this1.FRAMEBUFFER_COMPLETE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_UNSUPPORTED = function(this1) {
        return this1.FRAMEBUFFER_UNSUPPORTED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_BINDING = function(this1) {
        return this1.FRAMEBUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_BINDING = function(this1) {
        return this1.RENDERBUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_RENDERBUFFER_SIZE = function(this1) {
        return this1.MAX_RENDERBUFFER_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_FRAMEBUFFER_OPERATION = function(this1) {
        return this1.INVALID_FRAMEBUFFER_OPERATION
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_FLIP_Y_WEBGL = function(this1) {
        return this1.UNPACK_FLIP_Y_WEBGL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_PREMULTIPLY_ALPHA_WEBGL = function(this1) {
        return this1.UNPACK_PREMULTIPLY_ALPHA_WEBGL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONTEXT_LOST_WEBGL = function(this1) {
        return this1.CONTEXT_LOST_WEBGL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_COLORSPACE_CONVERSION_WEBGL = function(this1) {
        return this1.UNPACK_COLORSPACE_CONVERSION_WEBGL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_BROWSER_DEFAULT_WEBGL = function(this1) {
        return this1.BROWSER_DEFAULT_WEBGL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_type = function(this1) {
        return this1.type
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_version = function(this1) {
        return this1.version
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_BUFFER = function(this1) {
        return this1.READ_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_ROW_LENGTH = function(this1) {
        return this1.UNPACK_ROW_LENGTH
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_ROWS = function(this1) {
        return this1.UNPACK_SKIP_ROWS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_PIXELS = function(this1) {
        return this1.UNPACK_SKIP_PIXELS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_ROW_LENGTH = function(this1) {
        return this1.PACK_ROW_LENGTH
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_SKIP_ROWS = function(this1) {
        return this1.PACK_SKIP_ROWS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PACK_SKIP_PIXELS = function(this1) {
        return this1.PACK_SKIP_PIXELS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_3D = function(this1) {
        return this1.TEXTURE_BINDING_3D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_SKIP_IMAGES = function(this1) {
        return this1.UNPACK_SKIP_IMAGES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNPACK_IMAGE_HEIGHT = function(this1) {
        return this1.UNPACK_IMAGE_HEIGHT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_3D_TEXTURE_SIZE = function(this1) {
        return this1.MAX_3D_TEXTURE_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENTS_VERTICES = function(this1) {
        return this1.MAX_ELEMENTS_VERTICES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENTS_INDICES = function(this1) {
        return this1.MAX_ELEMENTS_INDICES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TEXTURE_LOD_BIAS = function(this1) {
        return this1.MAX_TEXTURE_LOD_BIAS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_FRAGMENT_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_VERTEX_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ARRAY_TEXTURE_LAYERS = function(this1) {
        return this1.MAX_ARRAY_TEXTURE_LAYERS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIN_PROGRAM_TEXEL_OFFSET = function(this1) {
        return this1.MIN_PROGRAM_TEXEL_OFFSET
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_PROGRAM_TEXEL_OFFSET = function(this1) {
        return this1.MAX_PROGRAM_TEXEL_OFFSET
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VARYING_COMPONENTS = function(this1) {
        return this1.MAX_VARYING_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAGMENT_SHADER_DERIVATIVE_HINT = function(this1) {
        return this1.FRAGMENT_SHADER_DERIVATIVE_HINT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RASTERIZER_DISCARD = function(this1) {
        return this1.RASTERIZER_DISCARD
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ARRAY_BINDING = function(this1) {
        return this1.VERTEX_ARRAY_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_OUTPUT_COMPONENTS = function(this1) {
        return this1.MAX_VERTEX_OUTPUT_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_INPUT_COMPONENTS = function(this1) {
        return this1.MAX_FRAGMENT_INPUT_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_SERVER_WAIT_TIMEOUT = function(this1) {
        return this1.MAX_SERVER_WAIT_TIMEOUT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_ELEMENT_INDEX = function(this1) {
        return this1.MAX_ELEMENT_INDEX
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED = function(this1) {
        return this1.RED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8 = function(this1) {
        return this1.RGB8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8 = function(this1) {
        return this1.RGBA8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB10_A2 = function(this1) {
        return this1.RGB10_A2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_3D = function(this1) {
        return this1.TEXTURE_3D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_WRAP_R = function(this1) {
        return this1.TEXTURE_WRAP_R
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MIN_LOD = function(this1) {
        return this1.TEXTURE_MIN_LOD
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAX_LOD = function(this1) {
        return this1.TEXTURE_MAX_LOD
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BASE_LEVEL = function(this1) {
        return this1.TEXTURE_BASE_LEVEL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_MAX_LEVEL = function(this1) {
        return this1.TEXTURE_MAX_LEVEL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_COMPARE_MODE = function(this1) {
        return this1.TEXTURE_COMPARE_MODE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_COMPARE_FUNC = function(this1) {
        return this1.TEXTURE_COMPARE_FUNC
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB = function(this1) {
        return this1.SRGB
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB8 = function(this1) {
        return this1.SRGB8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SRGB8_ALPHA8 = function(this1) {
        return this1.SRGB8_ALPHA8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COMPARE_REF_TO_TEXTURE = function(this1) {
        return this1.COMPARE_REF_TO_TEXTURE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32F = function(this1) {
        return this1.RGBA32F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32F = function(this1) {
        return this1.RGB32F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16F = function(this1) {
        return this1.RGBA16F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16F = function(this1) {
        return this1.RGB16F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_2D_ARRAY = function(this1) {
        return this1.TEXTURE_2D_ARRAY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_BINDING_2D_ARRAY = function(this1) {
        return this1.TEXTURE_BINDING_2D_ARRAY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R11F_G11F_B10F = function(this1) {
        return this1.R11F_G11F_B10F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB9_E5 = function(this1) {
        return this1.RGB9_E5
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32UI = function(this1) {
        return this1.RGBA32UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32UI = function(this1) {
        return this1.RGB32UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16UI = function(this1) {
        return this1.RGBA16UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16UI = function(this1) {
        return this1.RGB16UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8UI = function(this1) {
        return this1.RGBA8UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8UI = function(this1) {
        return this1.RGB8UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA32I = function(this1) {
        return this1.RGBA32I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB32I = function(this1) {
        return this1.RGB32I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA16I = function(this1) {
        return this1.RGBA16I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB16I = function(this1) {
        return this1.RGB16I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8I = function(this1) {
        return this1.RGBA8I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8I = function(this1) {
        return this1.RGB8I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RED_INTEGER = function(this1) {
        return this1.RED_INTEGER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB_INTEGER = function(this1) {
        return this1.RGB_INTEGER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA_INTEGER = function(this1) {
        return this1.RGBA_INTEGER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8 = function(this1) {
        return this1.R8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8 = function(this1) {
        return this1.RG8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16F = function(this1) {
        return this1.R16F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32F = function(this1) {
        return this1.R32F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16F = function(this1) {
        return this1.RG16F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32F = function(this1) {
        return this1.RG32F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8I = function(this1) {
        return this1.R8I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8UI = function(this1) {
        return this1.R8UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16I = function(this1) {
        return this1.R16I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R16UI = function(this1) {
        return this1.R16UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32I = function(this1) {
        return this1.R32I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R32UI = function(this1) {
        return this1.R32UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8I = function(this1) {
        return this1.RG8I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8UI = function(this1) {
        return this1.RG8UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16I = function(this1) {
        return this1.RG16I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG16UI = function(this1) {
        return this1.RG16UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32I = function(this1) {
        return this1.RG32I
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG32UI = function(this1) {
        return this1.RG32UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_R8_SNORM = function(this1) {
        return this1.R8_SNORM
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG8_SNORM = function(this1) {
        return this1.RG8_SNORM
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB8_SNORM = function(this1) {
        return this1.RGB8_SNORM
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGBA8_SNORM = function(this1) {
        return this1.RGBA8_SNORM
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RGB10_A2UI = function(this1) {
        return this1.RGB10_A2UI
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_IMMUTABLE_FORMAT = function(this1) {
        return this1.TEXTURE_IMMUTABLE_FORMAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TEXTURE_IMMUTABLE_LEVELS = function(this1) {
        return this1.TEXTURE_IMMUTABLE_LEVELS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_2_10_10_10_REV = function(this1) {
        return this1.UNSIGNED_INT_2_10_10_10_REV
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_10F_11F_11F_REV = function(this1) {
        return this1.UNSIGNED_INT_10F_11F_11F_REV
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_5_9_9_9_REV = function(this1) {
        return this1.UNSIGNED_INT_5_9_9_9_REV
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_32_UNSIGNED_INT_24_8_REV = function(this1) {
        return this1.FLOAT_32_UNSIGNED_INT_24_8_REV
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_24_8 = function(this1) {
        return this1.UNSIGNED_INT_24_8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_HALF_FLOAT = function(this1) {
        return this1.HALF_FLOAT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG = function(this1) {
        return this1.RG
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RG_INTEGER = function(this1) {
        return this1.RG_INTEGER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_2_10_10_10_REV = function(this1) {
        return this1.INT_2_10_10_10_REV
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CURRENT_QUERY = function(this1) {
        return this1.CURRENT_QUERY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_QUERY_RESULT = function(this1) {
        return this1.QUERY_RESULT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_QUERY_RESULT_AVAILABLE = function(this1) {
        return this1.QUERY_RESULT_AVAILABLE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ANY_SAMPLES_PASSED = function(this1) {
        return this1.ANY_SAMPLES_PASSED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ANY_SAMPLES_PASSED_CONSERVATIVE = function(this1) {
        return this1.ANY_SAMPLES_PASSED_CONSERVATIVE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_DRAW_BUFFERS = function(this1) {
        return this1.MAX_DRAW_BUFFERS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER0 = function(this1) {
        return this1.DRAW_BUFFER0
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER1 = function(this1) {
        return this1.DRAW_BUFFER1
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER2 = function(this1) {
        return this1.DRAW_BUFFER2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER3 = function(this1) {
        return this1.DRAW_BUFFER3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER4 = function(this1) {
        return this1.DRAW_BUFFER4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER5 = function(this1) {
        return this1.DRAW_BUFFER5
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER6 = function(this1) {
        return this1.DRAW_BUFFER6
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER7 = function(this1) {
        return this1.DRAW_BUFFER7
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER8 = function(this1) {
        return this1.DRAW_BUFFER8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER9 = function(this1) {
        return this1.DRAW_BUFFER9
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER10 = function(this1) {
        return this1.DRAW_BUFFER10
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER11 = function(this1) {
        return this1.DRAW_BUFFER11
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER12 = function(this1) {
        return this1.DRAW_BUFFER12
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER13 = function(this1) {
        return this1.DRAW_BUFFER13
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER14 = function(this1) {
        return this1.DRAW_BUFFER14
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_BUFFER15 = function(this1) {
        return this1.DRAW_BUFFER15
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COLOR_ATTACHMENTS = function(this1) {
        return this1.MAX_COLOR_ATTACHMENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT1 = function(this1) {
        return this1.COLOR_ATTACHMENT1
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT2 = function(this1) {
        return this1.COLOR_ATTACHMENT2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT3 = function(this1) {
        return this1.COLOR_ATTACHMENT3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT4 = function(this1) {
        return this1.COLOR_ATTACHMENT4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT5 = function(this1) {
        return this1.COLOR_ATTACHMENT5
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT6 = function(this1) {
        return this1.COLOR_ATTACHMENT6
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT7 = function(this1) {
        return this1.COLOR_ATTACHMENT7
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT8 = function(this1) {
        return this1.COLOR_ATTACHMENT8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT9 = function(this1) {
        return this1.COLOR_ATTACHMENT9
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT10 = function(this1) {
        return this1.COLOR_ATTACHMENT10
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT11 = function(this1) {
        return this1.COLOR_ATTACHMENT11
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT12 = function(this1) {
        return this1.COLOR_ATTACHMENT12
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT13 = function(this1) {
        return this1.COLOR_ATTACHMENT13
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT14 = function(this1) {
        return this1.COLOR_ATTACHMENT14
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR_ATTACHMENT15 = function(this1) {
        return this1.COLOR_ATTACHMENT15
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_3D = function(this1) {
        return this1.SAMPLER_3D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_SHADOW = function(this1) {
        return this1.SAMPLER_2D_SHADOW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_ARRAY = function(this1) {
        return this1.SAMPLER_2D_ARRAY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_2D_ARRAY_SHADOW = function(this1) {
        return this1.SAMPLER_2D_ARRAY_SHADOW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_CUBE_SHADOW = function(this1) {
        return this1.SAMPLER_CUBE_SHADOW
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_2D = function(this1) {
        return this1.INT_SAMPLER_2D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_3D = function(this1) {
        return this1.INT_SAMPLER_3D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_CUBE = function(this1) {
        return this1.INT_SAMPLER_CUBE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INT_SAMPLER_2D_ARRAY = function(this1) {
        return this1.INT_SAMPLER_2D_ARRAY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_2D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_3D = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_3D
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_CUBE = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_CUBE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_SAMPLER_2D_ARRAY = function(this1) {
        return this1.UNSIGNED_INT_SAMPLER_2D_ARRAY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_SAMPLES = function(this1) {
        return this1.MAX_SAMPLES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SAMPLER_BINDING = function(this1) {
        return this1.SAMPLER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_PACK_BUFFER = function(this1) {
        return this1.PIXEL_PACK_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_UNPACK_BUFFER = function(this1) {
        return this1.PIXEL_UNPACK_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_PACK_BUFFER_BINDING = function(this1) {
        return this1.PIXEL_PACK_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_PIXEL_UNPACK_BUFFER_BINDING = function(this1) {
        return this1.PIXEL_UNPACK_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_READ_BUFFER = function(this1) {
        return this1.COPY_READ_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_WRITE_BUFFER = function(this1) {
        return this1.COPY_WRITE_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_READ_BUFFER_BINDING = function(this1) {
        return this1.COPY_READ_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COPY_WRITE_BUFFER_BINDING = function(this1) {
        return this1.COPY_WRITE_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2x3 = function(this1) {
        return this1.FLOAT_MAT2x3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT2x4 = function(this1) {
        return this1.FLOAT_MAT2x4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3x2 = function(this1) {
        return this1.FLOAT_MAT3x2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT3x4 = function(this1) {
        return this1.FLOAT_MAT3x4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4x2 = function(this1) {
        return this1.FLOAT_MAT4x2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FLOAT_MAT4x3 = function(this1) {
        return this1.FLOAT_MAT4x3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC2 = function(this1) {
        return this1.UNSIGNED_INT_VEC2
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC3 = function(this1) {
        return this1.UNSIGNED_INT_VEC3
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_INT_VEC4 = function(this1) {
        return this1.UNSIGNED_INT_VEC4
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNED_NORMALIZED = function(this1) {
        return this1.UNSIGNED_NORMALIZED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SIGNED_NORMALIZED = function(this1) {
        return this1.SIGNED_NORMALIZED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_INTEGER = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_INTEGER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_VERTEX_ATTRIB_ARRAY_DIVISOR = function(this1) {
        return this1.VERTEX_ATTRIB_ARRAY_DIVISOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_MODE = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_MODE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = function(this1) {
        return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_VARYINGS = function(this1) {
        return this1.TRANSFORM_FEEDBACK_VARYINGS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_START = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_START
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_SIZE = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = function(this1) {
        return this1.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = function(this1) {
        return this1.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = function(this1) {
        return this1.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INTERLEAVED_ATTRIBS = function(this1) {
        return this1.INTERLEAVED_ATTRIBS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SEPARATE_ATTRIBS = function(this1) {
        return this1.SEPARATE_ATTRIBS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BUFFER_BINDING = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK = function(this1) {
        return this1.TRANSFORM_FEEDBACK
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_PAUSED = function(this1) {
        return this1.TRANSFORM_FEEDBACK_PAUSED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_ACTIVE = function(this1) {
        return this1.TRANSFORM_FEEDBACK_ACTIVE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TRANSFORM_FEEDBACK_BINDING = function(this1) {
        return this1.TRANSFORM_FEEDBACK_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_RED_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_RED_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_DEFAULT = function(this1) {
        return this1.FRAMEBUFFER_DEFAULT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH24_STENCIL8 = function(this1) {
        return this1.DEPTH24_STENCIL8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_FRAMEBUFFER_BINDING = function(this1) {
        return this1.DRAW_FRAMEBUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_FRAMEBUFFER = function(this1) {
        return this1.READ_FRAMEBUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DRAW_FRAMEBUFFER = function(this1) {
        return this1.DRAW_FRAMEBUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_READ_FRAMEBUFFER_BINDING = function(this1) {
        return this1.READ_FRAMEBUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_RENDERBUFFER_SAMPLES = function(this1) {
        return this1.RENDERBUFFER_SAMPLES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = function(this1) {
        return this1.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = function(this1) {
        return this1.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER = function(this1) {
        return this1.UNIFORM_BUFFER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_BINDING = function(this1) {
        return this1.UNIFORM_BUFFER_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_START = function(this1) {
        return this1.UNIFORM_BUFFER_START
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_SIZE = function(this1) {
        return this1.UNIFORM_BUFFER_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_VERTEX_UNIFORM_BLOCKS = function(this1) {
        return this1.MAX_VERTEX_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_FRAGMENT_UNIFORM_BLOCKS = function(this1) {
        return this1.MAX_FRAGMENT_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_UNIFORM_BLOCKS = function(this1) {
        return this1.MAX_COMBINED_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_UNIFORM_BUFFER_BINDINGS = function(this1) {
        return this1.MAX_UNIFORM_BUFFER_BINDINGS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_UNIFORM_BLOCK_SIZE = function(this1) {
        return this1.MAX_UNIFORM_BLOCK_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = function(this1) {
        return this1.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BUFFER_OFFSET_ALIGNMENT = function(this1) {
        return this1.UNIFORM_BUFFER_OFFSET_ALIGNMENT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ACTIVE_UNIFORM_BLOCKS = function(this1) {
        return this1.ACTIVE_UNIFORM_BLOCKS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_TYPE = function(this1) {
        return this1.UNIFORM_TYPE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_SIZE = function(this1) {
        return this1.UNIFORM_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_INDEX = function(this1) {
        return this1.UNIFORM_BLOCK_INDEX
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_OFFSET = function(this1) {
        return this1.UNIFORM_OFFSET
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_ARRAY_STRIDE = function(this1) {
        return this1.UNIFORM_ARRAY_STRIDE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_MATRIX_STRIDE = function(this1) {
        return this1.UNIFORM_MATRIX_STRIDE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_IS_ROW_MAJOR = function(this1) {
        return this1.UNIFORM_IS_ROW_MAJOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_BINDING = function(this1) {
        return this1.UNIFORM_BLOCK_BINDING
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_DATA_SIZE = function(this1) {
        return this1.UNIFORM_BLOCK_DATA_SIZE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORMS = function(this1) {
        return this1.UNIFORM_BLOCK_ACTIVE_UNIFORMS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = function(this1) {
        return this1.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = function(this1) {
        return this1.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = function(this1) {
        return this1.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_OBJECT_TYPE = function(this1) {
        return this1.OBJECT_TYPE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_CONDITION = function(this1) {
        return this1.SYNC_CONDITION
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_STATUS = function(this1) {
        return this1.SYNC_STATUS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FLAGS = function(this1) {
        return this1.SYNC_FLAGS
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FENCE = function(this1) {
        return this1.SYNC_FENCE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_GPU_COMMANDS_COMPLETE = function(this1) {
        return this1.SYNC_GPU_COMMANDS_COMPLETE
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_UNSIGNALED = function(this1) {
        return this1.UNSIGNALED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SIGNALED = function(this1) {
        return this1.SIGNALED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_ALREADY_SIGNALED = function(this1) {
        return this1.ALREADY_SIGNALED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TIMEOUT_EXPIRED = function(this1) {
        return this1.TIMEOUT_EXPIRED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_CONDITION_SATISFIED = function(this1) {
        return this1.CONDITION_SATISFIED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_WAIT_FAILED = function(this1) {
        return this1.WAIT_FAILED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_SYNC_FLUSH_COMMANDS_BIT = function(this1) {
        return this1.SYNC_FLUSH_COMMANDS_BIT
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_COLOR = function(this1) {
        return this1.COLOR
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH = function(this1) {
        return this1.DEPTH
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STENCIL = function(this1) {
        return this1.STENCIL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MIN = function(this1) {
        return this1.MIN
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX = function(this1) {
        return this1.MAX
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT24 = function(this1) {
        return this1.DEPTH_COMPONENT24
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_READ = function(this1) {
        return this1.STREAM_READ
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STREAM_COPY = function(this1) {
        return this1.STREAM_COPY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_READ = function(this1) {
        return this1.STATIC_READ
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_STATIC_COPY = function(this1) {
        return this1.STATIC_COPY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_READ = function(this1) {
        return this1.DYNAMIC_READ
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DYNAMIC_COPY = function(this1) {
        return this1.DYNAMIC_COPY
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH_COMPONENT32F = function(this1) {
        return this1.DEPTH_COMPONENT32F
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_DEPTH32F_STENCIL8 = function(this1) {
        return this1.DEPTH32F_STENCIL8
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_INVALID_INDEX = function(this1) {
        return this1.INVALID_INDEX
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_TIMEOUT_IGNORED = function(this1) {
        return this1.TIMEOUT_IGNORED
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL = function(this1) {
        return this1.MAX_CLIENT_WAIT_TIMEOUT_WEBGL
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.activeTexture = function(this1, texture) {
        this1.__context.activeTexture(texture)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.attachShader = function(this1, program, shader) {
        this1.__context.attachShader(program, shader)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.beginQuery = function(this1, target, query) {
        this1.__context.beginQuery(target, query)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.beginTransformFeedback = function(this1, primitiveNode) {
        this1.__context.beginTransformFeedback(primitiveNode)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindAttribLocation = function(this1, program, index, name) {
        this1.__context.bindAttribLocation(program, index, name)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBuffer = function(this1, target, buffer) {
        this1.__context.bindBuffer(target, buffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBufferBase = function(this1, target, index, buffer) {
        this1.__context.bindBufferBase(target, index, buffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindBufferRange = function(this1, target, index, buffer, offset, size) {
        this1.__context.bindBufferRange(target, index, buffer, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindFramebuffer = function(this1, target, framebuffer) {
        this1.__context.bindFramebuffer(target, framebuffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindRenderbuffer = function(this1, target, renderbuffer) {
        this1.__context.bindRenderbuffer(target, renderbuffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindSampler = function(this1, unit, sampler) {
        this1.__context.bindSampler(unit, sampler)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindTexture = function(this1, target, texture) {
        this1.__context.bindTexture(target, texture)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindTransformFeedback = function(this1, target, transformFeedback) {
        this1.__context.bindTransformFeedback(target, transformFeedback)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bindVertexArray = function(this1, vertexArray) {
        this1.__context.bindVertexArray(vertexArray)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendColor = function(this1, red, green, blue, alpha) {
        this1.__context.blendColor(red, green, blue, alpha)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendEquation = function(this1, mode) {
        this1.__context.blendEquation(mode)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendEquationSeparate = function(this1, modeRGB, modeAlpha) {
        this1.__context.blendEquationSeparate(modeRGB, modeAlpha)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendFunc = function(this1, sfactor, dfactor) {
        this1.__context.blendFunc(sfactor, dfactor)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blendFuncSeparate = function(this1, srcRGB, dstRGB, srcAlpha, dstAlpha) {
        this1.__context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.blitFramebuffer = function(this1, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) {
        this1.__context.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bufferData = function(this1, target, srcData, usage, srcOffset, length) {
        this1.bufferDataWEBGL(target, srcData, usage, srcOffset, length)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.bufferSubData = function(this1, target, offset, srcData, srcOffset, length) {
        this1.bufferSubDataWEBGL(target, offset, srcData, srcOffset, length)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.checkFramebufferStatus = function(this1, target) {
        return this1.__context.checkFramebufferStatus(target)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clear = function(this1, mask) {
        this1.__context.clear(mask)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferfi = function(this1, buffer, drawbuffer, depth, stencil) {
        this1.__context.clearBufferfi(buffer, drawbuffer, depth, stencil)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferfv = function(this1, buffer, drawbuffer, values, srcOffset) {
        this1.__context.clearBufferfv(buffer, drawbuffer, values, srcOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferiv = function(this1, buffer, drawbuffer, values, srcOffset) {
        this1.__context.clearBufferiv(buffer, drawbuffer, values, srcOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearBufferuiv = function(this1, buffer, drawbuffer, values, srcOffset) {
        this1.__context.clearBufferuiv(buffer, drawbuffer, values, srcOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearColor = function(this1, red, green, blue, alpha) {
        this1.__context.clearColor(red, green, blue, alpha)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearDepth = function(this1, depth) {
        this1.__context.clearDepth(depth)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clearStencil = function(this1, s) {
        this1.__context.clearStencil(s)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.clientWaitSync = function(this1, sync, flags, timeout) {
        return this1.__context.clientWaitSync(sync, flags, timeout)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.colorMask = function(this1, red, green, blue, alpha) {
        this1.__context.colorMask(red, green, blue, alpha)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compileShader = function(this1, shader) {
        this1.__context.compileShader(shader)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexImage2D = function(this1, target, level, internalformat, width, height, border, srcData, srcOffset, srcLengthOverride) {
        this1.compressedTexImage2DWEBGL(target, level, internalformat, width, height, border, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexImage3D = function(this1, target, level, internalformat, width, height, depth, border, srcData, srcOffset, srcLengthOverride) {
        this1.__context.compressedTexImage3D(target, level, internalformat, width, height, depth, border, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexSubImage2D = function(this1, target, level, xoffset, yoffset, width, height, format, srcData, srcOffset, srcLengthOverride) {
        this1.compressedTexSubImage2DWEBGL(target, level, xoffset, yoffset, width, height, format, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.compressedTexSubImage3D = function(this1, target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset, srcLengthOverride) {
        this1.compressedTexSubImage3DWEBGL(target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset, srcLengthOverride)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyBufferSubData = function(this1, readTarget, writeTarget, readOffset, writeOffset, size) {
        null
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexImage2D = function(this1, target, level, internalformat, x, y, width, height, border) {
        this1.__context.copyTexImage2D(target, level, internalformat, x, y, width, height, border)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexSubImage2D = function(this1, target, level, xoffset, yoffset, x, y, width, height) {
        this1.__context.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.copyTexSubImage3D = function(this1, target, level, xoffset, yoffset, zoffset, x, y, width, height) {
        this1.__context.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createBuffer = function(this1) {
        return this1.__context.createBuffer()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createFramebuffer = function(this1) {
        return this1.__context.createFramebuffer()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createProgram = function(this1) {
        return this1.__context.createProgram()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createQuery = function(this1) {
        return this1.__context.createQuery()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createRenderbuffer = function(this1) {
        return this1.__context.createRenderbuffer()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createSampler = function(this1) {
        return this1.__context.createSampler()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createShader = function(this1, type) {
        return this1.__context.createShader(type)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createTexture = function(this1) {
        return this1.__context.createTexture()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createTransformFeedback = function(this1) {
        return this1.__context.createTransformFeedback()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.createVertexArray = function(this1) {
        return this1.__context.createVertexArray()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.cullFace = function(this1, mode) {
        this1.__context.cullFace(mode)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteBuffer = function(this1, buffer) {
        this1.__context.deleteBuffer(buffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteFramebuffer = function(this1, framebuffer) {
        this1.__context.deleteFramebuffer(framebuffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteProgram = function(this1, program) {
        this1.__context.deleteProgram(program)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteQuery = function(this1, query) {
        this1.__context.deleteQuery(query)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteRenderbuffer = function(this1, renderbuffer) {
        this1.__context.deleteRenderbuffer(renderbuffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteSampler = function(this1, sampler) {
        this1.__context.deleteSampler(sampler)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteShader = function(this1, shader) {
        this1.__context.deleteShader(shader)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteSync = function(this1, sync) {
        this1.__context.deleteSync(sync)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteTexture = function(this1, texture) {
        this1.__context.deleteTexture(texture)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteTransformFeedback = function(this1, transformFeedback) {
        this1.__context.deleteTransformFeedback(transformFeedback)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.deleteVertexArray = function(this1, vertexArray) {
        this1.__context.deleteVertexArray(vertexArray)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthFunc = function(this1, func) {
        this1.__context.depthFunc(func)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthMask = function(this1, flag) {
        this1.__context.depthMask(flag)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.depthRange = function(this1, zNear, zFar) {
        this1.__context.depthRange(zNear, zFar)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.detachShader = function(this1, program, shader) {
        this1.__context.detachShader(program, shader)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.disable = function(this1, cap) {
        this1.__context.disable(cap)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.disableVertexAttribArray = function(this1, index) {
        this1.__context.disableVertexAttribArray(index)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawArrays = function(this1, mode, first, count) {
        this1.__context.drawArrays(mode, first, count)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawArraysInstanced = function(this1, mode, first, count, instanceCount) {
        this1.__context.drawArraysInstanced(mode, first, count, instanceCount)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawBuffers = function(this1, buffers) {
        this1.__context.drawBuffers(buffers)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawElements = function(this1, mode, count, type, offset) {
        this1.__context.drawElements(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawElementsInstanced = function(this1, mode, count, type, offset, instanceCount) {
        this1.__context.drawElementsInstanced(mode, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)), instanceCount)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.drawRangeElements = function(this1, mode, start, end, count, type, offset) {
        this1.__context.drawRangeElements(mode, start, end, count, type, lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset)))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.enable = function(this1, cap) {
        this1.__context.enable(cap)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.enableVertexAttribArray = function(this1, index) {
        this1.__context.enableVertexAttribArray(index)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.endQuery = function(this1, target) {
        this1.__context.endQuery(target)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.endTransformFeedback = function(this1) {
        this1.__context.endTransformFeedback()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fenceSync = function(this1, condition, flags) {
        return this1.__context.fenceSync(condition, flags)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.finish = function(this1) {
        this1.__context.finish()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.flush = function(this1) {
        this1.__context.flush()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferRenderbuffer = function(this1, target, attachment, renderbuffertarget, renderbuffer) {
        this1.__context.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferTexture2D = function(this1, target, attachment, textarget, texture, level) {
        this1.__context.framebufferTexture2D(target, attachment, textarget, texture, level)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.framebufferTextureLayer = function(this1, target, attachment, texture, level, layer) {
        this1.__context.framebufferTextureLayer(target, attachment, texture, level, layer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.frontFace = function(this1, mode) {
        this1.__context.frontFace(mode)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.generateMipmap = function(this1, target) {
        this1.__context.generateMipmap(target)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveAttrib = function(this1, program, index) {
        return this1.__context.getActiveAttrib(program, index)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniform = function(this1, program, index) {
        return this1.__context.getActiveUniform(program, index)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniformBlockName = function(this1, program, uniformBlockIndex) {
        return this1.__context.getActiveUniformBlockName(program, uniformBlockIndex)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniformBlockParameter = function(this1, program, uniformBlockIndex, pname) {
        return this1.__context.getActiveUniformBlockParameter(program, uniformBlockIndex, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getActiveUniforms = function(this1, program, uniformIndices, pname) {
        return this1.__context.getActiveUniforms(program, uniformIndices, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getAttachedShaders = function(this1, program) {
        return this1.__context.getAttachedShaders(program)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getAttribLocation = function(this1, program, name) {
        return this1.__context.getAttribLocation(program, name)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getBufferParameter = function(this1, target, pname) {
        return this1.__context.getBufferParameter(target, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getBufferSubData = function(this1, target, srcByteOffset, dstData, srcOffset, length) {
        this1.getBufferSubDataWEBGL(target, srcByteOffset, dstData, srcOffset, length)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getContextAttributes = function(this1) {
        return this1.__context.getContextAttributes()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getError = function(this1) {
        return this1.__context.getError()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getExtension = function(this1, name) {
        return this1.__context.getExtension(name)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getFragDataLocation = function(this1, program, name) {
        return this1.__context.getFragDataLocation(program, name)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getFramebufferAttachmentParameter = function(this1, target, attachment, pname) {
        return this1.__context.getFramebufferAttachmentParameter(target, attachment, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getIndexedParameter = function(this1, target, index) {
        return this1.__context.getIndexedParameter(target, index)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getInternalformatParameter = function(this1, target, internalformat, pname) {
        return this1.__context.getInternalformatParameter(target, internalformat, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getParameter = function(this1, pname) {
        return this1.__context.getParameter(pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getProgramInfoLog = function(this1, program) {
        return this1.__context.getProgramInfoLog(program)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getProgramParameter = function(this1, program, pname) {
        return this1.__context.getProgramParameter(program, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getQuery = function(this1, target, pname) {
        return this1.__context.getQuery(target, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getQueryParameter = function(this1, query, pname) {
        return this1.__context.getQueryParameter(query, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getRenderbufferParameter = function(this1, target, pname) {
        return this1.__context.getRenderbufferParameter(target, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSamplerParameter = function(this1, sampler, pname) {
        return this1.__context.getSamplerParameter(sampler, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderInfoLog = function(this1, shader) {
        return this1.__context.getShaderInfoLog(shader)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderParameter = function(this1, shader, pname) {
        return this1.__context.getShaderParameter(shader, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderPrecisionFormat = function(this1, shadertype, precisiontype) {
        return this1.__context.getShaderPrecisionFormat(shadertype, precisiontype)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getShaderSource = function(this1, shader) {
        return this1.__context.getShaderSource(shader)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSupportedExtensions = function(this1) {
        return this1.__context.getSupportedExtensions()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getSyncParameter = function(this1, sync, pname) {
        return this1.__context.getSyncParameter(sync, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getTexParameter = function(this1, target, pname) {
        return this1.__context.getTexParameter(target, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getTransformFeedbackVarying = function(this1, program, index) {
        return this1.__context.getTransformFeedbackVarying(program, index)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniform = function(this1, program, location) {
        return this1.__context.getUniform(program, location)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformBlockIndex = function(this1, program, uniformBlockName) {
        return this1.__context.getUniformBlockIndex(program, uniformBlockName)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformIndices = function(this1, program, uniformNames) {
        return this1.__context.getUniformIndices(program, uniformNames)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getUniformLocation = function(this1, program, name) {
        return this1.__context.getUniformLocation(program, name)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getVertexAttrib = function(this1, index, pname) {
        return this1.__context.getVertexAttrib(index, pname)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.getVertexAttribOffset = function(this1, index, pname) {
        return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(this1.__context.getVertexAttribOffset(index, pname))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.hint = function(this1, target, mode) {
        this1.__context.hint(target, mode)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.invalidateFramebuffer = function(this1, target, attachments) {
        this1.__context.invalidateFramebuffer(target, attachments)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.invalidateSubFramebuffer = function(this1, target, attachments, x, y, width, height) {
        this1.__context.invalidateSubFramebuffer(target, attachments, x, y, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isBuffer = function(this1, buffer) {
        return this1.__context.isBuffer(buffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isContextLost = function(this1) {
        return this1.__contextLost || this1.__context.isContextLost()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isEnabled = function(this1, cap) {
        return this1.__context.isEnabled(cap)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isFramebuffer = function(this1, framebuffer) {
        return this1.__context.isFramebuffer(framebuffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isProgram = function(this1, program) {
        return this1.__context.isProgram(program)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isQuery = function(this1, query) {
        return this1.__context.isQuery(query)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isRenderbuffer = function(this1, renderbuffer) {
        return this1.__context.isRenderbuffer(renderbuffer)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isSampler = function(this1, sampler) {
        return this1.__context.isSampler(sampler)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isShader = function(this1, shader) {
        return this1.__context.isShader(shader)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isTexture = function(this1, texture) {
        return this1.__context.isTexture(texture)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isTransformFeedback = function(this1, transformFeedback) {
        return this1.__context.isTransformFeedback(transformFeedback)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.isVertexArray = function(this1, vertexArray) {
        return this1.__context.isVertexArray(vertexArray)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.lineWidth = function(this1, width) {
        this1.__context.lineWidth(width)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.linkProgram = function(this1, program) {
        this1.__context.linkProgram(program)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.pauseTransformFeedback = function(this1) {
        this1.__context.pauseTransformFeedback()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.pixelStorei = function(this1, pname, param) {
        this1.__context.pixelStorei(pname, param)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.polygonOffset = function(this1, factor, units) {
        this1.__context.polygonOffset(factor, units)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.readBuffer = function(this1, src) {
        this1.__context.readBuffer(src)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.readPixels = function(this1, x, y, width, height, format, type, pixels, dstOffset) {
        this1.readPixelsWEBGL(x, y, width, height, format, type, pixels, dstOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.renderbufferStorage = function(this1, target, internalformat, width, height) {
        this1.__context.renderbufferStorage(target, internalformat, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.renderbufferStorageMultisample = function(this1, target, samples, internalFormat, width, height) {
        this1.__context.renderbufferStorageMultisample(target, samples, internalFormat, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.resumeTransformFeedback = function(this1) {
        this1.__context.resumeTransformFeedback()
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.sampleCoverage = function(this1, value, invert) {
        this1.__context.sampleCoverage(value, invert)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.samplerParameterf = function(this1, sampler, pname, param) {
        this1.__context.samplerParameterf(sampler, pname, param)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.samplerParameteri = function(this1, sampler, pname, param) {
        this1.__context.samplerParameteri(sampler, pname, param)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.scissor = function(this1, x, y, width, height) {
        this1.__context.scissor(x, y, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.shaderSource = function(this1, shader, source) {
        this1.__context.shaderSource(shader, source)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilFunc = function(this1, func, ref, mask) {
        this1.__context.stencilFunc(func, ref, mask)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilFuncSeparate = function(this1, face, func, ref, mask) {
        this1.__context.stencilFuncSeparate(face, func, ref, mask)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilMask = function(this1, mask) {
        this1.__context.stencilMask(mask)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilMaskSeparate = function(this1, face, mask) {
        this1.__context.stencilMaskSeparate(face, mask)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilOp = function(this1, fail, zfail, zpass) {
        this1.__context.stencilOp(fail, zfail, zpass)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.stencilOpSeparate = function(this1, face, fail, zfail, zpass) {
        this1.__context.stencilOpSeparate(face, fail, zfail, zpass)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texImage2D = function(this1, target, level, internalformat, width, height, border, format, type, srcData, srcOffset) {
        this1.texImage2DWEBGL(target, level, internalformat, width, height, border, format, type, srcData, srcOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texImage3D = function(this1, target, level, internalformat, width, height, depth, border, format, type, srcData, srcOffset) {
        this1.__context.texImage3D(target, level, internalformat, width, height, depth, border, format, type, srcData, srcOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texStorage2D = function(this1, target, level, internalformat, width, height) {
        this1.__context.texStorage2D(target, level, internalformat, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texStorage3D = function(this1, target, level, internalformat, width, height, depth) {
        this1.__context.texStorage3D(target, level, internalformat, width, height, depth)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texParameterf = function(this1, target, pname, param) {
        this1.__context.texParameterf(target, pname, param)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texParameteri = function(this1, target, pname, param) {
        this1.__context.texParameteri(target, pname, param)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texSubImage2D = function(this1, target, level, xoffset, yoffset, width, height, format, type, srcData, srcOffset) {
        this1.texSubImage2DWEBGL(target, level, xoffset, yoffset, width, height, format, type, srcData, srcOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.texSubImage3D = function(this1, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, srcData, srcOffset) {
        this1.__context.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, srcData, srcOffset)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.transformFeedbackVaryings = function(this1, program, varyings, bufferMode) {
        this1.__context.transformFeedbackVaryings(program, varyings, bufferMode)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1f = function(this1, location, v0) {
        this1.__context.uniform1f(location, v0)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1fv = function(this1, location, v) {
        this1.uniform1fvWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1i = function(this1, location, v0) {
        this1.__context.uniform1i(location, v0)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1iv = function(this1, location, v) {
        this1.uniform1ivWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1ui = function(this1, location, v0) {
        this1.__context.uniform1ui(location, v0)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform1uiv = function(this1, location, v) {
        this1.uniform1uivWEBGL(location, v, null, null)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2f = function(this1, location, v0, v1) {
        this1.__context.uniform2f(location, v0, v1)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2fv = function(this1, location, v) {
        this1.uniform2fvWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2i = function(this1, location, v0, v1) {
        this1.__context.uniform2i(location, v0, v1)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2iv = function(this1, location, v) {
        this1.uniform2fvWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2ui = function(this1, location, v0, v1) {
        this1.__context.uniform2ui(location, v0, v1)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform2uiv = function(this1, location, v) {
        this1.uniform2uivWEBGL(location, v, null, null)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3f = function(this1, location, v0, v1, v2) {
        this1.__context.uniform3f(location, v0, v1, v2)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3fv = function(this1, location, v) {
        this1.uniform3fvWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3i = function(this1, location, v0, v1, v2) {
        this1.__context.uniform3i(location, v0, v1, v2)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3iv = function(this1, location, v) {
        this1.uniform3ivWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3ui = function(this1, location, v0, v1, v2) {
        this1.__context.uniform3ui(location, v0, v1, v2)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform3uiv = function(this1, location, v) {
        this1.__context.uniform3uiv(location, v, null, null)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4f = function(this1, location, v0, v1, v2, v3) {
        this1.__context.uniform4f(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4fv = function(this1, location, v) {
        this1.uniform4fvWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4i = function(this1, location, v0, v1, v2, v3) {
        this1.__context.uniform4i(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4iv = function(this1, location, v) {
        this1.uniform4ivWEBGL(location, v)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4ui = function(this1, location, v0, v1, v2, v3) {
        this1.__context.uniform4ui(location, v0, v1, v2, v3)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniform4uiv = function(this1, location, v) {
        this1.__context.uniform4uiv(location, v, null, null)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformBlockBinding = function(this1, program, uniformBlockIndex, uniformBlockBinding) {
        this1.__context.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.uniformMatrix2fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2x3fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.__context.uniformMatrix2x3fv(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix2x4fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.__context.uniformMatrix2x4fv(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.uniformMatrix3fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3x2fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.__context.uniformMatrix3x2fv(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix3x4fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.__context.uniformMatrix3x4fv(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.uniformMatrix4fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4x2fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.uniformMatrix4x2fvWEBGL(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.uniformMatrix4x3fv = function(this1, location, transpose, v, srcOffset, srcLength) {
        this1.__context.uniformMatrix4x3fv(location, transpose, v, srcOffset, srcLength)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.useProgram = function(this1, program) {
        this1.__context.useProgram(program)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.validateProgram = function(this1, program) {
        this1.__context.validateProgram(program)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib1f = function(this1, indx, x) {
        this1.__context.vertexAttrib1f(indx, x)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib1fv = function(this1, indx, values) {
        this1.vertexAttrib1fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib2f = function(this1, indx, x, y) {
        this1.__context.vertexAttrib2f(indx, x, y)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib2fv = function(this1, indx, values) {
        this1.vertexAttrib2fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib3f = function(this1, indx, x, y, z) {
        this1.__context.vertexAttrib3f(indx, x, y, z)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib3fv = function(this1, indx, values) {
        this1.vertexAttrib3fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib4f = function(this1, indx, x, y, z, w) {
        this1.__context.vertexAttrib4f(indx, x, y, z, w)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttrib4fv = function(this1, indx, values) {
        this1.vertexAttrib4fv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribDivisor = function(this1, index, divisor) {
        this1.__context.vertexAttribDivisor(index, divisor)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4i = function(this1, indx, x, y, z, w) {
        this1.__context.vertexAttribI4i(indx, x, y, z, w)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4iv = function(this1, indx, values) {
        this1.vertexAttribI4iv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4ui = function(this1, indx, x, y, z, w) {
        this1.__context.vertexAttribI4ui(indx, x, y, z, w)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribI4uiv = function(this1, indx, values) {
        this1.vertexAttribI4uiv(indx, lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(values))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.vertexAttribPointer = function(this1, indx, size, type, normalized, stride, offset) {
        this1.__context.vertexAttribPointer(indx, size, type, normalized, stride, lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset))
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.viewport = function(this1, x, y, width, height) {
        this1.__context.viewport(x, y, width, height)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.waitSync = function(this1, sync, flags, timeout) {
        this1.__context.waitSync(sync, flags, timeout)
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fromGL = function(gl) {
        return lime_graphics_opengl_GL.context
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.fromGLES3Context = function(gl) {
        return gl
    };
    lime_graphics_opengl__$WebGL2Context_WebGL2Context_$Impl_$.toWebGLContext = function(gl) {
        return gl
    };
    var lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$ = {};
    $hxClasses["lime.graphics.opengl._WebGLContext.WebGLContext_Impl_"] = lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$;
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.__name__ = ["lime", "graphics", "opengl", "_WebGLContext", "WebGLContext_Impl_"];
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData = function(this1, target, srcData, usage) {
        this1.bufferDataWEBGL(target, srcData, usage, null, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferSubData = function(this1, target, offset, srcData) {
        this1.bufferSubDataWEBGL(target, offset, srcData, null, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.compressedTexImage2D = function(this1, target, level, internalformat, width, height, border, srcData) {
        this1.compressedTexImage2DWEBGL(target, level, internalformat, width, height, border, srcData, null, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.compressedTexSubImage2D = function(this1, target, level, xoffset, yoffset, width, height, format, srcData) {
        this1.compressedTexSubImage2DWEBGL(target, level, xoffset, yoffset, width, height, format, srcData, null, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.readPixels = function(this1, x, y, width, height, format, type, pixels) {
        this1.readPixelsWEBGL(x, y, width, height, format, type, pixels, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D = function(this1, target, level, internalformat, width, height, border, format, type, srcData) {
        var border1 = border;
        this1.texImage2DWEBGL(target, level, internalformat, width, height, border1, format, type, srcData, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texSubImage2D = function(this1, target, level, xoffset, yoffset, width, height, format, type, srcData) {
        var format1 = format;
        this1.texSubImage2DWEBGL(target, level, xoffset, yoffset, width, height, format1, type, srcData, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix2fv = function(this1, location, transpose, v) {
        this1.uniformMatrix2fvWEBGL(location, transpose, v, null, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix3fv = function(this1, location, transpose, v) {
        this1.uniformMatrix3fvWEBGL(location, transpose, v, null, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.uniformMatrix4fv = function(this1, location, transpose, v) {
        this1.uniformMatrix4fvWEBGL(location, transpose, v, null, null)
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGL = function(gl) {
        return lime_graphics_opengl_GL.context
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGLES2Context = function(gl) {
        return gl
    };
    lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.fromGLES3Context = function(gl) {
        return gl
    };
    var lime_graphics_utils_ImageCanvasUtil = function() {};
    $hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
    lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime", "graphics", "utils", "ImageCanvasUtil"];
    lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image, rect, colorMatrix) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        lime_graphics_utils_ImageDataUtil.colorTransform(image, rect, colorMatrix)
    };
    lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image, clear) {
        if (clear == null) {
            clear = false
        }
        var buffer = image.buffer;
        if (buffer.__srcImage != null) {
            if (buffer.__srcCanvas == null) {
                lime_graphics_utils_ImageCanvasUtil.createCanvas(image, buffer.__srcImage.width, buffer.__srcImage.height);
                buffer.__srcContext.drawImage(buffer.__srcImage, 0, 0)
            }
            buffer.__srcImage = null
        } else {
            if (buffer.__srcCanvas == null && buffer.data != null) {
                image.set_transparent(true);
                lime_graphics_utils_ImageCanvasUtil.createCanvas(image, buffer.width, buffer.height);
                lime_graphics_utils_ImageCanvasUtil.createImageData(image);
                buffer.__srcContext.putImageData(buffer.__srcImageData, 0, 0)
            } else {
                if (image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
                    buffer.__srcContext.putImageData(buffer.__srcImageData, 0, 0);
                    image.dirty = false
                }
            }
        }
        if (clear) {
            buffer.data = null;
            buffer.__srcImageData = null
        } else {
            if (buffer.data == null && buffer.__srcImageData != null) {
                buffer.data = buffer.__srcImageData.data
            }
        }
        image.type = lime_graphics_ImageType.CANVAS
    };
    lime_graphics_utils_ImageCanvasUtil.convertToData = function(image, clear) {
        if (clear == null) {
            clear = false
        }
        var buffer = image.buffer;
        if (buffer.__srcImage != null) {
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image)
        }
        if (buffer.__srcCanvas != null && buffer.data == null) {
            lime_graphics_utils_ImageCanvasUtil.createImageData(image);
            if (image.type == lime_graphics_ImageType.CANVAS) {
                image.dirty = false
            }
        } else {
            if (image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
                if (buffer.__srcImageData == null) {
                    lime_graphics_utils_ImageCanvasUtil.createImageData(image)
                } else {
                    buffer.__srcImageData = buffer.__srcContext.getImageData(0, 0, buffer.width, buffer.height);
                    var elements = buffer.__srcImageData.data.buffer;
                    var this1;
                    if (elements != null) {
                        this1 = new Uint8Array(elements)
                    } else {
                        this1 = null
                    }
                    buffer.data = this1
                }
                image.dirty = false
            }
        }
        if (clear) {
            image.buffer.__srcCanvas = null;
            image.buffer.__srcContext = null
        }
        image.type = lime_graphics_ImageType.DATA
    };
    lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        lime_graphics_utils_ImageDataUtil.copyChannel(image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel)
    };
    lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
        if (mergeAlpha == null) {
            mergeAlpha = false
        }
        if (destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
            return
        }
        if (alphaImage != null && alphaImage.get_transparent()) {
            if (alphaPoint == null) {
                alphaPoint = new lime_math_Vector2()
            }
            var tempData = image.clone();
            tempData.copyChannel(alphaImage, new lime_math_Rectangle(alphaPoint.x, alphaPoint.y, sourceRect.width, sourceRect.height), new lime_math_Vector2(sourceRect.x, sourceRect.y), lime_graphics_ImageChannel.ALPHA, lime_graphics_ImageChannel.ALPHA);
            sourceImage = tempData
        }
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, true);
        if (!mergeAlpha) {
            if (image.get_transparent() && sourceImage.get_transparent()) {
                image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX, destPoint.y + image.offsetY, sourceRect.width + image.offsetX, sourceRect.height + image.offsetY)
            }
        }
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
        if (sourceImage.buffer.get_src() != null) {
            image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(), sourceRect.x + sourceImage.offsetX | 0, sourceRect.y + sourceImage.offsetY | 0, sourceRect.width | 0, sourceRect.height | 0, destPoint.x + image.offsetX | 0, destPoint.y + image.offsetY | 0, sourceRect.width | 0, sourceRect.height | 0)
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image, width, height) {
        var buffer = image.buffer;
        if (buffer.__srcCanvas == null) {
            buffer.__srcCanvas = window.document.createElement("canvas");
            buffer.__srcCanvas.width = width;
            buffer.__srcCanvas.height = height;
            if (!image.get_transparent()) {
                if (!image.get_transparent()) {
                    buffer.__srcCanvas.setAttribute("moz-opaque", "true")
                }
                buffer.__srcContext = buffer.__srcCanvas.getContext("2d", {
                    alpha: false
                })
            } else {
                buffer.__srcContext = buffer.__srcCanvas.getContext("2d")
            }
            buffer.__srcContext.mozImageSmoothingEnabled = false;
            buffer.__srcContext.msImageSmoothingEnabled = false;
            buffer.__srcContext.imageSmoothingEnabled = false
        }
    };
    lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
        var buffer = image.buffer;
        if (buffer.__srcImageData == null) {
            if (buffer.data == null) {
                buffer.__srcImageData = buffer.__srcContext.getImageData(0, 0, buffer.width, buffer.height)
            } else {
                buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width, buffer.height);
                buffer.__srcImageData.data.set(buffer.data)
            }
            var elements = buffer.__srcImageData.data.buffer;
            var this1;
            if (elements != null) {
                this1 = new Uint8Array(elements)
            } else {
                this1 = null
            }
            buffer.data = this1
        }
    };
    lime_graphics_utils_ImageCanvasUtil.fillRect = function(image, rect, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        var r;
        var g;
        var b;
        var a;
        if (format == 1) {
            r = color >> 16 & 255;
            g = color >> 8 & 255;
            b = color & 255;
            if (image.get_transparent()) {
                a = color >> 24 & 255
            } else {
                a = 255
            }
        } else {
            r = color >> 24 & 255;
            g = color >> 16 & 255;
            b = color >> 8 & 255;
            if (image.get_transparent()) {
                a = color & 255
            } else {
                a = 255
            }
        }
        if (rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
            if (image.get_transparent() && a == 0) {
                image.buffer.__srcCanvas.width = image.buffer.width;
                return
            }
        }
        image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
        image.buffer.__srcContext.fillRect(rect.x + image.offsetX, rect.y + image.offsetY, rect.width + image.offsetX, rect.height + image.offsetY);
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageCanvasUtil.floodFill = function(image, x, y, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        lime_graphics_utils_ImageDataUtil.floodFill(image, x, y, color, format)
    };
    lime_graphics_utils_ImageCanvasUtil.getPixel = function(image, x, y, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        return lime_graphics_utils_ImageDataUtil.getPixel(image, x, y, format)
    };
    lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image, x, y, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        return lime_graphics_utils_ImageDataUtil.getPixel32(image, x, y, format)
    };
    lime_graphics_utils_ImageCanvasUtil.getPixels = function(image, rect, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        return lime_graphics_utils_ImageDataUtil.getPixels(image, rect, format)
    };
    lime_graphics_utils_ImageCanvasUtil.merge = function(image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        lime_graphics_utils_ImageDataUtil.merge(image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier)
    };
    lime_graphics_utils_ImageCanvasUtil.resize = function(image, newWidth, newHeight) {
        var buffer = image.buffer;
        if (buffer.__srcCanvas == null) {
            lime_graphics_utils_ImageCanvasUtil.createCanvas(image, newWidth, newHeight);
            buffer.__srcContext.drawImage(buffer.get_src(), 0, 0, newWidth, newHeight)
        } else {
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, true);
            var sourceCanvas = buffer.__srcCanvas;
            buffer.__srcCanvas = null;
            lime_graphics_utils_ImageCanvasUtil.createCanvas(image, newWidth, newHeight);
            buffer.__srcContext.drawImage(sourceCanvas, 0, 0, newWidth, newHeight)
        }
        buffer.__srcImageData = null;
        buffer.data = null;
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageCanvasUtil.scroll = function(image, x, y) {
        if (x % image.width == 0 && y % image.height == 0) {
            return
        }
        var copy = image.clone();
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, true);
        image.buffer.__srcContext.clearRect(x, y, image.width, image.height);
        image.buffer.__srcContext.drawImage(copy.get_src(), x, y);
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageCanvasUtil.setPixel = function(image, x, y, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        lime_graphics_utils_ImageDataUtil.setPixel(image, x, y, color, format)
    };
    lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image, x, y, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        lime_graphics_utils_ImageDataUtil.setPixel32(image, x, y, color, format)
    };
    lime_graphics_utils_ImageCanvasUtil.setPixels = function(image, rect, bytes, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToData(image);
        lime_graphics_utils_ImageDataUtil.setPixels(image, rect, bytes, format)
    };
    lime_graphics_utils_ImageCanvasUtil.sync = function(image, clear) {
        if (image == null) {
            return
        }
        if (image.type == lime_graphics_ImageType.CANVAS) {
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image, clear)
        } else {
            lime_graphics_utils_ImageCanvasUtil.convertToData(image, clear)
        }
    };
    var lime_graphics_utils_ImageDataUtil = function() {};
    $hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
    lime_graphics_utils_ImageDataUtil.__name__ = ["lime", "graphics", "utils", "ImageDataUtil"];
    lime_graphics_utils_ImageDataUtil.colorTransform = function(image, rect, colorMatrix) {
        var data = image.buffer.data;
        if (data == null) {
            return
        }
        var format = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
        var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
        var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
        var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
        var row;
        var offset;
        var pixel;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            row = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                offset = row + x * 4;
                switch (format) {
                    case 2:
                        pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                        break;
                    case 0:
                        pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                        break;
                    case 1:
                        pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                        break
                }
                if (premultiplied) {
                    if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (pixel & 255);
                        var r;
                        var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255
                    }
                }
                pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
                if (premultiplied) {
                    if ((pixel & 255) == 0) {
                        if (pixel != 0) {
                            pixel = 0
                        }
                    } else {
                        if ((pixel & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                            pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255
                        }
                    }
                }
                switch (format) {
                    case 2:
                        data[offset] = pixel >> 8 & 255;
                        data[offset + 1] = pixel >> 16 & 255;
                        data[offset + 2] = pixel >> 24 & 255;
                        data[offset + 3] = pixel & 255;
                        break;
                    case 0:
                        data[offset] = pixel >> 24 & 255;
                        data[offset + 1] = pixel >> 16 & 255;
                        data[offset + 2] = pixel >> 8 & 255;
                        data[offset + 3] = pixel & 255;
                        break;
                    case 1:
                        data[offset] = pixel & 255;
                        data[offset + 1] = pixel >> 24 & 255;
                        data[offset + 2] = pixel >> 16 & 255;
                        data[offset + 3] = pixel >> 8 & 255;
                        break
                }
            }
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.copyChannel = function(image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
        var destIdx;
        switch (destChannel[1]) {
            case 0:
                destIdx = 0;
                break;
            case 1:
                destIdx = 1;
                break;
            case 2:
                destIdx = 2;
                break;
            case 3:
                destIdx = 3;
                break
        }
        var srcIdx;
        switch (sourceChannel[1]) {
            case 0:
                srcIdx = 0;
                break;
            case 1:
                srcIdx = 1;
                break;
            case 2:
                srcIdx = 2;
                break;
            case 3:
                srcIdx = 3;
                break
        }
        var srcData = sourceImage.buffer.data;
        var destData = image.buffer.data;
        if (srcData == null || destData == null) {
            return
        }
        var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
        var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, srcView.width, srcView.height));
        var srcFormat = sourceImage.buffer.format;
        var destFormat = image.buffer.format;
        var srcPremultiplied = sourceImage.buffer.premultiplied;
        var destPremultiplied = image.buffer.premultiplied;
        var srcPosition;
        var destPosition;
        var srcPixel;
        var destPixel;
        var value = 0;
        var _g1 = 0;
        var _g = destView.height;
        while (_g1 < _g) {
            var y = _g1++;
            srcPosition = srcView.offset + srcView.stride * y;
            destPosition = destView.offset + destView.stride * y;
            var _g3 = 0;
            var _g2 = destView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (srcFormat) {
                    case 2:
                        srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
                        break;
                    case 0:
                        srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
                        break;
                    case 1:
                        srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
                        break
                }
                if (srcPremultiplied) {
                    if ((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (srcPixel & 255);
                        var r;
                        var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255
                    }
                }
                switch (destFormat) {
                    case 2:
                        destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                        break;
                    case 0:
                        destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                        break;
                    case 1:
                        destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                        break
                }
                if (destPremultiplied) {
                    if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (destPixel & 255);
                        var r1;
                        var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                        var g1;
                        var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                        var b1;
                        var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                        destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255
                    }
                }
                switch (srcIdx) {
                    case 0:
                        value = srcPixel >> 24 & 255;
                        break;
                    case 1:
                        value = srcPixel >> 16 & 255;
                        break;
                    case 2:
                        value = srcPixel >> 8 & 255;
                        break;
                    case 3:
                        value = srcPixel & 255;
                        break
                }
                switch (destIdx) {
                    case 0:
                        destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                        value;
                        break;
                    case 1:
                        destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                        value;
                        break;
                    case 2:
                        destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
                        value;
                        break;
                    case 3:
                        destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
                        value;
                        break
                }
                if (destPremultiplied) {
                    if ((destPixel & 255) == 0) {
                        if (destPixel != 0) {
                            destPixel = 0
                        }
                    } else {
                        if ((destPixel & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                            destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255
                        }
                    }
                }
                switch (destFormat) {
                    case 2:
                        destData[destPosition] = destPixel >> 8 & 255;
                        destData[destPosition + 1] = destPixel >> 16 & 255;
                        destData[destPosition + 2] = destPixel >> 24 & 255;
                        destData[destPosition + 3] = destPixel & 255;
                        break;
                    case 0:
                        destData[destPosition] = destPixel >> 24 & 255;
                        destData[destPosition + 1] = destPixel >> 16 & 255;
                        destData[destPosition + 2] = destPixel >> 8 & 255;
                        destData[destPosition + 3] = destPixel & 255;
                        break;
                    case 1:
                        destData[destPosition] = destPixel & 255;
                        destData[destPosition + 1] = destPixel >> 24 & 255;
                        destData[destPosition + 2] = destPixel >> 16 & 255;
                        destData[destPosition + 3] = destPixel >> 8 & 255;
                        break
                }
                srcPosition += 4;
                destPosition += 4
            }
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.copyPixels = function(image, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
        if (mergeAlpha == null) {
            mergeAlpha = false
        }
        if (image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
            image.buffer.data.set(sourceImage.buffer.data)
        } else {
            var sourceData = sourceImage.buffer.data;
            var destData = image.buffer.data;
            if (sourceData == null || destData == null) {
                return
            }
            var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
            var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, sourceView.width, sourceView.height));
            var sourceFormat = sourceImage.buffer.format;
            var destFormat = image.buffer.format;
            var sourcePremultiplied = sourceImage.buffer.premultiplied;
            var destPremultiplied = image.buffer.premultiplied;
            var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
            var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
            var sourcePosition;
            var destPosition;
            var sourcePixel;
            if (!mergeAlpha || !sourceImage.get_transparent()) {
                if (sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
                    var _g1 = 0;
                    var _g = destView.height;
                    while (_g1 < _g) {
                        var y = _g1++;
                        sourcePosition = sourceView.offset + sourceView.stride * y;
                        destPosition = destView.offset + destView.stride * y;
                        destData.set(sourceData.subarray(sourcePosition, sourcePosition + destView.width * destBytesPerPixel), destPosition)
                    }
                } else {
                    var _g11 = 0;
                    var _g2 = destView.height;
                    while (_g11 < _g2) {
                        var y1 = _g11++;
                        sourcePosition = sourceView.offset + sourceView.stride * y1;
                        destPosition = destView.offset + destView.stride * y1;
                        var _g3 = 0;
                        var _g21 = destView.width;
                        while (_g3 < _g21) {
                            var x = _g3++;
                            switch (sourceFormat) {
                                case 2:
                                    sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                                    break;
                                case 0:
                                    sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                                    break;
                                case 1:
                                    sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                                    break
                            }
                            if (sourcePremultiplied) {
                                if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (sourcePixel & 255);
                                    var r;
                                    var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                                    var g;
                                    var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                                    var b;
                                    var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                                    sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255
                                }
                            }
                            if (destPremultiplied) {
                                if ((sourcePixel & 255) == 0) {
                                    if (sourcePixel != 0) {
                                        sourcePixel = 0
                                    }
                                } else {
                                    if ((sourcePixel & 255) != 255) {
                                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
                                        sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255
                                    }
                                }
                            }
                            switch (destFormat) {
                                case 2:
                                    destData[destPosition] = sourcePixel >> 8 & 255;
                                    destData[destPosition + 1] = sourcePixel >> 16 & 255;
                                    destData[destPosition + 2] = sourcePixel >> 24 & 255;
                                    destData[destPosition + 3] = sourcePixel & 255;
                                    break;
                                case 0:
                                    destData[destPosition] = sourcePixel >> 24 & 255;
                                    destData[destPosition + 1] = sourcePixel >> 16 & 255;
                                    destData[destPosition + 2] = sourcePixel >> 8 & 255;
                                    destData[destPosition + 3] = sourcePixel & 255;
                                    break;
                                case 1:
                                    destData[destPosition] = sourcePixel & 255;
                                    destData[destPosition + 1] = sourcePixel >> 24 & 255;
                                    destData[destPosition + 2] = sourcePixel >> 16 & 255;
                                    destData[destPosition + 3] = sourcePixel >> 8 & 255;
                                    break
                            }
                            sourcePosition += 4;
                            destPosition += 4
                        }
                    }
                }
            } else {
                var sourceAlpha;
                var destAlpha;
                var oneMinusSourceAlpha;
                var blendAlpha;
                var destPixel;
                if (alphaImage == null) {
                    var _g12 = 0;
                    var _g4 = destView.height;
                    while (_g12 < _g4) {
                        var y2 = _g12++;
                        sourcePosition = sourceView.offset + sourceView.stride * y2;
                        destPosition = destView.offset + destView.stride * y2;
                        var _g31 = 0;
                        var _g22 = destView.width;
                        while (_g31 < _g22) {
                            var x1 = _g31++;
                            switch (sourceFormat) {
                                case 2:
                                    sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                                    break;
                                case 0:
                                    sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                                    break;
                                case 1:
                                    sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                                    break
                            }
                            if (sourcePremultiplied) {
                                if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (sourcePixel & 255);
                                    var r1;
                                    var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                                    var g1;
                                    var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                                    var b1;
                                    var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                                    sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255
                                }
                            }
                            switch (destFormat) {
                                case 2:
                                    destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                                    break;
                                case 0:
                                    destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                                    break;
                                case 1:
                                    destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                                    break
                            }
                            if (destPremultiplied) {
                                if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (destPixel & 255);
                                    var r2;
                                    var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
                                    var g2;
                                    var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
                                    var b2;
                                    var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
                                    destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255
                                }
                            }
                            sourceAlpha = (sourcePixel & 255) / 255;
                            destAlpha = (destPixel & 255) / 255;
                            oneMinusSourceAlpha = 1 - sourceAlpha;
                            blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
                            if (blendAlpha == 0) {
                                destPixel = 0
                            } else {
                                var value;
                                var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                                value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
                                destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                                value;
                                var value1;
                                var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                                value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
                                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                                value1;
                                var value2;
                                var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                                value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
                                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
                                value2;
                                var value3;
                                var idx12 = Math.round(blendAlpha * 255);
                                value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
                                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
                                value3
                            }
                            if (destPremultiplied) {
                                if ((destPixel & 255) == 0) {
                                    if (destPixel != 0) {
                                        destPixel = 0
                                    }
                                } else {
                                    if ((destPixel & 255) != 255) {
                                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                                        destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255
                                    }
                                }
                            }
                            switch (destFormat) {
                                case 2:
                                    destData[destPosition] = destPixel >> 8 & 255;
                                    destData[destPosition + 1] = destPixel >> 16 & 255;
                                    destData[destPosition + 2] = destPixel >> 24 & 255;
                                    destData[destPosition + 3] = destPixel & 255;
                                    break;
                                case 0:
                                    destData[destPosition] = destPixel >> 24 & 255;
                                    destData[destPosition + 1] = destPixel >> 16 & 255;
                                    destData[destPosition + 2] = destPixel >> 8 & 255;
                                    destData[destPosition + 3] = destPixel & 255;
                                    break;
                                case 1:
                                    destData[destPosition] = destPixel & 255;
                                    destData[destPosition + 1] = destPixel >> 24 & 255;
                                    destData[destPosition + 2] = destPixel >> 16 & 255;
                                    destData[destPosition + 3] = destPixel >> 8 & 255;
                                    break
                            }
                            sourcePosition += 4;
                            destPosition += 4
                        }
                    }
                } else {
                    if (alphaPoint == null) {
                        alphaPoint = new lime_math_Vector2()
                    }
                    var alphaData = alphaImage.buffer.data;
                    var alphaFormat = alphaImage.buffer.format;
                    var alphaPremultiplied = alphaImage.buffer.premultiplied;
                    var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage, new lime_math_Rectangle(alphaPoint.x, alphaPoint.y, destView.width, destView.height));
                    var alphaPosition;
                    var alphaPixel;
                    var _g13 = 0;
                    var _g5 = alphaView.height;
                    while (_g13 < _g5) {
                        var y3 = _g13++;
                        sourcePosition = sourceView.offset + sourceView.stride * y3;
                        destPosition = destView.offset + destView.stride * y3;
                        alphaPosition = alphaView.offset + alphaView.stride * y3;
                        var _g32 = 0;
                        var _g23 = alphaView.width;
                        while (_g32 < _g23) {
                            var x2 = _g32++;
                            switch (sourceFormat) {
                                case 2:
                                    sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                                    break;
                                case 0:
                                    sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                                    break;
                                case 1:
                                    sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                                    break
                            }
                            if (sourcePremultiplied) {
                                if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (sourcePixel & 255);
                                    var r3;
                                    var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
                                    var g3;
                                    var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
                                    var b3;
                                    var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
                                    sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255
                                }
                            }
                            switch (destFormat) {
                                case 2:
                                    destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                                    break;
                                case 0:
                                    destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                                    break;
                                case 1:
                                    destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                                    break
                            }
                            if (destPremultiplied) {
                                if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (destPixel & 255);
                                    var r4;
                                    var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
                                    var g4;
                                    var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
                                    var b4;
                                    var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
                                    destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255
                                }
                            }
                            switch (alphaFormat) {
                                case 2:
                                    alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
                                    break;
                                case 0:
                                    alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
                                    break;
                                case 1:
                                    alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
                                    break
                            }
                            if (alphaPremultiplied) {
                                if ((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
                                    lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (alphaPixel & 255);
                                    var r5;
                                    var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
                                    var g5;
                                    var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
                                    var b5;
                                    var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                    b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
                                    alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255
                                }
                            }
                            sourceAlpha = (alphaPixel & 255) / 255;
                            destAlpha = (destPixel & 255) / 255;
                            oneMinusSourceAlpha = 1 - sourceAlpha;
                            blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
                            if (blendAlpha == 0) {
                                destPixel = 0
                            } else {
                                var value4;
                                var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                                value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
                                destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                                value4;
                                var value5;
                                var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                                value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
                                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                                value5;
                                var value6;
                                var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                                value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
                                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
                                value6;
                                var value7;
                                var idx25 = Math.round(blendAlpha * 255);
                                value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
                                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
                                value7
                            }
                            if (destPremultiplied) {
                                if ((destPixel & 255) == 0) {
                                    if (destPixel != 0) {
                                        destPixel = 0
                                    }
                                } else {
                                    if ((destPixel & 255) != 255) {
                                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                                        destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255
                                    }
                                }
                            }
                            switch (destFormat) {
                                case 2:
                                    destData[destPosition] = destPixel >> 8 & 255;
                                    destData[destPosition + 1] = destPixel >> 16 & 255;
                                    destData[destPosition + 2] = destPixel >> 24 & 255;
                                    destData[destPosition + 3] = destPixel & 255;
                                    break;
                                case 0:
                                    destData[destPosition] = destPixel >> 24 & 255;
                                    destData[destPosition + 1] = destPixel >> 16 & 255;
                                    destData[destPosition + 2] = destPixel >> 8 & 255;
                                    destData[destPosition + 3] = destPixel & 255;
                                    break;
                                case 1:
                                    destData[destPosition] = destPixel & 255;
                                    destData[destPosition + 1] = destPixel >> 24 & 255;
                                    destData[destPosition + 2] = destPixel >> 16 & 255;
                                    destData[destPosition + 3] = destPixel >> 8 & 255;
                                    break
                            }
                            sourcePosition += 4;
                            destPosition += 4
                        }
                    }
                }
            }
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.fillRect = function(image, rect, color, format) {
        var fillColor;
        switch (format) {
            case 1:
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                fillColor = rgba;
                break;
            case 2:
                var bgra = color;
                var rgba1 = 0;
                rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                fillColor = rgba1;
                break;
            default:
                fillColor = color
        }
        if (!image.get_transparent()) {
            fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
            255
        }
        var data = image.buffer.data;
        if (data == null) {
            return
        }
        var format1 = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        if (premultiplied) {
            if ((fillColor & 255) == 0) {
                if (fillColor != 0) {
                    fillColor = 0
                }
            } else {
                if ((fillColor & 255) != 255) {
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
                    fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255
                }
            }
        }
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var row;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            row = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                var offset = row + x * 4;
                switch (format1) {
                    case 2:
                        data[offset] = fillColor >> 8 & 255;
                        data[offset + 1] = fillColor >> 16 & 255;
                        data[offset + 2] = fillColor >> 24 & 255;
                        data[offset + 3] = fillColor & 255;
                        break;
                    case 0:
                        data[offset] = fillColor >> 24 & 255;
                        data[offset + 1] = fillColor >> 16 & 255;
                        data[offset + 2] = fillColor >> 8 & 255;
                        data[offset + 3] = fillColor & 255;
                        break;
                    case 1:
                        data[offset] = fillColor & 255;
                        data[offset + 1] = fillColor >> 24 & 255;
                        data[offset + 2] = fillColor >> 16 & 255;
                        data[offset + 3] = fillColor >> 8 & 255;
                        break
                }
            }
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.floodFill = function(image, x, y, color, format) {
        var data = image.buffer.data;
        if (data == null) {
            return
        }
        if (format == 1) {
            color = (color & 16777215) << 8 | color >> 24 & 255
        }
        var format1 = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var fillColor = color;
        var hitColor;
        var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
        switch (format1) {
            case 2:
                hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break
        }
        if (premultiplied) {
            if ((hitColor & 255) != 0 && (hitColor & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (hitColor & 255);
                var r;
                var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255
            }
        }
        if (!image.get_transparent()) {
            fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
            255;
            hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
            255
        }
        if (fillColor == hitColor) {
            return
        }
        if (premultiplied) {
            if ((fillColor & 255) == 0) {
                if (fillColor != 0) {
                    fillColor = 0
                }
            } else {
                if ((fillColor & 255) != 255) {
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
                    fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255
                }
            }
        }
        var dx = [0, -1, 1, 0];
        var dy = [-1, 0, 0, 1];
        var minX = -image.offsetX;
        var minY = -image.offsetY;
        var maxX = minX + image.width;
        var maxY = minY + image.height;
        var queue = [];
        queue.push(x);
        queue.push(y);
        var curPointX;
        var curPointY;
        var nextPointX;
        var nextPointY;
        var nextPointOffset;
        var readColor;
        while (queue.length > 0) {
            curPointY = queue.pop();
            curPointX = queue.pop();
            var _g = 0;
            while (_g < 4) {
                var i = _g++;
                nextPointX = curPointX + dx[i];
                nextPointY = curPointY + dy[i];
                if (nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
                    continue
                }
                nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
                switch (format1) {
                    case 2:
                        readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
                        break;
                    case 0:
                        readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
                        break;
                    case 1:
                        readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
                        break
                }
                if (premultiplied) {
                    if ((readColor & 255) != 0 && (readColor & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (readColor & 255);
                        var r1;
                        var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                        var g1;
                        var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                        var b1;
                        var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                        readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255
                    }
                }
                if (readColor == hitColor) {
                    switch (format1) {
                        case 2:
                            data[nextPointOffset] = fillColor >> 8 & 255;
                            data[nextPointOffset + 1] = fillColor >> 16 & 255;
                            data[nextPointOffset + 2] = fillColor >> 24 & 255;
                            data[nextPointOffset + 3] = fillColor & 255;
                            break;
                        case 0:
                            data[nextPointOffset] = fillColor >> 24 & 255;
                            data[nextPointOffset + 1] = fillColor >> 16 & 255;
                            data[nextPointOffset + 2] = fillColor >> 8 & 255;
                            data[nextPointOffset + 3] = fillColor & 255;
                            break;
                        case 1:
                            data[nextPointOffset] = fillColor & 255;
                            data[nextPointOffset + 1] = fillColor >> 24 & 255;
                            data[nextPointOffset + 2] = fillColor >> 16 & 255;
                            data[nextPointOffset + 3] = fillColor >> 8 & 255;
                            break
                    }
                    queue.push(nextPointX);
                    queue.push(nextPointY)
                }
            }
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image, mask, color, findColor, format) {
        if (findColor == null) {
            findColor = true
        }
        var left = image.width + 1;
        var right = 0;
        var top = image.height + 1;
        var bottom = 0;
        var _color;
        var _mask;
        switch (format) {
            case 1:
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                _color = rgba;
                var argb1 = mask;
                var rgba1 = 0;
                rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
                _mask = rgba1;
                break;
            case 2:
                var bgra = color;
                var rgba2 = 0;
                rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                _color = rgba2;
                var bgra1 = mask;
                var rgba3 = 0;
                rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
                _mask = rgba3;
                break;
            default:
                _color = color;
                _mask = mask
        }
        if (!image.get_transparent()) {
            _color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
            255;
            _mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
            255
        }
        var pixel;
        var hit;
        var _g1 = 0;
        var _g = image.width;
        while (_g1 < _g) {
            var x = _g1++;
            hit = false;
            var _g3 = 0;
            var _g2 = image.height;
            while (_g3 < _g2) {
                var y = _g3++;
                pixel = image.getPixel32(x, y, 0);
                if (findColor) {
                    hit = (pixel & _mask) == _color
                } else {
                    hit = (pixel & _mask) != _color
                }
                if (hit) {
                    if (x < left) {
                        left = x
                    }
                    break
                }
            }
            if (hit) {
                break
            }
        }
        var ix;
        var _g11 = 0;
        var _g4 = image.width;
        while (_g11 < _g4) {
            var x1 = _g11++;
            ix = image.width - 1 - x1;
            hit = false;
            var _g31 = 0;
            var _g21 = image.height;
            while (_g31 < _g21) {
                var y1 = _g31++;
                pixel = image.getPixel32(ix, y1, 0);
                if (findColor) {
                    hit = (pixel & _mask) == _color
                } else {
                    hit = (pixel & _mask) != _color
                }
                if (hit) {
                    if (ix > right) {
                        right = ix
                    }
                    break
                }
            }
            if (hit) {
                break
            }
        }
        var _g12 = 0;
        var _g5 = image.height;
        while (_g12 < _g5) {
            var y2 = _g12++;
            hit = false;
            var _g32 = 0;
            var _g22 = image.width;
            while (_g32 < _g22) {
                var x2 = _g32++;
                pixel = image.getPixel32(x2, y2, 0);
                if (findColor) {
                    hit = (pixel & _mask) == _color
                } else {
                    hit = (pixel & _mask) != _color
                }
                if (hit) {
                    if (y2 < top) {
                        top = y2
                    }
                    break
                }
            }
            if (hit) {
                break
            }
        }
        var iy;
        var _g13 = 0;
        var _g6 = image.height;
        while (_g13 < _g6) {
            var y3 = _g13++;
            iy = image.height - 1 - y3;
            hit = false;
            var _g33 = 0;
            var _g23 = image.width;
            while (_g33 < _g23) {
                var x3 = _g33++;
                pixel = image.getPixel32(x3, iy, 0);
                if (findColor) {
                    hit = (pixel & _mask) == _color
                } else {
                    hit = (pixel & _mask) != _color
                }
                if (hit) {
                    if (iy > bottom) {
                        bottom = iy
                    }
                    break
                }
            }
            if (hit) {
                break
            }
        }
        var w = right - left;
        var h = bottom - top;
        if (w > 0) {
            w++
        }
        if (h > 0) {
            h++
        }
        if (w < 0) {
            w = 0
        }
        if (h < 0) {
            h = 0
        }
        if (left == right) {
            w = 1
        }
        if (top == bottom) {
            h = 1
        }
        if (left > image.width) {
            left = 0
        }
        if (top > image.height) {
            top = 0
        }
        return new lime_math_Rectangle(left, top, w, h)
    };
    lime_graphics_utils_ImageDataUtil.getPixel = function(image, x, y, format) {
        var pixel;
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        switch (image.buffer.format) {
            case 2:
                pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break
        }
        if (image.buffer.premultiplied) {
            if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (pixel & 255);
                var r;
                var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255
            }
        }
        pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
        0;
        switch (format) {
            case 1:
                return (function($this) {
                    var $r;
                    var argb = 0;
                    argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
                    $r = argb;
                    return $r
                }(this));
            case 2:
                return (function($this) {
                    var $r;
                    var bgra = 0;
                    bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
                    $r = bgra;
                    return $r
                }(this));
            default:
                return pixel
        }
    };
    lime_graphics_utils_ImageDataUtil.getPixel32 = function(image, x, y, format) {
        var pixel;
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        switch (image.buffer.format) {
            case 2:
                pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break
        }
        if (image.buffer.premultiplied) {
            if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (pixel & 255);
                var r;
                var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255
            }
        }
        switch (format) {
            case 1:
                return (function($this) {
                    var $r;
                    var argb = 0;
                    argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
                    $r = argb;
                    return $r
                }(this));
            case 2:
                return (function($this) {
                    var $r;
                    var bgra = 0;
                    bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
                    $r = bgra;
                    return $r
                }(this));
            default:
                return pixel
        }
    };
    lime_graphics_utils_ImageDataUtil.getPixels = function(image, rect, format) {
        if (image.buffer.data == null) {
            return null
        }
        var length = rect.width * rect.height | 0;
        var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
        var data = image.buffer.data;
        var sourceFormat = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var position;
        var argb;
        var bgra;
        var pixel;
        var destPosition = 0;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            position = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (sourceFormat) {
                    case 2:
                        pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
                        break;
                    case 0:
                        pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
                        break;
                    case 1:
                        pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
                        break
                }
                if (premultiplied) {
                    if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (pixel & 255);
                        var r;
                        var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255
                    }
                }
                switch (format) {
                    case 1:
                        var argb1 = 0;
                        argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
                        argb = argb1;
                        pixel = argb;
                        break;
                    case 2:
                        var bgra1 = 0;
                        bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
                        bgra = bgra1;
                        pixel = bgra;
                        break;
                    default:
                }
                bytes.set(destPosition++, pixel >> 24 & 255);
                bytes.set(destPosition++, pixel >> 16 & 255);
                bytes.set(destPosition++, pixel >> 8 & 255);
                bytes.set(destPosition++, pixel & 255);
                position += 4
            }
        }
        return bytes
    };
    lime_graphics_utils_ImageDataUtil.merge = function(image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
        if (image.buffer.data == null || sourceImage.buffer.data == null) {
            return
        }
        var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
        var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, sourceView.width, sourceView.height));
        var sourceData = sourceImage.buffer.data;
        var destData = image.buffer.data;
        var sourceFormat = sourceImage.buffer.format;
        var destFormat = image.buffer.format;
        var sourcePremultiplied = sourceImage.buffer.premultiplied;
        var destPremultiplied = image.buffer.premultiplied;
        var sourcePosition;
        var destPosition;
        var sourcePixel;
        var destPixel;
        var _g1 = 0;
        var _g = destView.height;
        while (_g1 < _g) {
            var y = _g1++;
            sourcePosition = sourceView.offset + sourceView.stride * y;
            destPosition = destView.offset + destView.stride * y;
            var _g3 = 0;
            var _g2 = destView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (sourceFormat) {
                    case 2:
                        sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                        break;
                    case 0:
                        sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                        break;
                    case 1:
                        sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                        break
                }
                if (sourcePremultiplied) {
                    if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (sourcePixel & 255);
                        var r;
                        var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255
                    }
                }
                switch (destFormat) {
                    case 2:
                        destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                        break;
                    case 0:
                        destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                        break;
                    case 1:
                        destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                        break
                }
                if (destPremultiplied) {
                    if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (destPixel & 255);
                        var r1;
                        var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                        var g1;
                        var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                        var b1;
                        var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                        destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255
                    }
                }
                var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
                destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                value;
                var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                value1;
                var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
                value2;
                var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
                value3;
                if (destPremultiplied) {
                    if ((destPixel & 255) == 0) {
                        if (destPixel != 0) {
                            destPixel = 0
                        }
                    } else {
                        if ((destPixel & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                            destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255
                        }
                    }
                }
                switch (destFormat) {
                    case 2:
                        destData[destPosition] = destPixel >> 8 & 255;
                        destData[destPosition + 1] = destPixel >> 16 & 255;
                        destData[destPosition + 2] = destPixel >> 24 & 255;
                        destData[destPosition + 3] = destPixel & 255;
                        break;
                    case 0:
                        destData[destPosition] = destPixel >> 24 & 255;
                        destData[destPosition + 1] = destPixel >> 16 & 255;
                        destData[destPosition + 2] = destPixel >> 8 & 255;
                        destData[destPosition + 3] = destPixel & 255;
                        break;
                    case 1:
                        destData[destPosition] = destPixel & 255;
                        destData[destPosition + 1] = destPixel >> 24 & 255;
                        destData[destPosition + 2] = destPixel >> 16 & 255;
                        destData[destPosition + 3] = destPixel >> 8 & 255;
                        break
                }
                sourcePosition += 4;
                destPosition += 4
            }
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
        var data = image.buffer.data;
        if (data == null || !image.buffer.transparent) {
            return
        }
        var format = image.buffer.format;
        var length = data.length / 4 | 0;
        var pixel;
        var _g = 0;
        while (_g < length) {
            var i = _g++;
            var offset = i * 4;
            switch (format) {
                case 2:
                    pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                    break;
                case 0:
                    pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                    break;
                case 1:
                    pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                    break
            }
            var offset1 = i * 4;
            if ((pixel & 255) == 0) {
                if (pixel != 0) {
                    pixel = 0
                }
            } else {
                if ((pixel & 255) != 255) {
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                    pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255
                }
            }
            switch (format) {
                case 2:
                    data[offset1] = pixel >> 8 & 255;
                    data[offset1 + 1] = pixel >> 16 & 255;
                    data[offset1 + 2] = pixel >> 24 & 255;
                    data[offset1 + 3] = pixel & 255;
                    break;
                case 0:
                    data[offset1] = pixel >> 24 & 255;
                    data[offset1 + 1] = pixel >> 16 & 255;
                    data[offset1 + 2] = pixel >> 8 & 255;
                    data[offset1 + 3] = pixel & 255;
                    break;
                case 1:
                    data[offset1] = pixel & 255;
                    data[offset1 + 1] = pixel >> 24 & 255;
                    data[offset1 + 2] = pixel >> 16 & 255;
                    data[offset1 + 3] = pixel >> 8 & 255;
                    break
            }
        }
        image.buffer.premultiplied = true;
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.resize = function(image, newWidth, newHeight) {
        var buffer = image.buffer;
        if (buffer.width == newWidth && buffer.height == newHeight) {
            return
        }
        var newBuffer = new lime_graphics_ImageBuffer((function($this) {
            var $r;
            var elements = newWidth * newHeight * 4;
            var this1;
            if (elements != null) {
                this1 = new Uint8Array(elements)
            } else {
                this1 = null
            }
            $r = this1;
            return $r
        }(this)), newWidth, newHeight);
        var imageWidth = image.width;
        var imageHeight = image.height;
        var data = image.get_data();
        var newData = newBuffer.data;
        var sourceIndex;
        var sourceIndexX;
        var sourceIndexY;
        var sourceIndexXY;
        var index;
        var sourceX;
        var sourceY;
        var u;
        var v;
        var uRatio;
        var vRatio;
        var uOpposite;
        var vOpposite;
        var _g = 0;
        while (_g < newHeight) {
            var y = _g++;
            var _g1 = 0;
            while (_g1 < newWidth) {
                var x = _g1++;
                u = (x + 0.5) / newWidth * imageWidth - 0.5;
                v = (y + 0.5) / newHeight * imageHeight - 0.5;
                sourceX = u | 0;
                sourceY = v | 0;
                sourceIndex = (sourceY * imageWidth + sourceX) * 4;
                if (sourceX < imageWidth - 1) {
                    sourceIndexX = sourceIndex + 4
                } else {
                    sourceIndexX = sourceIndex
                }
                if (sourceY < imageHeight - 1) {
                    sourceIndexY = sourceIndex + imageWidth * 4
                } else {
                    sourceIndexY = sourceIndex
                }
                if (sourceIndexX != sourceIndex) {
                    sourceIndexXY = sourceIndexY + 4
                } else {
                    sourceIndexXY = sourceIndexY
                }
                index = (y * newWidth + x) * 4;
                uRatio = u - sourceX;
                vRatio = v - sourceY;
                uOpposite = 1 - uRatio;
                vOpposite = 1 - vRatio;
                var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
                newData[index] = val;
                var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
                newData[index + 1] = val1;
                var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
                newData[index + 2] = val2;
                if (data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
                    newData[index + 3] = 0
                } else {
                    newData[index + 3] = data[sourceIndex + 3]
                }
            }
        }
        buffer.data = newBuffer.data;
        buffer.width = newWidth;
        buffer.height = newHeight;
        buffer.__srcImage = null;
        buffer.__srcImageData = null;
        buffer.__srcCanvas = null;
        buffer.__srcContext = null;
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image, newWidth, newHeight) {
        var buffer = image.buffer;
        var data = image.get_data();
        var newData;
        var elements = newWidth * newHeight * 4;
        var this1;
        if (elements != null) {
            this1 = new Uint8Array(elements)
        } else {
            this1 = null
        }
        newData = this1;
        var sourceIndex;
        var index;
        var _g1 = 0;
        var _g = buffer.height;
        while (_g1 < _g) {
            var y = _g1++;
            var _g3 = 0;
            var _g2 = buffer.width;
            while (_g3 < _g2) {
                var x = _g3++;
                sourceIndex = (y * buffer.width + x) * 4;
                index = (y * newWidth + x) * 4;
                newData[index] = data[sourceIndex];
                newData[index + 1] = data[sourceIndex + 1];
                newData[index + 2] = data[sourceIndex + 2];
                newData[index + 3] = data[sourceIndex + 3]
            }
        }
        buffer.data = newData;
        buffer.width = newWidth;
        buffer.height = newHeight
    };
    lime_graphics_utils_ImageDataUtil.setFormat = function(image, format) {
        var data = image.buffer.data;
        if (data == null) {
            return
        }
        var index;
        var a16;
        var length = data.length / 4 | 0;
        var r1;
        var g1;
        var b1;
        var a1;
        var r2;
        var g2;
        var b2;
        var a2;
        var r;
        var g;
        var b;
        var a;
        var _g = image.get_format();
        switch (_g) {
            case 0:
                r1 = 0;
                g1 = 1;
                b1 = 2;
                a1 = 3;
                break;
            case 1:
                r1 = 1;
                g1 = 2;
                b1 = 3;
                a1 = 0;
                break;
            case 2:
                r1 = 2;
                g1 = 1;
                b1 = 0;
                a1 = 3;
                break
        }
        switch (format) {
            case 0:
                r2 = 0;
                g2 = 1;
                b2 = 2;
                a2 = 3;
                break;
            case 1:
                r2 = 1;
                g2 = 2;
                b2 = 3;
                a2 = 0;
                break;
            case 2:
                r2 = 2;
                g2 = 1;
                b2 = 0;
                a2 = 3;
                break
        }
        var _g1 = 0;
        while (_g1 < length) {
            var i = _g1++;
            index = i * 4;
            r = data[index + r1];
            g = data[index + g1];
            b = data[index + b1];
            a = data[index + a1];
            data[index + r2] = r;
            data[index + g2] = g;
            data[index + b2] = b;
            data[index + a2] = a
        }
        image.buffer.format = format;
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.setPixel = function(image, x, y, color, format) {
        var pixel;
        switch (format) {
            case 1:
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                pixel = rgba;
                break;
            case 2:
                var bgra = color;
                var rgba1 = 0;
                rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                pixel = rgba1;
                break;
            default:
                pixel = color
        }
        var source = 0;
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        switch (image.buffer.format) {
            case 2:
                source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break
        }
        if (image.buffer.premultiplied) {
            if ((source & 255) != 0 && (source & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (source & 255);
                var r;
                var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255
            }
        }
        var value = source & 255;
        pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
        value;
        var data1 = image.buffer.data;
        var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        if (image.buffer.premultiplied) {
            if ((pixel & 255) == 0) {
                if (pixel != 0) {
                    pixel = 0
                }
            } else {
                if ((pixel & 255) != 255) {
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                    pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255
                }
            }
        }
        switch (image.buffer.format) {
            case 2:
                data1[offset1] = pixel >> 8 & 255;
                data1[offset1 + 1] = pixel >> 16 & 255;
                data1[offset1 + 2] = pixel >> 24 & 255;
                data1[offset1 + 3] = pixel & 255;
                break;
            case 0:
                data1[offset1] = pixel >> 24 & 255;
                data1[offset1 + 1] = pixel >> 16 & 255;
                data1[offset1 + 2] = pixel >> 8 & 255;
                data1[offset1 + 3] = pixel & 255;
                break;
            case 1:
                data1[offset1] = pixel & 255;
                data1[offset1 + 1] = pixel >> 24 & 255;
                data1[offset1 + 2] = pixel >> 16 & 255;
                data1[offset1 + 3] = pixel >> 8 & 255;
                break
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.setPixel32 = function(image, x, y, color, format) {
        var pixel;
        switch (format) {
            case 1:
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                pixel = rgba;
                break;
            case 2:
                var bgra = color;
                var rgba1 = 0;
                rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                pixel = rgba1;
                break;
            default:
                pixel = color
        }
        if (!image.get_transparent()) {
            pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
            255
        }
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        if (image.buffer.premultiplied) {
            if ((pixel & 255) == 0) {
                if (pixel != 0) {
                    pixel = 0
                }
            } else {
                if ((pixel & 255) != 255) {
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                    pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255
                }
            }
        }
        switch (image.buffer.format) {
            case 2:
                data[offset] = pixel >> 8 & 255;
                data[offset + 1] = pixel >> 16 & 255;
                data[offset + 2] = pixel >> 24 & 255;
                data[offset + 3] = pixel & 255;
                break;
            case 0:
                data[offset] = pixel >> 24 & 255;
                data[offset + 1] = pixel >> 16 & 255;
                data[offset + 2] = pixel >> 8 & 255;
                data[offset + 3] = pixel & 255;
                break;
            case 1:
                data[offset] = pixel & 255;
                data[offset + 1] = pixel >> 24 & 255;
                data[offset + 2] = pixel >> 16 & 255;
                data[offset + 3] = pixel >> 8 & 255;
                break
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.setPixels = function(image, rect, bytes, format) {
        if (image.buffer.data == null) {
            return
        }
        var data = image.buffer.data;
        var sourceFormat = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var row;
        var color;
        var pixel;
        var transparent = image.get_transparent();
        var dataPosition = 0;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            row = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
                dataPosition += 4;
                switch (format) {
                    case 1:
                        var argb = color;
                        var rgba = 0;
                        rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                        pixel = rgba;
                        break;
                    case 2:
                        var bgra = color;
                        var rgba1 = 0;
                        rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                        pixel = rgba1;
                        break;
                    default:
                        pixel = color
                }
                if (!transparent) {
                    pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
                    255
                }
                var offset = row + x * 4;
                if (premultiplied) {
                    if ((pixel & 255) == 0) {
                        if (pixel != 0) {
                            pixel = 0
                        }
                    } else {
                        if ((pixel & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                            pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255
                        }
                    }
                }
                switch (sourceFormat) {
                    case 2:
                        data[offset] = pixel >> 8 & 255;
                        data[offset + 1] = pixel >> 16 & 255;
                        data[offset + 2] = pixel >> 24 & 255;
                        data[offset + 3] = pixel & 255;
                        break;
                    case 0:
                        data[offset] = pixel >> 24 & 255;
                        data[offset + 1] = pixel >> 16 & 255;
                        data[offset + 2] = pixel >> 8 & 255;
                        data[offset + 3] = pixel & 255;
                        break;
                    case 1:
                        data[offset] = pixel & 255;
                        data[offset + 1] = pixel >> 24 & 255;
                        data[offset + 2] = pixel >> 16 & 255;
                        data[offset + 3] = pixel >> 8 & 255;
                        break
                }
            }
        }
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.threshold = function(image, sourceImage, sourceRect, destPoint, operation, threshold, color, mask, copySource, format) {
        var _color;
        var _mask;
        var _threshold;
        switch (format) {
            case 1:
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                _color = rgba;
                var argb1 = mask;
                var rgba1 = 0;
                rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
                _mask = rgba1;
                var argb2 = threshold;
                var rgba2 = 0;
                rgba2 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
                _threshold = rgba2;
                break;
            case 2:
                var bgra = color;
                var rgba3 = 0;
                rgba3 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                _color = rgba3;
                var bgra1 = mask;
                var rgba4 = 0;
                rgba4 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
                _mask = rgba4;
                var bgra2 = threshold;
                var rgba5 = 0;
                rgba5 = (bgra2 >> 8 & 255 & 255) << 24 | (bgra2 >> 16 & 255 & 255) << 16 | (bgra2 >> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
                _threshold = rgba5;
                break;
            default:
                _color = color;
                _mask = mask;
                _threshold = threshold
        }
        var _operation;
        switch (operation) {
            case "!=":
                _operation = 0;
                break;
            case "==":
                _operation = 1;
                break;
            case "<":
                _operation = 2;
                break;
            case "<=":
                _operation = 3;
                break;
            case ">":
                _operation = 4;
                break;
            case ">=":
                _operation = 5;
                break;
            default:
                _operation = -1
        }
        if (_operation == -1) {
            return 0
        }
        var srcData = sourceImage.buffer.data;
        var destData = image.buffer.data;
        if (srcData == null || destData == null) {
            return 0
        }
        var hits = 0;
        var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
        var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, srcView.width, srcView.height));
        var srcFormat = sourceImage.buffer.format;
        var destFormat = image.buffer.format;
        var srcPremultiplied = sourceImage.buffer.premultiplied;
        var destPremultiplied = image.buffer.premultiplied;
        var srcPosition;
        var destPosition;
        var srcPixel;
        var destPixel;
        var pixelMask;
        var test;
        var value;
        var _g1 = 0;
        var _g = destView.height;
        while (_g1 < _g) {
            var y = _g1++;
            srcPosition = srcView.offset + srcView.stride * y;
            destPosition = destView.offset + destView.stride * y;
            var _g3 = 0;
            var _g2 = destView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (srcFormat) {
                    case 2:
                        srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
                        break;
                    case 0:
                        srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
                        break;
                    case 1:
                        srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
                        break
                }
                if (srcPremultiplied) {
                    if ((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (srcPixel & 255);
                        var r;
                        var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255
                    }
                }
                pixelMask = srcPixel & _mask;
                value = lime_graphics_utils_ImageDataUtil.__pixelCompare(pixelMask, _threshold);
                switch (_operation) {
                    case 0:
                        test = value != 0;
                        break;
                    case 1:
                        test = value == 0;
                        break;
                    case 2:
                        test = value == -1;
                        break;
                    case 3:
                        test = value == 0 || value == -1;
                        break;
                    case 4:
                        test = value == 1;
                        break;
                    case 5:
                        test = value == 0 || value == 1;
                        break;
                    default:
                        test = false
                }
                if (test) {
                    if (destPremultiplied) {
                        if ((_color & 255) == 0) {
                            if (_color != 0) {
                                _color = 0
                            }
                        } else {
                            if ((_color & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
                                _color = ((_color >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255
                            }
                        }
                    }
                    switch (destFormat) {
                        case 2:
                            destData[destPosition] = _color >> 8 & 255;
                            destData[destPosition + 1] = _color >> 16 & 255;
                            destData[destPosition + 2] = _color >> 24 & 255;
                            destData[destPosition + 3] = _color & 255;
                            break;
                        case 0:
                            destData[destPosition] = _color >> 24 & 255;
                            destData[destPosition + 1] = _color >> 16 & 255;
                            destData[destPosition + 2] = _color >> 8 & 255;
                            destData[destPosition + 3] = _color & 255;
                            break;
                        case 1:
                            destData[destPosition] = _color & 255;
                            destData[destPosition + 1] = _color >> 24 & 255;
                            destData[destPosition + 2] = _color >> 16 & 255;
                            destData[destPosition + 3] = _color >> 8 & 255;
                            break
                    }
                    hits++
                } else {
                    if (copySource) {
                        if (destPremultiplied) {
                            if ((srcPixel & 255) == 0) {
                                if (srcPixel != 0) {
                                    srcPixel = 0
                                }
                            } else {
                                if ((srcPixel & 255) != 255) {
                                    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
                                    srcPixel = ((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255
                                }
                            }
                        }
                        switch (destFormat) {
                            case 2:
                                destData[destPosition] = srcPixel >> 8 & 255;
                                destData[destPosition + 1] = srcPixel >> 16 & 255;
                                destData[destPosition + 2] = srcPixel >> 24 & 255;
                                destData[destPosition + 3] = srcPixel & 255;
                                break;
                            case 0:
                                destData[destPosition] = srcPixel >> 24 & 255;
                                destData[destPosition + 1] = srcPixel >> 16 & 255;
                                destData[destPosition + 2] = srcPixel >> 8 & 255;
                                destData[destPosition + 3] = srcPixel & 255;
                                break;
                            case 1:
                                destData[destPosition] = srcPixel & 255;
                                destData[destPosition + 1] = srcPixel >> 24 & 255;
                                destData[destPosition + 2] = srcPixel >> 16 & 255;
                                destData[destPosition + 3] = srcPixel >> 8 & 255;
                                break
                        }
                    }
                }
                srcPosition += 4;
                destPosition += 4
            }
        }
        if (hits > 0) {
            image.dirty = true;
            image.version++
        }
        return hits
    };
    lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
        var data = image.buffer.data;
        if (data == null) {
            return
        }
        var format = image.buffer.format;
        var length = data.length / 4 | 0;
        var pixel;
        var _g = 0;
        while (_g < length) {
            var i = _g++;
            var offset = i * 4;
            switch (format) {
                case 2:
                    pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                    break;
                case 0:
                    pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                    break;
                case 1:
                    pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                    break
            }
            if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (pixel & 255);
                var r;
                var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255
            }
            var offset1 = i * 4;
            switch (format) {
                case 2:
                    data[offset1] = pixel >> 8 & 255;
                    data[offset1 + 1] = pixel >> 16 & 255;
                    data[offset1 + 2] = pixel >> 24 & 255;
                    data[offset1 + 3] = pixel & 255;
                    break;
                case 0:
                    data[offset1] = pixel >> 24 & 255;
                    data[offset1 + 1] = pixel >> 16 & 255;
                    data[offset1 + 2] = pixel >> 8 & 255;
                    data[offset1 + 3] = pixel & 255;
                    break;
                case 1:
                    data[offset1] = pixel & 255;
                    data[offset1 + 1] = pixel >> 24 & 255;
                    data[offset1 + 2] = pixel >> 16 & 255;
                    data[offset1 + 3] = pixel >> 8 & 255;
                    break
            }
        }
        image.buffer.premultiplied = false;
        image.dirty = true;
        image.version++
    };
    lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1, n2) {
        var tmp1;
        var tmp2;
        tmp1 = n1 >> 24 & 255;
        tmp2 = n2 >> 24 & 255;
        if (tmp1 != tmp2) {
            if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
                return 1
            } else {
                return -1
            }
        } else {
            tmp1 = n1 >> 16 & 255;
            tmp2 = n2 >> 16 & 255;
            if (tmp1 != tmp2) {
                if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
                    return 1
                } else {
                    return -1
                }
            } else {
                tmp1 = n1 >> 8 & 255;
                tmp2 = n2 >> 8 & 255;
                if (tmp1 != tmp2) {
                    if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
                        return 1
                    } else {
                        return -1
                    }
                } else {
                    tmp1 = n1 & 255;
                    tmp2 = n2 & 255;
                    if (tmp1 != tmp2) {
                        if (_$UInt_UInt_$Impl_$.gt(tmp1, tmp2)) {
                            return 1
                        } else {
                            return -1
                        }
                    } else {
                        return 0
                    }
                }
            }
        }
    };
    var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image, rect) {
        this.image = image;
        if (rect == null) {
            this.rect = image.get_rect()
        } else {
            if (rect.x < 0) {
                rect.x = 0
            }
            if (rect.y < 0) {
                rect.y = 0
            }
            if (rect.x + rect.width > image.width) {
                rect.width = image.width - rect.x
            }
            if (rect.y + rect.height > image.height) {
                rect.height = image.height - rect.y
            }
            if (rect.width < 0) {
                rect.width = 0
            }
            if (rect.height < 0) {
                rect.height = 0
            }
            this.rect = rect
        }
        this.stride = image.buffer.get_stride();
        this.x = Math.ceil(this.rect.x);
        this.y = Math.ceil(this.rect.y);
        this.width = Math.floor(this.rect.width);
        this.height = Math.floor(this.rect.height);
        this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4
    };
    $hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
    lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime", "graphics", "utils", "_ImageDataUtil", "ImageDataView"];
    lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
        x: null,
        y: null,
        height: null,
        width: null,
        image: null,
        offset: null,
        rect: null,
        stride: null,
        clip: function(x, y, width, height) {
            this.rect.__contract(x, y, width, height);
            this.x = Math.ceil(this.rect.x);
            this.y = Math.ceil(this.rect.y);
            this.width = Math.floor(this.rect.width);
            this.height = Math.floor(this.rect.height);
            this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4
        },
        row: function(y) {
            return this.offset + this.stride * y
        },
        __class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
    };
    var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
    $hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime", "math", "_ColorMatrix", "ColorMatrix_Impl_"];
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {
        set_redOffset: "set_redOffset",
        get_redOffset: "get_redOffset",
        set_redMultiplier: "set_redMultiplier",
        get_redMultiplier: "get_redMultiplier",
        set_greenOffset: "set_greenOffset",
        get_greenOffset: "get_greenOffset",
        set_greenMultiplier: "set_greenMultiplier",
        get_greenMultiplier: "get_greenMultiplier",
        set_color: "set_color",
        get_color: "get_color",
        set_blueOffset: "set_blueOffset",
        get_blueOffset: "get_blueOffset",
        set_blueMultiplier: "set_blueMultiplier",
        get_blueMultiplier: "get_blueMultiplier",
        set_alphaOffset: "set_alphaOffset",
        get_alphaOffset: "get_alphaOffset",
        set_alphaMultiplier: "set_alphaMultiplier",
        get_alphaMultiplier: "get_alphaMultiplier"
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
        var this1;
        if (data != null && data.length == 20) {
            this1 = data
        } else {
            var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
            var this2;
            if (array != null) {
                this2 = new Float32Array(array)
            } else {
                this2 = null
            }
            this1 = this2
        }
        return this1
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
            var $r;
            var this2;
            if (this1 != null) {
                this2 = new Float32Array(this1)
            } else {
                this2 = null
            }
            $r = this2;
            return $r
        }(this)))
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1, second) {
        var _g = this1;
        _g[0] = _g[0] + second[0];
        var _g1 = this1;
        _g1[6] = _g1[6] + second[6];
        var _g2 = this1;
        _g2[12] = _g2[12] + second[12];
        var _g3 = this1;
        _g3[18] = _g3[18] + second[18]
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1, other) {
        this1.set(other)
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
        this1[0] = 1;
        this1[1] = 0;
        this1[2] = 0;
        this1[3] = 0;
        this1[4] = 0;
        this1[5] = 0;
        this1[6] = 1;
        this1[7] = 0;
        this1[8] = 0;
        this1[9] = 0;
        this1[10] = 0;
        this1[11] = 0;
        this1[12] = 1;
        this1[13] = 0;
        this1[14] = 0;
        this1[15] = 0;
        this1[16] = 0;
        this1[17] = 0;
        this1[18] = 1;
        this1[19] = 0
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
        if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
            var this2;
            this2 = new Uint8Array(256);
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2
        }
        var value;
        lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
        var _g = 1;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * this1[18] + this1[19] * 255);
            if (value > 255) {
                value = 255
            }
            if (value < 0) {
                value = 0
            }
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value
        }
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
        if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
            var this2;
            this2 = new Uint8Array(256);
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2
        }
        var value;
        var _g = 0;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * this1[12] + this1[14] * 255);
            if (value > 255) {
                value = 255
            }
            if (value < 0) {
                value = 0
            }
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value
        }
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
        if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
            var this2;
            this2 = new Uint8Array(256);
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2
        }
        var value;
        var _g = 0;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * this1[6] + this1[9] * 255);
            if (value > 255) {
                value = 255
            }
            if (value < 0) {
                value = 0
            }
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value
        }
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
        if (lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
            var this2;
            this2 = new Uint8Array(256);
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2
        }
        var value;
        var _g = 0;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * this1[0] + this1[4] * 255);
            if (value > 255) {
                value = 255
            }
            if (value < 0) {
                value = 0
            }
            lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value
        }
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
        return null
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
        return this1[18]
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1, value) {
        return this1[18] = value
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
        return this1[19] * 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1, value) {
        return this1[19] = value / 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
        return this1[12]
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1, value) {
        return this1[12] = value
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
        return this1[14] * 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1, value) {
        return this1[14] = value / 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
        return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0)
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1, value) {
        this1[4] = (value >> 16 & 255) / 255;
        this1[9] = (value >> 8 & 255) / 255;
        this1[14] = (value & 255) / 255;
        this1[0] = 0;
        this1[6] = 0;
        this1[12] = 0;
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1)
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
        return this1[6]
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1, value) {
        return this1[6] = value
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
        return this1[9] * 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1, value) {
        return this1[9] = value / 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
        return this1[0]
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1, value) {
        return this1[0] = value
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
        return this1[4] * 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1, value) {
        return this1[4] = value / 255
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1, index) {
        return this1[index]
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1, index, value) {
        return this1[index] = value
    };
    var lime_math_Matrix3 = function(a, b, c, d, tx, ty) {
        if (ty == null) {
            ty = 0
        }
        if (tx == null) {
            tx = 0
        }
        if (d == null) {
            d = 1
        }
        if (c == null) {
            c = 0
        }
        if (b == null) {
            b = 0
        }
        if (a == null) {
            a = 1
        }
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty
    };
    $hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
    lime_math_Matrix3.__name__ = ["lime", "math", "Matrix3"];
    lime_math_Matrix3.prototype = {
        a: null,
        b: null,
        c: null,
        d: null,
        tx: null,
        ty: null,
        clone: function() {
            return new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty)
        },
        concat: function(m) {
            var a1 = this.a * m.a + this.b * m.c;
            this.b = this.a * m.b + this.b * m.d;
            this.a = a1;
            var c1 = this.c * m.a + this.d * m.c;
            this.d = this.c * m.b + this.d * m.d;
            this.c = c1;
            var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
            this.ty = this.tx * m.b + this.ty * m.d + m.ty;
            this.tx = tx1
        },
        copyColumnFrom: function(column, vector4) {
            if (column > 2) {
                throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)")
            } else {
                if (column == 0) {
                    this.a = vector4.x;
                    this.c = vector4.y
                } else {
                    if (column == 1) {
                        this.b = vector4.x;
                        this.d = vector4.y
                    } else {
                        this.tx = vector4.x;
                        this.ty = vector4.y
                    }
                }
            }
        },
        copyColumnTo: function(column, vector4) {
            if (column > 2) {
                throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)")
            } else {
                if (column == 0) {
                    vector4.x = this.a;
                    vector4.y = this.c;
                    vector4.z = 0
                } else {
                    if (column == 1) {
                        vector4.x = this.b;
                        vector4.y = this.d;
                        vector4.z = 0
                    } else {
                        vector4.x = this.tx;
                        vector4.y = this.ty;
                        vector4.z = 1
                    }
                }
            }
        },
        copyFrom: function(sourceMatrix3) {
            this.a = sourceMatrix3.a;
            this.b = sourceMatrix3.b;
            this.c = sourceMatrix3.c;
            this.d = sourceMatrix3.d;
            this.tx = sourceMatrix3.tx;
            this.ty = sourceMatrix3.ty
        },
        copyRowFrom: function(row, vector4) {
            if (row > 2) {
                throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)")
            } else {
                if (row == 0) {
                    this.a = vector4.x;
                    this.c = vector4.y
                } else {
                    if (row == 1) {
                        this.b = vector4.x;
                        this.d = vector4.y
                    } else {
                        this.tx = vector4.x;
                        this.ty = vector4.y
                    }
                }
            }
        },
        copyRowTo: function(row, vector4) {
            if (row > 2) {
                throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)")
            } else {
                if (row == 0) {
                    vector4.x = this.a;
                    vector4.y = this.b;
                    vector4.z = this.tx
                } else {
                    if (row == 1) {
                        vector4.x = this.c;
                        vector4.y = this.d;
                        vector4.z = this.ty
                    } else {
                        vector4.x = 0;
                        vector4.y = 0;
                        vector4.z = 1
                    }
                }
            }
        },
        createBox: function(scaleX, scaleY, rotation, tx, ty) {
            if (ty == null) {
                ty = 0
            }
            if (tx == null) {
                tx = 0
            }
            if (rotation == null) {
                rotation = 0
            }
            this.a = scaleX;
            this.d = scaleY;
            this.b = rotation;
            this.tx = tx;
            this.ty = ty
        },
        createGradientBox: function(width, height, rotation, tx, ty) {
            if (ty == null) {
                ty = 0
            }
            if (tx == null) {
                tx = 0
            }
            if (rotation == null) {
                rotation = 0
            }
            this.a = width / 1638.4;
            this.d = height / 1638.4;
            if (rotation != 0) {
                var cos = Math.cos(rotation);
                var sin = Math.sin(rotation);
                this.b = sin * this.d;
                this.c = -sin * this.a;
                this.a *= cos;
                this.d *= cos
            } else {
                this.b = 0;
                this.c = 0
            }
            this.tx = tx + width / 2;
            this.ty = ty + height / 2
        },
        equals: function(Matrix3) {
            return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d
        },
        deltaTransformVector2: function(Vector2) {
            return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c, Vector2.x * this.b + Vector2.y * this.d)
        },
        identity: function() {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.tx = 0;
            this.ty = 0
        },
        invert: function() {
            var norm = this.a * this.d - this.b * this.c;
            if (norm == 0) {
                this.a = this.b = this.c = this.d = 0;
                this.tx = -this.tx;
                this.ty = -this.ty
            } else {
                norm = 1 / norm;
                var a1 = this.d * norm;
                this.d = this.a * norm;
                this.a = a1;
                this.b *= -norm;
                this.c *= -norm;
                var tx1 = -this.a * this.tx - this.c * this.ty;
                this.ty = -this.b * this.tx - this.d * this.ty;
                this.tx = tx1
            }
            return this
        },
        mult: function(m) {
            var result = new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty);
            result.concat(m);
            return result
        },
        rotate: function(theta) {
            var cos = Math.cos(theta);
            var sin = Math.sin(theta);
            var a1 = this.a * cos - this.b * sin;
            this.b = this.a * sin + this.b * cos;
            this.a = a1;
            var c1 = this.c * cos - this.d * sin;
            this.d = this.c * sin + this.d * cos;
            this.c = c1;
            var tx1 = this.tx * cos - this.ty * sin;
            this.ty = this.tx * sin + this.ty * cos;
            this.tx = tx1
        },
        scale: function(sx, sy) {
            this.a *= sx;
            this.b *= sy;
            this.c *= sx;
            this.d *= sy;
            this.tx *= sx;
            this.ty *= sy
        },
        setRotation: function(theta, scale) {
            if (scale == null) {
                scale = 1
            }
            this.a = Math.cos(theta) * scale;
            this.c = Math.sin(theta) * scale;
            this.b = -this.c;
            this.d = this.a
        },
        setTo: function(a, b, c, d, tx, ty) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty
        },
        to3DString: function(roundPixels) {
            if (roundPixels == null) {
                roundPixels = false
            }
            if (roundPixels) {
                return "Matrix33d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"
            } else {
                return "Matrix33d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)"
            }
        },
        toMozString: function() {
            return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)"
        },
        toString: function() {
            return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")"
        },
        transformVector2: function(pos) {
            return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx, pos.x * this.b + pos.y * this.d + this.ty)
        },
        translate: function(dx, dy) {
            this.tx += dx;
            this.ty += dy
        },
        __cleanValues: function() {
            this.a = Math.round(this.a * 1000) / 1000;
            this.b = Math.round(this.b * 1000) / 1000;
            this.c = Math.round(this.c * 1000) / 1000;
            this.d = Math.round(this.d * 1000) / 1000;
            this.tx = Math.round(this.tx * 10) / 10;
            this.ty = Math.round(this.ty * 10) / 10
        },
        __transformX: function(pos) {
            return pos.x * this.a + pos.y * this.c + this.tx
        },
        __transformY: function(pos) {
            return pos.x * this.b + pos.y * this.d + this.ty
        },
        __translateTransformed: function(pos) {
            this.tx = pos.x * this.a + pos.y * this.c + this.tx;
            this.ty = pos.x * this.b + pos.y * this.d + this.ty
        },
        __class__: lime_math_Matrix3
    };
    var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
    $hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
    lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime", "math", "_Matrix4", "Matrix4_Impl_"];
    lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {
        set_position: "set_position",
        get_position: "get_position",
        get_determinant: "get_determinant"
    };
    lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
        var this1;
        if (data != null && data.length == 16) {
            this1 = data
        } else {
            var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
            var this2;
            if (array != null) {
                this2 = new Float32Array(array)
            } else {
                this2 = null
            }
            this1 = this2
        }
        return this1
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1, lhs) {
        var m111 = this1[0];
        var m121 = this1[4];
        var m131 = this1[8];
        var m141 = this1[12];
        var m112 = this1[1];
        var m122 = this1[5];
        var m132 = this1[9];
        var m142 = this1[13];
        var m113 = this1[2];
        var m123 = this1[6];
        var m133 = this1[10];
        var m143 = this1[14];
        var m114 = this1[3];
        var m124 = this1[7];
        var m134 = this1[11];
        var m144 = this1[15];
        var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 0);
        var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 4);
        var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 8);
        var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 12);
        var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 1);
        var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 5);
        var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 9);
        var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 13);
        var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 2);
        var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 6);
        var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 10);
        var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 14);
        var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 3);
        var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 7);
        var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 11);
        var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 15);
        this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
        this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
        this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
        this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
        this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
        this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
        this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
        this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
        this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
        this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
        this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
        this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
        this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
        this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
        this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
        this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1, degrees, axis, pivotPoint) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1, axis.x, axis.y, axis.z, degrees);
        if (pivotPoint != null) {
            var p = pivotPoint;
            lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z)
        }
        lime_math__$Matrix4_Matrix4_$Impl_$.append(this1, m)
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1, xScale, yScale, zScale) {
        lime_math__$Matrix4_Matrix4_$Impl_$.append(this1, lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [xScale, 0, 0, 0, 0, yScale, 0, 0, 0, 0, zScale, 0, 0, 0, 0, 1];
            var this2;
            if (array != null) {
                this2 = new Float32Array(array)
            } else {
                this2 = null
            }
            $r = this2;
            return $r
        }(this))))
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1, x, y, z) {
        this1[12] = this1[12] + x;
        this1[13] = this1[13] + y;
        this1[14] = this1[14] + z
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
        return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var this2;
            if (this1 != null) {
                this2 = new Float32Array(this1)
            } else {
                this2 = null
            }
            $r = this2;
            return $r
        }(this)))
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1, column, vector) {
        switch (column) {
            case 0:
                this1[0] = vector.x;
                this1[1] = vector.y;
                this1[2] = vector.z;
                this1[3] = vector.w;
                break;
            case 1:
                this1[4] = vector.x;
                this1[5] = vector.y;
                this1[6] = vector.z;
                this1[7] = vector.w;
                break;
            case 2:
                this1[8] = vector.x;
                this1[9] = vector.y;
                this1[10] = vector.z;
                this1[11] = vector.w;
                break;
            case 3:
                this1[12] = vector.x;
                this1[13] = vector.y;
                this1[14] = vector.z;
                this1[15] = vector.w;
                break;
            default:
                lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]", {
                    fileName: "Matrix4.hx",
                    lineNumber: 139,
                    className: "lime.math._Matrix4.Matrix4_Impl_",
                    methodName: "copyColumnFrom"
                })
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1, column, vector) {
        switch (column) {
            case 0:
                vector.x = this1[0];
                vector.y = this1[1];
                vector.z = this1[2];
                vector.w = this1[3];
                break;
            case 1:
                vector.x = this1[4];
                vector.y = this1[5];
                vector.z = this1[6];
                vector.w = this1[7];
                break;
            case 2:
                vector.x = this1[8];
                vector.y = this1[9];
                vector.z = this1[10];
                vector.w = this1[11];
                break;
            case 3:
                vector.x = this1[12];
                vector.y = this1[13];
                vector.z = this1[14];
                vector.w = this1[15];
                break;
            default:
                lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]", {
                    fileName: "Matrix4.hx",
                    lineNumber: 180,
                    className: "lime.math._Matrix4.Matrix4_Impl_",
                    methodName: "copyColumnTo"
                })
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1, other) {
        this1.set(other)
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1, array, index, transposeValues) {
        if (transposeValues == null) {
            transposeValues = false
        }
        if (index == null) {
            index = 0
        }
        if (transposeValues) {
            lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1)
        }
        var l = array.length - index;
        var _g = 0;
        while (_g < l) {
            var c = _g++;
            this1[c] = array[c + index]
        }
        if (transposeValues) {
            lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1)
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1, array, index, transposeValues) {
        if (transposeValues == null) {
            transposeValues = false
        }
        if (index == null) {
            index = 0
        }
        if (transposeValues) {
            lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1)
        }
        var l = this1.length;
        var _g = 0;
        while (_g < l) {
            var c = _g++;
            array[c + index] = this1[c]
        }
        if (transposeValues) {
            lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1)
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1, row, vector) {
        switch (row) {
            case 0:
                this1[0] = vector.x;
                this1[4] = vector.y;
                this1[8] = vector.z;
                this1[12] = vector.w;
                break;
            case 1:
                this1[1] = vector.x;
                this1[5] = vector.y;
                this1[9] = vector.z;
                this1[13] = vector.w;
                break;
            case 2:
                this1[2] = vector.x;
                this1[6] = vector.y;
                this1[10] = vector.z;
                this1[14] = vector.w;
                break;
            case 3:
                this1[3] = vector.x;
                this1[7] = vector.y;
                this1[11] = vector.z;
                this1[15] = vector.w;
                break;
            default:
                lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]", {
                    fileName: "Matrix4.hx",
                    lineNumber: 258,
                    className: "lime.math._Matrix4.Matrix4_Impl_",
                    methodName: "copyRowFrom"
                })
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x, y, scale, rotation) {
        if (rotation == null) {
            rotation = 0
        }
        if (scale == null) {
            scale = 1
        }
        var theta = rotation * Math.PI / 180;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [c * scale, -s * scale, 0, 0, s * scale, c * scale, 0, 0, 0, 0, 1, 0, x, y, 0, 1];
            var this1;
            if (array != null) {
                this1 = new Float32Array(array)
            } else {
                this1 = null
            }
            $r = this1;
            return $r
        }(this)))
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a, b, c, d, tx, ty, matrix) {
        if (matrix == null) {
            matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new()
        }
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 0, a);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 1, b);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 2, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 3, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 4, c);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 5, d);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 6, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 7, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 8, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 9, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 10, 1);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 11, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 12, tx);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 13, ty);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 14, 0);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(matrix, 15, 1);
        return matrix
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0, x1, y0, y1, zNear, zFar) {
        var sx = 1 / (x1 - x0);
        var sy = 1 / (y1 - y0);
        var sz = 1 / (zFar - zNear);
        return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [2 * sx, 0, 0, 0, 0, 2 * sy, 0, 0, 0, 0, -2 * sz, 0, -(x0 + x1) * sx, -(y0 + y1) * sy, -(zNear + zFar) * sz, 1];
            var this1;
            if (array != null) {
                this1 = new Float32Array(array)
            } else {
                this1 = null
            }
            $r = this1;
            return $r
        }(this)))
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1, row, vector) {
        switch (row) {
            case 0:
                vector.x = this1[0];
                vector.y = this1[4];
                vector.z = this1[8];
                vector.w = this1[12];
                break;
            case 1:
                vector.x = this1[1];
                vector.y = this1[5];
                vector.z = this1[9];
                vector.w = this1[13];
                break;
            case 2:
                vector.x = this1[2];
                vector.y = this1[6];
                vector.z = this1[10];
                vector.w = this1[14];
                break;
            case 3:
                vector.x = this1[3];
                vector.y = this1[7];
                vector.z = this1[11];
                vector.w = this1[15];
                break;
            default:
                lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]", {
                    fileName: "Matrix4.hx",
                    lineNumber: 360,
                    className: "lime.math._Matrix4.Matrix4_Impl_",
                    methodName: "copyRowTo"
                })
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1, other) {
        (js_Boot.__cast(other, Float32Array)).set(this1)
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1, v) {
        var x = v.x;
        var y = v.y;
        var z = v.z;
        return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3], x * this1[1] + y * this1[5] + z * this1[9] + this1[7], x * this1[2] + y * this1[6] + z * this1[10] + this1[11], 0)
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
        this1[0] = 1;
        this1[1] = 0;
        this1[2] = 0;
        this1[3] = 0;
        this1[4] = 0;
        this1[5] = 1;
        this1[6] = 0;
        this1[7] = 0;
        this1[8] = 0;
        this1[9] = 0;
        this1[10] = 1;
        this1[11] = 0;
        this1[12] = 0;
        this1[13] = 0;
        this1[14] = 0;
        this1[15] = 1
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat, toMat, percent) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
        var _g = 0;
        while (_g < 16) {
            var i = _g++;
            lime_math__$Matrix4_Matrix4_$Impl_$.set(m, i, lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i)) * percent)
        }
        return m
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1, toMat, percent) {
        var _g = 0;
        while (_g < 16) {
            var i = _g++;
            var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) - this1[i]) * percent;
            this1[i] = val
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
        var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
        var invertable = Math.abs(d) > 1e-11;
        if (invertable) {
            d = 1 / d;
            var m11 = this1[0];
            var m21 = this1[4];
            var m31 = this1[8];
            var m41 = this1[12];
            var m12 = this1[1];
            var m22 = this1[5];
            var m32 = this1[9];
            var m42 = this1[13];
            var m13 = this1[2];
            var m23 = this1[6];
            var m33 = this1[10];
            var m43 = this1[14];
            var m14 = this1[3];
            var m24 = this1[7];
            var m34 = this1[11];
            var m44 = this1[15];
            this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
            this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
            this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
            this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
            this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
            this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
            this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
            this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
            this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
            this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
            this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
            this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
            this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
            this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
            this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
            this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13))
        }
        return invertable
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1, pos, at, up) {
        if (at == null) {
            at = new lime_math_Vector4(0, 0, -1)
        }
        if (up == null) {
            up = new lime_math_Vector4(0, -1, 0)
        }
        var dir = new lime_math_Vector4(at.x - pos.x, at.y - pos.y, at.z - pos.z);
        var vup = new lime_math_Vector4(up.x, up.y, up.z, up.w);
        var right;
        dir.normalize();
        vup.normalize();
        var dir2 = new lime_math_Vector4(dir.x, dir.y, dir.z, dir.w);
        dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
        vup = new lime_math_Vector4(vup.x - dir2.x, vup.y - dir2.y, vup.z - dir2.z);
        if (Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
            vup.normalize()
        } else {
            if (dir.x != 0) {
                vup = new lime_math_Vector4(-dir.y, dir.x, 0)
            } else {
                vup = new lime_math_Vector4(1, 0, 0)
            }
        }
        right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y, vup.z * dir.x - vup.x * dir.z, vup.x * dir.y - vup.y * dir.x, 1);
        right.normalize();
        this1[0] = right.x;
        this1[4] = right.y;
        this1[8] = right.z;
        this1[12] = 0;
        this1[1] = vup.x;
        this1[5] = vup.y;
        this1[9] = vup.z;
        this1[13] = 0;
        this1[2] = dir.x;
        this1[6] = dir.y;
        this1[10] = dir.z;
        this1[14] = 0;
        this1[3] = pos.x;
        this1[7] = pos.y;
        this1[11] = pos.z;
        this1[15] = 1
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1, rhs) {
        var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 0);
        var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 4);
        var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 8);
        var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 12);
        var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 1);
        var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 5);
        var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 9);
        var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 13);
        var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 2);
        var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 6);
        var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 10);
        var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 14);
        var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 3);
        var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 7);
        var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 11);
        var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 15);
        var m211 = this1[0];
        var m221 = this1[4];
        var m231 = this1[8];
        var m241 = this1[12];
        var m212 = this1[1];
        var m222 = this1[5];
        var m232 = this1[9];
        var m242 = this1[13];
        var m213 = this1[2];
        var m223 = this1[6];
        var m233 = this1[10];
        var m243 = this1[14];
        var m214 = this1[3];
        var m224 = this1[7];
        var m234 = this1[11];
        var m244 = this1[15];
        this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
        this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
        this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
        this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
        this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
        this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
        this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
        this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
        this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
        this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
        this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
        this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
        this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
        this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
        this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
        this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1, degrees, axis, pivotPoint) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1, axis.x, axis.y, axis.z, degrees);
        if (pivotPoint != null) {
            var p = pivotPoint;
            lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z)
        }
        lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m)
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1, xScale, yScale, zScale) {
        lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [xScale, 0, 0, 0, 0, yScale, 0, 0, 0, 0, zScale, 0, 0, 0, 0, 1];
            var this2;
            if (array != null) {
                this2 = new Float32Array(array)
            } else {
                this2 = null
            }
            $r = this2;
            return $r
        }(this))))
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1, x, y, z) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
        lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m, new lime_math_Vector4(x, y, z));
        lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m)
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1, v) {
        var x = v.x;
        var y = v.y;
        var z = v.z;
        return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12], x * this1[1] + y * this1[5] + z * this1[9] + this1[13], x * this1[2] + y * this1[6] + z * this1[10] + this1[14], x * this1[3] + y * this1[7] + z * this1[11] + this1[15])
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1, ain, aout) {
        var i = 0;
        var x;
        var y;
        var z;
        while (i + 3 <= ain.length) {
            x = ain[i];
            y = ain[i + 1];
            z = ain[i + 2];
            aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
            aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
            aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
            i += 3
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
        var temp = this1[1];
        this1[1] = this1[4];
        this1[4] = temp;
        var temp1 = this1[2];
        this1[2] = this1[8];
        this1[8] = temp1;
        var temp2 = this1[3];
        this1[3] = this1[12];
        this1[12] = temp2;
        var temp3 = this1[6];
        this1[6] = this1[9];
        this1[9] = temp3;
        var temp4 = this1[7];
        this1[7] = this1[13];
        this1[13] = temp4;
        var temp5 = this1[11];
        this1[11] = this1[14];
        this1[14] = temp5
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation = function(this1, x, y, z, degrees) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
        var a1 = new lime_math_Vector4(x, y, z);
        var rad = -degrees * (Math.PI / 180);
        var c = Math.cos(rad);
        var s = Math.sin(rad);
        var t = 1 - c;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 0, c + a1.x * a1.x * t);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 5, c + a1.y * a1.y * t);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 10, c + a1.z * a1.z * t);
        var tmp1 = a1.x * a1.y * t;
        var tmp2 = a1.z * s;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 4, tmp1 + tmp2);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 1, tmp1 - tmp2);
        tmp1 = a1.x * a1.z * t;
        tmp2 = a1.y * s;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 8, tmp1 - tmp2);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 2, tmp1 + tmp2);
        tmp1 = a1.y * a1.z * t;
        tmp2 = a1.x * s;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 9, tmp1 + tmp2);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 6, tmp1 - tmp2);
        return m
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.__swap = function(this1, a, b) {
        var temp = this1[a];
        this1[a] = this1[b];
        this1[b] = temp
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
        return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3])
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
        return new lime_math_Vector4(this1[12], this1[13], this1[14])
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1, val) {
        this1[12] = val.x;
        this1[13] = val.y;
        this1[14] = val.z;
        return val
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1, index) {
        return this1[index]
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1, index, value) {
        this1[index] = value;
        return value
    };
    var lime_math_Rectangle = function(x, y, width, height) {
        if (height == null) {
            height = 0
        }
        if (width == null) {
            width = 0
        }
        if (y == null) {
            y = 0
        }
        if (x == null) {
            x = 0
        }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height
    };
    $hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
    lime_math_Rectangle.__name__ = ["lime", "math", "Rectangle"];
    lime_math_Rectangle.prototype = {
        height: null,
        width: null,
        x: null,
        y: null,
        clone: function() {
            return new lime_math_Rectangle(this.x, this.y, this.width, this.height)
        },
        contains: function(x, y) {
            return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom()
        },
        containsPoint: function(point) {
            return this.contains(point.x, point.y)
        },
        containsRect: function(rect) {
            if (rect.width <= 0 || rect.height <= 0) {
                return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom()
            } else {
                return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom()
            }
        },
        copyFrom: function(sourceRect) {
            this.x = sourceRect.x;
            this.y = sourceRect.y;
            this.width = sourceRect.width;
            this.height = sourceRect.height
        },
        equals: function(toCompare) {
            return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height
        },
        inflate: function(dx, dy) {
            this.x -= dx;
            this.width += dx * 2;
            this.y -= dy;
            this.height += dy * 2
        },
        inflatePoint: function(point) {
            this.inflate(point.x, point.y)
        },
        intersection: function(toIntersect) {
            var x0;
            if (this.x < toIntersect.x) {
                x0 = toIntersect.x
            } else {
                x0 = this.x
            }
            var x1;
            if (this.get_right() > toIntersect.get_right()) {
                x1 = toIntersect.get_right()
            } else {
                x1 = this.get_right()
            }
            if (x1 <= x0) {
                return new lime_math_Rectangle()
            }
            var y0;
            if (this.y < toIntersect.y) {
                y0 = toIntersect.y
            } else {
                y0 = this.y
            }
            var y1;
            if (this.get_bottom() > toIntersect.get_bottom()) {
                y1 = toIntersect.get_bottom()
            } else {
                y1 = this.get_bottom()
            }
            if (y1 <= y0) {
                return new lime_math_Rectangle()
            }
            return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0)
        },
        intersects: function(toIntersect) {
            var x0;
            if (this.x < toIntersect.x) {
                x0 = toIntersect.x
            } else {
                x0 = this.x
            }
            var x1;
            if (this.get_right() > toIntersect.get_right()) {
                x1 = toIntersect.get_right()
            } else {
                x1 = this.get_right()
            }
            if (x1 <= x0) {
                return false
            }
            var y0;
            if (this.y < toIntersect.y) {
                y0 = toIntersect.y
            } else {
                y0 = this.y
            }
            var y1;
            if (this.get_bottom() > toIntersect.get_bottom()) {
                y1 = toIntersect.get_bottom()
            } else {
                y1 = this.get_bottom()
            }
            return y1 > y0
        },
        isEmpty: function() {
            return this.width <= 0 || this.height <= 0
        },
        offset: function(dx, dy) {
            this.x += dx;
            this.y += dy
        },
        offsetPoint: function(point) {
            this.x += point.x;
            this.y += point.y
        },
        setEmpty: function() {
            this.x = this.y = this.width = this.height = 0
        },
        setTo: function(xa, ya, widtha, heighta) {
            this.x = xa;
            this.y = ya;
            this.width = widtha;
            this.height = heighta
        },
        transform: function(m) {
            var tx0 = m.a * this.x + m.c * this.y;
            var tx1 = tx0;
            var ty0 = m.b * this.x + m.d * this.y;
            var ty1 = ty0;
            var tx = m.a * (this.x + this.width) + m.c * this.y;
            var ty = m.b * (this.x + this.width) + m.d * this.y;
            if (tx < tx0) {
                tx0 = tx
            }
            if (ty < ty0) {
                ty0 = ty
            }
            if (tx > tx1) {
                tx1 = tx
            }
            if (ty > ty1) {
                ty1 = ty
            }
            tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
            ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
            if (tx < tx0) {
                tx0 = tx
            }
            if (ty < ty0) {
                ty0 = ty
            }
            if (tx > tx1) {
                tx1 = tx
            }
            if (ty > ty1) {
                ty1 = ty
            }
            tx = m.a * this.x + m.c * (this.y + this.height);
            ty = m.b * this.x + m.d * (this.y + this.height);
            if (tx < tx0) {
                tx0 = tx
            }
            if (ty < ty0) {
                ty0 = ty
            }
            if (tx > tx1) {
                tx1 = tx
            }
            if (ty > ty1) {
                ty1 = ty
            }
            return new lime_math_Rectangle(tx0 + m.tx, ty0 + m.ty, tx1 - tx0, ty1 - ty0)
        },
        union: function(toUnion) {
            if (this.width == 0 || this.height == 0) {
                return toUnion.clone()
            } else {
                if (toUnion.width == 0 || toUnion.height == 0) {
                    return this.clone()
                }
            }
            var x0;
            if (this.x > toUnion.x) {
                x0 = toUnion.x
            } else {
                x0 = this.x
            }
            var x1;
            if (this.get_right() < toUnion.get_right()) {
                x1 = toUnion.get_right()
            } else {
                x1 = this.get_right()
            }
            var y0;
            if (this.y > toUnion.y) {
                y0 = toUnion.y
            } else {
                y0 = this.y
            }
            var y1;
            if (this.get_bottom() < toUnion.get_bottom()) {
                y1 = toUnion.get_bottom()
            } else {
                y1 = this.get_bottom()
            }
            return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0)
        },
        __contract: function(x, y, width, height) {
            if (this.width == 0 && this.height == 0) {
                return
            }
            if (this.x < x) {
                this.x = x
            }
            if (this.y < y) {
                this.y = y
            }
            if (this.get_right() > x + width) {
                this.width = x + width - this.x
            }
            if (this.get_bottom() > y + height) {
                this.height = y + height - this.y
            }
        },
        __expand: function(x, y, width, height) {
            if (this.width == 0 && this.height == 0) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                return
            }
            var cacheRight = this.get_right();
            var cacheBottom = this.get_bottom();
            if (this.x > x) {
                this.x = x
            }
            if (this.y > y) {
                this.y = y
            }
            if (cacheRight < x + width) {
                this.width = x + width - this.x
            }
            if (cacheBottom < y + height) {
                this.height = y + height - this.y
            }
        },
        __toFlashRectangle: function() {
            return null
        },
        get_bottom: function() {
            return this.y + this.height
        },
        set_bottom: function(b) {
            this.height = b - this.y;
            return b
        },
        get_bottomRight: function() {
            return new lime_math_Vector2(this.x + this.width, this.y + this.height)
        },
        set_bottomRight: function(p) {
            this.width = p.x - this.x;
            this.height = p.y - this.y;
            return p.clone()
        },
        get_left: function() {
            return this.x
        },
        set_left: function(l) {
            this.width -= l - this.x;
            this.x = l;
            return l
        },
        get_right: function() {
            return this.x + this.width
        },
        set_right: function(r) {
            this.width = r - this.x;
            return r
        },
        get_size: function() {
            return new lime_math_Vector2(this.width, this.height)
        },
        set_size: function(p) {
            this.width = p.x;
            this.height = p.y;
            return p.clone()
        },
        get_top: function() {
            return this.y
        },
        set_top: function(t) {
            this.height -= t - this.y;
            this.y = t;
            return t
        },
        get_topLeft: function() {
            return new lime_math_Vector2(this.x, this.y)
        },
        set_topLeft: function(p) {
            this.x = p.x;
            this.y = p.y;
            return p.clone()
        },
        __class__: lime_math_Rectangle,
        __properties__: {
            set_topLeft: "set_topLeft",
            get_topLeft: "get_topLeft",
            set_top: "set_top",
            get_top: "get_top",
            set_size: "set_size",
            get_size: "get_size",
            set_right: "set_right",
            get_right: "get_right",
            set_left: "set_left",
            get_left: "get_left",
            set_bottomRight: "set_bottomRight",
            get_bottomRight: "get_bottomRight",
            set_bottom: "set_bottom",
            get_bottom: "get_bottom"
        }
    };
    var lime_math_Vector2 = function(x, y) {
        if (y == null) {
            y = 0
        }
        if (x == null) {
            x = 0
        }
        this.x = x;
        this.y = y
    };
    $hxClasses["lime.math.Vector2"] = lime_math_Vector2;
    lime_math_Vector2.__name__ = ["lime", "math", "Vector2"];
    lime_math_Vector2.distance = function(pt1, pt2) {
        var dx = pt1.x - pt2.x;
        var dy = pt1.y - pt2.y;
        return Math.sqrt(dx * dx + dy * dy)
    };
    lime_math_Vector2.interpolate = function(pt1, pt2, f) {
        return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x), pt2.y + f * (pt1.y - pt2.y))
    };
    lime_math_Vector2.polar = function(len, angle) {
        return new lime_math_Vector2(len * Math.cos(angle), len * Math.sin(angle))
    };
    lime_math_Vector2.prototype = {
        length: null,
        x: null,
        y: null,
        add: function(v) {
            return new lime_math_Vector2(v.x + this.x, v.y + this.y)
        },
        clone: function() {
            return new lime_math_Vector2(this.x, this.y)
        },
        equals: function(toCompare) {
            return toCompare != null && toCompare.x == this.x && toCompare.y == this.y
        },
        normalize: function(thickness) {
            if (this.x == 0 && this.y == 0) {
                return
            } else {
                var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
                this.x *= norm;
                this.y *= norm
            }
        },
        offset: function(dx, dy) {
            this.x += dx;
            this.y += dy
        },
        setTo: function(xa, ya) {
            this.x = xa;
            this.y = ya
        },
        subtract: function(v) {
            return new lime_math_Vector2(this.x - v.x, this.y - v.y)
        },
        __toFlashPoint: function() {
            return null
        },
        get_length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y)
        },
        __class__: lime_math_Vector2,
        __properties__: {
            get_length: "get_length"
        }
    };
    var lime_math_Vector4 = function(x, y, z, w) {
        if (w == null) {
            w = 0
        }
        if (z == null) {
            z = 0
        }
        if (y == null) {
            y = 0
        }
        if (x == null) {
            x = 0
        }
        this.w = w;
        this.x = x;
        this.y = y;
        this.z = z
    };
    $hxClasses["lime.math.Vector4"] = lime_math_Vector4;
    lime_math_Vector4.__name__ = ["lime", "math", "Vector4"];
    lime_math_Vector4.__properties__ = {
        get_Z_AXIS: "get_Z_AXIS",
        get_Y_AXIS: "get_Y_AXIS",
        get_X_AXIS: "get_X_AXIS"
    };
    lime_math_Vector4.angleBetween = function(a, b) {
        var a0 = new lime_math_Vector4(a.x, a.y, a.z, a.w);
        a0.normalize();
        var b0 = new lime_math_Vector4(b.x, b.y, b.z, b.w);
        b0.normalize();
        return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z)
    };
    lime_math_Vector4.distance = function(pt1, pt2) {
        var x = pt2.x - pt1.x;
        var y = pt2.y - pt1.y;
        var z = pt2.z - pt1.z;
        return Math.sqrt(x * x + y * y + z * z)
    };
    lime_math_Vector4.get_X_AXIS = function() {
        return new lime_math_Vector4(1, 0, 0)
    };
    lime_math_Vector4.get_Y_AXIS = function() {
        return new lime_math_Vector4(0, 1, 0)
    };
    lime_math_Vector4.get_Z_AXIS = function() {
        return new lime_math_Vector4(0, 0, 1)
    };
    lime_math_Vector4.prototype = {
        length: null,
        lengthSquared: null,
        w: null,
        x: null,
        y: null,
        z: null,
        add: function(a) {
            return new lime_math_Vector4(this.x + a.x, this.y + a.y, this.z + a.z)
        },
        clone: function() {
            return new lime_math_Vector4(this.x, this.y, this.z, this.w)
        },
        copyFrom: function(sourceVector4) {
            this.x = sourceVector4.x;
            this.y = sourceVector4.y;
            this.z = sourceVector4.z
        },
        crossProduct: function(a) {
            return new lime_math_Vector4(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x, 1)
        },
        decrementBy: function(a) {
            this.x -= a.x;
            this.y -= a.y;
            this.z -= a.z
        },
        dotProduct: function(a) {
            return this.x * a.x + this.y * a.y + this.z * a.z
        },
        equals: function(toCompare, allFour) {
            if (allFour == null) {
                allFour = false
            }
            return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w)
        },
        incrementBy: function(a) {
            this.x += a.x;
            this.y += a.y;
            this.z += a.z
        },
        nearEquals: function(toCompare, tolerance, allFour) {
            if (allFour == null) {
                allFour = false
            }
            return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance)
        },
        negate: function() {
            this.x *= -1;
            this.y *= -1;
            this.z *= -1
        },
        normalize: function() {
            var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
            if (l != 0) {
                this.x /= l;
                this.y /= l;
                this.z /= l
            }
            return l
        },
        project: function() {
            this.x /= this.w;
            this.y /= this.w;
            this.z /= this.w
        },
        scaleBy: function(s) {
            this.x *= s;
            this.y *= s;
            this.z *= s
        },
        setTo: function(xa, ya, za) {
            this.x = xa;
            this.y = ya;
            this.z = za
        },
        subtract: function(a) {
            return new lime_math_Vector4(this.x - a.x, this.y - a.y, this.z - a.z)
        },
        toString: function() {
            return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")"
        },
        get_length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
        },
        get_lengthSquared: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z
        },
        __class__: lime_math_Vector4,
        __properties__: {
            get_lengthSquared: "get_lengthSquared",
            get_length: "get_length"
        }
    };
    var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
    $hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
    lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime", "math", "color", "_ARGB", "ARGB_Impl_"];
    lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {
        set_r: "set_r",
        get_r: "get_r",
        set_g: "set_g",
        get_g: "get_g",
        set_b: "set_b",
        get_b: "get_b",
        set_a: "set_a",
        get_a: "get_a"
    };
    lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
        if (argb == null) {
            argb = 0
        }
        return argb
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a, r, g, b) {
        var argb = 0;
        argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
        return argb
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
        if ((this1 >> 24 & 255) == 0) {
            this1 = 0
        } else {
            if ((this1 >> 24 & 255) != 255) {
                lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
                this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255
            }
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) {
            premultiplied = false
        }
        if (format == null) {
            format = 0
        }
        switch (format) {
            case 2:
                this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
                break;
            case 0:
                this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break;
            case 1:
                this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
                break
        }
        if (premultiplied) {
            if ((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
                lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255 / (this1 >> 24 & 255);
                var r;
                var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255
            }
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1, a, r, g, b) {
        this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
        if ((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
            lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255 / (this1 >> 24 & 255);
            var r;
            var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
            r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
            var g;
            var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
            g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
            var b;
            var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
            b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
            this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) {
            premultiplied = false
        }
        if (format == null) {
            format = 0
        }
        if (premultiplied) {
            if ((this1 >> 24 & 255) == 0) {
                this1 = 0
            } else {
                if ((this1 >> 24 & 255) != 255) {
                    lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
                    this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255
                }
            }
        }
        switch (format) {
            case 2:
                data[offset] = this1 & 255;
                data[offset + 1] = this1 >> 8 & 255;
                data[offset + 2] = this1 >> 16 & 255;
                data[offset + 3] = this1 >> 24 & 255;
                break;
            case 0:
                data[offset] = this1 >> 16 & 255;
                data[offset + 1] = this1 >> 8 & 255;
                data[offset + 2] = this1 & 255;
                data[offset + 3] = this1 >> 24 & 255;
                break;
            case 1:
                data[offset] = this1 >> 24 & 255;
                data[offset + 1] = this1 >> 16 & 255;
                data[offset + 2] = this1 >> 8 & 255;
                data[offset + 3] = this1 & 255;
                break
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
        var argb = 0;
        argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
        return argb
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
        var argb = 0;
        argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
        return argb
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
        return this1 >> 24 & 255
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1, value) {
        this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
        return this1 & 255
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
        return value
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
        return this1 >> 8 & 255
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
        return value
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
        return this1 >> 16 & 255
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value
    };
    var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
    $hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
    lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime", "math", "color", "_BGRA", "BGRA_Impl_"];
    lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {
        set_r: "set_r",
        get_r: "get_r",
        set_g: "set_g",
        get_g: "get_g",
        set_b: "set_b",
        get_b: "get_b",
        set_a: "set_a",
        get_a: "get_a"
    };
    lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
        if (bgra == null) {
            bgra = 0
        }
        return bgra
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b, g, r, a) {
        var bgra = 0;
        bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
        return bgra
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
        if ((this1 & 255) == 0) {
            this1 = 0
        } else {
            if ((this1 & 255) != 255) {
                lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
                this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255
            }
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) {
            premultiplied = false
        }
        if (format == null) {
            format = 0
        }
        switch (format) {
            case 2:
                this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
                break
        }
        if (premultiplied) {
            if ((this1 & 255) != 0 && (this1 & 255) != 255) {
                lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255 / (this1 & 255);
                var b;
                var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var r;
                var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255
            }
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1, b, g, r, a) {
        this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
        if ((this1 & 255) != 0 && (this1 & 255) != 255) {
            lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255 / (this1 & 255);
            var b;
            var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
            b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
            var g;
            var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
            g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
            var r;
            var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
            r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
            this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) {
            premultiplied = false
        }
        if (format == null) {
            format = 0
        }
        if (premultiplied) {
            if ((this1 & 255) == 0) {
                this1 = 0
            } else {
                if ((this1 & 255) != 255) {
                    lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
                    this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255
                }
            }
        }
        switch (format) {
            case 2:
                data[offset] = this1 >> 24 & 255;
                data[offset + 1] = this1 >> 16 & 255;
                data[offset + 2] = this1 >> 8 & 255;
                data[offset + 3] = this1 & 255;
                break;
            case 0:
                data[offset] = this1 >> 8 & 255;
                data[offset + 1] = this1 >> 16 & 255;
                data[offset + 2] = this1 >> 24 & 255;
                data[offset + 3] = this1 & 255;
                break;
            case 1:
                data[offset] = this1 & 255;
                data[offset + 1] = this1 >> 8 & 255;
                data[offset + 2] = this1 >> 16 & 255;
                data[offset + 3] = this1 >> 24 & 255;
                break
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
        var bgra = 0;
        bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
        return bgra
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
        var bgra = 0;
        bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
        return bgra
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
        return this1 & 255
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
        return value
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
        return this1 >> 24 & 255
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1, value) {
        this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
        return this1 >> 16 & 255
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
        return this1 >> 8 & 255
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
        return value
    };
    var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
    $hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
    lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime", "math", "color", "_RGBA", "RGBA_Impl_"];
    lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {
        set_r: "set_r",
        get_r: "get_r",
        set_g: "set_g",
        get_g: "get_g",
        set_b: "set_b",
        get_b: "get_b",
        set_a: "set_a",
        get_a: "get_a"
    };
    lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
        if (rgba == null) {
            rgba = 0
        }
        return rgba
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r, g, b, a) {
        var rgba = 0;
        rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
        return rgba
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
        if ((this1 & 255) == 0) {
            if (this1 != 0) {
                this1 = 0
            }
        } else {
            if ((this1 & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
                this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255
            }
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) {
            premultiplied = false
        }
        if (format == null) {
            format = 0
        }
        switch (format) {
            case 2:
                this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break
        }
        if (premultiplied) {
            if ((this1 & 255) != 0 && (this1 & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (this1 & 255);
                var r;
                var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255
            }
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1, r, g, b, a) {
        this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
        if ((this1 & 255) != 0 && (this1 & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255 / (this1 & 255);
            var r;
            var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
            r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
            var g;
            var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
            g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
            var b;
            var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
            b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
            this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) {
            premultiplied = false
        }
        if (format == null) {
            format = 0
        }
        if (premultiplied) {
            if ((this1 & 255) == 0) {
                if (this1 != 0) {
                    this1 = 0
                }
            } else {
                if ((this1 & 255) != 255) {
                    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
                    this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255
                }
            }
        }
        switch (format) {
            case 2:
                data[offset] = this1 >> 8 & 255;
                data[offset + 1] = this1 >> 16 & 255;
                data[offset + 2] = this1 >> 24 & 255;
                data[offset + 3] = this1 & 255;
                break;
            case 0:
                data[offset] = this1 >> 24 & 255;
                data[offset + 1] = this1 >> 16 & 255;
                data[offset + 2] = this1 >> 8 & 255;
                data[offset + 3] = this1 & 255;
                break;
            case 1:
                data[offset] = this1 & 255;
                data[offset + 1] = this1 >> 24 & 255;
                data[offset + 2] = this1 >> 16 & 255;
                data[offset + 3] = this1 >> 8 & 255;
                break
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
        var rgba = 0;
        rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
        return rgba
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
        var rgba = 0;
        rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
        return rgba
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
        return this1 & 255
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
        return value
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
        return this1 >> 8 & 255
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
        return value
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
        return this1 >> 16 & 255
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
        return this1 >> 24 & 255
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1, value) {
        this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value
    };
    var lime_media_ALAudioContext = function() {
        this.EXPONENT_DISTANCE_CLAMPED = 53254;
        this.EXPONENT_DISTANCE = 53253;
        this.LINEAR_DISTANCE_CLAMPED = 53252;
        this.LINEAR_DISTANCE = 53251;
        this.INVERSE_DISTANCE_CLAMPED = 53250;
        this.INVERSE_DISTANCE = 53249;
        this.DISTANCE_MODEL = 53248;
        this.DOPPLER_VELOCITY = 49153;
        this.SPEED_OF_SOUND = 49155;
        this.DOPPLER_FACTOR = 49152;
        this.EXTENSIONS = 45060;
        this.RENDERER = 45059;
        this.VERSION = 45058;
        this.VENDOR = 45057;
        this.OUT_OF_MEMORY = 40965;
        this.INVALID_OPERATION = 40964;
        this.INVALID_VALUE = 40963;
        this.INVALID_ENUM = 40962;
        this.INVALID_NAME = 40961;
        this.NO_ERROR = 0;
        this.SIZE = 8196;
        this.CHANNELS = 8195;
        this.BITS = 8194;
        this.FREQUENCY = 8193;
        this.FORMAT_STEREO16 = 4355;
        this.FORMAT_STEREO8 = 4354;
        this.FORMAT_MONO16 = 4353;
        this.FORMAT_MONO8 = 4352;
        this.UNDETERMINED = 4144;
        this.STREAMING = 4137;
        this.STATIC = 4136;
        this.SOURCE_TYPE = 4135;
        this.BYTE_OFFSET = 4134;
        this.SAMPLE_OFFSET = 4133;
        this.SEC_OFFSET = 4132;
        this.MAX_DISTANCE = 4131;
        this.CONE_OUTER_GAIN = 4130;
        this.ROLLOFF_FACTOR = 4129;
        this.REFERENCE_DISTANCE = 4128;
        this.BUFFERS_PROCESSED = 4118;
        this.BUFFERS_QUEUED = 4117;
        this.STOPPED = 4116;
        this.PAUSED = 4115;
        this.PLAYING = 4114;
        this.INITIAL = 4113;
        this.SOURCE_STATE = 4112;
        this.ORIENTATION = 4111;
        this.MAX_GAIN = 4110;
        this.MIN_GAIN = 4109;
        this.GAIN = 4106;
        this.BUFFER = 4105;
        this.LOOPING = 4103;
        this.VELOCITY = 4102;
        this.DIRECTION = 4101;
        this.POSITION = 4100;
        this.PITCH = 4099;
        this.CONE_OUTER_ANGLE = 4098;
        this.CONE_INNER_ANGLE = 4097;
        this.SOURCE_RELATIVE = 514;
        this.TRUE = 1;
        this.FALSE = 0;
        this.NONE = 0
    };
    $hxClasses["lime.media.ALAudioContext"] = lime_media_ALAudioContext;
    lime_media_ALAudioContext.__name__ = ["lime", "media", "ALAudioContext"];
    lime_media_ALAudioContext.prototype = {
        NONE: null,
        FALSE: null,
        TRUE: null,
        SOURCE_RELATIVE: null,
        CONE_INNER_ANGLE: null,
        CONE_OUTER_ANGLE: null,
        PITCH: null,
        POSITION: null,
        DIRECTION: null,
        VELOCITY: null,
        LOOPING: null,
        BUFFER: null,
        GAIN: null,
        MIN_GAIN: null,
        MAX_GAIN: null,
        ORIENTATION: null,
        SOURCE_STATE: null,
        INITIAL: null,
        PLAYING: null,
        PAUSED: null,
        STOPPED: null,
        BUFFERS_QUEUED: null,
        BUFFERS_PROCESSED: null,
        REFERENCE_DISTANCE: null,
        ROLLOFF_FACTOR: null,
        CONE_OUTER_GAIN: null,
        MAX_DISTANCE: null,
        SEC_OFFSET: null,
        SAMPLE_OFFSET: null,
        BYTE_OFFSET: null,
        SOURCE_TYPE: null,
        STATIC: null,
        STREAMING: null,
        UNDETERMINED: null,
        FORMAT_MONO8: null,
        FORMAT_MONO16: null,
        FORMAT_STEREO8: null,
        FORMAT_STEREO16: null,
        FREQUENCY: null,
        BITS: null,
        CHANNELS: null,
        SIZE: null,
        NO_ERROR: null,
        INVALID_NAME: null,
        INVALID_ENUM: null,
        INVALID_VALUE: null,
        INVALID_OPERATION: null,
        OUT_OF_MEMORY: null,
        VENDOR: null,
        VERSION: null,
        RENDERER: null,
        EXTENSIONS: null,
        DOPPLER_FACTOR: null,
        SPEED_OF_SOUND: null,
        DOPPLER_VELOCITY: null,
        DISTANCE_MODEL: null,
        INVERSE_DISTANCE: null,
        INVERSE_DISTANCE_CLAMPED: null,
        LINEAR_DISTANCE: null,
        LINEAR_DISTANCE_CLAMPED: null,
        EXPONENT_DISTANCE: null,
        EXPONENT_DISTANCE_CLAMPED: null,
        bufferData: function(buffer, format, data, size, freq) {
            lime_media_openal_AL.bufferData(buffer, format, data, size, freq)
        },
        buffer3f: function(buffer, param, value1, value2, value3) {
            lime_media_openal_AL.buffer3f(buffer, param, value1, value2, value3)
        },
        buffer3i: function(buffer, param, value1, value2, value3) {
            lime_media_openal_AL.buffer3i(buffer, param, value1, value2, value3)
        },
        bufferf: function(buffer, param, value) {
            lime_media_openal_AL.bufferf(buffer, param, value)
        },
        bufferfv: function(buffer, param, values) {
            lime_media_openal_AL.bufferfv(buffer, param, values)
        },
        bufferi: function(buffer, param, value) {
            lime_media_openal_AL.bufferi(buffer, param, value)
        },
        bufferiv: function(buffer, param, values) {
            lime_media_openal_AL.bufferiv(buffer, param, values)
        },
        createSource: function() {
            return lime_media_openal_AL.createSource()
        },
        createBuffer: function() {
            return lime_media_openal_AL.createBuffer()
        },
        deleteBuffer: function(buffer) {
            lime_media_openal_AL.deleteBuffer(buffer)
        },
        deleteBuffers: function(buffers) {
            lime_media_openal_AL.deleteBuffers(buffers)
        },
        deleteSource: function(source) {
            lime_media_openal_AL.deleteSource(source)
        },
        deleteSources: function(sources) {
            lime_media_openal_AL.deleteSources(sources)
        },
        disable: function(capability) {
            lime_media_openal_AL.disable(capability)
        },
        distanceModel: function(distanceModel) {
            lime_media_openal_AL.distanceModel(distanceModel)
        },
        dopplerFactor: function(value) {
            lime_media_openal_AL.dopplerFactor(value)
        },
        dopplerVelocity: function(value) {
            lime_media_openal_AL.dopplerVelocity(value)
        },
        enable: function(capability) {
            lime_media_openal_AL.enable(capability)
        },
        genSource: function() {
            return this.createSource()
        },
        genSources: function(n) {
            return lime_media_openal_AL.genSources(n)
        },
        genBuffer: function() {
            return this.createBuffer()
        },
        genBuffers: function(n) {
            return lime_media_openal_AL.genBuffers(n)
        },
        getBoolean: function(param) {
            return lime_media_openal_AL.getBoolean(param)
        },
        getBooleanv: function(param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getBooleanv(param, count)
        },
        getBuffer3f: function(buffer, param) {
            return lime_media_openal_AL.getBuffer3f(buffer, param)
        },
        getBuffer3i: function(buffer, param) {
            return lime_media_openal_AL.getBuffer3i(buffer, param)
        },
        getBufferf: function(buffer, param) {
            return lime_media_openal_AL.getBufferf(buffer, param)
        },
        getBufferfv: function(buffer, param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getBufferfv(buffer, param, count)
        },
        getBufferi: function(buffer, param) {
            return lime_media_openal_AL.getBufferi(buffer, param)
        },
        getBufferiv: function(buffer, param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getBufferiv(buffer, param, count)
        },
        getDouble: function(param) {
            return lime_media_openal_AL.getDouble(param)
        },
        getDoublev: function(param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getDoublev(param, count)
        },
        getEnumValue: function(ename) {
            return lime_media_openal_AL.getEnumValue(ename)
        },
        getError: function() {
            return lime_media_openal_AL.getError()
        },
        getErrorString: function() {
            return lime_media_openal_AL.getErrorString()
        },
        getFloat: function(param) {
            return lime_media_openal_AL.getFloat(param)
        },
        getFloatv: function(param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getFloatv(param, count)
        },
        getInteger: function(param) {
            return lime_media_openal_AL.getInteger(param)
        },
        getIntegerv: function(param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getIntegerv(param, count)
        },
        getListener3f: function(param) {
            return lime_media_openal_AL.getListener3f(param)
        },
        getListener3i: function(param) {
            return lime_media_openal_AL.getListener3i(param)
        },
        getListenerf: function(param) {
            return lime_media_openal_AL.getListenerf(param)
        },
        getListenerfv: function(param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getListenerfv(param, count)
        },
        getListeneri: function(param) {
            return lime_media_openal_AL.getListeneri(param)
        },
        getListeneriv: function(param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getListeneriv(param, count)
        },
        getProcAddress: function(fname) {
            return lime_media_openal_AL.getProcAddress(fname)
        },
        getSource3f: function(source, param) {
            return lime_media_openal_AL.getSource3f(source, param)
        },
        getSourcef: function(source, param) {
            return lime_media_openal_AL.getSourcef(source, param)
        },
        getSource3i: function(source, param) {
            return lime_media_openal_AL.getSource3i(source, param)
        },
        getSourcefv: function(source, param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getSourcefv(source, param)
        },
        getSourcei: function(source, param) {
            return lime_media_openal_AL.getSourcei(source, param)
        },
        getSourceiv: function(source, param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_AL.getSourceiv(source, param, count)
        },
        getString: function(param) {
            return lime_media_openal_AL.getString(param)
        },
        isBuffer: function(buffer) {
            return lime_media_openal_AL.isBuffer(buffer)
        },
        isEnabled: function(capability) {
            return lime_media_openal_AL.isEnabled(capability)
        },
        isExtensionPresent: function(extname) {
            return lime_media_openal_AL.isExtensionPresent(extname)
        },
        isSource: function(source) {
            return lime_media_openal_AL.isSource(source)
        },
        listener3f: function(param, value1, value2, value3) {
            lime_media_openal_AL.listener3f(param, value1, value2, value3)
        },
        listener3i: function(param, value1, value2, value3) {
            lime_media_openal_AL.listener3i(param, value1, value2, value3)
        },
        listenerf: function(param, value) {
            lime_media_openal_AL.listenerf(param, value)
        },
        listenerfv: function(param, values) {
            lime_media_openal_AL.listenerfv(param, values)
        },
        listeneri: function(param, value) {
            lime_media_openal_AL.listeneri(param, value)
        },
        listeneriv: function(param, values) {
            lime_media_openal_AL.listeneriv(param, values)
        },
        source3f: function(source, param, value1, value2, value3) {
            lime_media_openal_AL.source3f(source, param, value1, value2, value3)
        },
        source3i: function(source, param, value1, value2, value3) {
            lime_media_openal_AL.source3i(source, param, value1, value2, value3)
        },
        sourcef: function(source, param, value) {
            lime_media_openal_AL.sourcef(source, param, value)
        },
        sourcefv: function(source, param, values) {
            lime_media_openal_AL.sourcefv(source, param, values)
        },
        sourcei: function(source, param, value) {
            lime_media_openal_AL.sourcei(source, param, value)
        },
        sourceiv: function(source, param, values) {
            lime_media_openal_AL.sourceiv(source, param, values)
        },
        sourcePlay: function(source) {
            lime_media_openal_AL.sourcePlay(source)
        },
        sourcePlayv: function(sources) {
            lime_media_openal_AL.sourcePlayv(sources)
        },
        sourceStop: function(source) {
            lime_media_openal_AL.sourceStop(source)
        },
        sourceStopv: function(sources) {
            lime_media_openal_AL.sourceStopv(sources)
        },
        sourceRewind: function(source) {
            lime_media_openal_AL.sourceRewind(source)
        },
        sourceRewindv: function(sources) {
            lime_media_openal_AL.sourceRewindv(sources)
        },
        sourcePause: function(source) {
            lime_media_openal_AL.sourcePause(source)
        },
        sourcePausev: function(sources) {
            lime_media_openal_AL.sourcePausev(sources)
        },
        sourceQueueBuffer: function(source, buffer) {
            lime_media_openal_AL.sourceQueueBuffer(source, buffer)
        },
        sourceQueueBuffers: function(source, nb, buffers) {
            lime_media_openal_AL.sourceQueueBuffers(source, nb, buffers)
        },
        sourceUnqueueBuffer: function(source) {
            return lime_media_openal_AL.sourceUnqueueBuffer(source)
        },
        sourceUnqueueBuffers: function(source, nb) {
            return lime_media_openal_AL.sourceUnqueueBuffers(source, nb)
        },
        speedOfSound: function(value) {
            lime_media_openal_AL.speedOfSound(value)
        },
        __class__: lime_media_ALAudioContext
    };
    var lime_media_ALCAudioContext = function() {
        this.ALL_DEVICES_SPECIFIER = 4115;
        this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
        this.ENUMERATE_ALL_EXT = 1;
        this.EXTENSIONS = 4102;
        this.DEVICE_SPECIFIER = 4101;
        this.DEFAULT_DEVICE_SPECIFIER = 4100;
        this.ALL_ATTRIBUTES = 4099;
        this.ATTRIBUTES_SIZE = 4098;
        this.OUT_OF_MEMORY = 40965;
        this.INVALID_VALUE = 40964;
        this.INVALID_ENUM = 40963;
        this.INVALID_CONTEXT = 40962;
        this.INVALID_DEVICE = 40961;
        this.NO_ERROR = 0;
        this.STEREO_SOURCES = 4113;
        this.MONO_SOURCES = 4112;
        this.SYNC = 4105;
        this.REFRESH = 4104;
        this.FREQUENCY = 4103;
        this.TRUE = 1;
        this.FALSE = 0
    };
    $hxClasses["lime.media.ALCAudioContext"] = lime_media_ALCAudioContext;
    lime_media_ALCAudioContext.__name__ = ["lime", "media", "ALCAudioContext"];
    lime_media_ALCAudioContext.prototype = {
        FALSE: null,
        TRUE: null,
        FREQUENCY: null,
        REFRESH: null,
        SYNC: null,
        MONO_SOURCES: null,
        STEREO_SOURCES: null,
        NO_ERROR: null,
        INVALID_DEVICE: null,
        INVALID_CONTEXT: null,
        INVALID_ENUM: null,
        INVALID_VALUE: null,
        OUT_OF_MEMORY: null,
        ATTRIBUTES_SIZE: null,
        ALL_ATTRIBUTES: null,
        DEFAULT_DEVICE_SPECIFIER: null,
        DEVICE_SPECIFIER: null,
        EXTENSIONS: null,
        ENUMERATE_ALL_EXT: null,
        DEFAULT_ALL_DEVICES_SPECIFIER: null,
        ALL_DEVICES_SPECIFIER: null,
        closeDevice: function(device) {
            return lime_media_openal_ALC.closeDevice(device)
        },
        createContext: function(device, attrlist) {
            return lime_media_openal_ALC.createContext(device, attrlist)
        },
        destroyContext: function(context) {
            lime_media_openal_ALC.destroyContext(context)
        },
        getContextsDevice: function(context) {
            return lime_media_openal_ALC.getContextsDevice(context)
        },
        getCurrentContext: function() {
            return lime_media_openal_ALC.getCurrentContext()
        },
        getError: function(device) {
            return lime_media_openal_ALC.getError(device)
        },
        getErrorString: function(device) {
            return lime_media_openal_ALC.getErrorString(device)
        },
        getIntegerv: function(device, param, count) {
            if (count == null) {
                count = 1
            }
            return lime_media_openal_ALC.getIntegerv(device, param, count)
        },
        getString: function(device, param) {
            return lime_media_openal_ALC.getString(device, param)
        },
        makeContextCurrent: function(context) {
            return lime_media_openal_ALC.makeContextCurrent(context)
        },
        openDevice: function(deviceName) {
            return lime_media_openal_ALC.openDevice(deviceName)
        },
        pauseDevice: function(device) {
            lime_media_openal_ALC.pauseDevice(device)
        },
        processContext: function(context) {
            lime_media_openal_ALC.processContext(context)
        },
        resumeDevice: function(device) {
            lime_media_openal_ALC.resumeDevice(device)
        },
        suspendContext: function(context) {
            lime_media_openal_ALC.suspendContext(context)
        },
        __class__: lime_media_ALCAudioContext
    };
    var lime_media_AudioBuffer = function() {};
    $hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
    lime_media_AudioBuffer.__name__ = ["lime", "media", "AudioBuffer"];
    lime_media_AudioBuffer.fromBytes = function(bytes) {
        if (bytes == null) {
            return null
        }
        return null
    };
    lime_media_AudioBuffer.fromFile = function(path) {
        if (path == null) {
            return null
        }
        var audioBuffer = new lime_media_AudioBuffer();
        audioBuffer.__srcHowl = new Howl({
            src: [path]
        });
        return audioBuffer
    };
    lime_media_AudioBuffer.fromFiles = function(paths) {
        var audioBuffer = new lime_media_AudioBuffer();
        audioBuffer.__srcHowl = new Howl({
            src: paths
        });
        return audioBuffer
    };
    lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
        return null
    };
    lime_media_AudioBuffer.loadFromFile = function(path) {
        var promise = new lime_app_Promise();
        var audioBuffer = lime_media_AudioBuffer.fromFile(path);
        if (audioBuffer != null) {
            if (audioBuffer != null) {
                audioBuffer.__srcHowl.on("load", function() {
                    promise.complete(audioBuffer)
                });
                audioBuffer.__srcHowl.on("loaderror", function() {
                    promise.error(null)
                });
                audioBuffer.__srcHowl.load()
            }
        } else {
            promise.error(null)
        }
        return promise.future
    };
    lime_media_AudioBuffer.loadFromFiles = function(paths) {
        var promise = new lime_app_Promise();
        var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
        if (audioBuffer != null) {
            audioBuffer.__srcHowl.on("load", function() {
                promise.complete(audioBuffer)
            });
            audioBuffer.__srcHowl.on("loaderror", function() {
                promise.error(null)
            });
            audioBuffer.__srcHowl.load()
        } else {
            promise.error(null)
        }
        return promise.future
    };
    lime_media_AudioBuffer.prototype = {
        bitsPerSample: null,
        channels: null,
        data: null,
        sampleRate: null,
        __srcAudio: null,
        __srcBuffer: null,
        __srcCustom: null,
        __srcFMODSound: null,
        __srcHowl: null,
        __srcSound: null,
        __srcVorbisFile: null,
        dispose: function() {
            this.__srcHowl.unload()
        },
        get_src: function() {
            return this.__srcHowl
        },
        set_src: function(value) {
            return this.__srcHowl = value
        },
        __class__: lime_media_AudioBuffer,
        __properties__: {
            set_src: "set_src",
            get_src: "get_src"
        }
    };
    var lime_media_AudioContext = $hxClasses["lime.media.AudioContext"] = {
        __ename__: ["lime", "media", "AudioContext"],
        __constructs__: ["OPENAL", "HTML5", "WEB", "FLASH", "CUSTOM"]
    };
    lime_media_AudioContext.OPENAL = function(alc, al) {
        var $x = ["OPENAL", 0, alc, al];
        $x.__enum__ = lime_media_AudioContext;
        $x.toString = $estr;
        return $x
    };
    lime_media_AudioContext.HTML5 = function(context) {
        var $x = ["HTML5", 1, context];
        $x.__enum__ = lime_media_AudioContext;
        $x.toString = $estr;
        return $x
    };
    lime_media_AudioContext.WEB = function(context) {
        var $x = ["WEB", 2, context];
        $x.__enum__ = lime_media_AudioContext;
        $x.toString = $estr;
        return $x
    };
    lime_media_AudioContext.FLASH = function(context) {
        var $x = ["FLASH", 3, context];
        $x.__enum__ = lime_media_AudioContext;
        $x.toString = $estr;
        return $x
    };
    lime_media_AudioContext.CUSTOM = function(data) {
        var $x = ["CUSTOM", 4, data];
        $x.__enum__ = lime_media_AudioContext;
        $x.toString = $estr;
        return $x
    };
    var lime_media_AudioManager = function() {};
    $hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
    lime_media_AudioManager.__name__ = ["lime", "media", "AudioManager"];
    lime_media_AudioManager.init = function(context) {
        if (lime_media_AudioManager.context == null) {
            if (context == null) {
                try {
                    window.AudioContext = window.AudioContext || window.webkitAudioContext;
                    lime_media_AudioManager.context = lime_media_AudioContext.WEB(new AudioContext())
                } catch (e) {
                    haxe_CallStack.lastException = e;
                    if (e instanceof js__$Boot_HaxeError) {
                        e = e.val
                    }
                    lime_media_AudioManager.context = lime_media_AudioContext.HTML5(new lime_media_HTML5AudioContext())
                }
            } else {
                lime_media_AudioManager.context = context
            }
        }
    };
    lime_media_AudioManager.resume = function() {
        if (lime_media_AudioManager.context != null) {
            var _g = lime_media_AudioManager.context;
            switch (_g[1]) {
                case 0:
                    var al = _g[3];
                    var alc = _g[2];
                    var currentContext = alc.getCurrentContext();
                    if (currentContext != null) {
                        var device = alc.getContextsDevice(currentContext);
                        alc.resumeDevice(device);
                        alc.processContext(currentContext)
                    }
                    break;
                default:
            }
        }
    };
    lime_media_AudioManager.shutdown = function() {
        if (lime_media_AudioManager.context != null) {
            var _g = lime_media_AudioManager.context;
            switch (_g[1]) {
                case 0:
                    var al = _g[3];
                    var alc = _g[2];
                    var currentContext = alc.getCurrentContext();
                    if (currentContext != null) {
                        var device = alc.getContextsDevice(currentContext);
                        alc.makeContextCurrent(null);
                        alc.destroyContext(currentContext);
                        alc.closeDevice(device)
                    }
                    break;
                default:
            }
        }
    };
    lime_media_AudioManager.suspend = function() {
        if (lime_media_AudioManager.context != null) {
            var _g = lime_media_AudioManager.context;
            switch (_g[1]) {
                case 0:
                    var al = _g[3];
                    var alc = _g[2];
                    var currentContext = alc.getCurrentContext();
                    if (currentContext != null) {
                        alc.suspendContext(currentContext);
                        var device = alc.getContextsDevice(currentContext);
                        alc.pauseDevice(device)
                    }
                    break;
                default:
            }
        }
    };
    var lime_media_AudioSource = function(buffer, offset, length, loops) {
        if (loops == null) {
            loops = 0
        }
        if (offset == null) {
            offset = 0
        }
        this.onComplete = new lime_app__$Event_$Void_$Void();
        this.buffer = buffer;
        this.offset = offset;
        this.backend = new lime__$backend_html5_HTML5AudioSource(this);
        if (length != null && length != 0) {
            this.set_length(length)
        }
        this.set_loops(loops);
        if (buffer != null) {
            this.init()
        }
    };
    $hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
    lime_media_AudioSource.__name__ = ["lime", "media", "AudioSource"];
    lime_media_AudioSource.prototype = {
        onComplete: null,
        buffer: null,
        offset: null,
        backend: null,
        dispose: function() {
            this.backend.dispose()
        },
        init: function() {
            this.backend.init()
        },
        play: function() {
            this.backend.play()
        },
        pause: function() {
            this.backend.pause()
        },
        stop: function() {
            this.backend.stop()
        },
        get_currentTime: function() {
            return this.backend.getCurrentTime()
        },
        set_currentTime: function(value) {
            return this.backend.setCurrentTime(value)
        },
        get_gain: function() {
            return this.backend.getGain()
        },
        set_gain: function(value) {
            return this.backend.setGain(value)
        },
        get_length: function() {
            return this.backend.getLength()
        },
        set_length: function(value) {
            return this.backend.setLength(value)
        },
        get_loops: function() {
            return this.backend.getLoops()
        },
        set_loops: function(value) {
            return this.backend.setLoops(value)
        },
        get_position: function() {
            return this.backend.getPosition()
        },
        set_position: function(value) {
            return this.backend.setPosition(value)
        },
        __class__: lime_media_AudioSource,
        __properties__: {
            set_position: "set_position",
            get_position: "get_position",
            set_loops: "set_loops",
            get_loops: "get_loops",
            set_length: "set_length",
            get_length: "get_length",
            set_gain: "set_gain",
            get_gain: "get_gain",
            set_currentTime: "set_currentTime",
            get_currentTime: "get_currentTime"
        }
    };
    var lime_media_FlashAudioContext = function() {};
    $hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
    lime_media_FlashAudioContext.__name__ = ["lime", "media", "FlashAudioContext"];
    lime_media_FlashAudioContext.prototype = {
        createBuffer: function(stream, context) {
            return null
        },
        getBytesLoaded: function(buffer) {
            return 0
        },
        getBytesTotal: function(buffer) {
            return 0
        },
        getID3: function(buffer) {
            return null
        },
        getIsBuffering: function(buffer) {
            return false
        },
        getIsURLInaccessible: function(buffer) {
            return false
        },
        getLength: function(buffer) {
            return 0
        },
        getURL: function(buffer) {
            return null
        },
        close: function(buffer) {},
        extract: function(buffer, target, length, startPosition) {
            if (startPosition == null) {
                startPosition = -1
            }
            return 0
        },
        load: function(buffer, stream, context) {},
        loadCompressedDataFromByteArray: function(buffer, bytes, bytesLength) {},
        loadPCMFromByteArray: function(buffer, bytes, samples, format, stereo, sampleRate) {
            if (sampleRate == null) {
                sampleRate = 44100
            }
            if (stereo == null) {
                stereo = true
            }
        },
        play: function(buffer, startTime, loops, sndTransform) {
            if (loops == null) {
                loops = 0
            }
            if (startTime == null) {
                startTime = 0
            }
            return null
        },
        __class__: lime_media_FlashAudioContext
    };
    var lime_media_HTML5AudioContext = function() {
        this.NETWORK_NO_SOURCE = 3;
        this.NETWORK_LOADING = 2;
        this.NETWORK_IDLE = 1;
        this.NETWORK_EMPTY = 0;
        this.HAVE_NOTHING = 0;
        this.HAVE_METADATA = 1;
        this.HAVE_FUTURE_DATA = 3;
        this.HAVE_ENOUGH_DATA = 4;
        this.HAVE_CURRENT_DATA = 2
    };
    $hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
    lime_media_HTML5AudioContext.__name__ = ["lime", "media", "HTML5AudioContext"];
    lime_media_HTML5AudioContext.prototype = {
        HAVE_CURRENT_DATA: null,
        HAVE_ENOUGH_DATA: null,
        HAVE_FUTURE_DATA: null,
        HAVE_METADATA: null,
        HAVE_NOTHING: null,
        NETWORK_EMPTY: null,
        NETWORK_IDLE: null,
        NETWORK_LOADING: null,
        NETWORK_NO_SOURCE: null,
        canPlayType: function(buffer, type) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.canPlayType(type)
            }
            return null
        },
        createBuffer: function(urlString) {
            var buffer = new lime_media_AudioBuffer();
            buffer.__srcAudio = new Audio();
            buffer.__srcAudio.src = urlString;
            return buffer
        },
        getAutoplay: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.autoplay
            }
            return false
        },
        getBuffered: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.buffered
            }
            return null
        },
        getCurrentSrc: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.currentSrc
            }
            return null
        },
        getCurrentTime: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.currentTime
            }
            return 0
        },
        getDefaultPlaybackRate: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.defaultPlaybackRate
            }
            return 1
        },
        getDuration: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.duration
            }
            return 0
        },
        getEnded: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.ended
            }
            return false
        },
        getError: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.error
            }
            return null
        },
        getLoop: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.loop
            }
            return false
        },
        getMuted: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.muted
            }
            return false
        },
        getNetworkState: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.networkState
            }
            return 0
        },
        getPaused: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.paused
            }
            return false
        },
        getPlaybackRate: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.playbackRate
            }
            return 1
        },
        getPlayed: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.played
            }
            return null
        },
        getPreload: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.preload
            }
            return null
        },
        getReadyState: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.readyState
            }
            return 0
        },
        getSeekable: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.seekable
            }
            return null
        },
        getSeeking: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.seeking
            }
            return false
        },
        getSrc: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.src
            }
            return null
        },
        getStartTime: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.playbackRate
            }
            return 0
        },
        getVolume: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.volume
            }
            return 1
        },
        load: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.load()
            }
        },
        pause: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.pause()
            }
        },
        play: function(buffer) {
            if (buffer.__srcAudio != null) {
                return buffer.__srcAudio.play()
            }
        },
        setAutoplay: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.autoplay = value
            }
        },
        setCurrentTime: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.currentTime = value
            }
        },
        setDefaultPlaybackRate: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.defaultPlaybackRate = value
            }
        },
        setLoop: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.loop = value
            }
        },
        setMuted: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.muted = value
            }
        },
        setPlaybackRate: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.playbackRate = value
            }
        },
        setPreload: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.preload = value
            }
        },
        setSrc: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.src = value
            }
        },
        setVolume: function(buffer, value) {
            if (buffer.__srcAudio != null) {
                buffer.__srcAudio.volume = value
            }
        },
        __class__: lime_media_HTML5AudioContext
    };
    var lime_media_codecs_vorbis_VorbisComment = function() {};
    $hxClasses["lime.media.codecs.vorbis.VorbisComment"] = lime_media_codecs_vorbis_VorbisComment;
    lime_media_codecs_vorbis_VorbisComment.__name__ = ["lime", "media", "codecs", "vorbis", "VorbisComment"];
    lime_media_codecs_vorbis_VorbisComment.prototype = {
        userComments: null,
        vendor: null,
        __class__: lime_media_codecs_vorbis_VorbisComment
    };
    var lime_media_codecs_vorbis_VorbisFile = function(handle) {
        this.handle = handle
    };
    $hxClasses["lime.media.codecs.vorbis.VorbisFile"] = lime_media_codecs_vorbis_VorbisFile;
    lime_media_codecs_vorbis_VorbisFile.__name__ = ["lime", "media", "codecs", "vorbis", "VorbisFile"];
    lime_media_codecs_vorbis_VorbisFile.fromBytes = function(bytes) {
        return null
    };
    lime_media_codecs_vorbis_VorbisFile.fromFile = function(path) {
        return null
    };
    lime_media_codecs_vorbis_VorbisFile.prototype = {
        bitstream: null,
        handle: null,
        bitrate: function(bitstream) {
            if (bitstream == null) {
                bitstream = -1
            }
            return 0
        },
        bitrateInstant: function() {
            return 0
        },
        clear: function() {},
        comment: function(bitstream) {
            if (bitstream == null) {
                bitstream = -1
            }
            return null
        },
        crosslap: function(other) {
            return 0
        },
        info: function(bitstream) {
            if (bitstream == null) {
                bitstream = -1
            }
            return null
        },
        pcmSeek: function(pos) {
            return 0
        },
        pcmSeekLap: function(pos) {
            return 0
        },
        pcmSeekPage: function(pos) {
            return 0
        },
        pcmSeekPageLap: function(pos) {
            return 0
        },
        pcmTell: function() {
            var x = new haxe__$Int64__$_$_$Int64(0, 0);
            return x
        },
        pcmTotal: function(bitstream) {
            if (bitstream == null) {
                bitstream = -1
            }
            var x = new haxe__$Int64__$_$_$Int64(0, 0);
            return x
        },
        rawSeek: function(pos) {
            return 0
        },
        rawSeekLap: function(pos) {
            return 0
        },
        rawTell: function() {
            var x = new haxe__$Int64__$_$_$Int64(0, 0);
            return x
        },
        rawTotal: function(bitstream) {
            if (bitstream == null) {
                bitstream = -1
            }
            var x = new haxe__$Int64__$_$_$Int64(0, 0);
            return x
        },
        read: function(buffer, position, length, bigEndianPacking, wordSize, signed) {
            if (signed == null) {
                signed = true
            }
            if (wordSize == null) {
                wordSize = 2
            }
            if (bigEndianPacking == null) {
                bigEndianPacking = false
            }
            if (length == null) {
                length = 4096
            }
            return 0
        },
        readFloat: function(pcmChannels, samples) {
            return 0
        },
        seekable: function() {
            return false
        },
        serialNumber: function(bitstream) {
            if (bitstream == null) {
                bitstream = -1
            }
            return 0
        },
        streams: function() {
            return 0
        },
        timeSeek: function(s) {
            return 0
        },
        timeSeekLap: function(s) {
            return 0
        },
        timeSeekPage: function(s) {
            return 0
        },
        timeSeekPageLap: function(s) {
            return 0
        },
        timeTell: function() {
            return 0
        },
        timeTotal: function(bitstream) {
            if (bitstream == null) {
                bitstream = -1
            }
            return 0
        },
        __class__: lime_media_codecs_vorbis_VorbisFile
    };
    var lime_media_codecs_vorbis_VorbisInfo = function() {};
    $hxClasses["lime.media.codecs.vorbis.VorbisInfo"] = lime_media_codecs_vorbis_VorbisInfo;
    lime_media_codecs_vorbis_VorbisInfo.__name__ = ["lime", "media", "codecs", "vorbis", "VorbisInfo"];
    lime_media_codecs_vorbis_VorbisInfo.prototype = {
        bitrateLower: null,
        bitrateNominal: null,
        bitrateUpper: null,
        channels: null,
        rate: null,
        version: null,
        __class__: lime_media_codecs_vorbis_VorbisInfo
    };
    var lime_media_openal_AL = function() {};
    $hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
    lime_media_openal_AL.__name__ = ["lime", "media", "openal", "AL"];
    lime_media_openal_AL.bufferData = function(buffer, format, data, size, freq) {};
    lime_media_openal_AL.buffer3f = function(buffer, param, value1, value2, value3) {};
    lime_media_openal_AL.buffer3i = function(buffer, param, value1, value2, value3) {};
    lime_media_openal_AL.bufferf = function(buffer, param, value) {};
    lime_media_openal_AL.bufferfv = function(buffer, param, values) {};
    lime_media_openal_AL.bufferi = function(buffer, param, value) {};
    lime_media_openal_AL.bufferiv = function(buffer, param, values) {};
    lime_media_openal_AL.createBuffer = function() {
        return null
    };
    lime_media_openal_AL.createSource = function() {
        return null
    };
    lime_media_openal_AL.deleteBuffer = function(buffer) {};
    lime_media_openal_AL.deleteBuffers = function(buffers) {};
    lime_media_openal_AL.deleteSource = function(source) {};
    lime_media_openal_AL.deleteSources = function(sources) {};
    lime_media_openal_AL.disable = function(capability) {};
    lime_media_openal_AL.distanceModel = function(distanceModel) {};
    lime_media_openal_AL.dopplerFactor = function(value) {};
    lime_media_openal_AL.dopplerVelocity = function(value) {};
    lime_media_openal_AL.enable = function(capability) {};
    lime_media_openal_AL.genSource = function() {
        return null
    };
    lime_media_openal_AL.genSources = function(n) {
        return null
    };
    lime_media_openal_AL.genBuffer = function() {
        return null
    };
    lime_media_openal_AL.genBuffers = function(n) {
        return null
    };
    lime_media_openal_AL.getBoolean = function(param) {
        return false
    };
    lime_media_openal_AL.getBooleanv = function(param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getBuffer3f = function(buffer, param) {
        return null
    };
    lime_media_openal_AL.getBuffer3i = function(buffer, param) {
        return null
    };
    lime_media_openal_AL.getBufferf = function(buffer, param) {
        return 0
    };
    lime_media_openal_AL.getBufferfv = function(buffer, param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getBufferi = function(buffer, param) {
        return 0
    };
    lime_media_openal_AL.getBufferiv = function(buffer, param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getDouble = function(param) {
        return 0
    };
    lime_media_openal_AL.getDoublev = function(param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getEnumValue = function(ename) {
        return 0
    };
    lime_media_openal_AL.getError = function() {
        return 0
    };
    lime_media_openal_AL.getErrorString = function() {
        var _g = lime_media_openal_AL.getError();
        switch (_g) {
            case 40961:
                return "INVALID_NAME: Invalid parameter name";
            case 40962:
                return "INVALID_ENUM: Invalid enum value";
            case 40963:
                return "INVALID_VALUE: Invalid parameter value";
            case 40964:
                return "INVALID_OPERATION: Illegal operation or call";
            case 40965:
                return "OUT_OF_MEMORY: OpenAL has run out of memory";
            default:
                return ""
        }
    };
    lime_media_openal_AL.getFloat = function(param) {
        return 0
    };
    lime_media_openal_AL.getFloatv = function(param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getInteger = function(param) {
        return 0
    };
    lime_media_openal_AL.getIntegerv = function(param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getListener3f = function(param) {
        return null
    };
    lime_media_openal_AL.getListener3i = function(param) {
        return null
    };
    lime_media_openal_AL.getListenerf = function(param) {
        return 0
    };
    lime_media_openal_AL.getListenerfv = function(param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getListeneri = function(param) {
        return 0
    };
    lime_media_openal_AL.getListeneriv = function(param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getParameter = function(param) {
        return null
    };
    lime_media_openal_AL.getProcAddress = function(fname) {
        return null
    };
    lime_media_openal_AL.getSource3f = function(source, param) {
        return null
    };
    lime_media_openal_AL.getSourcef = function(source, param) {
        return 0
    };
    lime_media_openal_AL.getSource3i = function(source, param) {
        return null
    };
    lime_media_openal_AL.getSourcefv = function(source, param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getSourcei = function(source, param) {
        return 0
    };
    lime_media_openal_AL.getSourceiv = function(source, param, count) {
        if (count == null) {
            count = 1
        }
        return null
    };
    lime_media_openal_AL.getString = function(param) {
        return null
    };
    lime_media_openal_AL.isBuffer = function(buffer) {
        return false
    };
    lime_media_openal_AL.isEnabled = function(capability) {
        return false
    };
    lime_media_openal_AL.isExtensionPresent = function(extname) {
        return false
    };
    lime_media_openal_AL.isSource = function(source) {
        return false
    };
    lime_media_openal_AL.listener3f = function(param, value1, value2, value3) {};
    lime_media_openal_AL.listener3i = function(param, value1, value2, value3) {};
    lime_media_openal_AL.listenerf = function(param, value) {};
    lime_media_openal_AL.listenerfv = function(param, values) {};
    lime_media_openal_AL.listeneri = function(param, value) {};
    lime_media_openal_AL.listeneriv = function(param, values) {};
    lime_media_openal_AL.source3f = function(source, param, value1, value2, value3) {};
    lime_media_openal_AL.source3i = function(source, param, value1, value2, value3) {};
    lime_media_openal_AL.sourcef = function(source, param, value) {};
    lime_media_openal_AL.sourcefv = function(source, param, values) {};
    lime_media_openal_AL.sourcei = function(source, param, value) {};
    lime_media_openal_AL.sourceiv = function(source, param, values) {};
    lime_media_openal_AL.sourcePlay = function(source) {};
    lime_media_openal_AL.sourcePlayv = function(sources) {};
    lime_media_openal_AL.sourceStop = function(source) {};
    lime_media_openal_AL.sourceStopv = function(sources) {};
    lime_media_openal_AL.sourceRewind = function(source) {};
    lime_media_openal_AL.sourceRewindv = function(sources) {};
    lime_media_openal_AL.sourcePause = function(source) {};
    lime_media_openal_AL.sourcePausev = function(sources) {};
    lime_media_openal_AL.sourceQueueBuffer = function(source, buffer) {};
    lime_media_openal_AL.sourceQueueBuffers = function(source, nb, buffers) {};
    lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
        return 0
    };
    lime_media_openal_AL.sourceUnqueueBuffers = function(source, nb) {
        return null
    };
    lime_media_openal_AL.speedOfSound = function(value) {};
    var lime_media_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
    $hxClasses["lime.media.openal._ALBuffer.ALBuffer_Impl_"] = lime_media_openal__$ALBuffer_ALBuffer_$Impl_$;
    lime_media_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime", "media", "openal", "_ALBuffer", "ALBuffer_Impl_"];
    lime_media_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
        return handle
    };
    var lime_media_openal_ALC = function() {};
    $hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
    lime_media_openal_ALC.__name__ = ["lime", "media", "openal", "ALC"];
    lime_media_openal_ALC.closeDevice = function(device) {
        return false
    };
    lime_media_openal_ALC.createContext = function(device, attrlist) {
        return null
    };
    lime_media_openal_ALC.destroyContext = function(context) {};
    lime_media_openal_ALC.getContextsDevice = function(context) {
        return null
    };
    lime_media_openal_ALC.getCurrentContext = function() {
        return null
    };
    lime_media_openal_ALC.getError = function(device) {
        return 0
    };
    lime_media_openal_ALC.getErrorString = function(device) {
        var _g = lime_media_openal_ALC.getError(device);
        switch (_g) {
            case 40961:
                return "INVALID_DEVICE: Invalid device (or no device?)";
            case 40962:
                return "INVALID_CONTEXT: Invalid context (or no context?)";
            case 40963:
                return "INVALID_ENUM: Invalid enum value";
            case 40964:
                return "INVALID_VALUE: Invalid param value";
            case 40965:
                return "OUT_OF_MEMORY: OpenAL has run out of memory";
            default:
                return ""
        }
    };
    lime_media_openal_ALC.getIntegerv = function(device, param, size) {
        return null
    };
    lime_media_openal_ALC.getString = function(device, param) {
        return null
    };
    lime_media_openal_ALC.makeContextCurrent = function(context) {
        return false
    };
    lime_media_openal_ALC.openDevice = function(deviceName) {
        return null
    };
    lime_media_openal_ALC.pauseDevice = function(device) {};
    lime_media_openal_ALC.processContext = function(context) {};
    lime_media_openal_ALC.resumeDevice = function(device) {};
    lime_media_openal_ALC.suspendContext = function(context) {};
    var lime_media_openal__$ALContext_ALContext_$Impl_$ = {};
    $hxClasses["lime.media.openal._ALContext.ALContext_Impl_"] = lime_media_openal__$ALContext_ALContext_$Impl_$;
    lime_media_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime", "media", "openal", "_ALContext", "ALContext_Impl_"];
    lime_media_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
        return handle
    };
    var lime_media_openal__$ALDevice_ALDevice_$Impl_$ = {};
    $hxClasses["lime.media.openal._ALDevice.ALDevice_Impl_"] = lime_media_openal__$ALDevice_ALDevice_$Impl_$;
    lime_media_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime", "media", "openal", "_ALDevice", "ALDevice_Impl_"];
    lime_media_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
        return handle
    };
    var lime_media_openal__$ALSource_ALSource_$Impl_$ = {};
    $hxClasses["lime.media.openal._ALSource.ALSource_Impl_"] = lime_media_openal__$ALSource_ALSource_$Impl_$;
    lime_media_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime", "media", "openal", "_ALSource", "ALSource_Impl_"];
    lime_media_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
        return handle
    };
    var lime_net__$IHTTPRequest = function() {};
    $hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
    lime_net__$IHTTPRequest.__name__ = ["lime", "net", "_IHTTPRequest"];
    lime_net__$IHTTPRequest.prototype = {
        contentType: null,
        data: null,
        enableResponseHeaders: null,
        followRedirects: null,
        formData: null,
        headers: null,
        method: null,
        responseHeaders: null,
        responseStatus: null,
        timeout: null,
        uri: null,
        userAgent: null,
        cancel: null,
        __class__: lime_net__$IHTTPRequest
    };
    var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
        this.uri = uri;
        this.contentType = "application/x-www-form-urlencoded";
        this.followRedirects = true;
        this.formData = new haxe_ds_StringMap();
        this.headers = [];
        this.method = "GET";
        this.timeout = 30000;
        this.backend = new lime__$backend_html5_HTML5HTTPRequest();
        this.backend.init(this)
    };
    $hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
    lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime", "net", "_HTTPRequest", "AbstractHTTPRequest"];
    lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
    lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
        contentType: null,
        data: null,
        enableResponseHeaders: null,
        followRedirects: null,
        formData: null,
        headers: null,
        method: null,
        responseData: null,
        responseHeaders: null,
        responseStatus: null,
        timeout: null,
        uri: null,
        userAgent: null,
        backend: null,
        cancel: function() {
            this.backend.cancel()
        },
        load: function(uri) {
            return null
        },
        __class__: lime_net__$HTTPRequest_AbstractHTTPRequest
    };
    var lime_net_HTTPRequest = function(uri) {
        lime_net__$HTTPRequest_AbstractHTTPRequest.call(this, uri)
    };
    $hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
    lime_net_HTTPRequest.__name__ = ["lime", "net", "HTTPRequest"];
    lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
    lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype, {
        __class__: lime_net_HTTPRequest
    });
    var lime_net__$HTTPRequest_$Bytes = function(uri) {
        lime_net__$HTTPRequest_AbstractHTTPRequest.call(this, uri)
    };
    $hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
    lime_net__$HTTPRequest_$Bytes.__name__ = ["lime", "net", "_HTTPRequest_Bytes"];
    lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
    lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype, {
        fromBytes: function(bytes) {
            return bytes
        },
        load: function(uri) {
            var _g = this;
            if (uri != null) {
                this.uri = uri
            }
            var promise = new lime_app_Promise();
            var future = this.backend.loadData(this.uri);
            future.onProgress($bind(promise, promise.progress));
            future.onError($bind(promise, promise.error));
            future.onComplete(function(bytes) {
                _g.responseData = _g.fromBytes(bytes);
                promise.complete(_g.responseData)
            });
            return promise.future
        },
        __class__: lime_net__$HTTPRequest_$Bytes
    });
    var lime_net__$HTTPRequest_$String = function(uri) {
        lime_net__$HTTPRequest_AbstractHTTPRequest.call(this, uri)
    };
    $hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
    lime_net__$HTTPRequest_$String.__name__ = ["lime", "net", "_HTTPRequest_String"];
    lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
    lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype, {
        load: function(uri) {
            var _g = this;
            if (uri != null) {
                this.uri = uri
            }
            var promise = new lime_app_Promise();
            var future = this.backend.loadText(this.uri);
            future.onProgress($bind(promise, promise.progress));
            future.onError($bind(promise, promise.error));
            future.onComplete(function(text) {
                _g.responseData = text;
                promise.complete(_g.responseData)
            });
            return promise.future
        },
        __class__: lime_net__$HTTPRequest_$String
    });
    var lime_net_HTTPRequestHeader = function(name, value) {
        if (value == null) {
            value = ""
        }
        this.name = name;
        this.value = value
    };
    $hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
    lime_net_HTTPRequestHeader.__name__ = ["lime", "net", "HTTPRequestHeader"];
    lime_net_HTTPRequestHeader.prototype = {
        name: null,
        value: null,
        __class__: lime_net_HTTPRequestHeader
    };
    var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
        lime_net__$HTTPRequest_$Bytes.call(this, uri)
    };
    $hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
    lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = ["lime", "net", "_HTTPRequest_lime_text_Font"];
    lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
    lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype, {
        fromBytes: function(bytes) {
            return lime_text_Font.fromBytes(bytes)
        },
        __class__: lime_net__$HTTPRequest_$lime_$text_$Font
    });
    var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
        lime_net__$HTTPRequest_$Bytes.call(this, uri)
    };
    $hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
    lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime", "net", "_HTTPRequest_lime_utils_Bytes"];
    lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
    lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype, {
        fromBytes: function(bytes) {
            return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes)
        },
        __class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
    });
    var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
        lime_net__$HTTPRequest_$Bytes.call(this, uri)
    };
    $hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
    lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime", "net", "_HTTPRequest_openfl_utils_ByteArray"];
    lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
    lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype, {
        fromBytes: function(bytes) {
            return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes)
        },
        __class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
    });
    var lime_system_CFFI = function() {};
    $hxClasses["lime.system.CFFI"] = lime_system_CFFI;
    lime_system_CFFI.__name__ = ["lime", "system", "CFFI"];
    lime_system_CFFI.load = function(library, method, args, lazy) {
        if (lazy == null) {
            lazy = false
        }
        if (args == null) {
            args = 0
        }
        if (!lime_system_CFFI.enabled) {
            return Reflect.makeVarArgs(function(__) {
                return {}
            })
        }
        var result = null;
        return result
    };
    lime_system_CFFI.__findHaxelib = function(library) {
        return ""
    };
    lime_system_CFFI.__loaderTrace = function(message) {};
    lime_system_CFFI.__sysName = function() {
        return null
    };
    lime_system_CFFI.__tryLoad = function(name, library, func, args) {
        return null
    };
    var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
    $hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime", "system", "_CFFIPointer", "CFFIPointer_Impl_"];
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
        return handle
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
        if (this1 != null) {}
        return 0
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b)
    };
    var lime_system_Clipboard = function() {};
    $hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
    lime_system_Clipboard.__name__ = ["lime", "system", "Clipboard"];
    lime_system_Clipboard.__properties__ = {
        set_text: "set_text",
        get_text: "get_text"
    };
    lime_system_Clipboard.get_text = function() {
        return lime_system_Clipboard._text
    };
    lime_system_Clipboard.set_text = function(value) {
        lime_system_Clipboard._text = value;
        var $window = lime_app_Application.current.__windows[0];
        if ($window != null) {
            $window.backend.setClipboard(value)
        }
        return value
    };
    var lime_system_Display = function() {};
    $hxClasses["lime.system.Display"] = lime_system_Display;
    lime_system_Display.__name__ = ["lime", "system", "Display"];
    lime_system_Display.prototype = {
        bounds: null,
        currentMode: null,
        id: null,
        dpi: null,
        name: null,
        supportedModes: null,
        __class__: lime_system_Display
    };
    var lime_system_DisplayMode = function(width, height, refreshRate, pixelFormat) {
        this.width = width;
        this.height = height;
        this.refreshRate = refreshRate;
        this.pixelFormat = pixelFormat
    };
    $hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
    lime_system_DisplayMode.__name__ = ["lime", "system", "DisplayMode"];
    lime_system_DisplayMode.prototype = {
        height: null,
        pixelFormat: null,
        refreshRate: null,
        width: null,
        __class__: lime_system_DisplayMode
    };
    var lime_system_Endian = $hxClasses["lime.system.Endian"] = {
        __ename__: ["lime", "system", "Endian"],
        __constructs__: ["LITTLE_ENDIAN", "BIG_ENDIAN"]
    };
    lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN", 0];
    lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
    lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
    lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN", 1];
    lime_system_Endian.BIG_ENDIAN.toString = $estr;
    lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
    var lime_system_System = function() {};
    $hxClasses["lime.system.System"] = lime_system_System;
    lime_system_System.__name__ = ["lime", "system", "System"];
    lime_system_System.__properties__ = {
        get_userDirectory: "get_userDirectory",
        get_numDisplays: "get_numDisplays",
        get_fontsDirectory: "get_fontsDirectory",
        get_endianness: "get_endianness",
        get_documentsDirectory: "get_documentsDirectory",
        get_desktopDirectory: "get_desktopDirectory",
        get_applicationStorageDirectory: "get_applicationStorageDirectory",
        get_applicationDirectory: "get_applicationDirectory",
        set_allowScreenTimeout: "set_allowScreenTimeout",
        get_allowScreenTimeout: "get_allowScreenTimeout"
    };
    lime_system_System.embed = $hx_exports.lime.embed = function(projectName, element, width, height, windowConfig) {
        if (lime_system_System.__applicationEntryPoint == null || lime_system_System.__applicationConfig == null) {
            return
        }
        if (lime_system_System.__applicationEntryPoint.exists(projectName)) {
            var htmlElement = null;
            if (typeof(element) == "string") {
                htmlElement = window.document.getElementById(element)
            } else {
                if (element == null) {
                    htmlElement = window.document.createElement("div")
                } else {
                    htmlElement = element
                }
            }
            if (htmlElement == null) {
                window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
                return
            }
            if (width == null) {
                width = 0
            }
            if (height == null) {
                height = 0
            }
            var defaultConfig = lime_system_System.__applicationConfig.get(projectName);
            var config = {};
            lime_system_System.__copyMissingFields(config, defaultConfig);
            if (windowConfig != null) {
                config.windows = [];
                if ((windowConfig instanceof Array) && windowConfig.__enum__ == null) {
                    config.windows = windowConfig
                } else {
                    config.windows[0] = windowConfig
                }
                var _g1 = 0;
                var _g = config.windows.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    if (i < defaultConfig.windows.length) {
                        lime_system_System.__copyMissingFields(config.windows[i], defaultConfig.windows[i])
                    }
                    lime_system_System.__copyMissingFields(config.windows[i].parameters, defaultConfig.windows[i].parameters);
                    if (typeof(windowConfig.background) == "string") {
                        var background = StringTools.replace(Std.string(windowConfig.background), "#", "");
                        if (background.indexOf("0x") > -1) {
                            windowConfig.background = Std.parseInt(background)
                        } else {
                            windowConfig.background = Std.parseInt("0x" + background)
                        }
                    }
                }
            }
            if (Reflect.field(config.windows[0], "rootPath")) {
                config.rootPath = Reflect.field(config.windows[0], "rootPath");
                Reflect.deleteField(config.windows[0], "rootPath")
            }
            config.windows[0].element = htmlElement;
            config.windows[0].width = width;
            config.windows[0].height = height;
            lime_system_System.__applicationEntryPoint.get(projectName)(config)
        }
    };
    lime_system_System.exit = function(code) {};
    lime_system_System.getDisplay = function(id) {
        if (id == 0) {
            var display = new lime_system_Display();
            display.id = 0;
            display.name = "Generic Display";
            display.dpi = 96 * window.devicePixelRatio;
            display.currentMode = new lime_system_DisplayMode(window.screen.width, window.screen.height, 60, 1);
            display.supportedModes = [display.currentMode];
            display.bounds = new lime_math_Rectangle(0, 0, display.currentMode.width, display.currentMode.height);
            return display
        }
        return null
    };
    lime_system_System.getTimer = function() {
        return new Date().getTime()
    };
    lime_system_System.load = function(library, method, args, lazy) {
        if (lazy == null) {
            lazy = false
        }
        if (args == null) {
            args = 0
        }
        return lime_system_CFFI.load(library, method, args, lazy)
    };
    lime_system_System.openFile = function(path) {
        if (path != null) {
            window.open(path, "_blank")
        }
    };
    lime_system_System.openURL = function(url, target) {
        if (target == null) {
            target = "_blank"
        }
        if (url != null) {
            window.open(url, target)
        }
    };
    lime_system_System.__copyMissingFields = function(target, source) {
        if (source == null || target == null) {
            return
        }
        var _g = 0;
        var _g1 = Reflect.fields(source);
        while (_g < _g1.length) {
            var field = _g1[_g];
            ++_g;
            if (!Object.prototype.hasOwnProperty.call(target, field)) {
                Reflect.setField(target, field, Reflect.field(source, field))
            }
        }
    };
    lime_system_System.__getDirectory = function(type) {
        return null
    };
    lime_system_System.__registerEntryPoint = function(projectName, entryPoint, config) {
        if (lime_system_System.__applicationConfig == null) {
            lime_system_System.__applicationConfig = new haxe_ds_StringMap()
        }
        if (lime_system_System.__applicationEntryPoint == null) {
            lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap()
        }
        lime_system_System.__applicationEntryPoint.set(projectName, entryPoint);
        entryPoint;
        lime_system_System.__applicationConfig.set(projectName, config);
        config
    };
    lime_system_System.get_allowScreenTimeout = function() {
        return true
    };
    lime_system_System.set_allowScreenTimeout = function(value) {
        return true
    };
    lime_system_System.get_applicationDirectory = function() {
        return lime_system_System.__getDirectory(0)
    };
    lime_system_System.get_applicationStorageDirectory = function() {
        return lime_system_System.__getDirectory(1)
    };
    lime_system_System.get_desktopDirectory = function() {
        return lime_system_System.__getDirectory(2)
    };
    lime_system_System.get_documentsDirectory = function() {
        return lime_system_System.__getDirectory(3)
    };
    lime_system_System.get_fontsDirectory = function() {
        return lime_system_System.__getDirectory(4)
    };
    lime_system_System.get_numDisplays = function() {
        return 1
    };
    lime_system_System.get_userDirectory = function() {
        return lime_system_System.__getDirectory(5)
    };
    lime_system_System.get_endianness = function() {
        return lime_system_Endian.LITTLE_ENDIAN
    };
    var lime_system_ThreadPool = function(minThreads, maxThreads) {
        if (maxThreads == null) {
            maxThreads = 1
        }
        if (minThreads == null) {
            minThreads = 0
        }
        this.onProgress = new lime_app__$Event_$Dynamic_$Void();
        this.onError = new lime_app__$Event_$Dynamic_$Void();
        this.onComplete = new lime_app__$Event_$Dynamic_$Void();
        this.doWork = new lime_app__$Event_$Dynamic_$Void();
        this.minThreads = minThreads;
        this.maxThreads = maxThreads;
        this.currentThreads = 0
    };
    $hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
    lime_system_ThreadPool.__name__ = ["lime", "system", "ThreadPool"];
    lime_system_ThreadPool.prototype = {
        currentThreads: null,
        doWork: null,
        maxThreads: null,
        minThreads: null,
        onComplete: null,
        onError: null,
        onProgress: null,
        queue: function(state) {
            this.doWork.dispatch(state)
        },
        sendComplete: function(state) {
            this.onComplete.dispatch(state)
        },
        sendError: function(state) {
            this.onError.dispatch(state)
        },
        sendProgress: function(state) {
            this.onProgress.dispatch(state)
        },
        __class__: lime_system_ThreadPool
    };
    var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = {
        __ename__: ["lime", "system", "_ThreadPool", "ThreadPoolMessageType"],
        __constructs__: ["COMPLETE", "ERROR", "EXIT", "PROGRESS", "WORK"]
    };
    lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE", 0];
    lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR", 1];
    lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT", 2];
    lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS", 3];
    lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK", 4];
    lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    var lime_system__$ThreadPool_ThreadPoolMessage = function(type, state) {
        this.type = type;
        this.state = state
    };
    $hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
    lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime", "system", "_ThreadPool", "ThreadPoolMessage"];
    lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
        state: null,
        type: null,
        __class__: lime_system__$ThreadPool_ThreadPoolMessage
    };
    var lime_text_Font = function(name) {
        if (name != null) {
            this.name = name
        }
        if (this.__fontPath != null) {
            this.__fromFile(this.__fontPath)
        }
    };
    $hxClasses["lime.text.Font"] = lime_text_Font;
    lime_text_Font.__name__ = ["lime", "text", "Font"];
    lime_text_Font.fromBytes = function(bytes) {
        if (bytes == null) {
            return null
        }
        var font = new lime_text_Font();
        font.__fromBytes(bytes);
        return font
    };
    lime_text_Font.fromFile = function(path) {
        if (path == null) {
            return null
        }
        var font = new lime_text_Font();
        font.__fromFile(path);
        return font
    };
    lime_text_Font.loadFromBytes = function(bytes) {
        return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes))
    };
    lime_text_Font.loadFromFile = function(path) {
        var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
        return request.load(path).then(function(font) {
            if (font != null) {
                return lime_app_Future.withValue(font)
            } else {
                return lime_app_Future.withError("")
            }
        })
    };
    lime_text_Font.loadFromName = function(path) {
        var font = new lime_text_Font();
        return font.__loadFromName(path)
    };
    lime_text_Font.__makeLoaderNode = function(fontFamily) {
        var node = window.document.createElement("span");
        node.innerHTML = "giItT1WQy@!-/#";
        var style = node.style;
        style.position = "absolute";
        style.left = "-10000px";
        style.top = "-10000px";
        style.fontSize = "300px";
        style.fontFamily = fontFamily;
        style.fontVariant = "normal";
        style.fontStyle = "normal";
        style.fontWeight = "normal";
        style.letterSpacing = "0";
        window.document.body.appendChild(node);
        return node
    };
    lime_text_Font.prototype = {
        ascender: null,
        descender: null,
        height: null,
        name: null,
        numGlyphs: null,
        src: null,
        underlinePosition: null,
        underlineThickness: null,
        unitsPerEM: null,
        __fontPath: null,
        decompose: function() {
            return null
        },
        getGlyph: function(character) {
            return -1
        },
        getGlyphs: function(characters) {
            if (characters == null) {
                characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. "
            }
            return null
        },
        getGlyphMetrics: function(glyph) {
            return null
        },
        renderGlyph: function(glyph, fontSize) {
            return null
        },
        renderGlyphs: function(glyphs, fontSize) {
            return null
        },
        __fromBytes: function(bytes) {
            this.__fontPath = null
        },
        __fromFile: function(path) {
            this.__fontPath = path
        },
        __loadFromName: function(name) {
            var _g = this;
            var promise = new lime_app_Promise();
            this.name = name;
            var font = name;
            var ua = window.navigator.userAgent.toLowerCase();
            if (!(ua.indexOf(" safari/") >= 0 && ua.indexOf(" chrome/") < 0) && (window.document.fonts && ($_ = window.document.fonts, $bind($_, $_.load)))) {
                window.document.fonts.load("1em '" + font + "'").then(function(_) {
                    promise.complete(_g)
                })
            } else {
                var node1 = lime_text_Font.__makeLoaderNode("sans-serif");
                var node2 = lime_text_Font.__makeLoaderNode("serif");
                var width1 = node1.offsetWidth;
                var width2 = node2.offsetWidth;
                node1.style.fontFamily = "'" + name + "', sans-serif";
                node2.style.fontFamily = "'" + name + "', serif";
                var interval = null;
                var found = false;
                var checkFont = function() {
                    if (node1.offsetWidth != width1 || node2.offsetWidth != width2) {
                        if (!found) {
                            found = true;
                            return false
                        }
                        if (interval != null) {
                            window.clearInterval(interval)
                        }
                        node1.parentNode.removeChild(node1);
                        node2.parentNode.removeChild(node2);
                        node1 = null;
                        node2 = null;
                        promise.complete(_g);
                        return true
                    }
                    return false
                };
                if (!checkFont()) {
                    interval = window.setInterval(checkFont, 50)
                }
            }
            return promise.future
        },
        __setSize: function(size) {},
        get_ascender: function() {
            return 0
        },
        get_descender: function() {
            return 0
        },
        get_height: function() {
            return 0
        },
        get_numGlyphs: function() {
            return 0
        },
        get_underlinePosition: function() {
            return 0
        },
        get_underlineThickness: function() {
            return 0
        },
        get_unitsPerEM: function() {
            return 0
        },
        __class__: lime_text_Font,
        __properties__: {
            get_unitsPerEM: "get_unitsPerEM",
            get_underlineThickness: "get_underlineThickness",
            get_underlinePosition: "get_underlinePosition",
            get_numGlyphs: "get_numGlyphs",
            get_height: "get_height",
            get_descender: "get_descender",
            get_ascender: "get_ascender"
        }
    };
    var lime_text__$Glyph_Glyph_$Impl_$ = {};
    $hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
    lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime", "text", "_Glyph", "Glyph_Impl_"];
    lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
        return i
    };
    var lime_text_GlyphMetrics = function() {};
    $hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
    lime_text_GlyphMetrics.__name__ = ["lime", "text", "GlyphMetrics"];
    lime_text_GlyphMetrics.prototype = {
        advance: null,
        height: null,
        horizontalBearing: null,
        verticalBearing: null,
        __class__: lime_text_GlyphMetrics
    };
    var lime_text_GlyphPosition = function(glyph, advance, offset) {
        this.glyph = glyph;
        this.advance = advance;
        if (offset != null) {
            this.offset = offset
        } else {
            this.offset = new lime_math_Vector2()
        }
    };
    $hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
    lime_text_GlyphPosition.__name__ = ["lime", "text", "GlyphPosition"];
    lime_text_GlyphPosition.prototype = {
        advance: null,
        glyph: null,
        offset: null,
        __class__: lime_text_GlyphPosition
    };
    var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
    $hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
    lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime", "text", "_TextDirection", "TextDirection_Impl_"];
    lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {
        get_vertical: "get_vertical",
        get_horizontal: "get_horizontal",
        get_forward: "get_forward",
        get_backward: "get_backward"
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
        this1 = this1 ^ 1
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
        switch (this1) {
            case 4:
                return "leftToRight";
            case 5:
                return "rightToLeft";
            case 6:
                return "topToBottom";
            case 7:
                return "bottomToTop";
            default:
                return ""
        }
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
        return (this1 & -3) == 5
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
        return (this1 & -3) == 4
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
        return (this1 & -2) == 4
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
        return (this1 & -2) == 6
    };
    var lime_text_TextLayout = function(text, font, size, direction, script, language) {
        if (language == null) {
            language = "en"
        }
        if (script == null) {
            script = "Zyyy"
        }
        if (direction == null) {
            direction = 4
        }
        if (size == null) {
            size = 12
        }
        if (text == null) {
            text = ""
        }
        this.set_text(text);
        this.set_font(font);
        this.set_size(size);
        this.__direction = direction;
        this.__script = script;
        this.__language = language;
        this.positions = [];
        this.__dirty = true
    };
    $hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
    lime_text_TextLayout.__name__ = ["lime", "text", "TextLayout"];
    lime_text_TextLayout.prototype = {
        font: null,
        glyphs: null,
        positions: null,
        size: null,
        text: null,
        __dirty: null,
        __buffer: null,
        __direction: null,
        __handle: null,
        __language: null,
        __script: null,
        __position: function() {
            this.positions = []
        },
        get_positions: function() {
            if (this.__dirty) {
                this.__dirty = false;
                this.__position()
            }
            return this.positions
        },
        get_direction: function() {
            return this.__direction
        },
        set_direction: function(value) {
            if (value == this.__direction) {
                return value
            }
            this.__direction = value;
            this.__dirty = true;
            return value
        },
        set_font: function(value) {
            if (value == this.font) {
                return value
            }
            this.font = value;
            this.__dirty = true;
            return value
        },
        get_glyphs: function() {
            var glyphs = [];
            var _g = 0;
            var _g1 = this.get_positions();
            while (_g < _g1.length) {
                var position = _g1[_g];
                ++_g;
                glyphs.push(position.glyph)
            }
            return glyphs
        },
        get_language: function() {
            return this.__language
        },
        set_language: function(value) {
            if (value == this.__language) {
                return value
            }
            this.__language = value;
            this.__dirty = true;
            return value
        },
        get_script: function() {
            return this.__script
        },
        set_script: function(value) {
            if (value == this.__script) {
                return value
            }
            this.__script = value;
            this.__dirty = true;
            return value
        },
        set_size: function(value) {
            if (value == this.size) {
                return value
            }
            this.size = value;
            this.__dirty = true;
            return value
        },
        set_text: function(value) {
            if (value == this.text) {
                return value
            }
            this.text = value;
            this.__dirty = true;
            return value
        },
        __class__: lime_text_TextLayout,
        __properties__: {
            set_text: "set_text",
            set_size: "set_size",
            set_script: "set_script",
            get_script: "get_script",
            get_positions: "get_positions",
            set_language: "set_language",
            get_language: "get_language",
            get_glyphs: "get_glyphs",
            set_font: "set_font",
            set_direction: "set_direction",
            get_direction: "get_direction"
        }
    };
    var lime_text__$TextScript_TextScript_$Impl_$ = {};
    $hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
    lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime", "text", "_TextScript", "TextScript_Impl_"];
    lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {
        get_rightToLeft: "get_rightToLeft"
    };
    lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
        switch (this1) {
            case "Hebr":
            case "Arab":
            case "Syrc":
            case "Thaa":
            case "Nkoo":
            case "Samr":
            case "Mand":
            case "Armi":
            case "Phnx":
            case "Lydi":
            case "Cprt":
            case "Khar":
            case "Sarb":
            case "Avst":
            case "Phli":
            case "Phlp":
            case "Orkh":
                return true;
            default:
                return false
        }
    };
    var lime_tools_helpers_StringHelper = function() {};
    $hxClasses["lime.tools.helpers.StringHelper"] = lime_tools_helpers_StringHelper;
    lime_tools_helpers_StringHelper.__name__ = ["lime", "tools", "helpers", "StringHelper"];
    lime_tools_helpers_StringHelper.base64Decode = function(base64) {
        base64 = StringTools.trim(base64);
        base64 = StringTools.replace(base64, "=", "");
        if (lime_tools_helpers_StringHelper.base64Encoder == null) {
            lime_tools_helpers_StringHelper.base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_tools_helpers_StringHelper.base64Chars))
        }
        var bytes = lime_tools_helpers_StringHelper.base64Encoder.decodeBytes(haxe_io_Bytes.ofString(base64));
        return bytes
    };
    lime_tools_helpers_StringHelper.base64Encode = function(bytes) {
        var extension;
        var _g = bytes.length % 3;
        switch (_g) {
            case 1:
                extension = "==";
                break;
            case 2:
                extension = "=";
                break;
            default:
                extension = ""
        }
        if (lime_tools_helpers_StringHelper.base64Encoder == null) {
            lime_tools_helpers_StringHelper.base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_tools_helpers_StringHelper.base64Chars))
        }
        return lime_tools_helpers_StringHelper.base64Encoder.encodeBytes(bytes).toString() + extension
    };
    lime_tools_helpers_StringHelper.formatArray = function(array) {
        var output = "[ ";
        var _g1 = 0;
        var _g = array.length;
        while (_g1 < _g) {
            var i = _g1++;
            output += Std.string(array[i]);
            if (i < array.length - 1) {
                output += ", "
            } else {
                output += " "
            }
        }
        output += "]";
        return output
    };
    lime_tools_helpers_StringHelper.formatEnum = function(value) {
        return Type.getEnumName(Type.getEnum(value)) + "." + Std.string(value)
    };
    lime_tools_helpers_StringHelper.formatUppercaseVariable = function(name) {
        var isAlpha = new EReg("[A-Z0-9]", "i");
        var variableName = "";
        var lastWasUpperCase = false;
        var lastWasAlpha = true;
        var _g1 = 0;
        var _g = name.length;
        while (_g1 < _g) {
            var i = _g1++;
            var $char = name.charAt(i);
            if (!isAlpha.match($char)) {
                variableName += "_";
                lastWasUpperCase = false;
                lastWasAlpha = false
            } else {
                if ($char == $char.toUpperCase() && i > 0) {
                    if (lastWasUpperCase) {
                        if (i == name.length - 1 || name.charAt(i + 1) == name.charAt(i + 1).toUpperCase()) {
                            variableName += $char
                        } else {
                            variableName += "_" + $char
                        }
                    } else {
                        if (lastWasAlpha) {
                            variableName += "_" + $char
                        } else {
                            variableName += $char
                        }
                    }
                    lastWasUpperCase = true
                } else {
                    variableName += $char.toUpperCase();
                    lastWasUpperCase = i == 0 && $char == $char.toUpperCase()
                }
                lastWasAlpha = true
            }
        }
        return variableName
    };
    lime_tools_helpers_StringHelper.generateHashCode = function(value) {
        var hash = 5381;
        var length = value.length;
        var _g1 = 0;
        var _g = value.length;
        while (_g1 < _g) {
            var i = _g1++;
            hash = (hash << 5) + hash + HxOverrides.cca(value, i)
        }
        return hash
    };
    lime_tools_helpers_StringHelper.generateUUID = function(length, radix, seed) {
        var chars = lime_tools_helpers_StringHelper.uuidChars.split("");
        if (radix == null || radix > chars.length) {
            radix = chars.length
        } else {
            if (radix < 2) {
                radix = 2
            }
        }
        if (seed == null) {
            seed = Math.floor(Math.random() * 2147483647)
        }
        var uuid = [];
        var seedValue = Math.round(Math.abs(seed));
        var _g = 0;
        while (_g < length) {
            var i = _g++;
            seedValue = seedValue * 16807 % 2147483647 | 0;
            uuid[i] = chars[0 | (seedValue / 2147483647 * radix | 0)]
        }
        return uuid.join("")
    };
    lime_tools_helpers_StringHelper.getFlatName = function(name) {
        var chars = name.toLowerCase();
        var flatName = "";
        var _g1 = 0;
        var _g = chars.length;
        while (_g1 < _g) {
            var i = _g1++;
            var code = HxOverrides.cca(chars, i);
            if (i > 0 && code >= HxOverrides.cca("0", 0) && code <= HxOverrides.cca("9", 0) || code >= HxOverrides.cca("a", 0) && code <= HxOverrides.cca("z", 0) || code == HxOverrides.cca("_", 0)) {
                flatName += chars.charAt(i)
            } else {
                flatName += "_"
            }
        }
        if (flatName == "") {
            flatName = "_"
        }
        if (HxOverrides.substr(flatName, 0, 1) == "_") {
            flatName = "file" + flatName
        }
        while (lime_tools_helpers_StringHelper.usedFlatNames.exists(flatName)) {
            var match = new EReg("(.*?)(\\d+)", "");
            if (match.match(flatName)) {
                flatName = match.matched(1) + (Std.parseInt(match.matched(2)) + 1)
            } else {
                flatName += "1"
            }
        }
        lime_tools_helpers_StringHelper.usedFlatNames.set(flatName, "1");
        return flatName
    };
    lime_tools_helpers_StringHelper.getUniqueID = function() {
        return StringTools.hex(lime_tools_helpers_StringHelper.seedNumber++, 8)
    };
    lime_tools_helpers_StringHelper.underline = function(string, character) {
        if (character == null) {
            character = "="
        }
        return string + "\n" + StringTools.lpad("", character, string.length)
    };
    var lime_ui_Gamepad = function(id) {
        this.onDisconnect = new lime_app__$Event_$Void_$Void();
        this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
        this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
        this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
        this.id = id;
        this.connected = true
    };
    $hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
    lime_ui_Gamepad.__name__ = ["lime", "ui", "Gamepad"];
    lime_ui_Gamepad.addMappings = function(mappings) {};
    lime_ui_Gamepad.__connect = function(id) {
        if (!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
            var gamepad = new lime_ui_Gamepad(id);
            lime_ui_Gamepad.devices.h[id] = gamepad;
            lime_ui_Gamepad.onConnect.dispatch(gamepad)
        }
    };
    lime_ui_Gamepad.__disconnect = function(id) {
        var gamepad = lime_ui_Gamepad.devices.h[id];
        if (gamepad != null) {
            gamepad.connected = false
        }
        lime_ui_Gamepad.devices.remove(id);
        if (gamepad != null) {
            gamepad.onDisconnect.dispatch()
        }
    };
    lime_ui_Gamepad.prototype = {
        connected: null,
        id: null,
        onAxisMove: null,
        onButtonDown: null,
        onButtonUp: null,
        onDisconnect: null,
        get_guid: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id
        },
        get_name: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id
        },
        __class__: lime_ui_Gamepad,
        __properties__: {
            get_name: "get_name",
            get_guid: "get_guid"
        }
    };
    var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
    $hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime", "ui", "_GamepadAxis", "GamepadAxis_Impl_"];
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
        switch (this1) {
            case 0:
                return "LEFT_X";
            case 1:
                return "LEFT_Y";
            case 2:
                return "RIGHT_X";
            case 3:
                return "RIGHT_Y";
            case 4:
                return "TRIGGER_LEFT";
            case 5:
                return "TRIGGER_RIGHT";
            default:
                return "UNKNOWN (" + this1 + ")"
        }
    };
    var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
    $hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime", "ui", "_GamepadButton", "GamepadButton_Impl_"];
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
        switch (this1) {
            case 0:
                return "A";
            case 1:
                return "B";
            case 2:
                return "X";
            case 3:
                return "Y";
            case 4:
                return "BACK";
            case 5:
                return "GUIDE";
            case 6:
                return "START";
            case 7:
                return "LEFT_STICK";
            case 8:
                return "RIGHT_STICK";
            case 9:
                return "LEFT_SHOULDER";
            case 10:
                return "RIGHT_SHOULDER";
            case 11:
                return "DPAD_UP";
            case 12:
                return "DPAD_DOWN";
            case 13:
                return "DPAD_LEFT";
            case 14:
                return "DPAD_RIGHT";
            default:
                return "UNKNOWN (" + this1 + ")"
        }
    };
    var lime_ui_Joystick = function(id) {
        this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
        this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
        this.onDisconnect = new lime_app__$Event_$Void_$Void();
        this.onButtonUp = new lime_app__$Event_$Int_$Void();
        this.onButtonDown = new lime_app__$Event_$Int_$Void();
        this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
        this.id = id;
        this.connected = true
    };
    $hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
    lime_ui_Joystick.__name__ = ["lime", "ui", "Joystick"];
    lime_ui_Joystick.__connect = function(id) {
        if (!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
            var joystick = new lime_ui_Joystick(id);
            lime_ui_Joystick.devices.h[id] = joystick;
            lime_ui_Joystick.onConnect.dispatch(joystick)
        }
    };
    lime_ui_Joystick.__disconnect = function(id) {
        var joystick = lime_ui_Joystick.devices.h[id];
        if (joystick != null) {
            joystick.connected = false
        }
        lime_ui_Joystick.devices.remove(id);
        if (joystick != null) {
            joystick.onDisconnect.dispatch()
        }
    };
    lime_ui_Joystick.__getDeviceData = function() {
        if (navigator.getGamepads) {
            return navigator.getGamepads()
        } else {
            if (navigator.webkitGetGamepads) {
                return navigator.webkitGetGamepads()
            } else {
                return null
            }
        }
    };
    lime_ui_Joystick.prototype = {
        connected: null,
        id: null,
        onAxisMove: null,
        onButtonDown: null,
        onButtonUp: null,
        onDisconnect: null,
        onHatMove: null,
        onTrackballMove: null,
        get_guid: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id
        },
        get_name: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id
        },
        get_numAxes: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].axes.length
        },
        get_numButtons: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].buttons.length
        },
        get_numHats: function() {
            return 0
        },
        get_numTrackballs: function() {
            return 0
        },
        __class__: lime_ui_Joystick,
        __properties__: {
            get_numTrackballs: "get_numTrackballs",
            get_numHats: "get_numHats",
            get_numButtons: "get_numButtons",
            get_numAxes: "get_numAxes",
            get_name: "get_name",
            get_guid: "get_guid"
        }
    };
    var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
    $hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime", "ui", "_JoystickHatPosition", "JoystickHatPosition_Impl_"];
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {
        set_up: "set_up",
        get_up: "get_up",
        set_right: "set_right",
        get_right: "get_right",
        set_left: "set_left",
        get_left: "get_left",
        set_down: "set_down",
        get_down: "get_down",
        set_center: "set_center",
        get_center: "get_center"
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
        return value
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
        return this1 == 0
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1, value) {
        if (value) {
            this1 = 0
        }
        return value
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
        return (this1 & 4) > 0
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1, value) {
        if (value) {
            this1 |= 4
        } else {
            this1 &= 268435455 - 4
        }
        return value
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
        return (this1 & 8) > 0
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1, value) {
        if (value) {
            this1 |= 8
        } else {
            this1 &= 268435455 - 8
        }
        return value
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
        return (this1 & 2) > 0
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1, value) {
        if (value) {
            this1 |= 2
        } else {
            this1 &= 268435455 - 2
        }
        return value
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
        return (this1 & 1) > 0
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1, value) {
        if (value) {
            this1 |= 1
        } else {
            this1 &= 268435455 - 1
        }
        return value
    };
    var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
    $hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
    lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime", "ui", "_KeyCode", "KeyCode_Impl_"];
    lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode = function(scanCode) {
        return 0
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode = function(keyCode) {
        return 0
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a, b) {
        return a > b
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a, b) {
        return a >= b
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a, b) {
        return a < b
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a, b) {
        return a <= b
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a, b) {
        return a + b
    };
    var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
    $hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime", "ui", "_KeyModifier", "KeyModifier_Impl_"];
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {
        set_shiftKey: "set_shiftKey",
        get_shiftKey: "get_shiftKey",
        set_numLock: "set_numLock",
        get_numLock: "get_numLock",
        set_metaKey: "set_metaKey",
        get_metaKey: "get_metaKey",
        set_ctrlKey: "set_ctrlKey",
        get_ctrlKey: "get_ctrlKey",
        set_capsLock: "set_capsLock",
        get_capsLock: "get_capsLock",
        set_altKey: "set_altKey",
        get_altKey: "get_altKey"
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
        return (this1 & 256) > 0 || (this1 & 512) > 0
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1, value) {
        if (value) {
            this1 |= 768
        } else {
            this1 &= 268435455 - 768
        }
        return value
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
        return (this1 & 8192) > 0 || (this1 & 8192) > 0
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1, value) {
        if (value) {
            this1 |= 8192
        } else {
            this1 &= 268435455 - 8192
        }
        return value
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
        return (this1 & 64) > 0 || (this1 & 128) > 0
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1, value) {
        if (value) {
            this1 |= 192
        } else {
            this1 &= 268435455 - 192
        }
        return value
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
        return (this1 & 1024) > 0 || (this1 & 2048) > 0
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1, value) {
        if (value) {
            this1 |= 3072
        } else {
            this1 &= 268435455 - 3072
        }
        return value
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
        return (this1 & 4096) > 0 || (this1 & 4096) > 0
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1, value) {
        if (value) {
            this1 |= 4096
        } else {
            this1 &= 268435455 - 4096
        }
        return value
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
        return (this1 & 1) > 0 || (this1 & 2) > 0
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1, value) {
        if (value) {
            this1 |= 3
        } else {
            this1 &= 268435455 - 3
        }
        return value
    };
    var lime_ui_Mouse = function() {};
    $hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
    lime_ui_Mouse.__name__ = ["lime", "ui", "Mouse"];
    lime_ui_Mouse.__properties__ = {
        set_lock: "set_lock",
        get_lock: "get_lock",
        set_cursor: "set_cursor",
        get_cursor: "get_cursor"
    };
    lime_ui_Mouse.hide = function() {
        lime__$backend_html5_HTML5Mouse.hide()
    };
    lime_ui_Mouse.show = function() {
        lime__$backend_html5_HTML5Mouse.show()
    };
    lime_ui_Mouse.warp = function(x, y, window) {
        lime__$backend_html5_HTML5Mouse.warp(x, y, window)
    };
    lime_ui_Mouse.get_cursor = function() {
        return lime__$backend_html5_HTML5Mouse.get_cursor()
    };
    lime_ui_Mouse.set_cursor = function(value) {
        return lime__$backend_html5_HTML5Mouse.set_cursor(value)
    };
    lime_ui_Mouse.get_lock = function() {
        return lime__$backend_html5_HTML5Mouse.get_lock()
    };
    lime_ui_Mouse.set_lock = function(value) {
        return lime__$backend_html5_HTML5Mouse.set_lock(value)
    };
    var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = {
        __ename__: ["lime", "ui", "MouseCursor"],
        __constructs__: ["ARROW", "CROSSHAIR", "DEFAULT", "MOVE", "POINTER", "RESIZE_NESW", "RESIZE_NS", "RESIZE_NWSE", "RESIZE_WE", "TEXT", "WAIT", "WAIT_ARROW", "CUSTOM"]
    };
    lime_ui_MouseCursor.ARROW = ["ARROW", 0];
    lime_ui_MouseCursor.ARROW.toString = $estr;
    lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR", 1];
    lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
    lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.DEFAULT = ["DEFAULT", 2];
    lime_ui_MouseCursor.DEFAULT.toString = $estr;
    lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.MOVE = ["MOVE", 3];
    lime_ui_MouseCursor.MOVE.toString = $estr;
    lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.POINTER = ["POINTER", 4];
    lime_ui_MouseCursor.POINTER.toString = $estr;
    lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW", 5];
    lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
    lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS", 6];
    lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
    lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE", 7];
    lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
    lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE", 8];
    lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
    lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.TEXT = ["TEXT", 9];
    lime_ui_MouseCursor.TEXT.toString = $estr;
    lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.WAIT = ["WAIT", 10];
    lime_ui_MouseCursor.WAIT.toString = $estr;
    lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW", 11];
    lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
    lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.CUSTOM = ["CUSTOM", 12];
    lime_ui_MouseCursor.CUSTOM.toString = $estr;
    lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
    var lime_ui__$ScanCode_ScanCode_$Impl_$ = {};
    $hxClasses["lime.ui._ScanCode.ScanCode_Impl_"] = lime_ui__$ScanCode_ScanCode_$Impl_$;
    lime_ui__$ScanCode_ScanCode_$Impl_$.__name__ = ["lime", "ui", "_ScanCode", "ScanCode_Impl_"];
    lime_ui__$ScanCode_ScanCode_$Impl_$.fromKeyCode = function(keyCode) {
        return lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode(keyCode)
    };
    lime_ui__$ScanCode_ScanCode_$Impl_$.toKeyCode = function(scanCode) {
        return lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode(scanCode)
    };
    lime_ui__$ScanCode_ScanCode_$Impl_$.gt = function(a, b) {
        return a > b
    };
    lime_ui__$ScanCode_ScanCode_$Impl_$.gte = function(a, b) {
        return a >= b
    };
    lime_ui__$ScanCode_ScanCode_$Impl_$.lt = function(a, b) {
        return a < b
    };
    lime_ui__$ScanCode_ScanCode_$Impl_$.lte = function(a, b) {
        return a <= b
    };
    lime_ui__$ScanCode_ScanCode_$Impl_$.plus = function(a, b) {
        return a + b
    };
    var lime_ui_Touch = function(x, y, id, dx, dy, pressure, device) {
        this.x = x;
        this.y = y;
        this.id = id;
        this.dx = dx;
        this.dy = dy;
        this.pressure = pressure;
        this.device = device
    };
    $hxClasses["lime.ui.Touch"] = lime_ui_Touch;
    lime_ui_Touch.__name__ = ["lime", "ui", "Touch"];
    lime_ui_Touch.prototype = {
        device: null,
        dx: null,
        dy: null,
        id: null,
        pressure: null,
        x: null,
        y: null,
        __class__: lime_ui_Touch
    };
    var lime_ui_Window = function(config) {
        this.onTextInput = new lime_app__$Event_$String_$Void();
        this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
        this.onRestore = new lime_app__$Event_$Void_$Void();
        this.onResize = new lime_app__$Event_$Int_$Int_$Void();
        this.onMove = new lime_app__$Event_$Float_$Float_$Void();
        this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
        this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
        this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
        this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
        this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
        this.onMinimize = new lime_app__$Event_$Void_$Void();
        this.onLeave = new lime_app__$Event_$Void_$Void();
        this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
        this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
        this.onFullscreen = new lime_app__$Event_$Void_$Void();
        this.onFocusOut = new lime_app__$Event_$Void_$Void();
        this.onFocusIn = new lime_app__$Event_$Void_$Void();
        this.onEnter = new lime_app__$Event_$Void_$Void();
        this.onDropFile = new lime_app__$Event_$String_$Void();
        this.onDeactivate = new lime_app__$Event_$Void_$Void();
        this.onCreate = new lime_app__$Event_$Void_$Void();
        this.onClose = new lime_app__$Event_$Void_$Void();
        this.onActivate = new lime_app__$Event_$Void_$Void();
        this.config = config;
        this.__width = 0;
        this.__height = 0;
        this.__fullscreen = false;
        this.__scale = 1;
        this.__x = 0;
        this.__y = 0;
        this.__title = "";
        this.id = -1;
        if (config != null) {
            if (Object.prototype.hasOwnProperty.call(config, "width")) {
                this.__width = config.width
            }
            if (Object.prototype.hasOwnProperty.call(config, "height")) {
                this.__height = config.height
            }
            if (Object.prototype.hasOwnProperty.call(config, "x")) {
                this.__x = config.x
            }
            if (Object.prototype.hasOwnProperty.call(config, "y")) {
                this.__y = config.y
            }
            if (Object.prototype.hasOwnProperty.call(config, "fullscreen")) {
                this.__fullscreen = config.fullscreen
            }
            if (Object.prototype.hasOwnProperty.call(config, "borderless")) {
                this.__borderless = config.borderless
            }
            if (Object.prototype.hasOwnProperty.call(config, "resizable")) {
                this.__resizable = config.resizable
            }
            if (Object.prototype.hasOwnProperty.call(config, "title")) {
                this.__title = config.title
            }
        }
        this.backend = new lime__$backend_html5_HTML5Window(this)
    };
    $hxClasses["lime.ui.Window"] = lime_ui_Window;
    lime_ui_Window.__name__ = ["lime", "ui", "Window"];
    lime_ui_Window.prototype = {
        application: null,
        config: null,
        display: null,
        id: null,
        onActivate: null,
        onClose: null,
        onCreate: null,
        onDeactivate: null,
        onDropFile: null,
        onEnter: null,
        onFocusIn: null,
        onFocusOut: null,
        onFullscreen: null,
        onKeyDown: null,
        onKeyUp: null,
        onLeave: null,
        onMinimize: null,
        onMouseDown: null,
        onMouseMove: null,
        onMouseMoveRelative: null,
        onMouseUp: null,
        onMouseWheel: null,
        onMove: null,
        onResize: null,
        onRestore: null,
        onTextEdit: null,
        onTextInput: null,
        renderer: null,
        scale: null,
        stage: null,
        backend: null,
        __borderless: null,
        __fullscreen: null,
        __height: null,
        __maximized: null,
        __minimized: null,
        __resizable: null,
        __scale: null,
        __title: null,
        __width: null,
        __x: null,
        __y: null,
        alert: function(message, title) {
            this.backend.alert(message, title)
        },
        close: function() {
            this.backend.close()
        },
        create: function(application) {
            this.application = application;
            this.backend.create(application);
            if (this.renderer != null) {
                this.renderer.create()
            }
        },
        focus: function() {
            this.backend.focus()
        },
        move: function(x, y) {
            this.backend.move(x, y);
            this.__x = x;
            this.__y = y
        },
        resize: function(width, height) {
            this.backend.resize(width, height);
            this.__width = width;
            this.__height = height
        },
        setIcon: function(image) {
            if (image == null) {
                return
            }
            this.backend.setIcon(image)
        },
        toString: function() {
            return "[object Window]"
        },
        get_display: function() {
            return this.backend.getDisplay()
        },
        get_displayMode: function() {
            return this.backend.getDisplayMode()
        },
        set_displayMode: function(value) {
            return this.backend.setDisplayMode(value)
        },
        get_borderless: function() {
            return this.__borderless
        },
        set_borderless: function(value) {
            return this.__borderless = this.backend.setBorderless(value)
        },
        get_enableTextEvents: function() {
            return this.backend.getEnableTextEvents()
        },
        set_enableTextEvents: function(value) {
            return this.backend.setEnableTextEvents(value)
        },
        get_fullscreen: function() {
            return this.__fullscreen
        },
        set_fullscreen: function(value) {
            return this.__fullscreen = this.backend.setFullscreen(value)
        },
        get_height: function() {
            return this.__height
        },
        set_height: function(value) {
            this.resize(this.__width, value);
            return this.__height
        },
        get_maximized: function() {
            return this.__maximized
        },
        set_maximized: function(value) {
            this.__minimized = false;
            return this.__maximized = this.backend.setMaximized(value)
        },
        get_minimized: function() {
            return this.__minimized
        },
        set_minimized: function(value) {
            this.__maximized = false;
            return this.__minimized = this.backend.setMinimized(value)
        },
        get_resizable: function() {
            return this.__resizable
        },
        set_resizable: function(value) {
            this.__resizable = this.backend.setResizable(value);
            return this.__resizable
        },
        get_scale: function() {
            return this.__scale
        },
        get_title: function() {
            return this.__title
        },
        set_title: function(value) {
            return this.__title = this.backend.setTitle(value)
        },
        get_width: function() {
            return this.__width
        },
        set_width: function(value) {
            this.resize(value, this.__height);
            return this.__width
        },
        get_x: function() {
            return this.__x
        },
        set_x: function(value) {
            this.move(value, this.__y);
            return this.__x
        },
        get_y: function() {
            return this.__y
        },
        set_y: function(value) {
            this.move(this.__x, value);
            return this.__y
        },
        __class__: lime_ui_Window,
        __properties__: {
            set_y: "set_y",
            get_y: "get_y",
            set_x: "set_x",
            get_x: "get_x",
            set_width: "set_width",
            get_width: "get_width",
            set_title: "set_title",
            get_title: "get_title",
            get_scale: "get_scale",
            set_resizable: "set_resizable",
            get_resizable: "get_resizable",
            set_minimized: "set_minimized",
            get_minimized: "get_minimized",
            set_maximized: "set_maximized",
            get_maximized: "get_maximized",
            set_height: "set_height",
            get_height: "get_height",
            set_fullscreen: "set_fullscreen",
            get_fullscreen: "get_fullscreen",
            set_enableTextEvents: "set_enableTextEvents",
            get_enableTextEvents: "get_enableTextEvents",
            set_displayMode: "set_displayMode",
            get_displayMode: "get_displayMode",
            get_display: "get_display",
            set_borderless: "set_borderless",
            get_borderless: "get_borderless"
        }
    };
    var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = {
        __ename__: ["lime", "utils", "TAError"],
        __constructs__: ["RangeError"]
    };
    lime_utils_TAError.RangeError = ["RangeError", 0];
    lime_utils_TAError.RangeError.toString = $estr;
    lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
    var lime_utils_AssetCache = function() {
        this.enabled = true;
        this.audio = new haxe_ds_StringMap();
        this.font = new haxe_ds_StringMap();
        this.image = new haxe_ds_StringMap();
        this.version = 318616
    };
    $hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
    lime_utils_AssetCache.__name__ = ["lime", "utils", "AssetCache"];
    lime_utils_AssetCache.prototype = {
        audio: null,
        enabled: null,
        image: null,
        font: null,
        version: null,
        exists: function(id, type) {
            if (type == "IMAGE" || type == null) {
                if (this.image.exists(id)) {
                    return true
                }
            }
            if (type == "FONT" || type == null) {
                if (this.font.exists(id)) {
                    return true
                }
            }
            if (type == "SOUND" || type == "MUSIC" || type == null) {
                if (this.audio.exists(id)) {
                    return true
                }
            }
            return false
        },
        set: function(id, type, asset) {
            switch (type) {
                case "FONT":
                    var value = asset;
                    this.font.set(id, value);
                    break;
                case "IMAGE":
                    if (!js_Boot.__instanceof(asset, lime_graphics_Image)) {
                        throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image")
                    }
                    var value1 = asset;
                    this.image.set(id, value1);
                    break;
                case "SOUND":
                case "MUSIC":
                    if (!js_Boot.__instanceof(asset, lime_media_AudioBuffer)) {
                        throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer")
                    }
                    var value2 = asset;
                    this.audio.set(id, value2);
                    break;
                default:
                    throw new js__$Boot_HaxeError(type + " assets are not cachable")
            }
        },
        clear: function(prefix) {
            if (prefix == null) {
                this.audio = new haxe_ds_StringMap();
                this.font = new haxe_ds_StringMap();
                this.image = new haxe_ds_StringMap()
            } else {
                var keys = this.audio.keys();
                while (keys.hasNext()) {
                    var key = keys.next();
                    if (StringTools.startsWith(key, prefix)) {
                        this.audio.remove(key)
                    }
                }
                var keys1 = this.font.keys();
                while (keys1.hasNext()) {
                    var key1 = keys1.next();
                    if (StringTools.startsWith(key1, prefix)) {
                        this.font.remove(key1)
                    }
                }
                var keys2 = this.image.keys();
                while (keys2.hasNext()) {
                    var key2 = keys2.next();
                    if (StringTools.startsWith(key2, prefix)) {
                        this.image.remove(key2)
                    }
                }
            }
        },
        __class__: lime_utils_AssetCache
    };
    var lime_utils_AssetLibrary = function() {
        this.types = new haxe_ds_StringMap();
        this.sizes = new haxe_ds_StringMap();
        this.preload = new haxe_ds_StringMap();
        this.paths = new haxe_ds_StringMap();
        this.pathGroups = new haxe_ds_StringMap();
        this.classTypes = new haxe_ds_StringMap();
        this.cachedText = new haxe_ds_StringMap();
        this.cachedImages = new haxe_ds_StringMap();
        this.cachedFonts = new haxe_ds_StringMap();
        this.cachedBytes = new haxe_ds_StringMap();
        this.cachedAudioBuffers = new haxe_ds_StringMap();
        this.onChange = new lime_app__$Event_$Void_$Void();
        this.bytesLoaded = 0;
        this.bytesTotal = 0
    };
    $hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
    lime_utils_AssetLibrary.__name__ = ["lime", "utils", "AssetLibrary"];
    lime_utils_AssetLibrary.fromBytes = function(bytes, rootPath) {
        return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes, rootPath))
    };
    lime_utils_AssetLibrary.fromFile = function(path, rootPath) {
        return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path, rootPath))
    };
    lime_utils_AssetLibrary.fromManifest = function(manifest) {
        if (manifest == null) {
            return null
        }
        var library = null;
        if (manifest.libraryType == null) {
            library = new lime_utils_AssetLibrary()
        } else {
            var libraryClass = Type.resolveClass(manifest.libraryType);
            if (libraryClass != null) {
                library = Type.createInstance(libraryClass, manifest.libraryArgs)
            } else {
                lime_utils_Log.warn("Could not find library type: " + manifest.libraryType, {
                    fileName: "AssetLibrary.hx",
                    lineNumber: 138,
                    className: "lime.utils.AssetLibrary",
                    methodName: "fromManifest"
                });
                return null
            }
        }
        library.__fromManifest(manifest);
        return library
    };
    lime_utils_AssetLibrary.loadFromBytes = function(bytes, rootPath) {
        return lime_utils_AssetManifest.loadFromBytes(bytes, rootPath).then(function(manifest) {
            return lime_utils_AssetLibrary.loadFromManifest(manifest)
        })
    };
    lime_utils_AssetLibrary.loadFromFile = function(path, rootPath) {
        return lime_utils_AssetManifest.loadFromFile(path, rootPath).then(function(manifest) {
            return lime_utils_AssetLibrary.loadFromManifest(manifest)
        })
    };
    lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
        var library = lime_utils_AssetLibrary.fromManifest(manifest);
        if (library != null) {
            return library.load()
        } else {
            return lime_app_Future.withError("Could not load asset manifest")
        }
    };
    lime_utils_AssetLibrary.prototype = {
        onChange: null,
        assetsLoaded: null,
        assetsTotal: null,
        bytesLoaded: null,
        bytesLoadedCache: null,
        bytesTotal: null,
        cachedAudioBuffers: null,
        cachedBytes: null,
        cachedFonts: null,
        cachedImages: null,
        cachedText: null,
        classTypes: null,
        loaded: null,
        pathGroups: null,
        paths: null,
        preload: null,
        promise: null,
        sizes: null,
        types: null,
        exists: function(id, type) {
            var requestedType;
            if (type != null) {
                requestedType = js_Boot.__cast(type, String)
            } else {
                requestedType = null
            }
            var assetType = this.types.get(id);
            if (assetType != null) {
                if (assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
                    return true
                }
                if (requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
                    return true
                }
            }
            return false
        },
        getAsset: function(id, type) {
            switch (type) {
                case "BINARY":
                    return this.getBytes(id);
                case "FONT":
                    return this.getFont(id);
                case "IMAGE":
                    return this.getImage(id);
                case "MUSIC":
                case "SOUND":
                    return this.getAudioBuffer(id);
                case "TEXT":
                    return this.getText(id);
                case "TEMPLATE":
                    throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
                    break;
                default:
                    throw new js__$Boot_HaxeError("Unknown asset type: " + type)
            }
        },
        getAudioBuffer: function(id) {
            if (this.cachedAudioBuffers.exists(id)) {
                return this.cachedAudioBuffers.get(id)
            } else {
                if (this.classTypes.exists(id)) {
                    return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.get(id), []), haxe_io_Bytes))
                } else {
                    return lime_media_AudioBuffer.fromFile(this.paths.get(id))
                }
            }
        },
        getBytes: function(id) {
            if (this.cachedBytes.exists(id)) {
                return this.cachedBytes.get(id)
            } else {
                if (this.cachedText.exists(id)) {
                    var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(this.cachedText.get(id));
                    this.cachedBytes.set(id, bytes);
                    return bytes
                } else {
                    if (this.classTypes.exists(id)) {
                        return js_Boot.__cast(Type.createInstance(this.classTypes.get(id), []), haxe_io_Bytes)
                    } else {
                        return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(this.paths.get(id))
                    }
                }
            }
        },
        getFont: function(id) {
            if (this.cachedFonts.exists(id)) {
                return this.cachedFonts.get(id)
            } else {
                if (this.classTypes.exists(id)) {
                    return js_Boot.__cast(Type.createInstance(this.classTypes.get(id), []), lime_text_Font)
                } else {
                    return lime_text_Font.fromFile(this.paths.get(id))
                }
            }
        },
        getImage: function(id) {
            if (this.cachedImages.exists(id)) {
                return this.cachedImages.get(id)
            } else {
                if (this.classTypes.exists(id)) {
                    return js_Boot.__cast(Type.createInstance(this.classTypes.get(id), []), lime_graphics_Image)
                } else {
                    return lime_graphics_Image.fromFile(this.paths.get(id))
                }
            }
        },
        getPath: function(id) {
            return this.paths.get(id)
        },
        getText: function(id) {
            if (this.cachedText.exists(id)) {
                return this.cachedText.get(id)
            } else {
                var bytes = this.getBytes(id);
                if (bytes == null) {
                    return null
                } else {
                    return bytes.getString(0, bytes.length)
                }
            }
        },
        isLocal: function(id, type) {
            if (this.classTypes.exists(id)) {
                return true
            }
            var requestedType;
            if (type != null) {
                requestedType = js_Boot.__cast(type, String)
            } else {
                requestedType = null
            }
            switch (requestedType) {
                case "IMAGE":
                    return this.cachedImages.exists(id);
                case "MUSIC":
                case "SOUND":
                    return this.cachedAudioBuffers.exists(id);
                default:
                    return this.cachedBytes.exists(id) || this.cachedText.exists(id)
            }
        },
        list: function(type) {
            var requestedType;
            if (type != null) {
                requestedType = js_Boot.__cast(type, String)
            } else {
                requestedType = null
            }
            var items = [];
            var $it0 = this.types.keys();
            while ($it0.hasNext()) {
                var id = $it0.next();
                if (requestedType == null || this.exists(id, type)) {
                    items.push(id)
                }
            }
            return items
        },
        loadAsset: function(id, type) {
            switch (type) {
                case "BINARY":
                    return this.loadBytes(id);
                case "FONT":
                    return this.loadFont(id);
                case "IMAGE":
                    return this.loadImage(id);
                case "MUSIC":
                case "SOUND":
                    return this.loadAudioBuffer(id);
                case "TEXT":
                    return this.loadText(id);
                case "TEMPLATE":
                    throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
                    break;
                default:
                    throw new js__$Boot_HaxeError("Unknown asset type: " + type)
            }
        },
        load: function() {
            if (this.loaded) {
                return lime_app_Future.withValue(this)
            }
            if (this.promise == null) {
                this.promise = new lime_app_Promise();
                this.bytesLoadedCache = new haxe_ds_StringMap();
                this.assetsLoaded = 0;
                this.assetsTotal = 1;
                var $it0 = this.preload.keys();
                while ($it0.hasNext()) {
                    var id = $it0.next();
                    if (!this.preload.get(id)) {
                        continue
                    }
                    lime_utils_Log.verbose("Preloading asset: " + id + " [" + this.types.get(id) + "]", {
                        fileName: "AssetLibrary.hx",
                        lineNumber: 434,
                        className: "lime.utils.AssetLibrary",
                        methodName: "load"
                    });
                    var _g = this.types.get(id);
                    if (_g != null) {
                        switch (_g) {
                            case "BINARY":
                                this.assetsTotal++;
                                var future = this.loadBytes(id);
                                future.onProgress((function(f, id1) {
                                    return function(a1, a2) {
                                        f(id1, a1, a2)
                                    }
                                })($bind(this, this.load_onProgress), id));
                                future.onError((function(f1, id2) {
                                    return function(a11) {
                                        f1(id2, a11)
                                    }
                                })($bind(this, this.load_onError), id));
                                future.onComplete((function(f2, id3) {
                                    return function(a12) {
                                        f2(id3, a12)
                                    }
                                })($bind(this, this.loadBytes_onComplete), id));
                                break;
                            case "FONT":
                                this.assetsTotal++;
                                var future1 = this.loadFont(id);
                                future1.onProgress((function(f3, id4) {
                                    return function(a13, a21) {
                                        f3(id4, a13, a21)
                                    }
                                })($bind(this, this.load_onProgress), id));
                                future1.onError((function(f4, id5) {
                                    return function(a14) {
                                        f4(id5, a14)
                                    }
                                })($bind(this, this.load_onError), id));
                                future1.onComplete((function(f5, id6) {
                                    return function(a15) {
                                        f5(id6, a15)
                                    }
                                })($bind(this, this.loadFont_onComplete), id));
                                break;
                            case "IMAGE":
                                this.assetsTotal++;
                                var future2 = this.loadImage(id);
                                future2.onProgress((function(f6, id7) {
                                    return function(a16, a22) {
                                        f6(id7, a16, a22)
                                    }
                                })($bind(this, this.load_onProgress), id));
                                future2.onError((function(f7, id8) {
                                    return function(a17) {
                                        f7(id8, a17)
                                    }
                                })($bind(this, this.load_onError), id));
                                future2.onComplete((function(f8, id9) {
                                    return function(a18) {
                                        f8(id9, a18)
                                    }
                                })($bind(this, this.loadImage_onComplete), id));
                                break;
                            case "MUSIC":
                            case "SOUND":
                                this.assetsTotal++;
                                var future3 = this.loadAudioBuffer(id);
                                future3.onProgress((function(f9, id10) {
                                    return function(a19, a23) {
                                        f9(id10, a19, a23)
                                    }
                                })($bind(this, this.load_onProgress), id));
                                future3.onError((function(f10, id11) {
                                    return function(a110) {
                                        f10(id11, a110)
                                    }
                                })($bind(this, this.load_onError), id));
                                future3.onComplete((function(f11, id12) {
                                    return function(a111) {
                                        f11(id12, a111)
                                    }
                                })($bind(this, this.loadAudioBuffer_onComplete), id));
                                break;
                            case "TEXT":
                                this.assetsTotal++;
                                var future4 = this.loadText(id);
                                future4.onProgress((function(f12, id13) {
                                    return function(a112, a24) {
                                        f12(id13, a112, a24)
                                    }
                                })($bind(this, this.load_onProgress), id));
                                future4.onError((function(f13, id14) {
                                    return function(a113) {
                                        f13(id14, a113)
               